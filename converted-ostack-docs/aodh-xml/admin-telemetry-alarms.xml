<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Alarms</title>
  <para>Alarms provide user-oriented Monitoring-as-a-Service for resources
            running on OpenStack. This type of monitoring ensures you can
            automatically scale in or out a group of instances through the
            Orchestration service, but you can also use alarms for general-purpose
            awareness of your cloud resources’ health.</para>
  <para>These alarms follow a tri-state model:</para> 
  <variablelist>
    <varlistentry>
      <term>ok</term>
      <listitem>
        <para>The rule governing the alarm has been evaluated as <literal>False</literal>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>alarm</term>
      <listitem>
        <para>The rule governing the alarm have been evaluated as <literal>True</literal>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>insufficient data</term>
      <listitem>
        <para>There are not enough datapoints available in the evaluation periods
                        to meaningfully determine the alarm state.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <section>
    <title>Alarm definitions</title>
    <para>The definition of an alarm provides the rules that govern when a state
                transition should occur, and the actions to be taken thereon. The
                nature of these rules depend on the alarm type.</para>
    <section>
      <title>Threshold rule alarms</title>
      <para>For conventional threshold-oriented alarms, state transitions are
                    governed by:</para>
      <itemizedlist>
        <listitem>
          <para>A static threshold value with a comparison operator such as greater
                            than or less than.</para>
        </listitem>
        <listitem>
          <para>A statistic selection to aggregate the data.</para>
        </listitem>
        <listitem>
          <para>A sliding time window to indicate how far back into the recent past
                            you want to look.</para>
        </listitem>
      </itemizedlist>
      <para>Valid threshold alarms are: <literal>gnocchi_resources_threshold_rule</literal>,
                    <literal>gnocchi_aggregation_by_metrics_threshold_rule</literal>, or
                    <literal>gnocchi_aggregation_by_resources_threshold_rule</literal>.</para>
      <note>
        <para>As of Ocata, the <literal>threshold</literal> alarm is deprecated since Ceilometer’s
                        native storage API is deprecated.</para>
      </note>
    </section>
    <section>
      <title>Composite rule alarms</title>
      <para>Composite alarms enable users to define an alarm with multiple triggering
                    conditions, using a combination of <literal>and</literal> and <literal>or</literal> relations.</para>
    </section>
    <section>
      <title>Combination rule alarms</title>
      <note>
        <para>Combination alarms are deprecated as of Newton for composite alarms.
                        Combination alarm functionality is removed in Pike.</para>
      </note>
      <para>The Telemetry service also supports the concept of a meta-alarm, which
                    aggregates over the current state of a set of underlying basic alarms
                    combined via a logical operator (<literal>and</literal> or <literal>or</literal>).</para>
    </section>
  </section>
  <section>
    <title>Alarm dimensioning</title>
    <para>A key associated concept is the notion of <emphasis>dimensioning</emphasis> which
                defines the set of matching meters that feed into an alarm
                evaluation. Recall that meters are per-resource-instance, so in the
                simplest case an alarm might be defined over a particular meter
                applied to all resources visible to a particular user. More useful
                however would be the option to explicitly select which specific
                resources you are interested in alarming on.</para>
    <para>At one extreme you might have narrowly dimensioned alarms where this
                selection would have only a single target (identified by resource
                ID). At the other extreme, you could have widely dimensioned alarms
                where this selection identifies many resources over which the
                statistic is aggregated. For example all instances booted from a
                particular image or all instances with matching user metadata (the
                latter is how the Orchestration service identifies autoscaling
                groups).</para>
  </section>
  <section>
    <title>Alarm evaluation</title>
    <para>Alarms are evaluated by the <literal>alarm-evaluator</literal> service on a periodic
                basis, defaulting to once every minute.</para>
    <section>
      <title>Alarm actions</title>
      <para>Any state transition of individual alarm (to <literal>ok</literal>, <literal>alarm</literal>, or
                    <literal>insufficient data</literal>) may have one or more actions associated with
                    it. These actions effectively send a signal to a consumer that the
                    state transition has occurred, and provide some additional context.
                    This includes the new and previous states, with some reason data
                    describing the disposition with respect to the threshold, the number
                    of datapoints involved and most recent of these. State transitions
                    are detected by the <literal>alarm-evaluator</literal>, whereas the
                    <literal>alarm-notifier</literal> effects the actual notification action.</para>
      <para>
        <emphasis role="bold">Webhooks</emphasis>
      </para>
      <para>These are the <emphasis>de facto</emphasis> notification type used by Telemetry alarming
                    and simply involve an HTTP POST request being sent to an endpoint,
                    with a request body containing a description of the state transition
                    encoded as a JSON fragment.</para>
      <para>
        <emphasis role="bold">Log actions</emphasis>
      </para>
      <para>These are a lightweight alternative to webhooks, whereby the state
                    transition is simply logged by the <literal>alarm-notifier</literal>, and are
                    intended primarily for testing purposes.</para>
    </section>
    <section>
      <title>Workload partitioning</title>
      <para>The alarm evaluation process uses the same mechanism for workload
                    partitioning as the central and compute agents. The
                    <link xlink:href="https://pypi.python.org/pypi/tooz">Tooz</link> library provides the
                    coordination within the groups of service instances. For further
                    information about this approach, see the <link xlink:href="https://docs.openstack.org/ha-guide/controller-ha-telemetry.html">high availability guide</link>.</para>
      <para>To use this workload partitioning solution set the
                    <literal>evaluation_service</literal> option to <literal>default</literal>. For more
                    information, see the alarm section in the
                    <link xlink:href="https://docs.openstack.org/ocata/config-reference/telemetry.html">OpenStack Configuration Reference</link>.</para>
    </section>
  </section>
  <section>
    <title>Using alarms</title>
    <section>
      <title>Alarm creation</title>
      <section>
        <title>Threshold based alarm</title>
        <para>An example of creating a Gnocchi threshold-oriented alarm, based on an upper
                        bound on the CPU utilization for a particular instance:</para>
        <screen language="console">$ aodh alarm create \
  --name cpu_hi \
  --type gnocchi_resources_threshold \
  --description 'instance running hot' \
  --metric cpu_util \
  --threshold 70.0 \
  --comparison-operator gt \
  --aggregation-method mean \
  --granularity 600 \
  --evaluation-periods 3 \
  --alarm-action 'log://' \
  --resource-id INSTANCE_ID \
  --resource-type instance</screen>
        <para>This creates an alarm that will fire when the average CPU utilization
                        for an individual instance exceeds 70% for three consecutive 10
                        minute periods. The notification in this case is simply a log message,
                        though it could alternatively be a webhook URL.</para>
        <note>
          <para>Alarm names must be unique for the alarms associated with an
                            individual project. Administrator can limit the maximum
                            resulting actions for three different states, and the
                            ability for a normal user to create <literal>log://</literal> and <literal>test://</literal>
                            notifiers is disabled. This prevents unintentional
                            consumption of disk and memory resources by the
                            Telemetry service.</para>
        </note>
        <para>The sliding time window over which the alarm is evaluated is 30
                        minutes in this example. This window is not clamped to wall-clock
                        time boundaries, rather it’s anchored on the current time for each
                        evaluation cycle, and continually creeps forward as each evaluation
                        cycle rolls around (by default, this occurs every minute).</para>
        <note>
          <para>The alarm granularity must match the granularities of the metric configured
                            in Gnocchi.</para>
        </note>
        <para>Otherwise the alarm will tend to flit in and out of the
                        <literal>insufficient data</literal> state due to the mismatch between the actual
                        frequency of datapoints in the metering store and the statistics
                        queries used to compare against the alarm threshold. If a shorter
                        alarm period is needed, then the corresponding interval should be
                        adjusted in the <literal>pipeline.yaml</literal> file.</para>
        <para>Other notable alarm attributes that may be set on creation, or via a
                        subsequent update, include:</para>
        <variablelist>
          <varlistentry>
            <term>state</term>
            <listitem>
              <para>The initial alarm state (defaults to <literal>insufficient data</literal>).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>description</term>
            <listitem>
              <para>A free-text description of the alarm (defaults to a synopsis of the
                                    alarm rule).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>enabled</term>
            <listitem>
              <para>True if evaluation and actioning is to be enabled for this alarm
                                    (defaults to <literal>True</literal>).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>repeat-actions</term>
            <listitem>
              <para>True if actions should be repeatedly notified while the alarm
                                    remains in the target state (defaults to <literal>False</literal>).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>ok-action</term>
            <listitem>
              <para>An action to invoke when the alarm state transitions to <literal>ok</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>insufficient-data-action</term>
            <listitem>
              <para>An action to invoke when the alarm state transitions to
                                    <literal>insufficient data</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>time-constraint</term>
            <listitem>
              <para>Used to restrict evaluation of the alarm to certain times of the
                                    day or days of the week (expressed as <literal>cron</literal> expression with an
                                    optional timezone).</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section>
        <title>Composite alarm</title>
        <para>An example of creating a combination alarm, based on the combined
                        state of two underlying alarms:</para>
        <screen language="console">$ aodh alarm create \
  --name meta \
  --type composite \
  --composite-rule '{"or": [{"threshold": 0.8, "metric": "cpu_util", \
    "type": "gnocchi_resources_threshold", "resource_id": INSTANCE_ID1, \
    "resource_type": "instance", "aggregation_method": "last"}, \
    {"threshold": 0.8, "metric": "cpu_util", \
    "type": "gnocchi_resources_threshold", "resource_id": INSTANCE_ID2, \
    "resource_type": "instance", "aggregation_method": "last"}]}' \
  --alarm-action 'http://example.org/notify'</screen>
        <para>This creates an alarm that will fire when either one of two underlying
                        alarms transition into the alarm state. The notification in this case
                        is a webhook call. Any number of underlying alarms can be combined in
                        this way, using either <literal>and</literal> or <literal>or</literal>. Additionally, combinations
                        can contain nested conditions:</para>
        <note>
          <para>Observe the <emphasis>underscore in </emphasis><literal>resource_id</literal> &amp; <literal>resource_type</literal> in
                            composite rule as opposed to <literal>--resource-id</literal> &amp;
                            <literal>--resource-type</literal> CLI arguments.</para>
        </note>
        <screen language="console">$ aodh alarm create \
  --name meta \
  --type composite \
  --composite-rule '{"or": [ALARM_1, {"and": [ALARM_2, ALARM_3]}]}' \
  --alarm-action 'http://example.org/notify'</screen>
      </section>
      <section>
        <title>Event based alarm</title>
        <para>An example of creating a event alarm based on power state of
                        instance:</para>
        <screen language="console">$ aodh alarm create \
  --type event \
  --name instance_off \
  --description 'Instance powered OFF' \
  --event-type "compute.instance.power_off.*" \
  --enable True \
  --query "traits.instance_id=string::INSTANCE_ID" \
  --alarm-action 'log://' \
  --ok-action 'log://' \
  --insufficient-data-action 'log://'</screen>
        <para>Valid list of <literal>event-type</literal> and <literal>traits</literal> can be found in
                        <literal>event_definitions.yaml</literal> file . <literal>--query</literal> may also contain mix of
                        traits for example to create alarm when instance is powered on but
                        went into error state:</para>
        <screen language="console">$ aodh alarm create \
  --type event \
  --name instance_on_but_in_err_state \
  --description 'Instance powered ON but in error state' \
  --event-type "compute.instance.power_on.*" \
  --enable True \
  --query "traits.instance_id=string::INSTANCE_ID;traits.state=string::error" \
  --alarm-action 'log://' \
  --ok-action 'log://' \
  --insufficient-data-action 'log://'</screen>
        <para>Sample output of alarm type <emphasis role="bold">event</emphasis>:</para>
        <screen language="console"><?dbsuse-fo font-size="8pt"?>+---------------------------+---------------------------------------------------------------+
| Field                     | Value                                                         |
+---------------------------+---------------------------------------------------------------+
| alarm_actions             | [u'log://']                                                   |
| alarm_id                  | 15c0da26-524d-40ad-8fba-3e55ee0ddc91                          |
| description               | Instance powered ON but in error state                        |
| enabled                   | True                                                          |
| event_type                | compute.instance.power_on.*                                   |
| insufficient_data_actions | [u'log://']                                                   |
| name                      | instance_on_state_err                                         |
| ok_actions                | [u'log://']                                                   |
| project_id                | 9ee200732f4c4d10a6530bac746f1b6e                              |
| query                     | traits.instance_id = bb912729-fa51-443b-bac6-bf4c795f081d AND |
|                           | traits.state = error                                          |
| repeat_actions            | False                                                         |
| severity                  | low                                                           |
| state                     | insufficient data                                             |
| state_timestamp           | 2017-07-15T02:28:31.114455                                    |
| time_constraints          | []                                                            |
| timestamp                 | 2017-07-15T02:28:31.114455                                    |
| type                      | event                                                         |
| user_id                   | 89b4e48bcbdb4816add7800502bd5122                              |
+---------------------------+---------------------------------------------------------------+</screen>
        <note>
          <para>To enable event alarms please refer <link xlink:href="https://docs.openstack.org/aodh/pike/contributor/event-alarm.html#configuration">Configuration</link></para>
        </note>
      </section>
    </section>
    <section>
      <title>Alarm retrieval</title>
      <para>You can display all your alarms via (some attributes are omitted for
                    brevity):</para>
      <screen language="console">$ aodh alarm list
+----------+-----------+--------+-------------------+----------+---------+
| alarm_id | type      | name   | state             | severity | enabled |
+----------+-----------+--------+-------------------+----------+---------+
| ALARM_ID | threshold | cpu_hi | insufficient data | high     | True    |
+----------+-----------+--------+-------------------+----------+---------+</screen>
      <para>In this case, the state is reported as <literal>insufficient data</literal> which
                    could indicate that:</para>
      <itemizedlist>
        <listitem>
          <para>meters have not yet been gathered about this instance over the
                            evaluation window into the recent past (for example a brand-new
                            instance)</para>
        </listitem>
        <listitem>
          <para><emphasis>or</emphasis>, that the identified instance is not visible to the
                            user/project owning the alarm</para>
        </listitem>
        <listitem>
          <para><emphasis>or</emphasis>, simply that an alarm evaluation cycle hasn’t kicked off since
                            the alarm was created (by default, alarms are evaluated once per
                            minute).</para>
        </listitem>
      </itemizedlist>
      <note>
        <para>The visibility of alarms depends on the role and project
                        associated with the user issuing the query:</para>
        <itemizedlist>
          <listitem>
            <para>admin users see <emphasis>all</emphasis> alarms, regardless of the owner</para>
          </listitem>
          <listitem>
            <para>non-admin users see only the alarms associated with their project
                                (as per the normal project segregation in OpenStack)</para>
          </listitem>
        </itemizedlist>
      </note>
    </section>
    <section>
      <title>Alarm update</title>
      <para>Once the state of the alarm has settled down, we might decide that we
                    set that bar too low with 70%, in which case the threshold (or most
                    any other alarm attribute) can be updated thusly:</para>
      <screen language="console">$ aodh alarm update ALARM_ID --threshold 75</screen>
      <para>The change will take effect from the next evaluation cycle, which by
                    default occurs every minute.</para>
      <para>Most alarm attributes can be changed in this way, but there is also
                    a convenient short-cut for getting and setting the alarm state:</para>
      <screen language="console">$ openstack alarm state get ALARM_ID
$ openstack alarm state set --state ok ALARM_ID</screen>
      <para>Over time the state of the alarm may change often, especially if the
                    threshold is chosen to be close to the trending value of the
                    statistic. You can follow the history of an alarm over its lifecycle
                    via the audit API:</para>
      <screen language="console"><?dbsuse-fo font-size="8pt"?>$ aodh alarm-history show ALARM_ID
+-----------+------------------+---------------------------------------------------+----------+
| timestamp | type             | detail                                            | event_id |
+-----------+------------------+---------------------------------------------------+----------+
| TIME_3    | rule change      | {"rule": {"evaluation_periods": 3, "metric":      | EVENT_ID |
|           |                  | "cpu_util", "resource_id": RESOURCE_ID,           |          |
|           |                  | "aggregation_method": "mean", "granularity":600,  |          |
|           |                  | "threshold": 75.0, "comparison_operator": "gt"    |          |
|           |                  | "resource_type": "instance"}}                     |          |
| TIME_2    | state transition | {"transition_reason": "Transition to alarm due 3  | EVENT_ID |
|           |                  | samples outside threshold, most recent:           |          |
|           |                  | 81.4108514719", "state": "alarm"}                 |          |
| TIME_1    | state transition | {"transition_reason": "Transition to ok due to 1  | EVENT_ID |
|           |                  | samples inside threshold, most recent:            |          |
|           |                  | 67.952938019089", "state": "ok"}                  |          |
| TIME_0    | creation         | {"alarm_actions": ["log://"], "user_id": USER_ID, | EVENT_ID |
|           |                  | "name": "cup_hi", "state": "insufficient data",   |          |
|           |                  | "timestamp": TIME_0, "description": "instance     |          |
|           |                  | running hot", "enabled": true, "state_timestamp": |          |
|           |                  | TIME_0, "rule": {"evaluation_periods": 3,         |          |
|           |                  | "metric": "cpu_util", "resource_id": RESOURCE_ID, |          |
|           |                  | "aggregation_method": "mean", "granularity": 600, |          |
|           |                  | "resource_type": "instance"}, "alarm_id":         |          |
|           |                  | ALARM_ID, "time_constraints": [],                 |          |
|           |                  | "insufficient_data_actions": [],                  |          |
|           |                  | "repeat_actions": false, "ok_actions": [],        |          |
|           |                  | "project_id": PROJECT_ID, "type":                 |          |
|           |                  | "gnocchi_resources_threshold", "severity": "low"} |          |
+-----------+------------------+---------------------------------------------------+----------+</screen>
    </section>
    <section>
      <title>Alarm deletion</title>
      <para>An alarm that is no longer required can be disabled so that it is no
                    longer actively evaluated:</para>
      <screen language="console">$ aodh alarm update --enabled False ALARM_ID</screen>
      <para>or even deleted permanently (an irreversible step):</para>
      <screen language="console">$ aodh alarm delete ALARM_ID</screen>
    </section>
    <section>
      <title>Debug alarms</title>
      <para>A good place to start is to add <literal>--debug</literal> flag when creating or
                    updating an alarm. For example:</para>
      <screen language="console">$ aodh --debug alarm create &lt;OTHER_PARAMS&gt;</screen>
      <para>Look for the state to transition when event is triggered in
                    <literal>/var/log/aodh/listener.log</literal> file. For example, the below logs shows
                    the transition state of alarm with ID
                    <literal>85a2942f-a2ec-4310-baea-d58f9db98654</literal> triggered by event ID
                    <literal>abe437a3-b75b-40b4-a3cb-26022a919f5e</literal></para>
      <screen language="console"><?dbsuse-fo font-size="8pt"?>2017-07-15 07:03:20.149 2866 INFO aodh.evaluator [-] alarm 85a2942f-a2ec-4310-baea-d58f9db98654 transitioning to alarm because Event &lt;id=abe437a3-b75b-40b4-a3cb-26022a919f5e,event_type=compute.instance.power_off.start&gt; hits the query &lt;query=[{"field": "traits.instance_id", "op": "eq", "type": "string", "value": "bb912729-fa51-443b-bac6-bf4c795f081d"}]&gt;.</screen>
      <para>The below entry in <literal>/var/log/aodh/notifier.log</literal> also confirms that
                    event ID <literal>abe437a3-b75b-40b4-a3cb-26022a919f5e</literal> hits the query
                    matching instance ID <literal>bb912729-fa51-443b-bac6-bf4c795f081d</literal></para>
      <screen language="console"><?dbsuse-fo font-size="8pt"?>2017-07-15 07:03:24.071 2863 INFO aodh.notifier.log [-] Notifying alarm instance_off 85a2942f-a2ec-4310-baea-d58f9db98654 of low priority from insufficient data to alarm with action log: because Event &lt;id=abe437a3-b75b-40b4-a3cb-26022a919f5e,event_type=compute.instance.power_off.start&gt; hits the query &lt;query=[{"field": "traits.instance_id", "op": "eq", "type": "string", "value": "bb912729-fa51-443b-bac6-bf4c795f081d"}]&gt;</screen>
      <para><literal>aodh alarm-history</literal> as mentioned earlier will also display the
                    transition:</para>
      <screen language="console"><?dbsuse-fo font-size="8pt"?>$ aodh alarm-history show 85a2942f-a2ec-4310-baea-d58f9db98654
+----------------------------+------------------+--------------------------------------------------------------------------------------------------------------------------+--------------------------------------+
| timestamp                  | type             | detail                                                                                                                   | event_id                             |
+----------------------------+------------------+--------------------------------------------------------------------------------------------------------------------------+--------------------------------------+
| 2017-07-15T01:33:20.390623 | state transition | {"transition_reason": "Event &lt;id=abe437a3-b75b-40b4-a3cb-26022a919f5e,event_type=compute.instance.power_off.start&gt; hits  | c5ca92ae-584b-4da6-a12c-b7a00dd39fef |
|                            |                  | the query &lt;query=[{\"field\": \"traits.instance_id\", \"op\": \"eq\", \"type\": \"string\", \"value\": \"bb912729-fa51   |                                      |
|                            |                  | -443b-bac6-bf4c795f081d\"}]&gt;.", "state": "alarm"}                                                                        |                                      |
| 2017-07-15T01:31:14.516188 | creation         | {"alarm_actions": ["log://"], "user_id": "89b4e48bcbdb4816add7800502bd5122", "name": "instance_off", "state":            | fb31f4c2-e357-44c3-9b6a-bd2aaaa4ae68 |
|                            |                  | "insufficient data", "timestamp": "2017-07-15T01:31:14.516188", "description": "event_instance_power_off", "enabled":    |                                      |
|                            |                  | true, "state_timestamp": "2017-07-15T01:31:14.516188", "rule": {"query": [{"field": "traits.instance_id", "type":        |                                      |
|                            |                  | "string", "value": "bb912729-fa51-443b-bac6-bf4c795f081d", "op": "eq"}], "event_type": "compute.instance.power_off.*"},  |                                      |
|                            |                  | "alarm_id": "85a2942f-a2ec-4310-baea-d58f9db98654", "time_constraints": [], "insufficient_data_actions": ["log://"],     |                                      |
|                            |                  | "repeat_actions": false, "ok_actions": ["log://"], "project_id": "9ee200732f4c4d10a6530bac746f1b6e", "type": "event",    |                                      |
|                            |                  | "severity": "low"}                                                                                                       |                                      |
+----------------------------+------------------+--------------------------------------------------------------------------------------------------------------------------+--------------------------------------+</screen>
    </section>
  </section>
</section>
