<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Making Your Cluster Elastic</title>
  <section>
    <title>Creating Receivers</title>
    <para>Suppose you want a cluster to scale out by one node each time an event occurs,
                you can create a receiver for this task:</para>
    <screen language="console">$ openstack cluster receiver create --type webhook --cluster mycluster \
    --action CLUSTER_SCALE_OUT so_receiver_1
+------------+---------------------------------------------------+
| Field      | Value                                             |
+------------+---------------------------------------------------+
| action     | CLUSTER_SCALE_OUT                                 |
| actor      | {                                                 |
|            |   "trust_id": "b2b8fd71c3d54f67ac14e5851c0117b8"  |
|            | }                                                 |
| channel    | {                                                 |
|            |   "alarm_url": "&lt;WEBHOOK_URL&gt;"                    |
|            | }                                                 |
| cluster_id | 30d7ef94-114f-4163-9120-412b78ba38bb              |
| created_at | 2017-02-08T02:08:13Z                              |
| domain_id  | None                                              |
| id         | 5722a2b0-1f5f-4a82-9c08-27da9982d46f              |
| location   | None                                              |
| name       | so_receiver_1                                     |
| params     | {}                                                |
| project_id | 36d551c0594b4cc99d1bbff8bf202ec3                  |
| type       | webhook                                           |
| updated_at | None                                              |
| user_id    | 9563fa29642a4efdb1033bf8aab07daa                  |
+------------+---------------------------------------------------+</screen>
    <para>The command above creates a receiver named <literal>so_receiver_1</literal> which can be used
                to initiate a <literal>CLUSTER_SCALE_OUT</literal> action on the cluster <literal>my_cluster</literal>. From
                the output of this command, you will find an <literal>alarm_url</literal> value from the
                <literal>channel</literal> property. This will be the URL for you to trigger the scaling
                operation.</para>
    <note>
      <para>You are expected to treat the <literal>alarm_url</literal> value as a secret. Any person or
                    software which knows this value will be able to trigger the scaling operation
                    on your cluster. This may not be what you wanted.</para>
    </note>
    <para>The default type of receiver would be “<literal>webhook</literal>”. You may choose to create
                a “<literal>message</literal>” type of receiver if you have the zaqar messaging service
                installed. For more details, please refer to <xref linkend="ref-receivers"/>.</para>
  </section>
  <section>
    <title>Triggering Scaling</title>
    <para>Once you have received a channel from the created receiver, you can use it to
                trigger the associated action on the specified cluster. The simplest way to
                do this is to use the <command>cURL</command> command as shown below:</para>
    <screen language="console">$ curl -X POST &lt;WEBHOOK_URL&gt;</screen>
    <para>Once the above request is received by the senlin-api, your cluster will be
                scaled out by one node. In other words, a new node is created into the
                cluster.</para>
  </section>
  <section>
    <title>Creating Scaling Policies</title>
    <para>Senlin provides some builtin policy types to control how a cluster will be
                scaled when a relevant request is received. A scaling request can be a simple
                <literal>CLUSTER_SCALE_OUT</literal> or <literal>CLUSTER_SCALE_IN</literal> action which can accept an
                optional <literal>count</literal> argument; it can be a more complex <literal>CLUSTER_RESIZE</literal>
                action which can accept more arguments for fine-tuning the scaling behavior.</para>
    <para>In the absence of such arguments (which is not uncommon if you are using a
                3rd party monitoring software which doesn’t have the intelligence to decide
                each and every argument), you can always use scaling policies for this
                purpose.</para>
    <para>Below is a sample YAML file (<literal>examples/policies/scaling_policy.yaml</literal>)
                used for creating a scaling policy object:</para>
    <screen>type: senlin.policy.scaling
version: 1.0
properties:
  event: CLUSTER_SCALE_IN
  adjustment:
    type: CHANGE_IN_CAPACITY
    number: 2
    min_step: 1
    best_effort: True
    cooldown: 120</screen>
    <para>To create a policy object, you can use the following command:</para>
    <screen language="console">$ openstack cluster policy create \
  --spec-file examples/policies/scaling_policy.yaml \
  policy1
+------------+--------------------------------------+
| Field      | Value                                |
+------------+--------------------------------------+
| created_at | 2016-12-08T02:41:30.000000           |
| data       | {}                                   |
| domain_id  | None                                 |
| id         | 3ca962c5-68ce-4293-9087-c73964546223 |
| location   | None                                 |
| name       | policy1                              |
| project_id | 36d551c0594b4cc99d1bbff8bf202ec3     |
| spec       | {                                    |
|            |   "version": 1.0,                    |
|            |   "type": "senlin.policy.scaling",   |
|            |   "properties": {                    |
|            |     "adjustment": {                  |
|            |       "min_step": 1,                 |
|            |       "cooldown": 120,               |
|            |       "best_effort": true,           |
|            |       "number": 1,                   |
|            |       "type": "CHANGE_IN_CAPACITY"   |
|            |     },                               |
|            |     "event": "CLUSTER_SCALE_IN"      |
|            |   }                                  |
|            | }                                    |
| type       | senlin.policy.scaling-1.0            |
| updated_at | None                                 |
| user_id    | 9563fa29642a4efdb1033bf8aab07daa     |
+------------+--------------------------------------+</screen>
    <para>The next step to enforce this policy on your cluster is to attach the policy
                to it, as shown below:</para>
    <screen language="console">$ openstack cluster policy attach --policy policy1 mycluster
Request accepted by action: 89626141-0999-4e76-9795-a86c4cfd531f

$ openstack cluster policy binding list mycluster
+-----------+-------------+---------------------------+------------+
| policy_id | policy_name | policy_type               | is_enabled |
+-----------+-------------+---------------------------+------------+
| 3ca962c5  | policy1     | senlin.policy.scaling-1.0 | True       |
+-----------+-------------+---------------------------+------------+</screen>
    <para>In future, when your cluster is about to be scaled in (no matter the request
                comes from a user or a software or via a receiver), the scaling policy attached
                will help determine 1) how many nodes to be removed, 2) whether the scaling
                operation should be done on a best effort basis, 3) for how long the cluster
                will not respond to further scaling requests, etc.</para>
    <para>For more information on using scaling policy, you can refer to
                <xref linkend="ref-scaling-policy"/>.</para>
  </section>
</section>
