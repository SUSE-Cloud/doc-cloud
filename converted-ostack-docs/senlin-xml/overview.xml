<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Overview</title>
  <para>Senlin is a <emphasis role="bold">clustering service</emphasis> for OpenStack clouds. It creates and
            operates clusters of homogeneous objects exposed by other OpenStack services.
            The goal is to make orchestration of collections of similar objects easier.</para>
  <para>Senlin interacts with other OpenStack services so that clusters of resources
            exposed by those services can be created and operated. These interactions are
            mostly done through the via <xref linkend="term-profile"/> plugins. Each profile type
            implementation enable Senlin to create, update, delete a specific type of
            resources.</para>
  <para>A <xref linkend="term-cluster"/> can be associated with different <xref linkend="term-policy"/> objects
            that can be checked/enforced at varying enforcement levels. Through service
            APIs, a user can dynamically add <xref linkend="term-node"/> to and remove node from a
            cluster, attach and detach policies, such as <emphasis>creation policy</emphasis>, <emphasis>deletion
                policy</emphasis>, <emphasis>load-balancing policy</emphasis>, <emphasis>scaling policy</emphasis>, <emphasis>health policy</emphasis> etc.
            Through integration with other OpenStack projects, users will be enabled to
            manage deployments and orchestrations large-scale resource pools much easier.</para>
  <para>Senlin is designed to be capable of managing different types of objects. An
            object’s lifecycle is managed using <xref linkend="term-profile-type"/> implementations,
            which are plugins that can be dynamically loaded by the service engine.</para>
  <section>
    <title>Components</title>
    <para>The developers are focusing on creating an OpenStack style project using
                OpenStack design tenets, implemented in Python. We have started with a close
                interaction with Heat project.</para>
    <section>
      <title>senlinclient</title>
      <para>The <literal>senlinclient</literal> package provides a plugin for the openstackclient
                    tool so you have a command line interface to communicate with
                    the <literal>senlin-api</literal> to manage clusters, nodes, profiles, policies,
                    actions and events. End developers could also use the Senlin REST API directly.</para>
    </section>
    <section>
      <title>senlin-dashboard</title>
      <para>The <literal>senlin-dashboard</literal> is a Horizon plugin that provides a UI for
                    senlin.</para>
    </section>
    <section>
      <title>senlin-api</title>
      <para>The <literal>senlin-api</literal> component provides an OpenStack-native REST API that
                    processes API requests by sending them to the <literal>senlin-engine</literal> over RPC.</para>
    </section>
    <section>
      <title>senlin-engine</title>
      <para>The <literal>senlin-engine</literal>’s main responsibility is to create and orchestrate
                    the clusters, nodes, profiles and policies.</para>
    </section>
  </section>
  <section>
    <title>Installation</title>
    <para>You will need to make sure you have a suitable environment for deploying
                Senlin. Please refer to <xref linkend="guide-install"/> for detailed
                instructions on setting up an environment to use the Senlin service.</para>
  </section>
</section>
