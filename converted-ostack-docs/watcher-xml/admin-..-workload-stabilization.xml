<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Watcher Overload standard deviation algorithm</title>
  <section>
    <title>Synopsis</title>
    <para><emphasis role="bold">display name</emphasis>: <literal>workload_stabilization</literal></para>
    <para><emphasis role="bold">goal</emphasis>: <literal>workload_balancing</literal></para>
    <para>
      <emphasis>Workload Stabilization control using live migration</emphasis>
    </para>
    <para>This is workload stabilization strategy based on standard deviation
                    algorithm. The goal is to determine if there is an overload in a cluster
                    and respond to it by migrating VMs to stabilize the cluster.</para>
    <para>It assumes that live migrations are possible in your cluster.</para>
  </section>
  <section>
    <title>Requirements</title>
    <section>
      <title>Metrics</title>
      <para>The <emphasis>workload_stabilization</emphasis> strategy requires the following metrics:</para>
      <informaltable>
        <tgroup cols="4">
          <colspec colname="c1" colwidth="51.9*"/>
          <colspec colname="c2" colwidth="22.2*"/>
          <colspec colname="c3" colwidth="13.0*"/>
          <colspec colname="c4" colwidth="13.0*"/>
          <thead>
            <row>
              <entry>
                <para>metric</para>
              </entry>
              <entry>
                <para>service name</para>
              </entry>
              <entry>
                <para>plugins</para>
              </entry>
              <entry>
                <para>comment</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <literal>compute.node.cpu.percent</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <link xlink:href="http://docs.openstack.org/admin-guide/telemetry-measurements.html#openstack-compute">ceilometer</link>
                </para>
              </entry>
              <entry>
                <para>none</para>
              </entry>
              <entry/>
            </row>
            <row>
              <entry>
                <para>
                  <literal>hardware.memory.used</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <link xlink:href="http://docs.openstack.org/admin-guide/telemetry-measurements.html#openstack-compute">ceilometer</link>
                </para>
              </entry>
              <entry>
                <para>
                  <link xlink:href="http://docs.openstack.org/admin-guide/telemetry-measurements.html">SNMP</link>
                </para>
              </entry>
              <entry/>
            </row>
            <row>
              <entry>
                <para>
                  <literal>cpu_util</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <link xlink:href="http://docs.openstack.org/admin-guide/telemetry-measurements.html#openstack-compute">ceilometer</link>
                </para>
              </entry>
              <entry>
                <para>none</para>
              </entry>
              <entry/>
            </row>
            <row>
              <entry>
                <para>
                  <literal>memory.resident</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <link xlink:href="http://docs.openstack.org/admin-guide/telemetry-measurements.html#openstack-compute">ceilometer</link>
                </para>
              </entry>
              <entry>
                <para>none</para>
              </entry>
              <entry/>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Cluster data model</title>
      <para>Default Watcher’s Compute cluster data model:</para>
      <para>Nova cluster data model collector</para>
      <para>The Nova cluster data model collector creates an in-memory
                        representation of the resources exposed by the compute service.</para>
    </section>
    <section>
      <title>Actions</title>
      <para>Default Watcher’s actions:</para>
      <informaltable>
        <tgroup cols="2">
          <colspec colname="c1" colwidth="50.0*"/>
          <colspec colname="c2" colwidth="50.0*"/>
          <thead>
            <row>
              <entry>
                <para>action</para>
              </entry>
              <entry>
                <para>description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <literal>migration</literal>
                </para>
              </entry>
              <entry>
                <para>Migrates a server to a destination nova-compute host</para>
                <para>This action will allow you to migrate a server to another compute
                                            destination host.
                                            Migration type ‘live’ can only be used for migrating active VMs.
                                            Migration type ‘cold’ can be used for migrating non-active VMs
                                            as well active VMs, which will be shut down while migrating.</para>
                <para>The action schema is:</para>
                <screen>schema = Schema({
 'resource_id': str,  # should be a UUID
 'migration_type': str,  # choices -&gt; "live", "cold"
 'destination_node': str,
 'source_node': str,
})</screen>
                <para>The <literal>resource_id</literal> is the UUID of the server to migrate.
                                            The <literal>source_node</literal> and <literal>destination_node</literal> parameters are respectively the
                                            source and the destination compute hostname (list of available compute
                                            hosts is returned by this command: <literal>nova service-list --binary
nova-compute</literal>).</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Planner</title>
      <para>Default Watcher’s planner:</para>
      <para>Weight planner implementation</para>
      <para>This implementation builds actions with parents in accordance with weights.
                        Set of actions having a higher weight will be scheduled before
                        the other ones. There are two config options to configure:
                        action_weights and parallelization.</para>
      <para>
        <emphasis>Limitations</emphasis>
      </para>
      <itemizedlist>
        <listitem>
          <para>This planner requires to have action_weights and parallelization configs
                                tuned well.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section>
    <title>Configuration</title>
    <para>Strategy parameters are:</para>
    <informaltable>
      <tgroup cols="4">
        <colspec colname="c1" colwidth="26.3*"/>
        <colspec colname="c2" colwidth="7.9*"/>
        <colspec colname="c3" colwidth="27.6*"/>
        <colspec colname="c4" colwidth="38.2*"/>
        <thead>
          <row>
            <entry>
              <para>parameter</para>
            </entry>
            <entry>
              <para>type</para>
            </entry>
            <entry>
              <para>default Value</para>
            </entry>
            <entry>
              <para>description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <literal>metrics</literal>
              </para>
            </entry>
            <entry>
              <para>array</para>
            </entry>
            <entry>
              <para>[“cpu_util”, “memory.resident”]</para>
            </entry>
            <entry>
              <para>Metrics used as rates of
                                    cluster loads.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>thresholds</literal>
              </para>
            </entry>
            <entry>
              <para>object</para>
            </entry>
            <entry>
              <para>{“cpu_util”: 0.2, “memory.resident”: 0.2}</para>
            </entry>
            <entry>
              <para>Dict where key is a metric
                                    and value is a trigger value.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>weights</literal>
              </para>
            </entry>
            <entry>
              <para>object</para>
            </entry>
            <entry>
              <para>{“cpu_util_weight”: 1.0, “memory.resident_weight”: 1.0}</para>
            </entry>
            <entry>
              <para>These weights used to
                                    calculate common standard
                                    deviation. Name of weight
                                    contains meter name and
                                    _weight suffix.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>instance_metrics</literal>
              </para>
            </entry>
            <entry>
              <para>object</para>
            </entry>
            <entry>
              <para>{“cpu_util”: “compute.node.cpu.percent”, “memory.resident”: “hardware.memory.used”}</para>
            </entry>
            <entry>
              <para>Mapping to get hardware
                                    statistics using instance
                                    metrics.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>host_choice</literal>
              </para>
            </entry>
            <entry>
              <para>string</para>
            </entry>
            <entry>
              <para>retry</para>
            </entry>
            <entry>
              <para>Method of host’s choice.
                                    There are cycle, retry and
                                    fullsearch methods. Cycle
                                    will iterate hosts in cycle.
                                    Retry will get some hosts
                                    random (count defined in
                                    retry_count option).
                                    Fullsearch will return each
                                    host from list.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>retry_count</literal>
              </para>
            </entry>
            <entry>
              <para>number</para>
            </entry>
            <entry>
              <para>1</para>
            </entry>
            <entry>
              <para>Count of random returned
                                    hosts.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>periods</literal>
              </para>
            </entry>
            <entry>
              <para>object</para>
            </entry>
            <entry>
              <para>{“instance”: 720, “node”: 600}</para>
            </entry>
            <entry>
              <para>These periods are used to get
                                    statistic aggregation for
                                    instance and host metrics.
                                    The period is simply a
                                    repeating interval of time
                                    into which the samples are
                                    grouped for aggregation.
                                    Watcher uses only the last
                                    period of all recieved ones.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>
  <section>
    <title>Efficacy Indicator</title>
    <screen>
      {'name': 'released_nodes_ratio', 'description': 'Ratio of released compute nodes divided by the total number of enabled compute nodes.', 'unit': '%', 'value': 0}
    </screen>
  </section>
  <section>
    <title>Algorithm</title>
    <para>You can find description of overload algorithm and role of standard deviation
                here: <link xlink:href="https://specs.openstack.org/openstack/watcher-specs/specs/newton/implemented/sd-strategy.html"/></para>
  </section>
  <section>
    <title>How to use it ?</title>
    <screen language="shell">$ openstack optimize audittemplate create \
  at1 workload_balancing --strategy workload_stabilization

$ openstack optimize audit create -a at1 \
  -p thresholds='{"memory.resident": 0.05}' \
  -p metrics='["memory.resident"]'</screen>
  </section>
  <section>
    <title>External Links</title>
    <itemizedlist>
      <listitem>
        <para>
          <link xlink:href="https://specs.openstack.org/openstack/watcher-specs/specs/newton/implemented/sd-strategy.html">Watcher Overload standard deviation algorithm spec</link>
        </para>
      </listitem>
    </itemizedlist>
  </section>
</section>
