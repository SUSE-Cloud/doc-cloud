<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>System Architecture</title>
  <para>This page presents the current technical Architecture of the Watcher system.</para>
  <section>
    <title>Overview</title>
    <para>Below you will find a diagram, showing the main components of Watcher:</para>
    <informalfigure>
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="architecture.svg" width="110%"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="architecture.svg" width="110%"/>
        </imageobject>
      </mediaobject>
    </informalfigure>
  </section>
  <section>
    <title>Components</title>
    <section xml:id="amqp-bus-definition">
      <title>AMQP Bus</title>
      <para>The AMQP message bus handles internal asynchronous communications between the
                    different Watcher components.</para>
    </section>
    <section xml:id="cluster-datasource-definition">
      <title>Datasource</title>
      <para>This component stores the metrics related to the cluster.</para>
      <para>It can potentially rely on any appropriate storage system (InfluxDB, OpenTSDB,
                    MongoDB,…) but will probably be more performant when using
                    <link xlink:href="https://en.wikipedia.org/wiki/Time_series_database">Time Series Databases</link>
                    which are optimized for handling time series data, which are arrays of numbers
                    indexed by time (a datetime or a datetime range).</para>
    </section>
    <section xml:id="archi-watcher-api-definition">
      <title>Watcher API</title>
      <para>This component implements the REST API provided by the Watcher system to the
                    external world.</para>
      <para>It enables the <xref linkend="administrator-definition"/> of a
                    <xref linkend="cluster-definition"/> to control and monitor the Watcher system
                    via any interaction mechanism connected to this API:</para>
      <itemizedlist>
        <listitem>
          <para>
            <xref linkend="archi-watcher-cli-definition"/>
          </para>
        </listitem>
        <listitem>
          <para>Horizon plugin</para>
        </listitem>
        <listitem>
          <para>Python SDK</para>
        </listitem>
      </itemizedlist>
      <para>You can also read the detailed description of <link xlink:href="webapi/v1.html">Watcher API</link>.</para>
    </section>
    <section>
      <title>Watcher Applier</title>
      <para>This component is in charge of executing the
                    <xref linkend="action-plan-definition"/> built by the
                    <xref linkend="watcher-decision-engine-definition"/>.</para>
      <para>It connects to the <xref linkend="amqp-bus-definition"/> and launches the
                    <xref linkend="action-plan-definition"/> whenever a triggering message is
                    received on a dedicated AMQP queue.</para>
      <para>The triggering message contains the Action Plan UUID.</para>
      <para>It then gets the detailed information about the
                    <xref linkend="action-plan-definition"/> from the
                    <xref linkend="watcher-database-definition"/> which contains the list
                    of <xref linkend="action-definition"/> to launch.</para>
      <para>It then loops on each <xref linkend="action-definition"/>, gets the associated
                    class and calls the execute() method of this class.
                    Most of the time, this method will first request a token to the Keystone API
                    and if it is allowed, sends a request to the REST API of the OpenStack service
                    which handles this kind of <xref linkend="action-definition"/>.</para>
      <para>Note that as soon as <xref linkend="watcher-applier-definition"/> starts
                    handling a given <xref linkend="action-definition"/> from the list, a
                    notification message is sent on the <xref linkend="amqp-bus-definition"/>
                    indicating that the state of the action has changed to <emphasis role="bold">ONGOING</emphasis>.</para>
      <para>If the <xref linkend="action-definition"/> is successful,
                    the <xref linkend="watcher-applier-definition"/> sends a notification
                    message on <xref linkend="amqp-bus-definition"/> informing the other components
                    of this.</para>
      <para>If the <xref linkend="action-definition"/> fails, the
                    <xref linkend="watcher-applier-definition"/> tries to rollback to the
                    previous state of the <xref linkend="managed-resource-definition"/>
                    (i.e. before the command was sent to the underlying OpenStack service).</para>
    </section>
    <section xml:id="archi-watcher-cli-definition">
      <title>Watcher CLI</title>
      <para>The watcher command-line interface (CLI) can be used to interact with the
                    Watcher system in order to control it or to know its current status.</para>
      <para>Please, read <link xlink:href="https://factory.b-com.com/www/watcher/doc/python-watcherclient/">the detailed documentation about Watcher CLI</link>.</para>
    </section>
    <section>
      <title>Watcher Dashboard</title>
      <para>The Watcher Dashboard can be used to interact with the Watcher system through
                    Horizon in order to control it or to know its current status.</para>
      <para>Please, read <link xlink:href="http://docs.openstack.org/developer/watcher-dashboard/">the detailed documentation about Watcher Dashboard</link>.</para>
    </section>
    <section>
      <title>Watcher Database</title>
      <para>This database stores all the Watcher domain objects which can be requested
                    by the <xref linkend="archi-watcher-api-definition"/> or the
                    <xref linkend="archi-watcher-cli-definition"/>:</para>
      <itemizedlist>
        <listitem>
          <para>
            <xref linkend="goal-definition"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="strategy-definition"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="audit-template-definition"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="audit-definition"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="action-plan-definition"/>
          </para>
        </listitem>
        <listitem>
          <para><xref linkend="efficacy-indicator-definition"/> via the Action
                            Plan API.</para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="action-definition"/>
          </para>
        </listitem>
      </itemizedlist>
      <para>The Watcher domain being here “<emphasis>optimization of some resources provided by an
                        OpenStack system</emphasis>”.</para>
    </section>
    <section>
      <title>Watcher Decision Engine</title>
      <para>This component is responsible for computing a set of potential optimization
                    <xref linkend="action-definition"/> in order to fulfill
                    the <xref linkend="goal-definition"/> of an <xref linkend="audit-definition"/>.</para>
      <para>It first reads the parameters of the <xref linkend="audit-definition"/> to know
                    the <xref linkend="goal-definition"/> to achieve.</para>
      <para>Unless specified, it then selects the most appropriate <xref linkend="strategy-definition"/> from the list of available strategies achieving this
                    goal.</para>
      <para>The <xref linkend="strategy-definition"/> is then dynamically loaded (via
                    <link xlink:href="http://docs.openstack.org/developer/stevedore/">stevedore</link>). The
                    <xref linkend="watcher-decision-engine-definition"/> executes
                    the strategy.</para>
      <para>In order to compute the potential <xref linkend="solution-definition"/> for the
                    Audit, the <xref linkend="strategy-definition"/> relies on different sets of
                    data:</para>
      <itemizedlist>
        <listitem>
          <para><xref linkend="cluster-data-model-definition"/> that are
                            periodically synchronized through pluggable cluster data model collectors.
                            These models contain the current state of various
                            <xref linkend="managed-resource-definition"/> (e.g., the data stored
                            in the Nova database). These models gives a strategy the ability to reason on
                            the current state of a given <xref linkend="cluster-definition"/>.</para>
        </listitem>
        <listitem>
          <para>The data stored in the <xref linkend="cluster-datasource-definition"/> which provides information about the past of
                            the <xref linkend="cluster-definition"/>.</para>
        </listitem>
      </itemizedlist>
      <para>Here below is a sequence diagram showing how the Decision Engine builds and
                    maintains the <xref linkend="cluster-data-model-definition"/> that
                    are used by the strategies.</para>
      <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="sequence_architecture_cdmc_sync.png" width="100%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="sequence_architecture_cdmc_sync.png" width="100%"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>The execution of a strategy then yields a solution composed of a set of
                    <xref linkend="action-definition"/> as well as a set of <xref linkend="efficacy-indicator-definition"/>.</para>
      <para>These <xref linkend="action-definition"/> are scheduled in time by the
                    <xref linkend="watcher-planner-definition"/> (i.e., it generates an
                    <xref linkend="action-plan-definition"/>).</para>
    </section>
  </section>
  <section>
    <title>Data model</title>
    <para>The following diagram shows the data model of Watcher, especially the
                functional dependency of objects from the actors (Admin, Customer) point of
                view (Goals, Audits, Action Plans, …):</para>
    <informalfigure>
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="functional_data_model.svg" width="100%"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="functional_data_model.svg" width="100%"/>
        </imageobject>
      </mediaobject>
    </informalfigure>
    <para>Here below is a diagram representing the main objects in Watcher from a
                database perspective:</para>
    <informalfigure>
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="watcher_db_schema_diagram.png"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="watcher_db_schema_diagram.png"/>
        </imageobject>
      </mediaobject>
    </informalfigure>
  </section>
  <section>
    <title>Sequence diagrams</title>
    <para>The following paragraph shows the messages exchanged between the different
                components of Watcher for the most often used scenarios.</para>
    <section>
      <title>Create a new Audit Template</title>
      <para>The <xref linkend="administrator-definition"/> first creates an
                    <xref linkend="audit-template-definition"/> providing at least the
                    following parameters:</para>
      <itemizedlist>
        <listitem>
          <para>A name</para>
        </listitem>
        <listitem>
          <para>A goal to achieve</para>
        </listitem>
        <listitem>
          <para>An optional strategy</para>
        </listitem>
      </itemizedlist>
      <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="sequence_create_audit_template.png" width="100%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="sequence_create_audit_template.png" width="100%"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>The <link xlink:href="webapi/v1.html">Watcher API</link>  makes sure that both the specified goal (mandatory) and
                    its associated strategy (optional) are registered inside the <xref linkend="watcher-database-definition"/> before storing a new audit template in
                    the <xref linkend="watcher-database-definition"/>.</para>
    </section>
    <section>
      <title>Create and launch a new Audit</title>
      <para>The <xref linkend="administrator-definition"/> can then launch a new
                    <xref linkend="audit-definition"/> by providing at least the unique UUID of the
                    previously created <xref linkend="audit-template-definition"/>:</para>
      <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="sequence_create_and_launch_audit.png" width="100%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="sequence_create_and_launch_audit.png" width="100%"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>The <xref linkend="administrator-definition"/> also can specify type of
                    Audit and interval (in case of CONTINUOUS type). There is two types of Audit:
                    ONESHOT and CONTINUOUS. Oneshot Audit is launched once and if it succeeded
                    executed new action plan list will be provided. Continuous Audit creates
                    action plans with specified interval (in seconds); if action plan
                    has been created, all previous action plans get CANCELLED state.</para>
      <para>A message is sent on the <xref linkend="amqp-bus-definition"/> which triggers
                    the Audit in the
                    <xref linkend="watcher-decision-engine-definition"/>:</para>
      <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="sequence_trigger_audit_in_decision_engine.png" width="100%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="sequence_trigger_audit_in_decision_engine.png" width="100%"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>The <xref linkend="watcher-decision-engine-definition"/> reads
                    the Audit parameters from the
                    <xref linkend="watcher-database-definition"/>. It instantiates the
                    appropriate <xref linkend="strategy-definition"/> (using entry points)
                    given both the <xref linkend="goal-definition"/> and the strategy associated to the
                    parent <xref linkend="audit-template-definition"/> of the <xref linkend="audit-definition"/>. If no strategy is associated to the audit template, the
                    strategy is dynamically selected by the Decision Engine.</para>
      <para>The <xref linkend="watcher-decision-engine-definition"/> also
                    builds the <xref linkend="cluster-data-model-definition"/>. This
                    data model is needed by the <xref linkend="strategy-definition"/> to know the
                    current state and topology of the audited
                    <xref linkend="cluster-definition"/>.</para>
      <para>The <xref linkend="watcher-decision-engine-definition"/> calls
                    the <emphasis role="bold">execute()</emphasis> method of the instantiated
                    <xref linkend="strategy-definition"/> and provides the data model as an input
                    parameter. This method computes a <xref linkend="strategy-definition"/> to
                    achieve the goal and returns it to the
                    <xref linkend="watcher-decision-engine-definition"/>. At this point,
                    actions are not scheduled yet.</para>
      <para>The <xref linkend="watcher-decision-engine-definition"/>
                    dynamically loads the <xref linkend="watcher-planner-definition"/>
                    implementation which is configured in Watcher (via entry points) and calls the
                    <emphasis role="bold">schedule()</emphasis> method of this class with the solution as an input parameter.
                    This method finds an appropriate scheduling of
                    <xref linkend="action-definition"/> taking into account some scheduling rules
                    (such as priorities between actions).
                    It generates a new <xref linkend="action-plan-definition"/> with status
                    <emphasis role="bold">RECOMMENDED</emphasis> and saves it into the <xref linkend="watcher-database-definition"/>. The saved action plan is now a scheduled flow
                    of actions to which a global efficacy is associated alongside a number of
                    <xref linkend="efficacy-indicator-definition"/> as specified by the
                    related <xref linkend="goal-definition"/>.</para>
      <para>If every step executed successfully, the
                    <xref linkend="watcher-decision-engine-definition"/> updates
                    the current status of the Audit to <emphasis role="bold">SUCCEEDED</emphasis> in the
                    <xref linkend="watcher-database-definition"/> and sends a notification
                    on the bus to inform other components that the <xref linkend="audit-definition"/>
                    was successful.</para>
      <para>This internal workflow the Decision Engine follows to conduct an audit can be
                    seen in the sequence diagram here below:</para>
      <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="sequence_from_audit_execution_to_actionplan_creation.png" width="100%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="sequence_from_audit_execution_to_actionplan_creation.png" width="100%"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
    </section>
    <section>
      <title>Launch Action Plan</title>
      <para>The <xref linkend="administrator-definition"/> can then launch the
                    recommended <xref linkend="action-plan-definition"/>:</para>
      <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="sequence_launch_action_plan.png" width="100%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="sequence_launch_action_plan.png" width="100%"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>A message is sent on the <xref linkend="amqp-bus-definition"/> which triggers
                    the <xref linkend="action-plan-definition"/> in the
                    <xref linkend="watcher-applier-definition"/>:</para>
      <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="sequence_launch_action_plan_in_applier.png" width="100%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="sequence_launch_action_plan_in_applier.png" width="100%"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>The <xref linkend="watcher-applier-definition"/> will get the
                    description of the flow of <xref linkend="action-definition"/> from the
                    <xref linkend="watcher-database-definition"/> and for each
                    <xref linkend="action-definition"/> it will instantiate a corresponding
                    <xref linkend="action-definition"/> handler python class.</para>
      <para>The <xref linkend="watcher-applier-definition"/> will then call the
                    following methods of the <xref linkend="action-definition"/> handler:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">validate_parameters()</emphasis>: this method will make sure that all the
                            provided input parameters are valid:</para>
          <itemizedlist>
            <listitem>
              <para>If all parameters are valid, the Watcher Applier moves on to the next
                                    step.</para>
            </listitem>
            <listitem>
              <para>If it is not, an error is raised and the action is not executed. A
                                    notification is sent on the bus informing other components of the
                                    failure.</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para><emphasis role="bold">preconditions()</emphasis>: this method will make sure that all conditions are met
                            before executing the action (for example, it makes sure that an instance
                            still exists before trying to migrate it).</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">execute()</emphasis>: this method is what triggers real commands on other
                            OpenStack services (such as Nova, …) in order to change target resource
                            state. If the action is successfully executed, a notification message is
                            sent on the bus indicating that the new state of the action is
                            <emphasis role="bold">SUCCEEDED</emphasis>.</para>
        </listitem>
      </itemizedlist>
      <para>If every action of the action flow has been executed successfully, a
                    notification is sent on the bus to indicate that the whole
                    <xref linkend="action-plan-definition"/> has <emphasis role="bold">SUCCEEDED</emphasis>.</para>
    </section>
  </section>
  <section>
    <title>State Machine diagrams</title>
    <section xml:id="audit-state-machine">
      <title>Audit State Machine</title>
      <para>An <xref linkend="audit-definition"/> has a life-cycle and its current state may
                    be one of the following:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">PENDING</emphasis> : a request for an <xref linkend="audit-definition"/> has been
                            submitted (either manually by the
                            <xref linkend="administrator-definition"/> or automatically via some
                            event handling mechanism) and is in the queue for being processed by the
                            <xref linkend="watcher-decision-engine-definition"/></para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">ONGOING</emphasis> : the <xref linkend="audit-definition"/> is currently being
                            processed by the
                            <xref linkend="watcher-decision-engine-definition"/></para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">SUCCEEDED</emphasis> : the <xref linkend="audit-definition"/> has been executed
                            successfully and at least one solution was found</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">FAILED</emphasis> : an error occurred while executing the
                            <xref linkend="audit-definition"/></para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">DELETED</emphasis> : the <xref linkend="audit-definition"/> is still stored in the
                            <xref linkend="watcher-database-definition"/> but is not returned
                            any more through the Watcher APIs.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">CANCELLED</emphasis> : the <xref linkend="audit-definition"/> was in <emphasis role="bold">PENDING</emphasis> or
                            <emphasis role="bold">ONGOING</emphasis> state and was cancelled by the
                            <xref linkend="administrator-definition"/></para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">SUSPENDED</emphasis> : the <xref linkend="audit-definition"/> was in <emphasis role="bold">ONGOING</emphasis>
                            state and was suspended by the
                            <xref linkend="administrator-definition"/></para>
        </listitem>
      </itemizedlist>
      <para>The following diagram shows the different possible states of an
                    <xref linkend="audit-definition"/> and what event makes the state change to a new
                    value:</para>
      <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="audit_state_machine.png" width="100%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="audit_state_machine.png" width="100%"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
    </section>
    <section xml:id="action-plan-state-machine">
      <title>Action Plan State Machine</title>
      <para>An <xref linkend="action-plan-definition"/> has a life-cycle and its current
                    state may be one of the following:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">RECOMMENDED</emphasis> : the <xref linkend="action-plan-definition"/> is waiting
                            for a validation from the <xref linkend="administrator-definition"/></para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">PENDING</emphasis> : a request for an <xref linkend="action-plan-definition"/>
                            has been submitted (due to an
                            <xref linkend="administrator-definition"/> executing an
                            <xref linkend="audit-definition"/>) and is in the queue for
                            being processed by the <xref linkend="watcher-applier-definition"/></para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">ONGOING</emphasis> : the <xref linkend="action-plan-definition"/> is currently
                            being processed by the <xref linkend="watcher-applier-definition"/></para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">SUCCEEDED</emphasis> : the <xref linkend="action-plan-definition"/> has been
                            executed successfully (i.e. all <xref linkend="action-definition"/> that it
                            contains have been executed successfully)</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">FAILED</emphasis> : an error occurred while executing the
                            <xref linkend="action-plan-definition"/></para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">DELETED</emphasis> : the <xref linkend="action-plan-definition"/> is still
                            stored in the <xref linkend="watcher-database-definition"/> but is
                            not returned any more through the Watcher APIs.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">CANCELLED</emphasis> : the <xref linkend="action-plan-definition"/> was in
                            <emphasis role="bold">RECOMMENDED</emphasis>, <emphasis role="bold">PENDING</emphasis> or <emphasis role="bold">ONGOING</emphasis> state and was cancelled by the
                            <xref linkend="administrator-definition"/></para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">SUPERSEDED</emphasis> : the <xref linkend="action-plan-definition"/> was in
                            RECOMMENDED state and was automatically superseded by Watcher, due to an
                            expiration delay or an update of the
                            <xref linkend="cluster-data-model-definition"/></para>
        </listitem>
      </itemizedlist>
      <para>The following diagram shows the different possible states of an
                    <xref linkend="action-plan-definition"/> and what event makes the state
                    change to a new value:</para>
      <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="action_plan_state_machine.png" width="100%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="action_plan_state_machine.png" width="100%"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
    </section>
  </section>
</section>
