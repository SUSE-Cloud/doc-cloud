<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Access Control</title>
  <section>
    <title>Role Based Access Control (RBAC)</title>
    <para>Like many other services, the Key Manager service supports the protection of its
                APIs by enforcing policy rules defined in a policy file.  The Key Manager
                service stores a reference to a policy JSON file in its configuration file,
                <literal>/etc/barbican/barbican.conf</literal>.  Typically this file is named
                <literal>policy.json</literal> and it is stored in <literal>/etc/barbican/policy.json</literal>.</para>
    <para>Each Key Manager API call has a line in the policy file that dictates which
                level of access applies:</para>
    <screen language="ini">API_NAME: RULE_STATEMENT or MATCH_STATEMENT</screen>
    <para>where <literal>RULE_STATEMENT</literal> can be another <literal>RULE_STATEMENT</literal> or a
                <literal>MATCH_STATEMENT</literal>:</para>
    <screen language="ini">RULE_STATEMENT: RULE_STATEMENT or MATCH_STATEMENT</screen>
    <para><literal>MATCH_STATEMENT</literal> is a set of identifiers that must match between the token
                provided by the caller of the API and the parameters or target entities of the
                API in question.  For example:</para>
    <screen language="ini">"secrets:post": "role:admin or role:creator"</screen>
    <para>indicates that to create a new secret via a POST request, you must have either
                the admin or creator role in your token.</para>
    <warning>
      <para>The Key Manager service scopes the ownership of a secret at
                    the project level.  This means that many calls in the API will perform an
                    additional check to ensure that the <literal>project_id</literal> of the token matches the
                    <literal>project_id</literal> stored as the secret owner.</para>
    </warning>
    <section>
      <title>Default Policy</title>
      <para>The policy engine in OpenStack is very flexible and allows for customized
                    policies that make sense for your particular cloud.  The Key Manager service
                    comes with a sample <literal>policy.json</literal> file which can be used as the starting
                    point for a customized policy.  The sample policy defines 5 distinct roles:</para>
      <variablelist>
        <varlistentry>
          <term>key-manager:service-admin</term>
          <listitem>
            <para>The cloud administrator in charge of the Key Manager service.  This user
                                has access to all management APIs like the project-quotas.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>admin</term>
          <listitem>
            <para>Project administrator.  This user has full access to all resources owned
                                by the project for which the admin role is scoped.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>creator</term>
          <listitem>
            <para>Users with this role are allowed to create new resources and can only
                                delete resources which are originally created (owned) by them. Users with
                                this role cannot delete other userâ€™s resources managed within same project.
                                They are also allowed full access to existing secrets owned by the project
                                in scope.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>observer</term>
          <listitem>
            <para>Users with this role are allowed to access to existing resources but are
                                not allowed to upload new secrets or delete existing secrets.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>audit</term>
          <listitem>
            <para>Users with this role are only allowed access to the resource metadata.
                                So users with this role are unable to decrypt secrets.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
  <section>
    <title>Access Control List API</title>
    <para>There are some limitations that result from scoping ownership of a secret at the
                project level.  For example, there is no easy way for a user to upload a secret
                for which only they have access.   There is also no easy way to grant a user
                access to only a single secret.</para>
    <para>To address this limitations the Key Manager service includes an Access Control
                List (ACL) API.  For full details see the
                <link xlink:href="http://developer.openstack.org/api-guide/key-manager/acls.html">ACL API User Guide</link></para>
  </section>
</section>
