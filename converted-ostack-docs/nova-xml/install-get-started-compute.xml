<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Compute service overview</title>
  <para>Use OpenStack Compute to host and manage cloud computing systems.  OpenStack
            Compute is a major part of an Infrastructure-as-a-Service (IaaS) system. The
            main modules are implemented in Python.</para>
  <para>OpenStack Compute interacts with OpenStack Identity for authentication;
            OpenStack Image service for disk and server images; and OpenStack Dashboard for
            the user and administrative interface. Image access is limited by projects, and
            by users; quotas are limited per project (the number of instances, for
            example). OpenStack Compute can scale horizontally on standard hardware, and
            download images to launch instances.</para>
  <para>OpenStack Compute consists of the following areas and their components:</para>
  <variablelist>
    <varlistentry>
      <term><literal>nova-api</literal> service</term>
      <listitem>
        <para>Accepts and responds to end user compute API calls. The service supports the
                        OpenStack Compute API, the Amazon EC2 API, and a special Admin API for
                        privileged users to perform administrative actions. It enforces some policies
                        and initiates most orchestration activities, such as running an instance.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>nova-api-metadata</literal> service</term>
      <listitem>
        <para>Accepts metadata requests from instances. The <literal>nova-api-metadata</literal> service
                        is generally used when you run in multi-host mode with <literal>nova-network</literal>
                        installations. For details, see <xref linkend="metadata-service"/>
                        in the Compute Administrator Guide.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>nova-compute</literal> service</term>
      <listitem>
        <para>A worker daemon that creates and terminates virtual machine instances through
                        hypervisor APIs. For example:</para>
        <itemizedlist>
          <listitem>
            <para>XenAPI for XenServer/XCP</para>
          </listitem>
          <listitem>
            <para>libvirt for KVM or QEMU</para>
          </listitem>
          <listitem>
            <para>VMwareAPI for VMware</para>
          </listitem>
        </itemizedlist>
        <para>Processing is fairly complex. Basically, the daemon accepts actions from the
                        queue and performs a series of system commands such as launching a KVM
                        instance and updating its state in the database.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>nova-placement-api</literal> service</term>
      <listitem>
        <para>Tracks the inventory and usage of each provider. For details, see <link xlink:href="https://docs.openstack.org/developer/nova/placement.html">Placement
                            API</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>nova-scheduler</literal> service</term>
      <listitem>
        <para>Takes a virtual machine instance request from the queue and determines on
                        which compute server host it runs.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>nova-conductor</literal> module</term>
      <listitem>
        <para>Mediates interactions between the <literal>nova-compute</literal> service and the database.
                        It eliminates direct accesses to the cloud database made by the
                        <literal>nova-compute</literal> service. The <literal>nova-conductor</literal> module scales horizontally.
                        However, do not deploy it on nodes where the <literal>nova-compute</literal> service runs.
                        For more information, see the <literal>conductor</literal> section in the
                        .</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>nova-consoleauth</literal> daemon</term>
      <listitem>
        <para>Authorizes tokens for users that console proxies provide. See
                        <literal>nova-novncproxy</literal> and <literal>nova-xvpvncproxy</literal>. This service must be running
                        for console proxies to work. You can run proxies of either type against a
                        single nova-consoleauth service in a cluster configuration. For information,
                        see <xref linkend="about-nova-consoleauth"/>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>nova-novncproxy</literal> daemon</term>
      <listitem>
        <para>Provides a proxy for accessing running instances through a VNC connection.
                        Supports browser-based novnc clients.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>nova-spicehtml5proxy</literal> daemon</term>
      <listitem>
        <para>Provides a proxy for accessing running instances through a SPICE connection.
                        Supports browser-based HTML5 client.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>nova-xvpvncproxy</literal> daemon</term>
      <listitem>
        <para>Provides a proxy for accessing running instances through a VNC connection.
                        Supports an OpenStack-specific Java client.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>The queue</term>
      <listitem>
        <para>A central hub for passing messages between daemons. Usually implemented with
                        <link xlink:href="https://www.rabbitmq.com/">RabbitMQ</link>, also can be implemented with
                        another AMQP message queue, such as <link xlink:href="http://www.zeromq.org/">ZeroMQ</link>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>SQL database</term>
      <listitem>
        <para>Stores most build-time and run-time states for a cloud infrastructure,
                        including:</para>
        <itemizedlist>
          <listitem>
            <para>Available instance types</para>
          </listitem>
          <listitem>
            <para>Instances in use</para>
          </listitem>
          <listitem>
            <para>Available networks</para>
          </listitem>
          <listitem>
            <para>Projects</para>
          </listitem>
        </itemizedlist>
        <para>Theoretically, OpenStack Compute can support any database that SQLAlchemy
                        supports. Common databases are SQLite3 for test and development work, MySQL,
                        MariaDB, and PostgreSQL.</para>
      </listitem>
    </varlistentry>
  </variablelist>
</section>
