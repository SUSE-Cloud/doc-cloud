<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/run/media/dpopov/DATAPART1/Git/openstack-docs/cloudkitty/doc/source/admin/rating/pyscripts.rst">
    <section ids="pyscripts-rating-module" names="pyscripts\ rating\ module">
        <title>PyScripts rating module</title>
        <paragraph>The PyScripts module allows you to create your own rating module.
            A script is supposed to process the given data and to set the
            different prices.</paragraph>
        <paragraph>CAUTION: If you add several PyScripts, the order in which they will be executed
            is not guaranteed.</paragraph>
        <section ids="custom-module-example" names="custom\ module\ example">
            <title>Custom module example</title>
            <section ids="price-definitions" names="price\ definitions">
                <title>Price definitions</title>
                <literal_block classes="code python" xml:space="preserve"><inline classes="keyword namespace">import</inline> <inline classes="name namespace">decimal</inline>


<inline classes="comment single"># Price for each flavor. These are equivalent to hashmap field mappings.</inline>
<inline classes="name">flavors</inline> <inline classes="operator">=</inline> <inline classes="punctuation">{</inline>
    <inline classes="literal string single">'m1.micro'</inline><inline classes="punctuation">:</inline> <inline classes="name">decimal</inline><inline classes="operator">.</inline><inline classes="name">Decimal</inline><inline classes="punctuation">(</inline><inline classes="literal number float">0.65</inline><inline classes="punctuation">),</inline>
    <inline classes="literal string single">'m1.nano'</inline><inline classes="punctuation">:</inline> <inline classes="name">decimal</inline><inline classes="operator">.</inline><inline classes="name">Decimal</inline><inline classes="punctuation">(</inline><inline classes="literal number float">0.35</inline><inline classes="punctuation">),</inline>
    <inline classes="literal string single">'m1.large'</inline><inline classes="punctuation">:</inline> <inline classes="name">decimal</inline><inline classes="operator">.</inline><inline classes="name">Decimal</inline><inline classes="punctuation">(</inline><inline classes="literal number float">2.67</inline><inline classes="punctuation">)</inline>
<inline classes="punctuation">}</inline>

<inline classes="comment single"># Price per MB / GB for images and volumes. These are equivalent to</inline>
<inline classes="comment single"># hashmap service mappings.</inline>
<inline classes="name">image_mb_price</inline> <inline classes="operator">=</inline> <inline classes="name">decimal</inline><inline classes="operator">.</inline><inline classes="name">Decimal</inline><inline classes="punctuation">(</inline><inline classes="literal number float">0.002</inline><inline classes="punctuation">)</inline>
<inline classes="name">volume_gb_price</inline> <inline classes="operator">=</inline> <inline classes="name">decimal</inline><inline classes="operator">.</inline><inline classes="name">Decimal</inline><inline classes="punctuation">(</inline><inline classes="literal number float">0.35</inline><inline classes="punctuation">)</inline></literal_block>
            </section>
            <section ids="price-calculation-functions" names="price\ calculation\ functions">
                <title>Price calculation functions</title>
                <literal_block classes="code python" xml:space="preserve"><inline classes="comment single"># These functions return the price of a service usage on a collect period.</inline>
<inline classes="comment single"># The price is always equivalent to the price per unit multiplied by</inline>
<inline classes="comment single"># the quantity.</inline>
<inline classes="keyword">def</inline> <inline classes="name function">get_compute_price</inline><inline classes="punctuation">(</inline><inline classes="name">item</inline><inline classes="punctuation">):</inline>
    <inline classes="keyword">if</inline> <inline classes="operator word">not</inline> <inline classes="name">item</inline><inline classes="punctuation">[</inline><inline classes="literal string single">'desc'</inline><inline classes="punctuation">][</inline><inline classes="literal string single">'flavor'</inline><inline classes="punctuation">]</inline> <inline classes="operator word">in</inline> <inline classes="name">flavors</inline><inline classes="punctuation">:</inline>
        <inline classes="keyword">return</inline> <inline classes="literal number integer">0</inline>
    <inline classes="keyword">else</inline><inline classes="punctuation">:</inline>
        <inline classes="keyword">return</inline> <inline classes="punctuation">(</inline><inline classes="name">decimal</inline><inline classes="operator">.</inline><inline classes="name">Decimal</inline><inline classes="punctuation">(</inline><inline classes="name">item</inline><inline classes="punctuation">[</inline><inline classes="literal string single">'vol'</inline><inline classes="punctuation">][</inline><inline classes="literal string single">'qty'</inline><inline classes="punctuation">])</inline>
               <inline classes="operator">*</inline> <inline classes="name">flavors</inline><inline classes="punctuation">[</inline><inline classes="name">item</inline><inline classes="punctuation">[</inline><inline classes="literal string single">'desc'</inline><inline classes="punctuation">][</inline><inline classes="literal string single">'flavor'</inline><inline classes="punctuation">]])</inline>

<inline classes="keyword">def</inline> <inline classes="name function">get_image_price</inline><inline classes="punctuation">(</inline><inline classes="name">item</inline><inline classes="punctuation">):</inline>
    <inline classes="keyword">if</inline> <inline classes="operator word">not</inline> <inline classes="name">item</inline><inline classes="punctuation">[</inline><inline classes="literal string single">'vol'</inline><inline classes="punctuation">][</inline><inline classes="literal string single">'qty'</inline><inline classes="punctuation">]:</inline>
        <inline classes="keyword">return</inline> <inline classes="literal number integer">0</inline>
    <inline classes="keyword">else</inline><inline classes="punctuation">:</inline>
        <inline classes="keyword">return</inline> <inline classes="name">decimal</inline><inline classes="operator">.</inline><inline classes="name">Decimal</inline><inline classes="punctuation">(</inline><inline classes="name">item</inline><inline classes="punctuation">[</inline><inline classes="literal string single">'vol'</inline><inline classes="punctuation">][</inline><inline classes="literal string single">'qty'</inline><inline classes="punctuation">])</inline> <inline classes="operator">*</inline> <inline classes="name">image_mb_price</inline>


<inline classes="keyword">def</inline> <inline classes="name function">get_volume_price</inline><inline classes="punctuation">(</inline><inline classes="name">item</inline><inline classes="punctuation">):</inline>
    <inline classes="keyword">if</inline> <inline classes="operator word">not</inline> <inline classes="name">item</inline><inline classes="punctuation">[</inline><inline classes="literal string single">'vol'</inline><inline classes="punctuation">][</inline><inline classes="literal string single">'qty'</inline><inline classes="punctuation">]:</inline>
        <inline classes="keyword">return</inline> <inline classes="literal number integer">0</inline>
    <inline classes="keyword">else</inline><inline classes="punctuation">:</inline>
        <inline classes="keyword">return</inline> <inline classes="name">decimal</inline><inline classes="operator">.</inline><inline classes="name">Decimal</inline><inline classes="punctuation">(</inline><inline classes="name">item</inline><inline classes="punctuation">[</inline><inline classes="literal string single">'vol'</inline><inline classes="punctuation">][</inline><inline classes="literal string single">'qty'</inline><inline classes="punctuation">])</inline> <inline classes="operator">*</inline> <inline classes="name">volume_gb_price</inline>

<inline classes="comment single"># Mapping each service to its price calculation function</inline>
<inline classes="name">services</inline> <inline classes="operator">=</inline> <inline classes="punctuation">{</inline>
    <inline classes="literal string single">'compute'</inline><inline classes="punctuation">:</inline> <inline classes="name">get_compute_price</inline><inline classes="punctuation">,</inline>
    <inline classes="literal string single">'volume'</inline><inline classes="punctuation">:</inline> <inline classes="name">get_volume_price</inline><inline classes="punctuation">,</inline>
    <inline classes="literal string single">'image'</inline><inline classes="punctuation">:</inline> <inline classes="name">get_image_price</inline>
<inline classes="punctuation">}</inline></literal_block>
            </section>
            <section ids="processing-the-data" names="processing\ the\ data">
                <title>Processing the data</title>
                <literal_block classes="code python" xml:space="preserve"><inline classes="keyword">def</inline> <inline classes="name function">process</inline><inline classes="punctuation">(</inline><inline classes="name">data</inline><inline classes="punctuation">):</inline>
    <inline classes="comment single"># The 'data' parameter is a list of dictionaries containing a</inline>
    <inline classes="comment single"># "usage" and a "period" field</inline>
    <inline classes="keyword">for</inline> <inline classes="name">d</inline> <inline classes="operator word">in</inline> <inline classes="name">data</inline><inline classes="punctuation">:</inline>
        <inline classes="name">usage</inline> <inline classes="operator">=</inline> <inline classes="name">d</inline><inline classes="punctuation">[</inline><inline classes="literal string single">'usage'</inline><inline classes="punctuation">]</inline>
        <inline classes="keyword">for</inline> <inline classes="name">service_name</inline><inline classes="punctuation">,</inline> <inline classes="name">service_data</inline> <inline classes="operator word">in</inline> <inline classes="name">usage</inline><inline classes="operator">.</inline><inline classes="name">items</inline><inline classes="punctuation">():</inline>
            <inline classes="comment single"># Do not calculate the price if the service has no</inline>
            <inline classes="comment single"># price calculation function</inline>
            <inline classes="keyword">if</inline> <inline classes="name">service_name</inline> <inline classes="operator word">in</inline> <inline classes="name">services</inline><inline classes="operator">.</inline><inline classes="name">keys</inline><inline classes="punctuation">():</inline>
                <inline classes="comment single"># A service can have several items. For example,</inline>
                <inline classes="comment single"># each running instance is an item of the compute service</inline>
                <inline classes="keyword">for</inline> <inline classes="name">item</inline> <inline classes="operator word">in</inline> <inline classes="name">service_data</inline><inline classes="punctuation">:</inline>
                    <inline classes="name">item</inline><inline classes="punctuation">[</inline><inline classes="literal string single">'rating'</inline><inline classes="punctuation">]</inline> <inline classes="operator">=</inline> <inline classes="punctuation">{</inline><inline classes="literal string single">'price'</inline><inline classes="punctuation">:</inline> <inline classes="name">services</inline><inline classes="punctuation">[</inline><inline classes="name">service_name</inline><inline classes="punctuation">](</inline><inline classes="name">item</inline><inline classes="punctuation">)}</inline>
    <inline classes="keyword">return</inline> <inline classes="name">data</inline>


<inline classes="comment single"># 'data' is passed as a global variable. The script is supposed to set the</inline>
<inline classes="comment single"># 'rating' element of each item in each service</inline>
<inline classes="name">data</inline> <inline classes="operator">=</inline> <inline classes="name">process</inline><inline classes="punctuation">(</inline><inline classes="name">data</inline><inline classes="punctuation">)</inline></literal_block>
            </section>
        </section>
        <section ids="using-your-script-for-rating" names="using\ your\ script\ for\ rating">
            <title>Using your Script for rating</title>
            <section ids="enabling-the-pyscripts-module" names="enabling\ the\ pyscripts\ module">
                <title>Enabling the PyScripts module</title>
                <paragraph>To use you script for rating, you will need to enable the pyscripts module</paragraph>
                <literal_block classes="code raw" xml:space="preserve"><inline classes="error">$ cloudkitty module-enable -n pyscripts
+-----------+---------+
| Module    | Enabled |
+-----------+---------+
| pyscripts | True    |
+-----------+---------+</inline></literal_block>
            </section>
            <section ids="adding-the-script-to-cloudkitty" names="adding\ the\ script\ to\ cloudkitty">
                <title>Adding the script to CloudKitty</title>
                <paragraph>Create the script and specify its name.</paragraph>
                <literal_block classes="code raw" xml:space="preserve"><inline classes="error">$ cloudkitty pyscripts-script-create -n my_awesome_script -f script.py
+-----------+----------------------------------------------+
| Property  | Value                                        |
+-----------+----------------------------------------------+
| checksum  | 7650349ba3a913cef526dfb953575042ec3332e1     |
| data      | from __future__ import print_function        |
|           | from cloudkitty import rating                |
|           |                                              |
|           | import decimal                               |
|           |                                              |
|           |       {...}                                  |
|           |                                              |
|           | data = process(data)                         |
|           |                                              |
| name      | my_awesome_script                            |
| script_id | 93de054f-9d6f-40b0-8e4f-9b8fee8cad04         |
+-----------+----------------------------------------------+</inline></literal_block>
            </section>
        </section>
    </section>
</document>
