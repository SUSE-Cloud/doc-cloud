<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.14 -->
<document source="/run/media/dpopov/DATAPART1/Git/openstack-docs/cloudkitty/doc/source/configuration/index.rst">
    <section ids="configuration-guide" names="configuration\ guide">
        <title>Configuration Guide</title>
        <section ids="configure-cloudkitty" names="configure\ cloudkitty">
            <title>Configure Cloudkitty</title>
            <paragraph>Edit <literal classes="file" role="file">/etc/cloudkitty/cloudkitty.conf</literal> to configure cloudkitty.</paragraph>
            <paragraph>Then you need to know which keystone API version you use (which can be
                determined using <title_reference>openstack endpoint list</title_reference>)</paragraph>
            <section ids="for-keystone-identity-api-v2-deprecated" names="for\ keystone\ (identity)\ api\ v2\ (deprecated)">
                <title>For keystone (identity) API v2 (deprecated)</title>
                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
verbose = True
log_dir = /var/log/cloudkitty
# oslo_messaging_rabbit is deprecated
transport_url = rabbit://openstack:RABBIT_PASSWORD@RABBIT_HOST/

[auth]
username = cloudkitty
password = CK_PASSWORD
tenant = service
region = RegionOne
url = http://KEYSTONE_HOST:5000/v2.0

[keystone_authtoken]
username = cloudkitty
password = CK_PASSWORD
project_name = service
region = RegionOne
auth_url = http://KEYSTONE_HOST:5000/v2.0
auth_plugin = password

[database]
connection = mysql://cloudkitty:CK_DBPASSWORD@DB_HOST/cloudkitty

[storage]
backend = sqlalchemy

[keystone_fetcher]
username = cloudkitty
password = CK_PASSWORD
tenant = service
region = RegionOne
url = http://KEYSTONE_HOST:5000/v2.0

[collect]
collector = ceilometer
period = 3600
services = compute, volume, network.bw.in, network.bw.out, network.floating, image

[ceilometer_collector]
username = cloudkitty
password = CK_PASSWORD
tenant = service
region = RegionOne
url = http://KEYSTONE_HOST:5000/v2.0</literal_block>
                <note>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><literal>http://KEYSTONE_HOST:5000/v2.0</literal> and <literal>http://KEYSTONE_HOST:35357/v2.0</literal> are your
                                identity endpoints.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>the tenant named <literal>service</literal> is also commonly called <literal>services</literal></paragraph>
                        </list_item>
                    </bullet_list>
                </note>
            </section>
            <section ids="for-keystone-identity-api-v3" names="for\ keystone\ (identity)\ api\ v3">
                <title>For keystone (identity) API v3</title>
                <paragraph>The following shows the basic configuration items:</paragraph>
                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
verbose = True
log_dir = /var/log/cloudkitty
# oslo_messaging_rabbit is deprecated
transport_url = rabbit://openstack:RABBIT_PASSWORD@RABBIT_HOST/

[ks_auth]
auth_type = v3password
auth_protocol = http
auth_url = http://KEYSTONE_HOST:5000/
identity_uri = http://KEYSTONE_HOST:35357/
username = cloudkitty
password = CK_PASSWORD
project_name = service
user_domain_name = default
project_domain_name = default
debug = True

[keystone_authtoken]
auth_section = ks_auth

[database]
connection = mysql://cloudkitty:CK_DBPASSWORD@DB_HOST/cloudkitty

[keystone_fetcher]
auth_section = ks_auth
keystone_version = 3

[tenant_fetcher]
backend = keystone</literal_block>
                <note>
                    <paragraph>The tenant named <literal>service</literal> is also commonly called <literal>services</literal></paragraph>
                </note>
                <paragraph>It is now time to configure the storage backend. Three storage backends are
                    available: <literal>sqlalchemy</literal>, <literal>gnocchihybrid</literal>, and <literal>gnocchi</literal>.</paragraph>
                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[storage]
backend = gnocchihybrid</literal_block>
                <paragraph>As you will see in the following example, collector and storage backends sometimes
                    need additional configuration sections. (The tenant fetcher works the same way,
                    but for now, only Keystone is supported). The sectionâ€™s name has the following
                    format: <literal>{backend_name}_{backend_type}</literal> (<literal>gnocchi_collector</literal> for example),
                    except for <literal>storage_gnocchi</literal>.</paragraph>
                <note>
                    <paragraph>The section name format should become <literal>{backend_type}_{backend_name}</literal> for all
                        sections in the future (<literal>storage_gnocchi</literal> style).</paragraph>
                </note>
                <paragraph>If you want to use the pure gnocchi storage, add the following entry:</paragraph>
                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[storage_gnocchi]
auth_section = ks_auth</literal_block>
                <paragraph>Two collectors are available: Ceilometer (deprecated, see the Telemetry
                    documentation), and Gnocchi.</paragraph>
                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[collect]
collector = gnocchi
# Metrics are collected every 3600 seconds
period = 3600
# By default, only the compute service is enabled
services = compute, volume, network.bw.in, network.bw.out, network.floating, image

[gnocchi_collector]
auth_section = ks_auth</literal_block>
            </section>
            <section ids="setup-the-database-and-storage-backend" names="setup\ the\ database\ and\ storage\ backend">
                <title>Setup the database and storage backend</title>
                <paragraph>MySQL/MariaDB is the recommended database engine. To setup the database, use
                    the <literal>mysql</literal> client:</paragraph>
                <literal_block xml:space="preserve">mysql -uroot -p &lt;&lt; EOF
CREATE DATABASE cloudkitty;
GRANT ALL PRIVILEGES ON cloudkitty.* TO 'cloudkitty'@'localhost' IDENTIFIED BY 'CK_DBPASSWORD';
EOF</literal_block>
                <paragraph>If you need to authorize the cloudkitty mysql user from another host you have
                    to change the line accordingly.</paragraph>
                <paragraph>Run the database synchronisation scripts:</paragraph>
                <literal_block xml:space="preserve">cloudkitty-dbsync upgrade</literal_block>
                <paragraph>Init the storage backend:</paragraph>
                <literal_block xml:space="preserve">cloudkitty-storage-init</literal_block>
            </section>
            <section ids="integration-with-keystone" names="integration\ with\ keystone">
                <title>Integration with Keystone</title>
                <paragraph>cloudkitty uses Keystone for authentication, and provides a <literal>rating</literal> service.</paragraph>
                <paragraph>To integrate cloudkitty to Keystone, run the following commands (as OpenStack
                    administrator):</paragraph>
                <literal_block xml:space="preserve">openstack user create cloudkitty --password CK_PASSWORD --email cloudkitty@localhost
openstack role add --project service --user cloudkitty admin</literal_block>
                <paragraph>Give the <literal>rating</literal> role to <literal>cloudkitty</literal> for each project that should be
                    handled by cloudkitty:</paragraph>
                <literal_block xml:space="preserve">openstack role create rating
openstack role add --project XXX --user cloudkitty rating</literal_block>
                <paragraph>Create the <literal>rating</literal> service and its endpoints:</paragraph>
                <literal_block xml:space="preserve">openstack service create rating --name cloudkitty \
    --description "OpenStack Rating Service"
openstack endpoint create rating --region RegionOne \
    public http://localhost:8889
openstack endpoint create rating --region RegionOne \
    admin http://localhost:8889
openstack endpoint create rating --region RegionOne \
    internal http://localhost:8889</literal_block>
                <note>
                    <paragraph>The default port for the API service changed from 8888 to 8889
                        in the Newton release. If you installed Cloudkitty in an
                        earlier version, make sure to either explicitly define the
                        <literal>[api]/port</literal> setting to 8888 in <literal>cloudkitty.conf</literal>, or update
                        your keystone endpoints to use the 8889 port.</paragraph>
                </note>
            </section>
        </section>
        <section ids="start-cloudkitty" names="start\ cloudkitty">
            <title>Start cloudkitty</title>
            <section ids="if-you-installed-cloudkitty-from-packages" names="if\ you\ installed\ cloudkitty\ from\ packages">
                <title>If you installed cloudkitty from packages</title>
                <paragraph>Start the processing services:</paragraph>
                <literal_block xml:space="preserve">systemctl start cloudkitty-processor.service</literal_block>
            </section>
            <section ids="if-you-installed-cloudkitty-from-sources" names="if\ you\ installed\ cloudkitty\ from\ sources">
                <title>If you installed cloudkitty from sources</title>
                <paragraph>Start the processing services:</paragraph>
                <literal_block xml:space="preserve">cloudkitty-processor --config-file /etc/cloudkitty/cloudkitty.conf</literal_block>
            </section>
            <section ids="choose-and-start-the-api-server" names="choose\ and\ start\ the\ api\ server">
                <title>Choose and start the API server</title>
                <block_quote>
                    <paragraph>Cloudkitty includes the <literal>cloudkitty-api</literal> command. It can be
                        used to run the API server. For smaller or proof-of-concept
                        installations this is a reasonable choice. For larger installations it
                        is strongly recommended to install the API server in a WSGI host
                        such as mod_wsgi (see <reference internal="True" refuri="../install/mod_wsgi#mod-wsgi"><inline classes="std std-ref">Installing the API behind mod_wsgi</inline></reference>). Doing so will provide better
                        performance and more options for making adjustments specific to the
                        installation environment.</paragraph>
                    <paragraph>If you are using the <literal>cloudkitty-api</literal> command it can be started
                        as:</paragraph>
                    <literal_block xml:space="preserve">$ cloudkitty-api -p 8889</literal_block>
                </block_quote>
            </section>
        </section>
    </section>
</document>
