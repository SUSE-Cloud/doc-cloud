<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>V2 Web API</title>
  <note>
    <para>The Ceilometer API is deprecated.  Use the APIs from <link xlink:href="https://docs.openstack.org/aodh/latest/">Aodh</link> (alarms),
                <link xlink:href="http://gnocchi.xyz/">Gnocchi</link> (metrics), and/or <link xlink:href="https://docs.openstack.org/panko/latest/">Panko</link> (events).</para>
  </note>
  <section>
    <title>Resources</title>
    <variablelist>
      <varlistentry xml:id="get--v2-resources">
        <term>
          <literal>get--v2-resources</literal>
        </term>
        <listitem>
          <para>Retrieve definitions of all of the resources.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="get--v2-resources-(resource_id)">
        <term>
          <literal>get--v2-resources-(resource_id)</literal>
        </term>
        <listitem>
          <para>Retrieve details about one resource.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="Resource">
        <term>
          <literal>Resource</literal>
        </term>
        <listitem>
          <para>An externally defined object for which samples have been received.</para>
          <para>Data samples:</para>
          <variablelist>
            <varlistentry>
              <term>Json</term>
              <listitem>
                <screen language="javascript"><?dbsuse-fo font-size="8pt"?>{
    "links": [
        {
            "href": "http://localhost:8777/v2/resources/bd9431c1-8d69-4ad3-803a-8d4a6b89fd36",
            "rel": "self"
        },
        {
            "href": "http://localhost:8777/v2/meters/volume?q.field=resource_id&amp;q.value=bd9431c1-8d69-4ad3-803a-8d4a6b89fd36",
            "rel": "volume"
        }
    ],
    "metadata": {
        "name1": "value1",
        "name2": "value2"
    },
    "project_id": "35b17138-b364-4e6a-a131-8f3099c5be68",
    "resource_id": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36",
    "source": "openstack",
    "user_id": "efd87807-12d2-4b38-9c70-5f5c2ac427ff"
}</screen>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>XML</term>
              <listitem>
                <screen language="xml"><?dbsuse-fo font-size="8pt"?>b'&lt;value&gt;\n  &lt;resource_id&gt;bd9431c1-8d69-4ad3-803a-8d4a6b89fd36&lt;/resource_id&gt;\n  &lt;project_id&gt;35b17138-b364-4e6a-a131-8f3099c5be68&lt;/project_id&gt;\n  &lt;user_id&gt;efd87807-12d2-4b38-9c70-5f5c2ac427ff&lt;/user_id&gt;\n  &lt;metadata&gt;\n    &lt;item&gt;\n      &lt;key&gt;name1&lt;/key&gt;\n      &lt;value&gt;value1&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;name2&lt;/key&gt;\n      &lt;value&gt;value2&lt;/value&gt;\n    &lt;/item&gt;\n  &lt;/metadata&gt;\n  &lt;links&gt;\n    &lt;item&gt;\n      &lt;href&gt;http://localhost:8777/v2/resources/bd9431c1-8d69-4ad3-803a-8d4a6b89fd36&lt;/href&gt;\n      &lt;rel&gt;self&lt;/rel&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;href&gt;http://localhost:8777/v2/meters/volume?q.field=resource_id&amp;amp;q.value=bd9431c1-8d69-4ad3-803a-8d4a6b89fd36&lt;/href&gt;\n      &lt;rel&gt;volume&lt;/rel&gt;\n    &lt;/item&gt;\n  &lt;/links&gt;\n  &lt;source&gt;openstack&lt;/source&gt;\n&lt;/value&gt;'</screen>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.resources.Resource.first_sample_timestamp">
              <term>
                <property>ceilometer.api.controllers.v2.resources.Resource.first_sample_timestamp</property>
              </term>
              <listitem>
                <para>UTC date &amp; time not later than the first sample known for this resource</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.resources.Resource.last_sample_timestamp">
              <term>
                <property>ceilometer.api.controllers.v2.resources.Resource.last_sample_timestamp</property>
              </term>
              <listitem>
                <para>UTC date &amp; time not earlier than the last sample known for this resource</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.resources.Resource.links">
              <term>
                <property>ceilometer.api.controllers.v2.resources.Resource.links</property>
              </term>
              <listitem>
                <para>A list containing a self link and associated meter links</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.resources.Resource.metadata">
              <term>
                <property>ceilometer.api.controllers.v2.resources.Resource.metadata</property>
              </term>
              <listitem>
                <para>Arbitrary metadata associated with the resource</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.resources.Resource.project_id">
              <term>
                <property>ceilometer.api.controllers.v2.resources.Resource.project_id</property>
              </term>
              <listitem>
                <para>The ID of the owning project or tenant</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.resources.Resource.resource_id">
              <term>
                <property>ceilometer.api.controllers.v2.resources.Resource.resource_id</property>
              </term>
              <listitem>
                <para>The unique identifier for the resource</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.resources.Resource.source">
              <term>
                <property>ceilometer.api.controllers.v2.resources.Resource.source</property>
              </term>
              <listitem>
                <para>The source where the resource come from</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.resources.Resource.user_id">
              <term>
                <property>ceilometer.api.controllers.v2.resources.Resource.user_id</property>
              </term>
              <listitem>
                <para>The ID of the user who created the resource or updated it last</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Meters</title>
    <variablelist>
      <varlistentry xml:id="get--v2-meters">
        <term>
          <literal>get--v2-meters</literal>
        </term>
        <listitem>
          <para>Return all known meters, based on the data recorded so far.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="get--v2-meters-(meter_name)">
        <term>
          <literal>get--v2-meters-(meter_name)</literal>
        </term>
        <listitem>
          <para>Return samples for the meter.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="post--v2-meters-(meter_name)">
        <term>
          <literal>post--v2-meters-(meter_name)</literal>
        </term>
        <listitem>
          <para>Post a list of new Samples to Telemetry.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="get--v2-meters-(meter_name)-statistics">
        <term>
          <literal>get--v2-meters-(meter_name)-statistics</literal>
        </term>
        <listitem>
          <para>Computes the statistics of the samples in the time range given.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="Meter">
        <term>
          <literal>Meter</literal>
        </term>
        <listitem>
          <para>One category of measurements.</para>
          <para>Data samples:</para>
          <variablelist>
            <varlistentry>
              <term>Json</term>
              <listitem>
                <screen language="javascript">{
    "meter_id": "YmQ5NDMxYzEtOGQ2OS00YWQzLTgwM2EtOGQ0YTZiODlmZDM2K2luc3RhbmNl",
    "name": "instance",
    "project_id": "35b17138-b364-4e6a-a131-8f3099c5be68",
    "resource_id": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36",
    "source": "openstack",
    "type": "gauge",
    "unit": "instance",
    "user_id": "efd87807-12d2-4b38-9c70-5f5c2ac427ff"
}</screen>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>XML</term>
              <listitem>
                <screen language="xml"><?dbsuse-fo font-size="8pt"?>b'&lt;value&gt;\n  &lt;name&gt;instance&lt;/name&gt;\n  &lt;type&gt;gauge&lt;/type&gt;\n  &lt;unit&gt;instance&lt;/unit&gt;\n  &lt;resource_id&gt;bd9431c1-8d69-4ad3-803a-8d4a6b89fd36&lt;/resource_id&gt;\n  &lt;project_id&gt;35b17138-b364-4e6a-a131-8f3099c5be68&lt;/project_id&gt;\n  &lt;user_id&gt;efd87807-12d2-4b38-9c70-5f5c2ac427ff&lt;/user_id&gt;\n  &lt;source&gt;openstack&lt;/source&gt;\n  &lt;meter_id&gt;YmQ5NDMxYzEtOGQ2OS00YWQzLTgwM2EtOGQ0YTZiODlmZDM2K2luc3RhbmNl&lt;/meter_id&gt;\n&lt;/value&gt;'</screen>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Meter.meter_id">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Meter.meter_id</property>
              </term>
              <listitem>
                <para>The unique identifier for the meter</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Meter.name">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Meter.name</property>
              </term>
              <listitem>
                <para>The unique name for the meter</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Meter.project_id">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Meter.project_id</property>
              </term>
              <listitem>
                <para>The ID of the project or tenant that owns the resource</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Meter.resource_id">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Meter.resource_id</property>
              </term>
              <listitem>
                <para>The ID of the <xref linkend="Resource"/> for which the measurements are taken</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Meter.source">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Meter.source</property>
              </term>
              <listitem>
                <para>The ID of the source that identifies where the meter comes from</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Meter.type">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Meter.type</property>
              </term>
              <listitem>
                <para>The meter type (see <xref linkend="measurements"/>)</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Meter.unit">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Meter.unit</property>
              </term>
              <listitem>
                <para>The unit of measure</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Meter.user_id">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Meter.user_id</property>
              </term>
              <listitem>
                <para>The ID of the user who last triggered an update to the resource</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="OldSample">
        <term>
          <literal>OldSample</literal>
        </term>
        <listitem>
          <para>A single measurement for a given meter and resource.</para>
          <para>This class is deprecated in favor of Sample.</para>
          <para>Data samples:</para>
          <variablelist>
            <varlistentry>
              <term>Json</term>
              <listitem>
                <screen language="javascript">{
    "counter_name": "instance",
    "counter_type": "gauge",
    "counter_unit": "instance",
    "counter_volume": 1.0,
    "message_id": "5460acce-4fd6-480d-ab18-9735ec7b1996",
    "project_id": "35b17138-b364-4e6a-a131-8f3099c5be68",
    "recorded_at": "2015-01-01T12:00:00",
    "resource_id": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36",
    "resource_metadata": {
        "name1": "value1",
        "name2": "value2"
    },
    "source": "openstack",
    "timestamp": "2015-01-01T12:00:00",
    "user_id": "efd87807-12d2-4b38-9c70-5f5c2ac427ff"
}</screen>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>XML</term>
              <listitem>
                <screen language="xml"><?dbsuse-fo font-size="8pt"?>b'&lt;value&gt;\n  &lt;source&gt;openstack&lt;/source&gt;\n  &lt;counter_name&gt;instance&lt;/counter_name&gt;\n  &lt;counter_type&gt;gauge&lt;/counter_type&gt;\n  &lt;counter_unit&gt;instance&lt;/counter_unit&gt;\n  &lt;counter_volume&gt;1.0&lt;/counter_volume&gt;\n  &lt;user_id&gt;efd87807-12d2-4b38-9c70-5f5c2ac427ff&lt;/user_id&gt;\n  &lt;project_id&gt;35b17138-b364-4e6a-a131-8f3099c5be68&lt;/project_id&gt;\n  &lt;resource_id&gt;bd9431c1-8d69-4ad3-803a-8d4a6b89fd36&lt;/resource_id&gt;\n  &lt;timestamp&gt;2015-01-01T12:00:00&lt;/timestamp&gt;\n  &lt;recorded_at&gt;2015-01-01T12:00:00&lt;/recorded_at&gt;\n  &lt;resource_metadata&gt;\n    &lt;item&gt;\n      &lt;key&gt;name1&lt;/key&gt;\n      &lt;value&gt;value1&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;name2&lt;/key&gt;\n      &lt;value&gt;value2&lt;/value&gt;\n    &lt;/item&gt;\n  &lt;/resource_metadata&gt;\n  &lt;message_id&gt;5460acce-4fd6-480d-ab18-9735ec7b1996&lt;/message_id&gt;\n&lt;/value&gt;'</screen>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.counter_name">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.counter_name</property>
              </term>
              <listitem>
                <para>The name of the meter</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.counter_type">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.counter_type</property>
              </term>
              <listitem>
                <para>The type of the meter (see <xref linkend="measurements"/>)</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.counter_unit">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.counter_unit</property>
              </term>
              <listitem>
                <para>The unit of measure for the value in counter_volume</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.counter_volume">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.counter_volume</property>
              </term>
              <listitem>
                <para>The actual measured value</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.message_id">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.message_id</property>
              </term>
              <listitem>
                <para>A unique identifier for the sample</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.project_id">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.project_id</property>
              </term>
              <listitem>
                <para>The ID of the project or tenant that owns the resource</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.recorded_at">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.recorded_at</property>
              </term>
              <listitem>
                <para>When the sample has been recorded.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.resource_id">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.resource_id</property>
              </term>
              <listitem>
                <para>The ID of the <xref linkend="Resource"/> for which the measurements are taken</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.resource_metadata">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.resource_metadata</property>
              </term>
              <listitem>
                <para>Arbitrary metadata associated with the resource</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.source">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.source</property>
              </term>
              <listitem>
                <para>The ID of the source that identifies where the sample comes from</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.timestamp">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.timestamp</property>
              </term>
              <listitem>
                <para>UTC date and time when the measurement was made</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.OldSample.user_id">
              <term>
                <property>ceilometer.api.controllers.v2.meters.OldSample.user_id</property>
              </term>
              <listitem>
                <para>The ID of the user who last triggered an update to the resource</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Samples and Statistics</title>
    <variablelist>
      <varlistentry xml:id="get--v2-samples">
        <term>
          <literal>get--v2-samples</literal>
        </term>
        <listitem>
          <para>Return all known samples, based on the data recorded so far.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="get--v2-samples-(sample_id)">
        <term>
          <literal>get--v2-samples-(sample_id)</literal>
        </term>
        <listitem>
          <para>Return a sample.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="Sample">
        <term>
          <literal>Sample</literal>
        </term>
        <listitem>
          <para>One measurement.</para>
          <para>Data samples:</para>
          <variablelist>
            <varlistentry>
              <term>Json</term>
              <listitem>
                <screen language="javascript">{
    "id": "b274bd48-b1af-11e8-871a-1866da2de5ee",
    "metadata": {
        "name1": "value1",
        "name2": "value2"
    },
    "meter": "instance",
    "project_id": "35b17138-b364-4e6a-a131-8f3099c5be68",
    "recorded_at": "2015-01-01T12:00:00",
    "resource_id": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36",
    "source": "openstack",
    "timestamp": "2015-01-01T12:00:00",
    "type": "gauge",
    "unit": "instance",
    "user_id": "efd87807-12d2-4b38-9c70-5f5c2ac427ff",
    "volume": 1.0
}</screen>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>XML</term>
              <listitem>
                <screen language="xml"><?dbsuse-fo font-size="8pt"?>b'&lt;value&gt;\n  &lt;id&gt;b274bd48-b1af-11e8-871a-1866da2de5ee&lt;/id&gt;\n  &lt;meter&gt;instance&lt;/meter&gt;\n  &lt;type&gt;gauge&lt;/type&gt;\n  &lt;unit&gt;instance&lt;/unit&gt;\n  &lt;volume&gt;1.0&lt;/volume&gt;\n  &lt;user_id&gt;efd87807-12d2-4b38-9c70-5f5c2ac427ff&lt;/user_id&gt;\n  &lt;project_id&gt;35b17138-b364-4e6a-a131-8f3099c5be68&lt;/project_id&gt;\n  &lt;resource_id&gt;bd9431c1-8d69-4ad3-803a-8d4a6b89fd36&lt;/resource_id&gt;\n  &lt;source&gt;openstack&lt;/source&gt;\n  &lt;timestamp&gt;2015-01-01T12:00:00&lt;/timestamp&gt;\n  &lt;recorded_at&gt;2015-01-01T12:00:00&lt;/recorded_at&gt;\n  &lt;metadata&gt;\n    &lt;item&gt;\n      &lt;key&gt;name1&lt;/key&gt;\n      &lt;value&gt;value1&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;name2&lt;/key&gt;\n      &lt;value&gt;value2&lt;/value&gt;\n    &lt;/item&gt;\n  &lt;/metadata&gt;\n&lt;/value&gt;'</screen>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.id">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.id</property>
              </term>
              <listitem>
                <para>The unique identifier for the sample.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.metadata">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.metadata</property>
              </term>
              <listitem>
                <para>Arbitrary metadata associated with the sample.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.meter">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.meter</property>
              </term>
              <listitem>
                <para>The meter name this sample is for.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.project_id">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.project_id</property>
              </term>
              <listitem>
                <para>The project this sample was taken for.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.recorded_at">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.recorded_at</property>
              </term>
              <listitem>
                <para>When the sample has been recorded.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.resource_id">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.resource_id</property>
              </term>
              <listitem>
                <para>The <xref linkend="Resource"/> this sample was taken for.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.source">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.source</property>
              </term>
              <listitem>
                <para>The source that identifies where the sample comes from.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.timestamp">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.timestamp</property>
              </term>
              <listitem>
                <para>When the sample has been generated.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.type">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.type</property>
              </term>
              <listitem>
                <para>The meter type (see <xref linkend="meter-types"/>)</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.unit">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.unit</property>
              </term>
              <listitem>
                <para>The unit of measure.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.user_id">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.user_id</property>
              </term>
              <listitem>
                <para>The user this sample was taken for.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.samples.Sample.volume">
              <term>
                <property>ceilometer.api.controllers.v2.samples.Sample.volume</property>
              </term>
              <listitem>
                <para>The metered value.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="Statistics">
        <term>
          <literal>Statistics</literal>
        </term>
        <listitem>
          <para>Computed statistics for a query.</para>
          <para>Data samples:</para>
          <variablelist>
            <varlistentry>
              <term>Json</term>
              <listitem>
                <screen language="javascript">{
    "avg": 4.5,
    "count": 10,
    "duration": 300.0,
    "duration_end": "2013-01-04T16:47:00",
    "duration_start": "2013-01-04T16:42:00",
    "max": 9.0,
    "min": 1.0,
    "period": 7200,
    "period_end": "2013-01-04T18:00:00",
    "period_start": "2013-01-04T16:00:00",
    "sum": 45.0,
    "unit": "GiB"
}</screen>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>XML</term>
              <listitem>
                <screen language="xml"><?dbsuse-fo font-size="8pt"?>b'&lt;value&gt;\n  &lt;unit&gt;GiB&lt;/unit&gt;\n  &lt;min&gt;1.0&lt;/min&gt;\n  &lt;max&gt;9.0&lt;/max&gt;\n  &lt;avg&gt;4.5&lt;/avg&gt;\n  &lt;sum&gt;45.0&lt;/sum&gt;\n  &lt;count&gt;10&lt;/count&gt;\n  &lt;duration&gt;300.0&lt;/duration&gt;\n  &lt;duration_start&gt;2013-01-04T16:42:00&lt;/duration_start&gt;\n  &lt;duration_end&gt;2013-01-04T16:47:00&lt;/duration_end&gt;\n  &lt;period&gt;7200&lt;/period&gt;\n  &lt;period_start&gt;2013-01-04T16:00:00&lt;/period_start&gt;\n  &lt;period_end&gt;2013-01-04T18:00:00&lt;/period_end&gt;\n&lt;/value&gt;'</screen>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.aggregate">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.aggregate</property>
              </term>
              <listitem>
                <para>The selectable aggregate value(s)</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.avg">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.avg</property>
              </term>
              <listitem>
                <para>The average of all of the volume values seen in the data</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.count">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.count</property>
              </term>
              <listitem>
                <para>The number of samples seen</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.duration">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.duration</property>
              </term>
              <listitem>
                <para>The difference, in seconds, between the oldest and newest timestamp</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.duration_end">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.duration_end</property>
              </term>
              <listitem>
                <para>UTC date and time of the oldest timestamp, or the query end time</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.duration_start">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.duration_start</property>
              </term>
              <listitem>
                <para>UTC date and time of the earliest timestamp, or the query start time</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.groupby">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.groupby</property>
              </term>
              <listitem>
                <para>Dictionary of field names for group, if groupby statistics are requested</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.max">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.max</property>
              </term>
              <listitem>
                <para>The maximum volume seen in the data</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.min">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.min</property>
              </term>
              <listitem>
                <para>The minimum volume seen in the data</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.period">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.period</property>
              </term>
              <listitem>
                <para>The difference, in seconds, between the period start and end</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.period_end">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.period_end</property>
              </term>
              <listitem>
                <para>UTC date and time of the period end</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.period_start">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.period_start</property>
              </term>
              <listitem>
                <para>UTC date and time of the period start</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.sum">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.sum</property>
              </term>
              <listitem>
                <para>The total of all of the volume values seen in the data</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Statistics.unit">
              <term>
                <property>ceilometer.api.controllers.v2.meters.Statistics.unit</property>
              </term>
              <listitem>
                <para>The unit type of the data set</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>When a simple statistics request is invoked (using GET /v2/meters/&lt;meter_name&gt;/statistics),
                it will return the standard set of <emphasis>Statistics</emphasis>: <emphasis>avg</emphasis>, <emphasis>sum</emphasis>, <emphasis>min</emphasis>, <emphasis>max</emphasis>, and <emphasis>count</emphasis>.</para>
    <note>
      <para>If using Ceilometer data for statistics, it’s recommended to use a backend
                    such as <link xlink:href="http://gnocchi.xyz/">Gnocchi</link> rather than Ceilometer’s interface. Gnocchi is designed
                    specifically for this use case by providing a light-weight, aggregated model.
                    As they manage data differently, the API models returned by Ceilometer and Gnocchi
                    are different. The Gnocchi API can be found <link xlink:href="http://gnocchi.xyz/rest.html">here</link>.</para>
    </note>
    <section>
      <title>Selectable Aggregates</title>
      <para>The Statistics API has been extended to include the aggregate functions
                    <emphasis>stddev</emphasis> and <emphasis>cardinality</emphasis>. You can explicitly select these functions or any
                    from the standard set by specifying an aggregate function in the statistics
                    query:</para>
      <screen><?dbsuse-fo font-size="8pt"?>GET /v2/meters/&lt;meter_name&gt;/statistics?aggregate.func=&lt;name&gt;&amp;aggregate.param=&lt;value&gt;</screen>
      <para>(where aggregate.param is optional).</para>
      <para>Duplicate aggregate function and parameter pairs are silently discarded from the statistics query. Partial duplicates, in the sense of the same function but differing parameters, for example:</para>
      <screen><?dbsuse-fo font-size="8pt"?>GET /v2/meters/&lt;meter_name&gt;/statistics?aggregate.func=cardinality&amp;aggregate.param=resource_id&amp;aggregate.func=cardinality&amp;aggregate.param=project_id</screen>
      <para>are, on the other hand, both allowed by the API and supported by the storage drivers.  See the <xref linkend="functional-examples"/> section for more detail.</para>
      <note>
        <para>Currently only <emphasis>cardinality</emphasis> needs aggregate.param to be specified.</para>
      </note>
      <variablelist>
        <varlistentry xml:id="Aggregate">
          <term>
            <literal>Aggregate</literal>
          </term>
          <listitem>
            <para>Data samples:</para>
            <variablelist>
              <varlistentry>
                <term>Json</term>
                <listitem>
                  <screen language="javascript">{
    "func": "cardinality",
    "param": "resource_id"
}</screen>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>XML</term>
                <listitem>
                  <screen language="xml">b'&lt;value&gt;\n  &lt;func&gt;cardinality&lt;/func&gt;\n  &lt;param&gt;resource_id&lt;/param&gt;\n&lt;/value&gt;'</screen>
                </listitem>
              </varlistentry>
            </variablelist>
            <variablelist>
              <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Aggregate.func">
                <term>
                  <property>ceilometer.api.controllers.v2.meters.Aggregate.func</property>
                </term>
                <listitem>
                  <para>The aggregation function name</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <variablelist>
              <varlistentry xml:id="ceilometer.api.controllers.v2.meters.Aggregate.param">
                <term>
                  <property>ceilometer.api.controllers.v2.meters.Aggregate.param</property>
                </term>
                <listitem>
                  <para>The paramter to the aggregation function</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
  <section>
    <title>Capabilities</title>
    <para>The Capabilities API allows you to directly discover which functions from the
                V2 API functionality, including the selectable aggregate functions, are
                supported by the currently configured storage driver. A capabilities query
                returns a flattened dictionary of properties with associated boolean values -
                a ‘False’ or absent value means that the corresponding feature is not
                available in the backend.</para>
    <variablelist>
      <varlistentry xml:id="get--v2-capabilities">
        <term>
          <literal>get--v2-capabilities</literal>
        </term>
        <listitem>
          <para>Returns a flattened dictionary of API capabilities.</para>
          <para>Capabilities supported by the currently configured storage driver.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="Capabilities">
        <term>
          <literal>Capabilities</literal>
        </term>
        <listitem>
          <para>A representation of the API and storage capabilities.</para>
          <para>Usually constrained by restrictions imposed by the storage driver.</para>
          <para>Data samples:</para>
          <variablelist>
            <varlistentry>
              <term>Json</term>
              <listitem>
                <screen language="javascript">{
    "api": {
        "meters:query:metadata": true,
        "meters:query:simple": true,
        "resources:query:metadata": true,
        "resources:query:simple": true,
        "samples:query:complex": true,
        "samples:query:metadata": true,
        "samples:query:simple": true,
        "statistics:aggregation:selectable:avg": true,
        "statistics:aggregation:selectable:cardinality": true,
        "statistics:aggregation:selectable:count": true,
        "statistics:aggregation:selectable:max": true,
        "statistics:aggregation:selectable:min": true,
        "statistics:aggregation:selectable:quartile": false,
        "statistics:aggregation:selectable:stddev": true,
        "statistics:aggregation:selectable:sum": true,
        "statistics:aggregation:standard": true,
        "statistics:groupby": true,
        "statistics:query:metadata": true,
        "statistics:query:simple": true
    },
    "storage": {
        "storage:production_ready": true
    }
}</screen>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>XML</term>
              <listitem>
                <screen language="xml"><?dbsuse-fo font-size="8pt"?>b'&lt;value&gt;\n  &lt;api&gt;\n    &lt;item&gt;\n      &lt;key&gt;meters:query:metadata&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;meters:query:simple&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;resources:query:metadata&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;resources:query:simple&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;samples:query:complex&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;samples:query:metadata&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;samples:query:simple&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:aggregation:selectable:avg&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:aggregation:selectable:cardinality&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:aggregation:selectable:count&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:aggregation:selectable:max&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:aggregation:selectable:min&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:aggregation:selectable:quartile&lt;/key&gt;\n      &lt;value&gt;false&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:aggregation:selectable:stddev&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:aggregation:selectable:sum&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:aggregation:standard&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:groupby&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:query:metadata&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n    &lt;item&gt;\n      &lt;key&gt;statistics:query:simple&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n  &lt;/api&gt;\n  &lt;storage&gt;\n    &lt;item&gt;\n      &lt;key&gt;storage:production_ready&lt;/key&gt;\n      &lt;value&gt;true&lt;/value&gt;\n    &lt;/item&gt;\n  &lt;/storage&gt;\n&lt;/value&gt;'</screen>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.capabilities.Capabilities.api">
              <term>
                <property>ceilometer.api.controllers.v2.capabilities.Capabilities.api</property>
              </term>
              <listitem>
                <para>A flattened dictionary of API capabilities</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.capabilities.Capabilities.storage">
              <term>
                <property>ceilometer.api.controllers.v2.capabilities.Capabilities.storage</property>
              </term>
              <listitem>
                <para>A flattened dictionary of storage capabilities</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Filtering Queries</title>
    <para>Ceilometer’s REST API currently supports two types of queries. The Simple
                Query functionality provides simple filtering on several fields of the
                <emphasis>Sample</emphasis> type. Complex Query provides the possibility to specify queries
                with logical and comparison operators on the fields of <emphasis>Sample</emphasis>.</para>
    <para>You may also apply filters based on the values of one or more of the
                <emphasis>resource_metadata</emphasis> field, which you can identify by using <emphasis>metadata.&lt;field&gt;</emphasis>
                syntax in either type of query. Note, however, that given the free-form
                nature of <emphasis>resource_metadata</emphasis> field, there is no practical or consistent way
                to validate the query fields under <emphasis>metadata</emphasis> domain like it is done for
                all other fields.</para>
    <note>
      <para>The API call will return HTTP 200 OK status for both of the
                    following cases: when a query with <emphasis>metadata.&lt;field&gt;</emphasis> does not match its
                    value, and when <emphasis>&lt;field&gt;</emphasis> itself does not exist in any of the records being
                    queried.</para>
    </note>
    <section>
      <title>Simple Query</title>
      <para>Many of the endpoints above accept a query filter argument, which
                    should be a list of Query data structures. Whatever the endpoint you
                    want to apply a filter on, you always filter on the fields of the <emphasis>Sample</emphasis>
                    type (for example, if you apply a filter on a query for statistics,
                    you won’t target <emphasis>duration_start</emphasis> field of <emphasis>Statistics</emphasis>, but <emphasis>timestamp</emphasis>
                    field of <emphasis>Sample</emphasis>). See <xref linkend="api-queries"/> for how to query the API.</para>
      <variablelist>
        <varlistentry xml:id="Query">
          <term>
            <literal>Query</literal>
          </term>
          <listitem>
            <para>Query filter.</para>
            <para>Data samples:</para>
            <variablelist>
              <varlistentry>
                <term>Json</term>
                <listitem>
                  <screen language="javascript">{
    "field": "resource_id",
    "op": "eq",
    "type": "string",
    "value": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36"
}</screen>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>XML</term>
                <listitem>
                  <screen language="xml"><?dbsuse-fo font-size="8pt"?>b'&lt;value&gt;\n  &lt;field&gt;resource_id&lt;/field&gt;\n  &lt;op&gt;eq&lt;/op&gt;\n  &lt;value&gt;bd9431c1-8d69-4ad3-803a-8d4a6b89fd36&lt;/value&gt;\n  &lt;type&gt;string&lt;/type&gt;\n&lt;/value&gt;'</screen>
                </listitem>
              </varlistentry>
            </variablelist>
            <variablelist>
              <varlistentry xml:id="ceilometer.api.controllers.v2.base.Query.field">
                <term>
                  <property>ceilometer.api.controllers.v2.base.Query.field</property>
                </term>
                <listitem>
                  <para>The name of the field to test</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <variablelist>
              <varlistentry xml:id="ceilometer.api.controllers.v2.base.Query.op">
                <term>
                  <property>ceilometer.api.controllers.v2.base.Query.op</property>
                </term>
                <listitem>
                  <para>The comparison operator. Defaults to ‘eq’.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <variablelist>
              <varlistentry xml:id="ceilometer.api.controllers.v2.base.Query.type">
                <term>
                  <property>ceilometer.api.controllers.v2.base.Query.type</property>
                </term>
                <listitem>
                  <para>The data type of value to compare against the stored data</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <variablelist>
              <varlistentry xml:id="ceilometer.api.controllers.v2.base.Query.value">
                <term>
                  <property>ceilometer.api.controllers.v2.base.Query.value</property>
                </term>
                <listitem>
                  <para>The value to compare against the stored data</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section xml:id="complex-query">
      <title>Complex Query</title>
      <para>The filter expressions of the Complex Query feature operate on the fields
                    of <emphasis>Sample</emphasis>. The following comparison operators are
                    supported: <emphasis>=</emphasis>, <emphasis>!=</emphasis>, <emphasis>&lt;</emphasis>, <emphasis>&lt;=</emphasis>, <emphasis>&gt;</emphasis>, <emphasis>&gt;=</emphasis> and <emphasis>in</emphasis>; and the following logical
                    operators can be used: <emphasis>and</emphasis><emphasis>or</emphasis> and <emphasis>not</emphasis>. The field names are validated
                    against the database models. See <xref linkend="api-queries"/> for how to query the API.</para>
      <note>
        <para>The <emphasis>not</emphasis> operator has different meaning in MongoDB and in SQL DB engine.
                        If the <emphasis>not</emphasis> operator is applied on a non existent metadata field then
                        the result depends on the DB engine. For example, if
                        {“not”: {“metadata.nonexistent_field” : “some value”}} filter is used in a query
                        the MongoDB will return every Sample object as <emphasis>not</emphasis> operator evaluated true
                        for every Sample where the given field does not exists. See more in the MongoDB doc.
                        On the other hand, SQL based DB engine will return empty result as the join operation
                        on the metadata table will return zero rows as the on clause of the join which
                        tries to match on the metadata field name is never fulfilled.</para>
      </note>
      <para>Complex Query supports defining the list of orderby expressions in the form
                    of [{“field_name”: “asc”}, {“field_name2”: “desc”}, …].</para>
      <para>The number of the returned items can be bounded using the <emphasis>limit</emphasis> option.</para>
      <para>The <emphasis>filter</emphasis>, <emphasis>orderby</emphasis> and <emphasis>limit</emphasis> are all optional fields in a query.</para>
      <variablelist>
        <varlistentry xml:id="post--v2-query-samples">
          <term>
            <literal>post--v2-query-samples</literal>
          </term>
          <listitem>
            <para>Define query for retrieving Sample data.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <variablelist>
        <varlistentry xml:id="ComplexQuery">
          <term>
            <literal>ComplexQuery</literal>
          </term>
          <listitem>
            <para>Holds a sample query encoded in json.</para>
            <para>Data samples:</para>
            <variablelist>
              <varlistentry>
                <term>Json</term>
                <listitem>
                  <screen language="javascript"><?dbsuse-fo font-size="8pt"?>{
    "filter": "{\"and\": [{\"and\": [{\"=\": {\"counter_name\": \"cpu_util\"}}, {\"&gt;\": {\"counter_volume\": 0.23}}, {\"&lt;\": {\"counter_volume\": 0.26}}]}, {\"or\": [{\"and\": [{\"&gt;\": {\"timestamp\": \"2013-12-01T18:00:00\"}}, {\"&lt;\": {\"timestamp\": \"2013-12-01T18:15:00\"}}]}, {\"and\": [{\"&gt;\": {\"timestamp\": \"2013-12-01T18:30:00\"}}, {\"&lt;\": {\"timestamp\": \"2013-12-01T18:45:00\"}}]}]}]}",
    "limit": 42,
    "orderby": "[{\"counter_volume\": \"ASC\"}, {\"timestamp\": \"DESC\"}]"
}</screen>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>XML</term>
                <listitem>
                  <screen language="xml"><?dbsuse-fo font-size="8pt"?>b'&lt;value&gt;\n  &lt;filter&gt;{"and": [{"and": [{"=": {"counter_name": "cpu_util"}}, {"&amp;gt;": {"counter_volume": 0.23}}, {"&amp;lt;": {"counter_volume": 0.26}}]}, {"or": [{"and": [{"&amp;gt;": {"timestamp": "2013-12-01T18:00:00"}}, {"&amp;lt;": {"timestamp": "2013-12-01T18:15:00"}}]}, {"and": [{"&amp;gt;": {"timestamp": "2013-12-01T18:30:00"}}, {"&amp;lt;": {"timestamp": "2013-12-01T18:45:00"}}]}]}]}&lt;/filter&gt;\n  &lt;orderby&gt;[{"counter_volume": "ASC"}, {"timestamp": "DESC"}]&lt;/orderby&gt;\n  &lt;limit&gt;42&lt;/limit&gt;\n&lt;/value&gt;'</screen>
                </listitem>
              </varlistentry>
            </variablelist>
            <variablelist>
              <varlistentry xml:id="ceilometer.api.controllers.v2.query.ComplexQuery.filter">
                <term>
                  <property>ceilometer.api.controllers.v2.query.ComplexQuery.filter</property>
                </term>
                <listitem>
                  <para>The filter expression encoded in json.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <variablelist>
              <varlistentry xml:id="ceilometer.api.controllers.v2.query.ComplexQuery.limit">
                <term>
                  <property>ceilometer.api.controllers.v2.query.ComplexQuery.limit</property>
                </term>
                <listitem>
                  <para>The maximum number of results to be returned.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <variablelist>
              <varlistentry xml:id="ceilometer.api.controllers.v2.query.ComplexQuery.orderby">
                <term>
                  <property>ceilometer.api.controllers.v2.query.ComplexQuery.orderby</property>
                </term>
                <listitem>
                  <para>List of single-element dicts for specifying the ordering of the results.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
  <section>
    <title>Links</title>
    <variablelist>
      <varlistentry xml:id="Link">
        <term>
          <literal>Link</literal>
        </term>
        <listitem>
          <para>A link representation.</para>
          <para>Data samples:</para>
          <variablelist>
            <varlistentry>
              <term>Json</term>
              <listitem>
                <screen language="javascript"><?dbsuse-fo font-size="8pt"?>{
    "href": "http://localhost:8777/v2/meters/volume?q.field=resource_id&amp;q.value=bd9431c1-8d69-4ad3-803a-8d4a6b89fd36",
    "rel": "volume"
}</screen>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>XML</term>
              <listitem>
                <screen language="xml"><?dbsuse-fo font-size="8pt"?>b'&lt;value&gt;\n  &lt;href&gt;http://localhost:8777/v2/meters/volume?q.field=resource_id&amp;amp;q.value=bd9431c1-8d69-4ad3-803a-8d4a6b89fd36&lt;/href&gt;\n  &lt;rel&gt;volume&lt;/rel&gt;\n&lt;/value&gt;'</screen>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.base.Link.href">
              <term>
                <property>ceilometer.api.controllers.v2.base.Link.href</property>
              </term>
              <listitem>
                <para>The url of a link</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="ceilometer.api.controllers.v2.base.Link.rel">
              <term>
                <property>ceilometer.api.controllers.v2.base.Link.rel</property>
              </term>
              <listitem>
                <para>The name of a link</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>API and CLI query examples</title>
    <section>
      <title>CLI Queries</title>
      <para>Ceilometer CLI Commands:</para>
      <screen><?dbsuse-fo font-size="8pt"?>$ ceilometer --debug --os-username &lt;username_here&gt; --os-password &lt;password_here&gt; --os-auth-url http://localhost:5000/v2.0/ --os-tenant-name admin  meter-list</screen>
      <note>
        <para>The <emphasis>username</emphasis>, <emphasis>password</emphasis>, and <emphasis>tenant-name</emphasis> options are required to be
                        present in these arguments or specified via environment variables. Note that
                        the in-line arguments will override the environment variables.</para>
      </note>
    </section>
    <section xml:id="api-queries">
      <title>API Queries</title>
      <para>Ceilometer API calls:</para>
      <note>
        <para>To successfully query Ceilometer you must first get a project-specific
                        token from the Keystone service and add it to any API calls that you
                        execute against that project. See the
                        <link xlink:href="http://docs.openstack.org/api/quick-start/content/index.html#getting-credentials-a00665">OpenStack credentials documentation</link></para>
        <para>for additional details.</para>
      </note>
      <para>A simple query to return a list of available meters:</para>
      <screen>$ curl -H 'X-Auth-Token: &lt;inserttokenhere&gt;' \
  "http://localhost:8777/v2/meters"</screen>
      <para>A query to return the list of resources:</para>
      <screen>$ curl -H 'X-Auth-Token: &lt;inserttokenhere&gt;' \
  "http://localhost:8777/v2/resources"</screen>
      <para>A query to return the list of samples, limited to a specific meter type:</para>
      <screen>$ curl -H 'X-Auth-Token: &lt;inserttokenhere&gt;' \
  "http://localhost:8777/v2/meters/disk.root.size"</screen>
      <para>A query using filters (see: <link xlink:href="https://docs.openstack.org/ceilometer/latest/webapi/v2.html#filtering-queries">query filter section</link>):</para>
      <screen><?dbsuse-fo font-size="8pt"?>$ curl -H 'X-Auth-Token: &lt;inserttokenhere&gt;' \
  "http://localhost:8777/v2/meters/instance?q.field=metadata.event_type&amp;q.value=compute.instance.delete.start"</screen>
      <para>Additional examples:</para>
      <screen><?dbsuse-fo font-size="8pt"?>$ curl -H 'X-Auth-Token: &lt;inserttokenhere&gt;' \
  "http://localhost:8777/v2/meters/disk.root.size?q.field=resource_id&amp;q.op=eq&amp;q.value=&lt;resource_id_here&gt;"</screen>
      <para>or:</para>
      <screen><?dbsuse-fo font-size="8pt"?>$ curl -H 'X-Auth-Token: &lt;inserttokenhere&gt;' \
  "http://localhost:8777/v2/meters/instance?q.field=metadata.event_type&amp;q.value=compute.instance.exists"</screen>
      <para>You can specify multiple filters by using an array of queries (order matters):</para>
      <screen>$ curl -H 'X-Auth-Token: &lt;inserttokenhere&gt;' \
  "http://localhost:8777/v2/meters/instance"\
  "?q.field=metadata.event_type&amp;q.value=compute.instance.exists"\
  "&amp;q.field=timestamp&amp;q.op=gt&amp;q.value=2013-07-03T13:34:17"</screen>
      <para>A query to find the maximum value and standard deviation (<emphasis>max</emphasis>, <emphasis>stddev</emphasis>) of
                    the CPU utilization for a given instance (identified by <emphasis>resource_id</emphasis>):</para>
      <screen><?dbsuse-fo font-size="8pt"?>$ curl -H 'X-Auth-Token: &lt;inserttokenhere&gt;' \
  "http://localhost:8777/v2/meters/cpu_util/statistics?aggregate.func=max&amp;aggregate.func=stddev"\
  "&amp;q.field=resource_id&amp;q.op=eq&amp;q.value=64da755c-9120-4236-bee1-54acafe24980"</screen>
      <note>
        <para>If any of the requested aggregates are not supported by the storage driver,
                        a HTTP 400 error code will be returned along with an appropriate error
                        message.</para>
      </note>
      <para>JSON based example:</para>
      <screen><?dbsuse-fo font-size="8pt"?>$ curl -X GET -H "X-Auth-Token: &lt;inserttokenhere&gt;" -H "Content-Type: application/json"
-d '{"q": [{"field": "timestamp", "op": "ge", "value": "2014-04-01T13:34:17"}]}'
  http://localhost:8777/v2/meters/instance</screen>
      <para>JSON based example with multiple filters:</para>
      <screen><?dbsuse-fo font-size="8pt"?>$ curl -X GET -H "X-Auth-Token: &lt;inserttokenhere&gt;" -H "Content-Type: application/json"
 -d '{"q": [{"field": "timestamp", "op": "ge", "value": "2014-04-01T13:34:17"},
   {"field": "resource_id", "op": "eq", "value": "4da2b992-0dc3-4a7c-a19a-d54bf918de41"}]}'
   http://localhost:8777/v2/meters/instance</screen>
    </section>
    <section xml:id="functional-examples">
      <title>Functional examples</title>
      <para>The examples below are meant to help you understand how to query the
                    Ceilometer API to build custom meters report. The query parameters should
                    be encoded using one of the above methods, e.g. as the URL parameters or
                    as JSON encoded data passed to the GET request.</para>
      <para>Get the list of samples about instances running for June 2013:</para>
      <screen>GET /v2/meters/instance
q: [{"field": "timestamp",
     "op": "ge",
     "value": "2013-06-01T00:00:00"},
    {"field": "timestamp",
     "op": "lt",
      "value": "2013-07-01T00:00:00"}]</screen>
      <para>Get the list of samples about instances running for June 2013 for a particular
                    project:</para>
      <screen>GET /v2/meters/instance
q: [{"field": "timestamp",
     "op": "ge",
     "value": "2013-06-01T00:00:00"},
    {"field": "timestamp",
     "op": "lt",
     "value": "2013-07-01T00:00:00"},
    {"field": "project_id",
     "op": "eq",
     "value": "8d6057bc-5b90-4296-afe0-84acaa2ef909"}]</screen>
      <para>Now you may want to have statistics on the meters you are targeting.
                    Consider the following example where you are getting the list of samples
                    about CPU utilization of a given instance (identified by its <emphasis>resource_id</emphasis>)
                    running for June 2013:</para>
      <screen>GET /v2/meters/cpu_util
q: [{"field": "timestamp",
     "op": "ge",
     "value": "2013-06-01T00:00:00"},
    {"field": "timestamp",
     "op": "lt",
     "value": "2013-07-01T00:00:00"},
    {"field": "resource_id",
     "op": "eq",
     "value": "64da755c-9120-4236-bee1-54acafe24980"}]</screen>
      <para>You can have statistics on the list of samples requested (<emphasis>avg</emphasis>, <emphasis>sum</emphasis>, <emphasis>max</emphasis>,
                    <emphasis>min</emphasis>, <emphasis>count</emphasis>) computed on the full duration:</para>
      <screen>GET /v2/meters/cpu_util/statistics
q: [{"field": "timestamp",
     "op": "ge",
     "value": "2013-06-01T00:00:00"},
    {"field": "timestamp",
     "op": "lt",
     "value": "2013-07-01T00:00:00"},
    {"field": "resource_id",
     "op": "eq",
     "value": "64da755c-9120-4236-bee1-54acafe24980"}]</screen>
      <para>You may want to aggregate samples over a given period (10 minutes for
                    example) in order to get an array of the statistics computed on smaller
                    durations:</para>
      <screen>GET /v2/meters/cpu_util/statistics
q: [{"field": "timestamp",
     "op": "ge",
     "value": "2013-06-01T00:00:00"},
    {"field": "timestamp",
     "op": "lt",
     "value": "2013-07-01T00:00:00"},
    {"field": "resource_id",
     "op": "eq",
     "value": "64da755c-9120-4236-bee1-54acafe24980"}]
period: 600</screen>
      <para>The <emphasis>period</emphasis> parameter aggregates by time range. You can also aggregate by
                    field using the <emphasis>groupby</emphasis> parameter. Currently, the <emphasis>user_id</emphasis>, <emphasis>resource_id</emphasis>,
                    <emphasis>project_id</emphasis>, and <emphasis>source</emphasis> fields are supported. Below is an example that uses
                    a query filter and group by aggregation on <emphasis>project_id</emphasis> and <emphasis>resource_id</emphasis>:</para>
      <screen>GET /v2/meters/instance/statistics
q: [{"field": "user_id",
    "op": "eq",
    "value": "user-2"},
    {"field": "source",
     "op": "eq",
     "value": "source-1"}]
groupby: ["project_id", "resource_id"]</screen>
      <para>The statistics will be returned in a list, and each entry of the list will be
                    labeled with the group name. For the previous example, the first entry might
                    have <emphasis>project_id</emphasis> be “project-1” and <emphasis>resource_id</emphasis> be “resource-1”, the second
                    entry have <emphasis>project_id</emphasis> be “project-1” and <emphasis>resource_id</emphasis> be “resource-2”, and
                    so on.</para>
      <para>You can request both period and group by aggregation in the same query:</para>
      <screen>GET /v2/meters/instance/statistics
q: [{"field": "source",
    "op": "eq",
    "value": "source-1"}]
groupby: ["project_id"]
period: 7200</screen>
      <para>Note that period aggregation is applied first, followed by group by
                    aggregation. Order matters because the period aggregation determines the time
                    ranges for the statistics.</para>
      <para>Below is a real-life query:</para>
      <screen>GET /v2/meters/image/statistics
groupby: ["project_id", "resource_id"]</screen>
      <para>With the return values:</para>
      <screen>[{"count": 4, "duration_start": "2013-09-18T19:08:33", "min": 1.0,
  "max": 1.0, "duration_end": "2013-09-18T19:27:30", "period": 0,
  "sum": 4.0, "period_end": "2013-09-18T19:27:30", "duration": 1137.0,
  "period_start": "2013-09-18T19:08:33", "avg": 1.0,
  "groupby": {"project_id": "c2334f175d8b4cb8b1db49d83cecde78",
              "resource_id": "551f495f-7f49-4624-a34c-c422f2c5f90b"},
  "unit": "image"},
 {"count": 4, "duration_start": "2013-09-18T19:08:36", "min": 1.0,
  "max": 1.0, "duration_end": "2013-09-18T19:27:30", "period": 0,
  "sum": 4.0, "period_end": "2013-09-18T19:27:30", "duration": 1134.0,
  "period_start": "2013-09-18T19:08:36", "avg": 1.0,
  "groupby": {"project_id": "c2334f175d8b4cb8b1db49d83cecde78",
              "resource_id": "7c1157ed-cf30-48af-a868-6c7c3ad7b531"},
  "unit": "image"},
 {"count": 4, "duration_start": "2013-09-18T19:08:34", "min": 1.0,
  "max": 1.0, "duration_end": "2013-09-18T19:27:30", "period": 0,
  "sum": 4.0, "period_end": "2013-09-18T19:27:30", "duration": 1136.0,
  "period_start": "2013-09-18T19:08:34", "avg": 1.0,
  "groupby": {"project_id": "c2334f175d8b4cb8b1db49d83cecde78",
              "resource_id": "eaed9cf4-fc99-4115-93ae-4a5c37a1a7d7"},
  "unit": "image"}]</screen>
      <para>You can request specific aggregate functions as well. For example, if you only
                    want the average CPU utilization, the GET request would look like this:</para>
      <screen>GET /v2/meters/cpu_util/statistics?aggregate.func=avg</screen>
      <para>Use the same syntax to access the aggregate functions not in the standard set,
                    e.g. <emphasis>stddev</emphasis> and <emphasis>cardinality</emphasis>. A request for the standard deviation of CPU utilization would take the form:</para>
      <screen>GET /v2/meters/cpu_util/statistics?aggregate.func=stddev</screen>
      <para>And would give a response such as the example:</para>
      <screen>[{"aggregate": {"stddev":0.6858829535841072},
  "duration_start": "2014-01-30T11:13:23",
  "duration_end": "2014-01-31T16:07:13",
  "duration": 104030.0,
  "period": 0,
  "period_start": "2014-01-30T11:13:23",
  "period_end": "2014-01-31T16:07:13",
  "groupby": null,
  "unit" : "%"}]</screen>
      <para>The request syntax is similar for <emphasis>cardinality</emphasis> but with the aggregate.param
                    option provided. So, for example, if you want to know the number of distinct
                    tenants with images, you would do:</para>
      <screen>GET /v2/meters/image/statistics?aggregate.func=cardinality
                                  &amp;aggregate.param=project_id</screen>
      <para>For a more involved example, consider a requirement for determining, for some
                    tenant, the number of distinct instances (<emphasis>cardinality</emphasis>) as well as the total
                    number of instance samples (<emphasis>count</emphasis>). You might also want to see this
                    information with 15 minute long intervals. Then, using the <emphasis>period</emphasis> and
                    <emphasis>groupby</emphasis> options, a query would look like the following:</para>
      <screen>GET /v2/meters/instance/statistics?aggregate.func=cardinality
                                  &amp;aggregate.param=resource_id
                                  &amp;aggregate.func=count
                                  &amp;groupby=project_id&amp;period=900</screen>
      <para>This would give an example response of the form:</para>
      <screen>[{"count": 19,
  "aggregate": {"count": 19.0, "cardinality/resource_id": 3.0},
  "duration": 328.478029,
  "duration_start": "2014-01-31T10:00:41.823919",
  "duration_end": "2014-01-31T10:06:10.301948",
  "period": 900,
  "period_start": "2014-01-31T10:00:00",
  "period_end": "2014-01-31T10:15:00",
  "groupby": {"project_id": "061a5c91811e4044b7dc86c6136c4f99"},
  "unit": "instance"},
 {"count": 22,
  "aggregate": {"count": 22.0, "cardinality/resource_id": 4.0},
  "duration": 808.00384,
  "duration_start": "2014-01-31T10:15:15",
  "duration_end": "2014-01-31T10:28:43.003840",
  "period": 900,
  "period_start": "2014-01-31T10:15:00",
  "period_end": "2014-01-31T10:30:00",
  "groupby": {"project_id": "061a5c91811e4044b7dc86c6136c4f99"},
  "unit": "instance"},
 {"count": 2,
  "aggregate": {"count": 2.0, "cardinality/resource_id": 2.0},
  "duration": 0.0,
  "duration_start": "2014-01-31T10:35:15",
  "duration_end": "2014-01-31T10:35:15",
  "period": 900,
  "period_start": "2014-01-31T10:30:00",
  "period_end": "2014-01-31T10:45:00",
  "groupby": {"project_id": "061a5c91811e4044b7dc86c6136c4f99"},
  "unit": "instance"}]</screen>
      <para>If you want to retrieve all the instances (not the list of samples, but the
                    resource itself) that have been run during this month for a given project,
                    you should ask the resource endpoint for the list of resources (all types:
                    including storage, images, networking, …):</para>
      <screen>GET /v2/resources
q: [{"field": "timestamp",
     "op": "ge",
     "value": "2013-06-01T00:00:00"},
    {"field": "timestamp",
     "op": "lt",
     "value": "2013-07-01T00:00:00"},
    {"field": "project_id",
     "op": "eq",
     "value": "8d6057bc-5b90-4296-afe0-84acaa2ef909"}]</screen>
      <para>Then look for resources that have an <emphasis>instance</emphasis> meter linked to them. That
                    will indicate resources that have been measured as being instance. You can
                    then request their samples to have more detailed information, like their
                    state or their flavor:</para>
      <screen>GET /v2/meter/instance
q: [{"field": "timestamp",
     "op": "ge",
     "value": "2013-06-01T00:00:00"},
    {"field": "timestamp",
     "op": "lt",
     "value": "2013-07-01T00:00:00"},
    {"field": "resource_id",
     "op": "eq",
     "value": "64da755c-9120-4236-bee1-54acafe24980"},
    {"field": "project_id",
     "op": "eq",
     "value": "8d6057bc-5b90-4296-afe0-84acaa2ef909"}]</screen>
      <para>This will return a list of samples that have been recorded on this
                    particular resource. You can inspect them to retrieve information, such as
                    the instance state (check the <emphasis>metadata.vm_state</emphasis> field) or the instance
                    flavor (check the <emphasis>metadata.flavor</emphasis> field).
                    You can request nested metadata fields by using a dot to delimit the fields
                    (e.g. <emphasis>metadata.weighted_host.host</emphasis> for <emphasis>instance.scheduled</emphasis> meter)</para>
      <para>To retrieve only the 3 last samples of a meters, you can pass the <emphasis>limit</emphasis>
                    parameter to the query:</para>
      <screen>GET /v2/meter/instance
q: [{"field": "timestamp",
     "op": "ge",
     "value": "2013-06-01T00:00:00"},
    {"field": "timestamp",
     "op": "lt",
     "value": "2013-07-01T00:00:00"},
    {"field": "resource_id",
     "op": "eq",
     "value": "64da755c-9120-4236-bee1-54acafe24980"},
    {"field": "project_id",
     "op": "eq",
     "value": "8d6057bc-5b90-4296-afe0-84acaa2ef909"}]
limit: 3</screen>
      <para>This query would only return the last 3 samples.</para>
    </section>
    <section>
      <title>Functional example for Complex Query</title>
      <para>This example demonstrates how complex query filter expressions can be generated and sent
                    to the /v2/query/samples endpoint of Ceilometer API using POST request.</para>
      <para>To check for <emphasis>cpu_util</emphasis> samples reported between 18:00-18:15 or between 18:30 - 18:45
                    on a particular date (2013-12-01), where the utilization is between 23 and 26 percent,
                    but not exactly 25.12 percent, the following filter expression can be created:</para>
      <screen>{"and":
 [{"and":
  [{"=": {"counter_name": "cpu_util"}},
   {"&gt;": {"counter_volume": 0.23}},
   {"&lt;": {"counter_volume": 0.26}},
   {"not": {"=": {"counter_volume": 0.2512}}}]},
  {"or":
   [{"and":
    [{"&gt;": {"timestamp": "2013-12-01T18:00:00"}},
     {"&lt;": {"timestamp": "2013-12-01T18:15:00"}}]},
    {"and":
     [{"&gt;": {"timestamp": "2013-12-01T18:30:00"}},
      {"&lt;": {"timestamp": "2013-12-01T18:45:00"}}]}]}]}</screen>
      <para>Different sorting criteria can be defined for the query filter, for example the results
                    can be ordered in an ascending order by the <emphasis>counter_volume</emphasis> and descending order based on
                    the <emphasis>timestamp</emphasis>. The following order by expression has to be created for specifying this
                    criteria:</para>
      <screen>[{"counter_volume": "ASC"}, {"timestamp": "DESC"}]</screen>
      <para>As the current implementation accepts only string values as query filter and order by
                    definitions, the above defined expressions have to be converted to string values.
                    By adding a limit criteria to the request, which maximizes the number of returned samples
                    to four, the query looks like the following:</para>
      <screen><?dbsuse-fo font-size="8pt"?>{
"filter" : "{\"and\":[{\"and\": [{\"=\": {\"counter_name\": \"cpu_util\"}}, {\"&gt;\": {\"counter_volume\": 0.23}}, {\"&lt;\": {\"counter_volume\": 0.26}}, {\"not\": {\"=\": {\"counter_volume\": 0.2512}}}]}, {\"or\": [{\"and\": [{\"&gt;\": {\"timestamp\": \"2013-12-01T18:00:00\"}}, {\"&lt;\": {\"timestamp\": \"2013-12-01T18:15:00\"}}]}, {\"and\": [{\"&gt;\": {\"timestamp\": \"2013-12-01T18:30:00\"}}, {\"&lt;\": {\"timestamp\": \"2013-12-01T18:45:00\"}}]}]}]}",
"orderby" : "[{\"counter_volume\": \"ASC\"}, {\"timestamp\": \"DESC\"}]",
"limit" : 4
}</screen>
      <para>A query request looks like the following with curl:</para>
      <screen><?dbsuse-fo font-size="8pt"?>$ curl -X POST -H 'X-Auth-Token: &lt;inserttokenhere&gt;' -H 'Content-Type: application/json' \
  -d '&lt;insertyourqueryexpressionhere&gt;' \
   http://localhost:8777/v2/query/samples</screen>
    </section>
    <section>
      <title>User-defined data</title>
      <para>It is possible to add your own samples (created from data retrieved in any
                    way like monitoring agents on your instances) in Ceilometer to store
                    them and query on them. You can even get <emphasis>Statistics</emphasis> on your own inserted data.
                    By adding a <emphasis>Sample</emphasis> to a <emphasis>Resource</emphasis>, you create automatically the corresponding
                    <emphasis>Meter</emphasis> if it does not exist already. To achieve this, you have to POST a list
                    of one to many samples in JSON format:</para>
      <screen><?dbsuse-fo font-size="8pt"?>$ curl -X POST -H 'X-Auth-Token: &lt;inserttokenhere&gt;' -H 'Content-Type: application/json' \
  -d '&lt;insertyoursampleslisthere&gt;' \
  http://localhost:8777/v2/meters/&lt;insertyourmeternamehere&gt;</screen>
      <para>Fields <emphasis>source</emphasis>, <emphasis>timestamp</emphasis>, <emphasis>project_id</emphasis> and <emphasis>user_id</emphasis> are automatically
                    added if not present in the samples. Field <emphasis>message_id</emphasis> is not taken into
                    account if present and an internal value will be set.</para>
      <para>By default, samples posted via API will be placed on the notification bus and
                    processed by the notification agent.</para>
      <para>To avoid re-queuing the data, samples posted via API can be stored directly to
                    the storage backend verbatim by specifying a boolean flag ‘direct’ in the
                    request URL, like this:</para>
      <screen>POST /v2/meters/ram_util?direct=True</screen>
      <para>Samples posted this way will bypass pipeline processing.</para>
      <para>Here is an example showing how to add a sample for a <emphasis>ram_util</emphasis> meter (already
                    existing or not):</para>
      <screen>POST /v2/meters/ram_util
body: [
        {
          "counter_name": "ram_util",
          "user_id": "4790fbafad2e44dab37b1d7bfc36299b",
          "resource_id": "87acaca4-ae45-43ae-ac91-846d8d96a89b",
          "resource_metadata": {
            "display_name": "my_instance",
            "my_custom_metadata_1": "value1",
            "my_custom_metadata_2": "value2"
           },
          "counter_unit": "%",
          "counter_volume": 8.57762938230384,
          "project_id": "97f9a6aaa9d842fcab73797d3abb2f53",
          "counter_type": "gauge"
        }
      ]</screen>
      <para>You get back the same list containing your example completed with the missing
                    fields : <emphasis>source</emphasis> and <emphasis>timestamp</emphasis> in this case.</para>
    </section>
  </section>
</section>
