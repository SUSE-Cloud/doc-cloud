<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Guru Meditation Reports</title>
  <para>Ceilometer contains a mechanism whereby developers and system administrators
            can generate a report about the state of a running Ceilometer executable. This
            report is called a <emphasis>Guru Meditation Report</emphasis> (<emphasis>GMR</emphasis> for short).</para>
  <section>
    <title>Generating a GMR</title>
    <para>A <emphasis>GMR</emphasis> can be generated by sending the <emphasis>USR1</emphasis> signal to any Ceilometer process
                with support (see below).  The <emphasis>GMR</emphasis> will then be outputted standard error for
                that particular process.</para>
    <para>For example, suppose that <literal>ceilometer-polling</literal> has process id <literal>8675</literal>, and
                was run with <literal>2&gt;/var/log/ceilometer/ceilometer-polling.log</literal>.  Then,
                <literal>kill -USR1 8675</literal> will trigger the Guru Meditation report to be printed to
                <literal>/var/log/ceilometer/ceilometer-polling.log</literal>.</para>
  </section>
  <section>
    <title>Structure of a GMR</title>
    <para>The <emphasis>GMR</emphasis> is designed to be extensible; any particular executable may add its
                own sections.  However, the base <emphasis>GMR</emphasis> consists of several sections:</para>
    <variablelist>
      <varlistentry>
        <term>Package</term>
        <listitem>
          <para>Shows information about the package to which this process belongs, including
                            version information</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Threads</term>
        <listitem>
          <para>Shows stack traces and thread ids for each of the threads within this process</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Green Threads</term>
        <listitem>
          <para>Shows stack traces for each of the green threads within this process (green
                            threads don’t have thread ids)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Configuration</term>
        <listitem>
          <para>Lists all the configuration options currently accessible via the CONF object
                            for the current process</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Adding Support for GMRs to New Executables</title>
    <para>Adding support for a <emphasis>GMR</emphasis> to a given executable is fairly easy.</para>
    <para>First import the module (currently residing in oslo-incubator), as well as the
                Ceilometer version module:</para>
    <screen language="python">from oslo_reports import guru_meditation_report as gmr
from ceilometer import version</screen>
    <para>Then, register any additional sections (optional):</para>
    <screen language="python">TextGuruMeditation.register_section('Some Special Section',
                                    some_section_generator)</screen>
    <para>Finally (under main), before running the “main loop” of the executable (usually
                <literal>service.server(server)</literal> or something similar), register the <emphasis>GMR</emphasis> hook:</para>
    <screen language="python">TextGuruMeditation.setup_autorun(version)</screen>
  </section>
  <section>
    <title>Extending the GMR</title>
    <para>As mentioned above, additional sections can be added to the GMR for a
                particular executable.  For more information, see the inline documentation
                about oslo.reports:
                <link xlink:href="https://docs.openstack.org/oslo.reports/latest/">oslo.reports</link></para>
  </section>
</section>
