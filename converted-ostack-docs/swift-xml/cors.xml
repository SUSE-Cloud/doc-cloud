<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>CORS</title>
  <para><link xlink:href="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS">CORS</link> is a mechanism to allow code running in a browser (Javascript for
            example) make requests to a domain other then the one from where it originated.</para>
  <para>Swift supports CORS requests to containers and objects.</para>
  <para>CORS metadata is held on the container only. The values given apply to the
            container itself and all objects within it.</para>
  <para>The supported headers are,</para>
  <informaltable>
    <tgroup cols="2">
      <colspec colname="c1" colwidth="61.5*"/>
      <colspec colname="c2" colwidth="38.5*"/>
      <thead>
        <row>
          <entry>
            <para>Metadata</para>
          </entry>
          <entry>
            <para>Use</para>
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            <para>X-Container-Meta-Access-Control-Allow-Origin</para>
          </entry>
          <entry>
            <para>Origins to be allowed to
                                make Cross Origin Requests,
                                space separated.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>X-Container-Meta-Access-Control-Max-Age</para>
          </entry>
          <entry>
            <para>Max age for the Origin to
                                hold the preflight results.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>X-Container-Meta-Access-Control-Expose-Headers</para>
          </entry>
          <entry>
            <para>Headers exposed to the user
                                agent (e.g. browser) in the
                                actual request response.
                                Space separated.</para>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>Before a browser issues an actual request it may issue a <link xlink:href="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Preflighted_requests">preflight request</link>.
            The preflight request is an OPTIONS call to verify the Origin is allowed to
            make the request. The sequence of events are,</para>
  <itemizedlist>
    <listitem>
      <para>Browser makes OPTIONS request to Swift</para>
    </listitem>
    <listitem>
      <para>Swift returns 200/401 to browser based on allowed origins</para>
    </listitem>
    <listitem>
      <para>If 200, browser makes the “actual request” to Swift, i.e. PUT, POST, DELETE,
                    HEAD, GET</para>
    </listitem>
  </itemizedlist>
  <para>When a browser receives a response to an actual request it only exposes those
            headers listed in the <literal>Access-Control-Expose-Headers</literal> header. By default Swift
            returns the following values for this header,</para>
  <itemizedlist>
    <listitem>
      <para>“simple response headers” as listed on
                    <link xlink:href="http://www.w3.org/TR/cors/#simple-response-header"/></para>
    </listitem>
    <listitem>
      <para>the headers <literal>etag</literal>, <literal>x-timestamp</literal>, <literal>x-trans-id</literal>,
                    <literal>x-openstack-request-id</literal></para>
    </listitem>
    <listitem>
      <para>all metadata headers (<literal>X-Container-Meta-*</literal> for containers and
                    <literal>X-Object-Meta-*</literal> for objects)</para>
    </listitem>
    <listitem>
      <para>headers listed in <literal>X-Container-Meta-Access-Control-Expose-Headers</literal></para>
    </listitem>
  </itemizedlist>
  <section>
    <title>Sample Javascript</title>
    <para>To see some CORS Javascript in action download the <xref linkend="test-cors-page"/> (source
                below). Host it on a webserver and take note of the protocol and hostname
                (origin) you’ll be using to request the page, e.g. <link xlink:href="http://localhost"/>.</para>
    <para>Locate a container you’d like to query. Needless to say the Swift cluster
                hosting this container should have CORS support. Append the origin of the
                test page to the container’s <literal>X-Container-Meta-Access-Control-Allow-Origin</literal>
                header,:</para>
    <screen>curl -X POST -H 'X-Auth-Token: xxx' \
  -H 'X-Container-Meta-Access-Control-Allow-Origin: http://localhost' \
  http://192.168.56.3:8080/v1/AUTH_test/cont1</screen>
    <para>At this point the container is now accessible to CORS clients hosted on
                <link xlink:href="http://localhost"/>. Open the test CORS page in your browser.</para>
    <procedure>
      <step>
        <para>Populate the Token field</para>
      </step>
      <step>
        <para>Populate the URL field with the URL of either a container or object</para>
      </step>
      <step>
        <para>Select the request method</para>
      </step>
      <step>
        <para>Hit Submit</para>
      </step>
    </procedure>
    <para>Assuming the request succeeds you should see the response header and body. If
                something went wrong the response status will be 0.</para>
  </section>
  <section xml:id="test-cors-page">
    <title>Test CORS Page</title>
    <para>A sample cross-site test page is located in the project source tree
                <literal>doc/source/test-cors.html</literal>.</para>
    <screen><?dbsuse-fo font-size="8pt"?>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Test CORS&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;

    Token&lt;br&gt;&lt;input id="token" type="text" size="64"&gt;&lt;br&gt;&lt;br&gt;

    Method&lt;br&gt;
    &lt;select id="method"&gt;
        &lt;option value="GET"&gt;GET&lt;/option&gt;
        &lt;option value="HEAD"&gt;HEAD&lt;/option&gt;
        &lt;option value="POST"&gt;POST&lt;/option&gt;
        &lt;option value="DELETE"&gt;DELETE&lt;/option&gt;
        &lt;option value="PUT"&gt;PUT&lt;/option&gt;
    &lt;/select&gt;&lt;br&gt;&lt;br&gt;

    URL (Container or Object)&lt;br&gt;&lt;input id="url" size="64" type="text"&gt;&lt;br&gt;&lt;br&gt;

    &lt;input id="submit" type="button" value="Submit" onclick="submit(); return false;"&gt;

    &lt;pre id="response_headers"&gt;&lt;/pre&gt;
    &lt;p&gt;
    &lt;hr&gt;
    &lt;pre id="response_body"&gt;&lt;/pre&gt;

    &lt;script type="text/javascript"&gt;
      function submit() {
          var token = document.getElementById('token').value;
          var method = document.getElementById('method').value;
          var url = document.getElementById('url').value;

          document.getElementById('response_headers').textContent = null;
          document.getElementById('response_body').textContent = null;

          var request = new XMLHttpRequest();

          request.onreadystatechange = function (oEvent) {
              if (request.readyState == 4) {
                  responseHeaders = 'Status: ' + request.status;
                  responseHeaders = responseHeaders + '\nStatus Text: ' + request.statusText;
                  responseHeaders = responseHeaders + '\n\n' + request.getAllResponseHeaders();
                  document.getElementById('response_headers').textContent = responseHeaders;
                  document.getElementById('response_body').textContent = request.responseText;
              }
          }

          request.open(method, url);
          if (token != '') {
              // custom headers always trigger a pre-flight request
              request.setRequestHeader('X-Auth-Token', token);
          }
          request.send(null);
      }
    &lt;/script&gt;

  &lt;/body&gt;
&lt;/html&gt;
</screen>
  </section>
</section>
