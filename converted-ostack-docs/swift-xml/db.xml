<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Account DB and Container DB</title>
  <section>
    <title>DB</title>
    <para>Database code for Swift</para>
    <variablelist>
      <varlistentry xml:id="swift.common.db.BROKER_TIMEOUT">
        <term>
          <literal>swift.common.db.BROKER_TIMEOUT</literal>
        </term>
        <listitem>
          <para>Timeout for trying to connect to a DB</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.DB_PREALLOCATION">
        <term>
          <literal>swift.common.db.DB_PREALLOCATION</literal>
        </term>
        <listitem>
          <para>Whether calls will be made to preallocate disk space for database files.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.DatabaseAlreadyExists">
        <term>
          <literal>swift.common.db.DatabaseAlreadyExists</literal>
        </term>
        <listitem>
          <para>Bases: <literal>sqlite3.DatabaseError</literal></para>
          <para>More friendly error messages for DB Errors.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.DatabaseBroker">
        <term>
          <literal>swift.common.db.DatabaseBroker</literal>
        </term>
        <listitem>
          <para>Bases: <literal>object</literal></para>
          <para>Encapsulates working with a database.</para>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.delete_db">
              <term>
                <property>swift.common.db.DatabaseBroker.delete_db</property>
              </term>
              <listitem>
                <para>Mark the DB as deleted</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.get">
              <term>
                <property>swift.common.db.DatabaseBroker.get</property>
              </term>
              <listitem>
                <para>Use with the “with” statement; returns a database connection.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.get_info">
              <term>
                <property>swift.common.db.DatabaseBroker.get_info</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.get_items_since">
              <term>
                <property>swift.common.db.DatabaseBroker.get_items_since</property>
              </term>
              <listitem>
                <para>Get a list of objects in the database between start and end.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.get_max_row">
              <term>
                <property>swift.common.db.DatabaseBroker.get_max_row</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.get_raw_metadata">
              <term>
                <property>swift.common.db.DatabaseBroker.get_raw_metadata</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.get_replication_info">
              <term>
                <property>swift.common.db.DatabaseBroker.get_replication_info</property>
              </term>
              <listitem>
                <para>Get information about the DB required for replication.</para>
                <variablelist>
                  <varlistentry>
                    <term>Note:: get_info’s &lt;db_contains_type&gt;_count is translated to just</term>
                    <listitem>
                      <para>“count” and metadata is the raw string.</para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.get_sync">
              <term>
                <property>swift.common.db.DatabaseBroker.get_sync</property>
              </term>
              <listitem>
                <para>Gets the most recent sync point for a server from the sync table.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.get_syncs">
              <term>
                <property>swift.common.db.DatabaseBroker.get_syncs</property>
              </term>
              <listitem>
                <para>Get a serialized copy of the sync table.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.initialize">
              <term>
                <property>swift.common.db.DatabaseBroker.initialize</property>
              </term>
              <listitem>
                <para>Create the DB</para>
                <para>The storage_policy_index is passed through to the subclass’s
                                <literal>_initialize</literal> method.  It is ignored by <literal>AccountBroker</literal>.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.is_deleted">
              <term>
                <property>swift.common.db.DatabaseBroker.is_deleted</property>
              </term>
              <listitem>
                <para>Check if the DB is considered to be deleted.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.lock">
              <term>
                <property>swift.common.db.DatabaseBroker.lock</property>
              </term>
              <listitem>
                <para>Use with the “with” statement; locks a database.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.make_tuple_for_pickle">
              <term>
                <property>swift.common.db.DatabaseBroker.make_tuple_for_pickle</property>
              </term>
              <listitem>
                <para>Turn this db record dict into the format this service uses for
                                pending pickles.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.merge_syncs">
              <term>
                <property>swift.common.db.DatabaseBroker.merge_syncs</property>
              </term>
              <listitem>
                <para>Merge a list of sync points with the incoming sync table.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.merge_timestamps">
              <term>
                <property>swift.common.db.DatabaseBroker.merge_timestamps</property>
              </term>
              <listitem>
                <para>Used in replication to handle updating timestamps.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.metadata">
              <term>
                <property>swift.common.db.DatabaseBroker.metadata</property>
              </term>
              <listitem>
                <para>Returns the metadata dict for the database. The metadata dict values
                                are tuples of (value, timestamp) where the timestamp indicates when
                                that key was set to that value.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.newid">
              <term>
                <property>swift.common.db.DatabaseBroker.newid</property>
              </term>
              <listitem>
                <para>Re-id the database.  This should be called after an rsync.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.possibly_quarantine">
              <term>
                <property>swift.common.db.DatabaseBroker.possibly_quarantine</property>
              </term>
              <listitem>
                <para>Checks the exception info to see if it indicates a quarantine situation
                                (malformed or corrupted database). If not, the original exception will
                                be reraised. If so, the database will be quarantined and a new
                                sqlite3.DatabaseError will be raised indicating the action taken.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.put_record">
              <term>
                <property>swift.common.db.DatabaseBroker.put_record</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.reclaim">
              <term>
                <property>swift.common.db.DatabaseBroker.reclaim</property>
              </term>
              <listitem>
                <para>Delete rows from the db_contains_type table that are marked deleted
                                and whose created_at timestamp is &lt; age_timestamp.  Also deletes rows
                                from incoming_sync and outgoing_sync where the updated_at timestamp is
                                &lt; sync_timestamp.</para>
                <para>In addition, this calls the DatabaseBroker’s <literal>_reclaim()</literal> method.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.update_metadata">
              <term>
                <property>swift.common.db.DatabaseBroker.update_metadata</property>
              </term>
              <listitem>
                <para>Updates the metadata dict for the database. The metadata dict values
                                are tuples of (value, timestamp) where the timestamp indicates when
                                that key was set to that value. Key/values will only be overwritten if
                                the timestamp is newer. To delete a key, set its value to (‘’,
                                timestamp). These empty keys will eventually be removed by
                                <xref linkend="swift.common.db.DatabaseBroker.reclaim"/></para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.update_put_timestamp">
              <term>
                <property>swift.common.db.DatabaseBroker.update_put_timestamp</property>
              </term>
              <listitem>
                <para>Update the put_timestamp.  Only modifies it if it is greater than
                                the current timestamp.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.update_status_changed_at">
              <term>
                <property>swift.common.db.DatabaseBroker.update_status_changed_at</property>
              </term>
              <listitem>
                <para>Update the status_changed_at field in the stat table.  Only
                                modifies status_changed_at if the timestamp is greater than the
                                current status_changed_at timestamp.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.DatabaseBroker.validate_metadata">
              <term>
                <property>swift.common.db.DatabaseBroker.validate_metadata</property>
              </term>
              <listitem>
                <para>Validates that metadata falls within acceptable limits.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.DatabaseConnectionError">
        <term>
          <literal>swift.common.db.DatabaseConnectionError</literal>
        </term>
        <listitem>
          <para>Bases: <literal>sqlite3.DatabaseError</literal></para>
          <para>More friendly error messages for DB Errors.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.GreenDBConnection">
        <term>
          <literal>swift.common.db.GreenDBConnection</literal>
        </term>
        <listitem>
          <para>Bases: <literal>sqlite3.Connection</literal></para>
          <para>SQLite DB Connection handler that plays well with eventlet.</para>
          <variablelist>
            <varlistentry xml:id="swift.common.db.GreenDBConnection.commit">
              <term>
                <property>swift.common.db.GreenDBConnection.commit</property>
              </term>
              <listitem>
                <para>Commit the current transaction.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db.GreenDBConnection.cursor">
              <term>
                <property>swift.common.db.GreenDBConnection.cursor</property>
              </term>
              <listitem>
                <para>Return a cursor for the connection.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.GreenDBCursor">
        <term>
          <literal>swift.common.db.GreenDBCursor</literal>
        </term>
        <listitem>
          <para>Bases: <literal>sqlite3.Cursor</literal></para>
          <para>SQLite Cursor handler that plays well with eventlet.</para>
          <variablelist>
            <varlistentry xml:id="swift.common.db.GreenDBCursor.execute">
              <term>
                <property>swift.common.db.GreenDBCursor.execute</property>
              </term>
              <listitem>
                <para>Executes a SQL statement.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.PICKLE_PROTOCOL">
        <term>
          <literal>swift.common.db.PICKLE_PROTOCOL</literal>
        </term>
        <listitem>
          <para>Pickle protocol to use</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.chexor">
        <term>
          <function>swift.common.db.chexor</function>
        </term>
        <listitem>
          <para>Each entry in the account and container databases is XORed by the 128-bit
                        hash on insert or delete.  This serves as a rolling, order-independent hash
                        of the contents. (check + XOR)</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.dict_factory">
        <term>
          <function>swift.common.db.dict_factory</function>
        </term>
        <listitem>
          <para>This should only be used when you need a real dict,
                        i.e. when you’re going to serialize the results.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.get_db_connection">
        <term>
          <function>swift.common.db.get_db_connection</function>
        </term>
        <listitem>
          <para>Returns a properly configured SQLite database connection.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.utf8encode">
        <term>
          <function>swift.common.db.utf8encode</function>
        </term>
        <listitem>
          <para/>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db.utf8encodekeys">
        <term>
          <function>swift.common.db.utf8encodekeys</function>
        </term>
        <listitem>
          <para/>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>DB replicator</title>
    <variablelist>
      <varlistentry xml:id="swift.common.db_replicator.ReplConnection">
        <term>
          <literal>swift.common.db_replicator.ReplConnection</literal>
        </term>
        <listitem>
          <para>Bases: <xref linkend="swift.common.bufferedhttp.BufferedHTTPConnection"/></para>
          <para>Helper to simplify REPLICATEing to a remote server.</para>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.ReplConnection.replicate">
              <term>
                <property>swift.common.db_replicator.ReplConnection.replicate</property>
              </term>
              <listitem>
                <para>Make an HTTP REPLICATE request</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db_replicator.Replicator">
        <term>
          <literal>swift.common.db_replicator.Replicator</literal>
        </term>
        <listitem>
          <para>Bases: <literal>swift.common.daemon.Daemon</literal></para>
          <para>Implements the logic for directing db replication.</para>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.Replicator.delete_db">
              <term>
                <property>swift.common.db_replicator.Replicator.delete_db</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.Replicator.extract_device">
              <term>
                <property>swift.common.db_replicator.Replicator.extract_device</property>
              </term>
              <listitem>
                <para>Extract the device name from an object path.  Returns “UNKNOWN” if the
                                path could not be extracted successfully for some reason.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.Replicator.report_up_to_date">
              <term>
                <property>swift.common.db_replicator.Replicator.report_up_to_date</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.Replicator.run_forever">
              <term>
                <property>swift.common.db_replicator.Replicator.run_forever</property>
              </term>
              <listitem>
                <para>Replicate dbs under the given root in an infinite loop.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.Replicator.run_once">
              <term>
                <property>swift.common.db_replicator.Replicator.run_once</property>
              </term>
              <listitem>
                <para>Run a replication pass once.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db_replicator.ReplicatorRpc">
        <term>
          <literal>swift.common.db_replicator.ReplicatorRpc</literal>
        </term>
        <listitem>
          <para>Bases: <literal>object</literal></para>
          <para>Handle Replication RPC calls.  TODO(redbo): document please :)</para>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.ReplicatorRpc.complete_rsync">
              <term>
                <property>swift.common.db_replicator.ReplicatorRpc.complete_rsync</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.ReplicatorRpc.debug_timing">
              <term>
                <property>swift.common.db_replicator.ReplicatorRpc.debug_timing</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.ReplicatorRpc.dispatch">
              <term>
                <property>swift.common.db_replicator.ReplicatorRpc.dispatch</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.ReplicatorRpc.merge_items">
              <term>
                <property>swift.common.db_replicator.ReplicatorRpc.merge_items</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.ReplicatorRpc.merge_syncs">
              <term>
                <property>swift.common.db_replicator.ReplicatorRpc.merge_syncs</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.ReplicatorRpc.rsync_then_merge">
              <term>
                <property>swift.common.db_replicator.ReplicatorRpc.rsync_then_merge</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.db_replicator.ReplicatorRpc.sync">
              <term>
                <property>swift.common.db_replicator.ReplicatorRpc.sync</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db_replicator.quarantine_db">
        <term>
          <function>swift.common.db_replicator.quarantine_db</function>
        </term>
        <listitem>
          <para>In the case that a corrupt file is found, move it to a quarantined area to
                        allow replication to fix it.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.db_replicator.roundrobin_datadirs">
        <term>
          <function>swift.common.db_replicator.roundrobin_datadirs</function>
        </term>
        <listitem>
          <para>Generator to walk the data dirs in a round robin manner, evenly
                        hitting each device on the system, and yielding any .db files
                        found (in their proper places). The partitions within each data
                        dir are walked randomly, however.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</section>
