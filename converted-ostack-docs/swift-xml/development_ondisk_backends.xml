<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Pluggable On-Disk Back-end APIs</title>
  <para>The internal REST API used between the proxy server and the account, container
            and object server is almost identical to public Swift REST API, but with a few
            internal extensions (for example, update an account with a new container).</para>
  <para>The pluggable back-end APIs for the three REST API servers (account,
            container, object) abstracts the needs for servicing the various REST APIs
            from the details of how data is laid out and stored on-disk.</para>
  <para>The APIs are documented in the reference implementations for all three
            servers. For historical reasons, the object server backend reference
            implementation module is named <literal>diskfile</literal>, while the account and container
            server backend reference implementation modules are named appropriately.</para>
  <para>This API is still under development and not yet finalized.</para>
  <section>
    <title>Back-end API for Account Server REST APIs</title>
    <para>Pluggable Back-end for Account Server</para>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <para>Encapsulates working with an account database.</para>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Create account_stat table which is specific to the account DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Create container table which is specific to the account DB.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Create policy_stat table which is specific to the account DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Check if the account DB is empty.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Get global data for the account.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Get global policy stats for the account.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Only returns true if the status field is set to DELETED.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Get a list of containers sorted by name starting at marker onward, up
                                to limit entries. Entries will begin with the prefix and will not have
                                the delimiter after the prefix.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Turn this db record dict into the format this service uses for
                                pending pickles.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Merge items into the container table.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Create a container with the given attributes.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Back-end API for Container Server REST APIs</title>
    <para>Pluggable Back-ends for Container Server</para>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <para>Encapsulates working with a container database.</para>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Create the container_info table which is specific to the container DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.
                                Also creates the container_stat view.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Create the object table which is specific to the container DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Create policy_stat table.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Mark an object deleted.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Check if container DB is empty.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Get global data for the container.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Get the is_deleted status and info for the container.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Get a list of objects which are in a storage policy different
                                from the container’s storage policy.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Get a list of objects sorted by name starting at marker onward, up
                                to limit entries.  Entries will begin with the prefix and will not
                                have the delimiter after the prefix.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Turn this db record dict into the format this service uses for
                                pending pickles.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Merge items into the object table.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Creates an object in the DB with its metadata.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Update reported stats, available with container’s <literal>get_info</literal>.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Update the container_stat policy_index and status_changed_at.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Compare the data and meta related timestamps of a new object item with
                        the timestamps of an existing object record, and update the new item
                        with data and/or meta related attributes from the existing record if
                        their timestamps are newer.</para>
          <para>The multiple timestamps are encoded into a single string for storing
                        in the ‘created_at’ column of the objects db table.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Back-end API for Object Server REST APIs</title>
    <para>Disk File Interface for the Swift Object Server</para>
    <para>The <literal>DiskFile</literal>, <literal>DiskFileWriter</literal> and <literal>DiskFileReader</literal> classes combined define
                the on-disk abstraction layer for supporting the object server REST API
                interfaces (excluding <literal>REPLICATE</literal>). Other implementations wishing to provide
                an alternative backend for the object server must implement the three
                classes. An example alternative implementation can be found in the
                <literal>mem_server.py</literal> and <literal>mem_diskfile.py</literal> modules along size this one.</para>
    <para>The <literal>DiskFileManager</literal> is a reference implemenation specific class and is not
                part of the backend API.</para>
    <para>The remaining methods in this module are considered implementation specific and
                are also not considered part of the backend API.</para>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <para>Represents an object location to be audited.</para>
          <para>Other than being a bucket of data, the only useful thing this does is
                        stringify to a filesystem path so the auditor’s logs look okay.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <para>Manage object files.</para>
          <para>This specific implementation manages object files on a disk formatted with
                        a POSIX-compliant file system that supports extended attributes as
                        metadata on a file or directory.</para>
          <note>
            <para>The arguments to the constructor are considered implementation
                            specific. The API does not define the constructor arguments.</para>
            <para>The following path format is used for data file locations:
                            &lt;devices_path/&lt;device_dir&gt;/&lt;datadir&gt;/&lt;partdir&gt;/&lt;suffixdir&gt;/&lt;hashdir&gt;/
                            &lt;datafile&gt;.&lt;ext&gt;</para>
          </note>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Context manager to create a file. We create a temporary file first, and
                                then return a DiskFileWriter object to encapsulate the state.</para>
                <note>
                  <para>An implementation is not required to perform on-disk
                                    preallocations even if the parameter is specified. But if it does
                                    and it fails, it must raise a <literal>DiskFileNoSpace</literal> exception.</para>
                </note>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Delete the object.</para>
                <para>This implementation creates a tombstone file using the given
                                timestamp, and removes any older versions of the object file. Any
                                file that has an older timestamp than timestamp will be deleted.</para>
                <note>
                  <para>An implementation is free to use or ignore the timestamp
                                    parameter.</para>
                </note>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Provides the timestamp of the newest data file found in the object
                                directory.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Provide the datafile metadata for a previously opened object as a
                                dictionary. This is metadata that was included when the object was
                                first PUT, and does not include metadata set by any subsequent POST.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Provide the metadata for a previously opened object as a dictionary.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Provide the metafile metadata for a previously opened object as a
                                dictionary. This is metadata that was written by a POST and does not
                                include any persistent metadata that was set by the original PUT.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Open the object.</para>
                <para>This implementation opens the data file representing the object, reads
                                the associated metadata in the extended attributes, additionally
                                combining metadata from fast-POST <literal>.meta</literal> files.</para>
                <note>
                  <para>An implementation is allowed to raise any of the following
                                    exceptions, but is only required to raise <literal>DiskFileNotExist</literal> when
                                    the object representation does not exist.</para>
                </note>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Return the metadata for an object without requiring the caller to open
                                the object first.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Return a <xref linkend="swift.common.swob.Response"/> class compatible
                                “<literal>app_iter</literal>” object as defined by
                                <xref linkend="swift.obj.diskfile.DiskFileReader"/>.</para>
                <para>For this implementation, the responsibility of closing the open file
                                is passed to the <xref linkend="swift.obj.diskfile.DiskFileReader"/> object.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Write a block of metadata to an object without requiring the caller to
                                create the object first. Supports fast-POST behavior semantics.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <para>Management class for devices, providing common place for shared parameters
                        and methods not provided by the DiskFile class (which primarily services
                        the object server REST API layer).</para>
          <para>The <literal>get_diskfile()</literal> method is how this implementation creates a <literal>DiskFile</literal>
                        object.</para>
          <note>
            <para>This class is reference implementation specific and not part of the
                            pluggable on-disk backend API.</para>
          </note>
          <note>
            <para>TODO(portante): Not sure what the right name to recommend here, as
                            “manager” seemed generic enough, though suggestions are welcome.</para>
          </note>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Clean up on-disk files that are obsolete and gather the set of valid
                                on-disk files for an object.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Construct the path to a device without checking if it is mounted.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Return the path to a device, first checking to see if either it
                                is a proper mount point, or at least a directory depending on
                                the mount_check configuration option.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Returns a BaseDiskFile instance for an object based on the object’s
                                partition, path parts and policy.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Returns a BaseDiskFile instance for an object at the given
                                AuditLocation.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Returns a DiskFile instance for an object at the given
                                object_hash. Just in case someone thinks of refactoring, be
                                sure DiskFileDeleted is <emphasis>not</emphasis> raised, but the DiskFile
                                instance representing the tombstoned object is returned
                                instead.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem/>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Given a simple list of files names, determine the files that constitute
                                a valid fileset i.e. a set of files that defines the state of an
                                object, and determine the files that are obsolete and could be deleted.
                                Note that some files may fall into neither category.</para>
                <para>If a file is considered part of a valid fileset then its info dict will
                                be added to the results dict, keyed by &lt;extension&gt;_info. Any files that
                                are no longer required will have their info dicts added to a list
                                stored under the key ‘obsolete’.</para>
                <para>The results dict will always contain entries with keys ‘ts_file’,
                                ‘data_file’ and ‘meta_file’. Their values will be the fully qualified
                                path to a file of the corresponding type if there is such a file in the
                                valid fileset, or None.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Returns filename for given timestamp.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Yield an AuditLocation for all objects stored under device_dirs.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Parse an on disk file name.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Write data describing a container update notification to a pickle file
                                in the async_pending directory.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>A context manager that will lock on the device given, if
                                configured to do so.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Yields tuples of (hash_only, timestamps) for object
                                information stored for the given device, partition, and
                                (optionally) suffixes. If suffixes is None, all stored
                                suffixes will be searched for object hashes. Note that if
                                suffixes is not None but empty, such as [], then nothing will
                                be yielded.</para>
                <para>timestamps is a dict which may contain items mapping:</para>
                <itemizedlist>
                  <listitem>
                    <para>ts_data -&gt; timestamp of data or tombstone file,</para>
                  </listitem>
                  <listitem>
                    <para>ts_meta -&gt; timestamp of meta file, if one exists</para>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term>ts_ctype -&gt; timestamp of meta file containing most recent</term>
                        <listitem>
                          <para>content-type value, if one exists</para>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                </itemizedlist>
                <para>where timestamps are instances of
                                <xref linkend="swift.common.utils.Timestamp"/></para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Yields tuples of (full_path, suffix_only) for suffixes stored
                                on the given device and partition.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <para>Encapsulation of the WSGI read context for servicing GET REST API
                        requests. Serves as the context manager object for the
                        <xref linkend="swift.obj.diskfile.DiskFile"/> class’s
                        <literal>swift.obj.diskfile.DiskFile.reader()</literal> method.</para>
          <note>
            <para>The quarantining behavior of this method is considered implementation
                            specific, and is not required of the API.</para>
          </note>
          <note>
            <para>The arguments to the constructor are considered implementation
                            specific. The API does not define the constructor arguments.</para>
          </note>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Returns an iterator over the data file for range (start, stop)</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Returns an iterator over the data file for a set of ranges</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Close the open file handle if present.</para>
                <para>For this specific implementation, this method will handle quarantining
                                the file if necessary.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Does some magic with splice() and tee() to move stuff from disk to
                                network without ever touching userspace.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <para>Encapsulation of the write context for servicing PUT REST API
                        requests. Serves as the context manager object for the
                        <xref linkend="swift.obj.diskfile.DiskFile"/> class’s
                        <literal>swift.obj.diskfile.DiskFile.create()</literal> method.</para>
          <note>
            <para>It is the responsibility of the
                            <literal>swift.obj.diskfile.DiskFile.create()</literal> method context manager to
                            close the open file descriptor.</para>
          </note>
          <note>
            <para>The arguments to the constructor are considered implementation
                            specific. The API does not define the constructor arguments.</para>
          </note>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Perform any operations necessary to mark the object as durable. For
                                replication policy type this is a no-op.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Finalize writing the file on disk.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Write a chunk of data to disk. All invocations of this method must
                                come before invoking the :func:</para>
                <para>For this implementation, the data is written into a temporary file.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>alias of <xref linkend="swift.obj.diskfile.DiskFileReader"/></para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>alias of <xref linkend="swift.obj.diskfile.DiskFileWriter"/></para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>alias of <xref linkend="swift.obj.diskfile.DiskFile"/></para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <para/>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Finalize writing the file on disk.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Provides the timestamp of the newest durable file found in the object
                                directory.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Provides information about all fragments that were found in the object
                                directory, including fragments without a matching durable file, and
                                including any fragment chosen to construct the opened diskfile.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Remove a tombstone file matching the specified timestamp or
                                datafile matching the specified timestamp and fragment index
                                from the object directory.</para>
                <para>This provides the EC reconstructor/ssync process with a way to
                                remove a tombstone or fragment from a handoff node after
                                reverting it to its primary node.</para>
                <para>The hash will be invalidated, and if empty or invalid the
                                hsh_path will be removed on next cleanup_ondisk_files.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>alias of <xref linkend="swift.obj.diskfile.ECDiskFileReader"/></para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>alias of <xref linkend="swift.obj.diskfile.ECDiskFileWriter"/></para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>alias of <xref linkend="swift.obj.diskfile.ECDiskFile"/></para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Returns the EC specific filename for given timestamp.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Returns timestamp(s) and other info extracted from a policy specific
                                file name. For EC policy the data file name includes a fragment index
                                and possibly a durable marker, both of which which must be stripped off
                                to retrieve the timestamp.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Return int representation of frag_index, or raise a DiskFileError if
                                frag_index is not a whole number.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <para/>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <literal/>
        </term>
        <listitem>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>Finalize put by renaming the object data file to include a durable
                                marker. We do this for EC policy because it requires a 2-phase put
                                commit confirmation.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry>
              <term>
                <property/>
              </term>
              <listitem>
                <para>The only difference between this method and the replication policy
                                DiskFileWriter method is adding the frag index to the metadata.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Take what’s in hashes.pkl and hashes.invalid, combine them, write the
                        result back to hashes.pkl, and clear out hashes.invalid.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Extracts the policy for an object (based on the name of the objects
                        directory) given the device-relative path to the object. Returns None in
                        the event that the path is malformed in some way.</para>
          <para>The device-relative path is everything after the mount point; for example:</para>
          <variablelist>
            <varlistentry>
              <term>/srv/node/d42/objects-5/30/179/</term>
              <listitem>
                <para>485dc017205a81df3af616d917c90179/1401811134.873649.data</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>would have device-relative path:</para>
          <para>objects-5/30/179/485dc017205a81df3af616d917c90179/1401811134.873649.data</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Helper function to construct a string from a base and the policy.
                        Used to encode the policy index into either a file name or a
                        directory name by various modules.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Helper function to construct a string from a base and the policy.
                        Used to encode the policy index into either a file name or a
                        directory name by various modules.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Given the device path, policy, and partition, returns the full
                        path to the partition</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Helper function to construct a string from a base and the policy.
                        Used to encode the policy index into either a file name or a
                        directory name by various modules.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Invalidates the hash for a suffix_dir in the partition’s hashes file.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Given a devices path (e.g. “/srv/node”), yield an AuditLocation for all
                        objects stored under that directory if device_dirs isn’t set.  If
                        device_dirs is set, only yield AuditLocation for the objects under the
                        entries in device_dirs. The AuditLocation only knows the path to the hash
                        directory, not to the .data file therein (if any). This is to avoid a
                        double listdir(hash_dir); the DiskFile object will always do one, so
                        we don’t.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>In the case that a file is corrupted, move it to a quarantined
                        area to allow replication to fix it.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Read the existing hashes.pkl</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Helper function to read the pickled metadata from an object file.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Hard-links a file located in target_path using the second path
                        new_target_path. Creates intermediate directories if required.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Wrapper to attach module level functions to base class.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Write hashes to hashes.pkl</para>
          <para>The updated key is added to hashes before it is written.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>
          <function/>
        </term>
        <listitem>
          <para>Helper function to write pickled metadata for an object file.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</section>
