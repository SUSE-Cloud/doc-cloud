<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Account</title>
  <section xml:id="account-auditor">
    <title>Account Auditor</title>
    <variablelist>
      <varlistentry xml:id="swift.account.auditor.AccountAuditor">
        <term>
          <literal>swift.account.auditor.AccountAuditor</literal>
        </term>
        <listitem>
          <para>Bases: <literal>swift.common.daemon.Daemon</literal></para>
          <para>Audit accounts.</para>
          <variablelist>
            <varlistentry xml:id="swift.account.auditor.AccountAuditor.account_audit">
              <term>
                <property>swift.account.auditor.AccountAuditor.account_audit</property>
              </term>
              <listitem>
                <para>Audits the given account path</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.auditor.AccountAuditor.run_forever">
              <term>
                <property>swift.account.auditor.AccountAuditor.run_forever</property>
              </term>
              <listitem>
                <para>Run the account audit until stopped.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.auditor.AccountAuditor.run_once">
              <term>
                <property>swift.account.auditor.AccountAuditor.run_once</property>
              </term>
              <listitem>
                <para>Run the account audit once.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.auditor.AccountAuditor.validate_per_policy_counts">
              <term>
                <property>swift.account.auditor.AccountAuditor.validate_per_policy_counts</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.account.auditor.random">
        <term>
          <function>swift.account.auditor.random</function>
        </term>
        <listitem>
          <para/>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Account Backend</title>
    <para>Pluggable Back-end for Account Server</para>
    <variablelist>
      <varlistentry xml:id="swift.account.backend.AccountBroker">
        <term>
          <literal>swift.account.backend.AccountBroker</literal>
        </term>
        <listitem>
          <para>Bases: <xref linkend="swift.common.db.DatabaseBroker"/></para>
          <para>Encapsulates working with an account database.</para>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.create_account_stat_table">
              <term>
                <property>swift.account.backend.AccountBroker.create_account_stat_table</property>
              </term>
              <listitem>
                <para>Create account_stat table which is specific to the account DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.create_container_table">
              <term>
                <property>swift.account.backend.AccountBroker.create_container_table</property>
              </term>
              <listitem>
                <para>Create container table which is specific to the account DB.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.create_policy_stat_table">
              <term>
                <property>swift.account.backend.AccountBroker.create_policy_stat_table</property>
              </term>
              <listitem>
                <para>Create policy_stat table which is specific to the account DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.db_contains_type">
              <term>
                <property>swift.account.backend.AccountBroker.db_contains_type</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.db_reclaim_timestamp">
              <term>
                <property>swift.account.backend.AccountBroker.db_reclaim_timestamp</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.db_type">
              <term>
                <property>swift.account.backend.AccountBroker.db_type</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.empty">
              <term>
                <property>swift.account.backend.AccountBroker.empty</property>
              </term>
              <listitem>
                <para>Check if the account DB is empty.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.get_db_version">
              <term>
                <property>swift.account.backend.AccountBroker.get_db_version</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.get_info">
              <term>
                <property>swift.account.backend.AccountBroker.get_info</property>
              </term>
              <listitem>
                <para>Get global data for the account.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.get_policy_stats">
              <term>
                <property>swift.account.backend.AccountBroker.get_policy_stats</property>
              </term>
              <listitem>
                <para>Get global policy stats for the account.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.is_status_deleted">
              <term>
                <property>swift.account.backend.AccountBroker.is_status_deleted</property>
              </term>
              <listitem>
                <para>Only returns true if the status field is set to DELETED.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.list_containers_iter">
              <term>
                <property>swift.account.backend.AccountBroker.list_containers_iter</property>
              </term>
              <listitem>
                <para>Get a list of containers sorted by name starting at marker onward, up
                                to limit entries. Entries will begin with the prefix and will not have
                                the delimiter after the prefix.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.make_tuple_for_pickle">
              <term>
                <property>swift.account.backend.AccountBroker.make_tuple_for_pickle</property>
              </term>
              <listitem>
                <para>Turn this db record dict into the format this service uses for
                                pending pickles.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.merge_items">
              <term>
                <property>swift.account.backend.AccountBroker.merge_items</property>
              </term>
              <listitem>
                <para>Merge items into the container table.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.backend.AccountBroker.put_container">
              <term>
                <property>swift.account.backend.AccountBroker.put_container</property>
              </term>
              <listitem>
                <para>Create a container with the given attributes.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="account-reaper">
    <title>Account Reaper</title>
    <variablelist>
      <varlistentry xml:id="swift.account.reaper.AccountReaper">
        <term>
          <literal>swift.account.reaper.AccountReaper</literal>
        </term>
        <listitem>
          <para>Bases: <literal>swift.common.daemon.Daemon</literal></para>
          <para>Removes data from status=DELETED accounts. These are accounts that have
                        been asked to be removed by the reseller via services
                        remove_storage_account XMLRPC call.</para>
          <para>The account is not deleted immediately by the services call, but instead
                        the account is simply marked for deletion by setting the status column in
                        the account_stat table of the account database. This account reaper scans
                        for such accounts and removes the data in the background. The background
                        deletion process will occur on the primary account server for the account.</para>
          <para>See the etc/account-server.conf-sample for information on the possible
                        configuration parameters.</para>
          <variablelist>
            <varlistentry xml:id="swift.account.reaper.AccountReaper.get_account_ring">
              <term>
                <property>swift.account.reaper.AccountReaper.get_account_ring</property>
              </term>
              <listitem>
                <para>The account <literal>swift.common.ring.Ring</literal> for the cluster.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.reaper.AccountReaper.get_container_ring">
              <term>
                <property>swift.account.reaper.AccountReaper.get_container_ring</property>
              </term>
              <listitem>
                <para>The container <literal>swift.common.ring.Ring</literal> for the cluster.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.reaper.AccountReaper.get_object_ring">
              <term>
                <property>swift.account.reaper.AccountReaper.get_object_ring</property>
              </term>
              <listitem>
                <para>Get the ring identified by the policy index</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.reaper.AccountReaper.reap_account">
              <term>
                <property>swift.account.reaper.AccountReaper.reap_account</property>
              </term>
              <listitem>
                <para>Called once per pass for each account this server is the primary for
                                and attempts to delete the data for the given account. The reaper will
                                only delete one account at any given time. It will call
                                <xref linkend="swift.account.reaper.AccountReaper.reap_container"/> up to sqrt(self.concurrency) times concurrently
                                while reaping the account.</para>
                <para>If there is any exception while deleting a single container, the
                                process will continue for any other containers and the failed
                                containers will be tried again the next time this function is called
                                with the same parameters.</para>
                <para>If there is any exception while listing the containers for deletion,
                                the process will stop (but will obviously be tried again the next time
                                this function is called with the same parameters). This isn’t likely
                                since the listing comes from the local database.</para>
                <para>After the process completes (successfully or not) statistics about what
                                was accomplished will be logged.</para>
                <para>This function returns nothing and should raise no exception but only
                                update various self.stats_* values for what occurs.</para>
                <formalpara>
                  <title>See also</title>
                  <para><xref linkend="swift.account.backend.AccountBroker"/> for the broker class.</para>
                </formalpara>
                <formalpara>
                  <title>See also</title>
                  <para><literal>swift.common.ring.Ring.get_nodes()</literal> for a description
                                    of the node dicts.</para>
                </formalpara>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.reaper.AccountReaper.reap_container">
              <term>
                <property>swift.account.reaper.AccountReaper.reap_container</property>
              </term>
              <listitem>
                <para>Deletes the data and the container itself for the given container. This
                                will call <xref linkend="swift.account.reaper.AccountReaper.reap_object"/> up to sqrt(self.concurrency) times
                                concurrently for the objects in the container.</para>
                <para>If there is any exception while deleting a single object, the process
                                will continue for any other objects in the container and the failed
                                objects will be tried again the next time this function is called with
                                the same parameters.</para>
                <para>If there is any exception while listing the objects for deletion, the
                                process will stop (but will obviously be tried again the next time this
                                function is called with the same parameters). This is a possibility
                                since the listing comes from querying just the primary remote container
                                server.</para>
                <para>Once all objects have been attempted to be deleted, the container
                                itself will be attempted to be deleted by sending a delete request to
                                all container nodes. The format of the delete request is such that each
                                container server will update a corresponding account server, removing
                                the container from the account’s listing.</para>
                <para>This function returns nothing and should raise no exception but only
                                update various self.stats_* values for what occurs.</para>
                <itemizedlist>
                  <listitem>
                    <para>See also: <literal>swift.common.ring.Ring.get_nodes()</literal> for a description
                                        of the account node dicts.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.reaper.AccountReaper.reap_device">
              <term>
                <property>swift.account.reaper.AccountReaper.reap_device</property>
              </term>
              <listitem>
                <para>Called once per pass for each device on the server. This will scan the
                                accounts directory for the device, looking for partitions this device
                                is the primary for, then looking for account databases that are marked
                                status=DELETED and still have containers and calling
                                <xref linkend="swift.account.reaper.AccountReaper.reap_account"/>. Account databases marked status=DELETED that no
                                longer have containers will eventually be permanently removed by the
                                reclaim process within the account replicator (see
                                <literal>swift.db_replicator</literal>).</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.reaper.AccountReaper.reap_object">
              <term>
                <property>swift.account.reaper.AccountReaper.reap_object</property>
              </term>
              <listitem>
                <para>Deletes the given object by issuing a delete request to each node for
                                the object. The format of the delete request is such that each object
                                server will update a corresponding container server, removing the
                                object from the container’s listing.</para>
                <para>This function returns nothing and should raise no exception but only
                                update various self.stats_* values for what occurs.</para>
                <itemizedlist>
                  <listitem>
                    <para>See also: <literal>swift.common.ring.Ring.get_nodes()</literal> for a description
                                        of the container node dicts.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.reaper.AccountReaper.reset_stats">
              <term>
                <property>swift.account.reaper.AccountReaper.reset_stats</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.reaper.AccountReaper.run_forever">
              <term>
                <property>swift.account.reaper.AccountReaper.run_forever</property>
              </term>
              <listitem>
                <para>Main entry point when running the reaper in normal daemon mode.</para>
                <para>This repeatedly calls <xref linkend="swift.account.reaper.AccountReaper.run_once"/> no quicker than the
                                configuration interval.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.reaper.AccountReaper.run_once">
              <term>
                <property>swift.account.reaper.AccountReaper.run_once</property>
              </term>
              <listitem>
                <para>Main entry point when running the reaper in ‘once’ mode, where it will
                                do a single pass over all accounts on the server. This is called
                                repeatedly by <xref linkend="swift.account.reaper.AccountReaper.run_forever"/>. This will call <xref linkend="swift.account.reaper.AccountReaper.reap_device"/>
                                once for each device on the server.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="account-server">
    <title>Account Server</title>
    <variablelist>
      <varlistentry xml:id="swift.account.server.AccountController">
        <term>
          <literal>swift.account.server.AccountController</literal>
        </term>
        <listitem>
          <para>Bases: <literal>swift.common.base_storage_server.BaseStorageServer</literal></para>
          <para>WSGI controller for the account server.</para>
          <variablelist>
            <varlistentry xml:id="swift.account.server.AccountController.DELETE">
              <term>
                <property>swift.account.server.AccountController.DELETE</property>
              </term>
              <listitem>
                <para>Handle HTTP DELETE request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.server.AccountController.GET">
              <term>
                <property>swift.account.server.AccountController.GET</property>
              </term>
              <listitem>
                <para>Handle HTTP GET request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.server.AccountController.HEAD">
              <term>
                <property>swift.account.server.AccountController.HEAD</property>
              </term>
              <listitem>
                <para>Handle HTTP HEAD request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.server.AccountController.POST">
              <term>
                <property>swift.account.server.AccountController.POST</property>
              </term>
              <listitem>
                <para>Handle HTTP POST request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.server.AccountController.PUT">
              <term>
                <property>swift.account.server.AccountController.PUT</property>
              </term>
              <listitem>
                <para>Handle HTTP PUT request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.server.AccountController.REPLICATE">
              <term>
                <property>swift.account.server.AccountController.REPLICATE</property>
              </term>
              <listitem>
                <para>Handle HTTP REPLICATE request.
                                Handler for RPC calls for account replication.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.account.server.AccountController.server_type">
              <term>
                <property>swift.account.server.AccountController.server_type</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.account.server.app_factory">
        <term>
          <function>swift.account.server.app_factory</function>
        </term>
        <listitem>
          <para>paste.deploy app factory for creating WSGI account server apps</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</section>
