<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Adding Storage Policies to an Existing SAIO</title>
  <para>Depending on when you downloaded your SAIO environment, it may already
            be prepared with two storage policies that enable some basic functional
            tests.  In the event that you are adding a storage policy to an existing
            installation, however, the following section will walk you through the
            steps for setting up Storage Policies.  Note that configuring more than
            one storage policy on your development environment is recommended but
            optional.  Enabling multiple Storage Policies is very easy regardless of
            whether you are working with an existing installation or starting a
            brand new one.</para>
  <para>Now we will create two policies - the first one will be a standard triple
            replication policy that we will also explicitly set as the default and
            the second will be setup for reduced replication using a factor of 2x.
            We will call the first one ‘gold’ and the second one ‘silver’.  In this
            example both policies map to the same devices because it’s also
            important for this sample implementation to be simple and easy
            to understand and adding a bunch of new devices isn’t really required
            to implement a usable set of policies.</para>
  <procedure>
    <step>
      <para>To define your policies, add the following to your <literal>/etc/swift/swift.conf</literal>
                    file:</para>
      <screen>[storage-policy:0]
name = gold
aliases = yellow, orange
default = yes

[storage-policy:1]
name = silver</screen>
    </step>
  </procedure>
  <para>See  for detailed information on <literal>swift.conf</literal> policy
                options.</para>
  <procedure>
    <step>
      <para>To create the object ring for the silver policy (index 1), add the following
                    to your <literal>bin/remakerings</literal> script and re-run it (your script may already have
                    these changes):</para>
      <screen>swift-ring-builder object-1.builder create 10 2 1
swift-ring-builder object-1.builder add r1z1-127.0.0.1:6010/sdb1 1
swift-ring-builder object-1.builder add r1z2-127.0.0.1:6020/sdb2 1
swift-ring-builder object-1.builder add r1z3-127.0.0.1:6030/sdb3 1
swift-ring-builder object-1.builder add r1z4-127.0.0.1:6040/sdb4 1
swift-ring-builder object-1.builder rebalance</screen>
    </step>
  </procedure>
  <para>Note that the reduced replication of the silver policy is only a function
                of the replication parameter in the <literal>swift-ring-builder create</literal> command
                and is not specified  in <literal>/etc/swift/swift.conf</literal>.</para>
  <procedure>
    <step>
      <para>Copy <literal>etc/container-reconciler.conf-sample</literal> to
                    <literal>/etc/swift/container-reconciler.conf</literal> and fix the user option:</para>
      <screen>cp etc/container-reconciler.conf-sample /etc/swift/container-reconciler.conf
sed -i "s/# user.*/user = $USER/g" /etc/swift/container-reconciler.conf</screen>
    </step>
  </procedure>
  <section>
    <title>Using Policies</title>
    <para>Setting up Storage Policies was very simple, and using them is even
                simpler.  In this section, we will run some commands to create a few
                containers with different policies and store objects in them and see how
                Storage Policies effect placement of data in Swift.</para>
    <procedure>
      <step>
        <para>We will be using the list_endpoints middleware to confirm object locations,
                        so enable that now in your <literal>proxy-server.conf</literal> file by adding it to the pipeline
                        and including the filter section as shown below (be sure to restart your proxy
                        after making these changes):</para>
        <screen>pipeline = catch_errors gatekeeper healthcheck proxy-logging cache bulk \
  slo dlo ratelimit crossdomain list-endpoints tempurl tempauth staticweb \
  container-quotas account-quotas proxy-logging proxy-server

[filter:list-endpoints]
use = egg:swift#list_endpoints</screen>
      </step>
      <step>
        <para>Check to see that your policies are reported via /info:</para>
        <screen>swift -A http://127.0.0.1:8080/auth/v1.0 -U test:tester -K testing info</screen>
      </step>
    </procedure>
    <para>You should see this: (only showing the policy output here):</para>
    <screen>policies: [{'aliases': 'gold, yellow, orange', 'default': True,
    'name': 'gold'}, {'aliases': 'silver', 'name': 'silver'}]</screen>
    <procedure>
      <step>
        <para>Now create a container without specifying a policy, it will use the
                        default, ‘gold’ and then put a test object in it (create the file <literal>file0.txt</literal>
                        with your favorite editor with some content):</para>
        <screen>curl -v -X PUT -H 'X-Auth-Token: &lt;your auth token&gt;' \
    http://127.0.0.1:8080/v1/AUTH_test/myCont0
curl -X PUT -v -T file0.txt -H 'X-Auth-Token: &lt;your auth token&gt;' \
    http://127.0.0.1:8080/v1/AUTH_test/myCont0/file0.txt</screen>
      </step>
      <step>
        <para>Now confirm placement of the object with the <xref linkend="list-endpoints"/> middleware:</para>
        <screen>curl -X GET -v http://127.0.0.1:8080/endpoints/AUTH_test/myCont0/file0.txt</screen>
      </step>
    </procedure>
    <para>You should see this: (note placement on expected devices):</para>
    <screen>["http://127.0.0.1:6030/sdb3/761/AUTH_test/myCont0/file0.txt",
"http://127.0.0.1:6010/sdb1/761/AUTH_test/myCont0/file0.txt",
"http://127.0.0.1:6020/sdb2/761/AUTH_test/myCont0/file0.txt"]</screen>
    <procedure>
      <step>
        <para>Create a container using policy ‘silver’ and put a different file in it:</para>
        <screen>curl -v -X PUT -H 'X-Auth-Token: &lt;your auth token&gt;' -H \
    "X-Storage-Policy: silver" \
    http://127.0.0.1:8080/v1/AUTH_test/myCont1
curl -X PUT -v -T file1.txt -H 'X-Auth-Token: &lt;your auth token&gt;' \
    http://127.0.0.1:8080/v1/AUTH_test/myCont1/</screen>
      </step>
      <step>
        <para>Confirm placement of the object for policy ‘silver’:</para>
        <screen>curl -X GET -v http://127.0.0.1:8080/endpoints/AUTH_test/myCont1/file1.txt</screen>
      </step>
    </procedure>
    <para>You should see this: (note placement on expected devices):</para>
    <screen>["http://127.0.0.1:6010/sdb1/32/AUTH_test/myCont1/file1.txt",
 "http://127.0.0.1:6040/sdb4/32/AUTH_test/myCont1/file1.txt"]</screen>
    <procedure>
      <step>
        <para>Confirm account information with HEAD, make sure that your container-updater
                        service is running and has executed once since you performed the PUTs or the
                        account database won’t be updated yet:</para>
        <screen>curl -i -X HEAD -H 'X-Auth-Token: &lt;your auth token&gt;' \
    http://127.0.0.1:8080/v1/AUTH_test</screen>
      </step>
    </procedure>
    <para>You should see something like this (note that total and per policy stats
                    object sizes will vary):</para>
    <screen>HTTP/1.1 204 No Content
Content-Length: 0
X-Account-Object-Count: 2
X-Account-Bytes-Used: 174
X-Account-Container-Count: 2
X-Account-Storage-Policy-Gold-Object-Count: 1
X-Account-Storage-Policy-Gold-Bytes-Used: 84
X-Account-Storage-Policy-Silver-Object-Count: 1
X-Account-Storage-Policy-Silver-Bytes-Used: 90
X-Timestamp: 1397230339.71525
Content-Type: text/plain; charset=utf-8
Accept-Ranges: bytes
X-Trans-Id: tx96e7496b19bb44abb55a3-0053482c75
X-Openstack-Request-Id: tx96e7496b19bb44abb55a3-0053482c75
Date: Fri, 11 Apr 2014 17:55:01 GMT</screen>
  </section>
</section>
