<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Container</title>
  <section xml:id="container-auditor">
    <title>Container Auditor</title>
    <variablelist>
      <varlistentry xml:id="swift.container.auditor.ContainerAuditor">
        <term>
          <literal>swift.container.auditor.ContainerAuditor</literal>
        </term>
        <listitem>
          <para>Bases: <literal>swift.common.daemon.Daemon</literal></para>
          <para>Audit containers.</para>
          <variablelist>
            <varlistentry xml:id="swift.container.auditor.ContainerAuditor.container_audit">
              <term>
                <property>swift.container.auditor.ContainerAuditor.container_audit</property>
              </term>
              <listitem>
                <para>Audits the given container path</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.auditor.ContainerAuditor.run_forever">
              <term>
                <property>swift.container.auditor.ContainerAuditor.run_forever</property>
              </term>
              <listitem>
                <para>Run the container audit until stopped.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.auditor.ContainerAuditor.run_once">
              <term>
                <property>swift.container.auditor.ContainerAuditor.run_once</property>
              </term>
              <listitem>
                <para>Run the container audit once.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.container.auditor.random">
        <term>
          <function>swift.container.auditor.random</function>
        </term>
        <listitem>
          <para/>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="container-backend">
    <title>Container Backend</title>
    <para>Pluggable Back-ends for Container Server</para>
    <variablelist>
      <varlistentry xml:id="swift.container.backend.ContainerBroker">
        <term>
          <literal>swift.container.backend.ContainerBroker</literal>
        </term>
        <listitem>
          <para>Bases: <xref linkend="swift.common.db.DatabaseBroker"/></para>
          <para>Encapsulates working with a container database.</para>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.create_container_info_table">
              <term>
                <property>swift.container.backend.ContainerBroker.create_container_info_table</property>
              </term>
              <listitem>
                <para>Create the container_info table which is specific to the container DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.
                                Also creates the container_stat view.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.create_object_table">
              <term>
                <property>swift.container.backend.ContainerBroker.create_object_table</property>
              </term>
              <listitem>
                <para>Create the object table which is specific to the container DB.
                                Not a part of Pluggable Back-ends, internal to the baseline code.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.create_policy_stat_table">
              <term>
                <property>swift.container.backend.ContainerBroker.create_policy_stat_table</property>
              </term>
              <listitem>
                <para>Create policy_stat table.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.db_contains_type">
              <term>
                <property>swift.container.backend.ContainerBroker.db_contains_type</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.db_reclaim_timestamp">
              <term>
                <property>swift.container.backend.ContainerBroker.db_reclaim_timestamp</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.db_type">
              <term>
                <property>swift.container.backend.ContainerBroker.db_type</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.delete_object">
              <term>
                <property>swift.container.backend.ContainerBroker.delete_object</property>
              </term>
              <listitem>
                <para>Mark an object deleted.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.empty">
              <term>
                <property>swift.container.backend.ContainerBroker.empty</property>
              </term>
              <listitem>
                <para>Check if container DB is empty.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.get_db_version">
              <term>
                <property>swift.container.backend.ContainerBroker.get_db_version</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.get_info">
              <term>
                <property>swift.container.backend.ContainerBroker.get_info</property>
              </term>
              <listitem>
                <para>Get global data for the container.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.get_info_is_deleted">
              <term>
                <property>swift.container.backend.ContainerBroker.get_info_is_deleted</property>
              </term>
              <listitem>
                <para>Get the is_deleted status and info for the container.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.get_misplaced_since">
              <term>
                <property>swift.container.backend.ContainerBroker.get_misplaced_since</property>
              </term>
              <listitem>
                <para>Get a list of objects which are in a storage policy different
                                from the container’s storage policy.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.get_policy_stats">
              <term>
                <property>swift.container.backend.ContainerBroker.get_policy_stats</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.get_reconciler_sync">
              <term>
                <property>swift.container.backend.ContainerBroker.get_reconciler_sync</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.has_multiple_policies">
              <term>
                <property>swift.container.backend.ContainerBroker.has_multiple_policies</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.list_objects_iter">
              <term>
                <property>swift.container.backend.ContainerBroker.list_objects_iter</property>
              </term>
              <listitem>
                <para>Get a list of objects sorted by name starting at marker onward, up
                                to limit entries.  Entries will begin with the prefix and will not
                                have the delimiter after the prefix.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.make_tuple_for_pickle">
              <term>
                <property>swift.container.backend.ContainerBroker.make_tuple_for_pickle</property>
              </term>
              <listitem>
                <para>Turn this db record dict into the format this service uses for
                                pending pickles.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.merge_items">
              <term>
                <property>swift.container.backend.ContainerBroker.merge_items</property>
              </term>
              <listitem>
                <para>Merge items into the object table.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.put_object">
              <term>
                <property>swift.container.backend.ContainerBroker.put_object</property>
              </term>
              <listitem>
                <para>Creates an object in the DB with its metadata.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.reported">
              <term>
                <property>swift.container.backend.ContainerBroker.reported</property>
              </term>
              <listitem>
                <para>Update reported stats, available with container’s <literal>get_info</literal>.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.set_storage_policy_index">
              <term>
                <property>swift.container.backend.ContainerBroker.set_storage_policy_index</property>
              </term>
              <listitem>
                <para>Update the container_stat policy_index and status_changed_at.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.set_x_container_sync_points">
              <term>
                <property>swift.container.backend.ContainerBroker.set_x_container_sync_points</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.storage_policy_index">
              <term>
                <property>swift.container.backend.ContainerBroker.storage_policy_index</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.backend.ContainerBroker.update_reconciler_sync">
              <term>
                <property>swift.container.backend.ContainerBroker.update_reconciler_sync</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.container.backend.update_new_item_from_existing">
        <term>
          <function>swift.container.backend.update_new_item_from_existing</function>
        </term>
        <listitem>
          <para>Compare the data and meta related timestamps of a new object item with
                        the timestamps of an existing object record, and update the new item
                        with data and/or meta related attributes from the existing record if
                        their timestamps are newer.</para>
          <para>The multiple timestamps are encoded into a single string for storing
                        in the ‘created_at’ column of the objects db table.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="container-server">
    <title>Container Server</title>
    <variablelist>
      <varlistentry xml:id="swift.container.server.ContainerController">
        <term>
          <literal>swift.container.server.ContainerController</literal>
        </term>
        <listitem>
          <para>Bases: <literal>swift.common.base_storage_server.BaseStorageServer</literal></para>
          <para>WSGI Controller for the container server.</para>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.DELETE">
              <term>
                <property>swift.container.server.ContainerController.DELETE</property>
              </term>
              <listitem>
                <para>Handle HTTP DELETE request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.GET">
              <term>
                <property>swift.container.server.ContainerController.GET</property>
              </term>
              <listitem>
                <para>Handle HTTP GET request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.HEAD">
              <term>
                <property>swift.container.server.ContainerController.HEAD</property>
              </term>
              <listitem>
                <para>Handle HTTP HEAD request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.POST">
              <term>
                <property>swift.container.server.ContainerController.POST</property>
              </term>
              <listitem>
                <para>Handle HTTP POST request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.PUT">
              <term>
                <property>swift.container.server.ContainerController.PUT</property>
              </term>
              <listitem>
                <para>Handle HTTP PUT request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.REPLICATE">
              <term>
                <property>swift.container.server.ContainerController.REPLICATE</property>
              </term>
              <listitem>
                <para>Handle HTTP REPLICATE request (json-encoded RPC calls for replication.)</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.account_update">
              <term>
                <property>swift.container.server.ContainerController.account_update</property>
              </term>
              <listitem>
                <para>Update the account server(s) with latest container info.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.allowed_sync_hosts">
              <term>
                <property>swift.container.server.ContainerController.allowed_sync_hosts</property>
              </term>
              <listitem>
                <para>The list of hosts we’re allowed to send syncs to. This can be
                                overridden by data in self.realms_conf</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.create_listing">
              <term>
                <property>swift.container.server.ContainerController.create_listing</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.get_and_validate_policy_index">
              <term>
                <property>swift.container.server.ContainerController.get_and_validate_policy_index</property>
              </term>
              <listitem>
                <para>Validate that the index supplied maps to a policy.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.realms_conf">
              <term>
                <property>swift.container.server.ContainerController.realms_conf</property>
              </term>
              <listitem>
                <para>ContainerSyncCluster instance for validating sync-to values.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.save_headers">
              <term>
                <property>swift.container.server.ContainerController.save_headers</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.server_type">
              <term>
                <property>swift.container.server.ContainerController.server_type</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.server.ContainerController.update_data_record">
              <term>
                <property>swift.container.server.ContainerController.update_data_record</property>
              </term>
              <listitem>
                <para>Perform any mutations to container listing records that are common to
                                all serialization formats, and returns it as a dict.</para>
                <para>Converts created time to iso timestamp.
                                Replaces size with ‘swift_bytes’ content type parameter.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.container.server.app_factory">
        <term>
          <function>swift.container.server.app_factory</function>
        </term>
        <listitem>
          <para>paste.deploy app factory for creating WSGI container server apps</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.container.server.gen_resp_headers">
        <term>
          <function>swift.container.server.gen_resp_headers</function>
        </term>
        <listitem>
          <para>Convert container info dict to headers.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="container-replicator">
    <title>Container Replicator</title>
    <variablelist>
      <varlistentry xml:id="swift.container.replicator.ContainerReplicator">
        <term>
          <literal>swift.container.replicator.ContainerReplicator</literal>
        </term>
        <listitem>
          <para>Bases: <xref linkend="swift.common.db_replicator.Replicator"/></para>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.brokerclass">
              <term>
                <property>swift.container.replicator.ContainerReplicator.brokerclass</property>
              </term>
              <listitem>
                <para>alias of <xref linkend="swift.container.backend.ContainerBroker"/></para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.datadir">
              <term>
                <property>swift.container.replicator.ContainerReplicator.datadir</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.default_port">
              <term>
                <property>swift.container.replicator.ContainerReplicator.default_port</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.delete_db">
              <term>
                <property>swift.container.replicator.ContainerReplicator.delete_db</property>
              </term>
              <listitem>
                <para>Ensure that reconciler databases are only cleaned up at the end of the
                                replication run.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.dump_to_reconciler">
              <term>
                <property>swift.container.replicator.ContainerReplicator.dump_to_reconciler</property>
              </term>
              <listitem>
                <para>Look for object rows for objects updates in the wrong storage policy
                                in broker with a <literal>ROWID</literal> greater than the rowid given as point.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.feed_reconciler">
              <term>
                <property>swift.container.replicator.ContainerReplicator.feed_reconciler</property>
              </term>
              <listitem>
                <para>Add queue entries for rows in item_list to the local reconciler
                                container database.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.find_local_handoff_for_part">
              <term>
                <property>swift.container.replicator.ContainerReplicator.find_local_handoff_for_part</property>
              </term>
              <listitem>
                <para>Look through devices in the ring for the first handoff device that was
                                identified during job creation as available on this node.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.get_reconciler_broker">
              <term>
                <property>swift.container.replicator.ContainerReplicator.get_reconciler_broker</property>
              </term>
              <listitem>
                <para>Get a local instance of the reconciler container broker that is
                                appropriate to enqueue the given timestamp.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.replicate_reconcilers">
              <term>
                <property>swift.container.replicator.ContainerReplicator.replicate_reconcilers</property>
              </term>
              <listitem>
                <para>Ensure any items merged to reconciler containers during replication
                                are pushed out to correct nodes and any reconciler containers that do
                                not belong on this node are removed.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.report_up_to_date">
              <term>
                <property>swift.container.replicator.ContainerReplicator.report_up_to_date</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.run_once">
              <term>
                <property>swift.container.replicator.ContainerReplicator.run_once</property>
              </term>
              <listitem>
                <para>Run a replication pass once.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.replicator.ContainerReplicator.server_type">
              <term>
                <property>swift.container.replicator.ContainerReplicator.server_type</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.container.replicator.ContainerReplicatorRpc">
        <term>
          <literal>swift.container.replicator.ContainerReplicatorRpc</literal>
        </term>
        <listitem>
          <para>Bases: <xref linkend="swift.common.db_replicator.ReplicatorRpc"/></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="container-sync-daemon">
    <title>Container Sync</title>
    <variablelist>
      <varlistentry xml:id="swift.container.sync.ContainerSync">
        <term>
          <literal>swift.container.sync.ContainerSync</literal>
        </term>
        <listitem>
          <para>Bases: <literal>swift.common.daemon.Daemon</literal></para>
          <para>Daemon to sync syncable containers.</para>
          <para>This is done by scanning the local devices for container databases and
                        checking for x-container-sync-to and x-container-sync-key metadata values.
                        If they exist, newer rows since the last sync will trigger PUTs or DELETEs
                        to the other container.</para>
          <para>The actual syncing is slightly more complicated to make use of the three
                        (or number-of-replicas) main nodes for a container without each trying to
                        do the exact same work but also without missing work if one node happens to
                        be down.</para>
          <para>Two sync points are kept per container database. All rows between the two
                        sync points trigger updates. Any rows newer than both sync points cause
                        updates depending on the node’s position for the container (primary nodes
                        do one third, etc. depending on the replica count of course). After a sync
                        run, the first sync point is set to the newest ROWID known and the second
                        sync point is set to newest ROWID for which all updates have been sent.</para>
          <para>An example may help. Assume replica count is 3 and perfectly matching
                        ROWIDs starting at 1.</para>
          <para>First sync run, database has 6 rows:</para>
          <itemizedlist>
            <listitem>
              <para>SyncPoint1 starts as -1.</para>
            </listitem>
            <listitem>
              <para>SyncPoint2 starts as -1.</para>
            </listitem>
            <listitem>
              <para>No rows between points, so no “all updates” rows.</para>
            </listitem>
            <listitem>
              <para>Six rows newer than SyncPoint1, so a third of the rows are sent
                                        by node 1, another third by node 2, remaining third by node 3.</para>
            </listitem>
            <listitem>
              <para>SyncPoint1 is set as 6 (the newest ROWID known).</para>
            </listitem>
            <listitem>
              <para>SyncPoint2 is left as -1 since no “all updates” rows were synced.</para>
            </listitem>
          </itemizedlist>
          <para>Next sync run, database has 12 rows:</para>
          <itemizedlist>
            <listitem>
              <para>SyncPoint1 starts as 6.</para>
            </listitem>
            <listitem>
              <para>SyncPoint2 starts as -1.</para>
            </listitem>
            <listitem>
              <para>The rows between -1 and 6 all trigger updates (most of which
                                        should short-circuit on the remote end as having already been
                                        done).</para>
            </listitem>
            <listitem>
              <para>Six more rows newer than SyncPoint1, so a third of the rows are
                                        sent by node 1, another third by node 2, remaining third by node
                                        3.</para>
            </listitem>
            <listitem>
              <para>SyncPoint1 is set as 12 (the newest ROWID known).</para>
            </listitem>
            <listitem>
              <para>SyncPoint2 is set as 6 (the newest “all updates” ROWID).</para>
            </listitem>
          </itemizedlist>
          <para>In this way, under normal circumstances each node sends its share of
                        updates each run and just sends a batch of older updates to ensure nothing
                        was missed.</para>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.allowed_sync_hosts">
              <term>
                <property>swift.container.sync.ContainerSync.allowed_sync_hosts</property>
              </term>
              <listitem>
                <para>The list of hosts we’re allowed to send syncs to. This can be
                                overridden by data in self.realms_conf</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.conf">
              <term>
                <property>swift.container.sync.ContainerSync.conf</property>
              </term>
              <listitem>
                <para>The dict of configuration values from the [container-sync] section
                                of the container-server.conf.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_deletes">
              <term>
                <property>swift.container.sync.ContainerSync.container_deletes</property>
              </term>
              <listitem>
                <para>Number of successful DELETEs triggered.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_failures">
              <term>
                <property>swift.container.sync.ContainerSync.container_failures</property>
              </term>
              <listitem>
                <para>Number of containers that had a failure of some type.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_puts">
              <term>
                <property>swift.container.sync.ContainerSync.container_puts</property>
              </term>
              <listitem>
                <para>Number of successful PUTs triggered.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_report">
              <term>
                <property>swift.container.sync.ContainerSync.container_report</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_ring">
              <term>
                <property>swift.container.sync.ContainerSync.container_ring</property>
              </term>
              <listitem>
                <para>swift.common.ring.Ring for locating containers.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_skips">
              <term>
                <property>swift.container.sync.ContainerSync.container_skips</property>
              </term>
              <listitem>
                <para>Number of containers whose sync has been turned off, but
                                are not yet cleared from the sync store.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_stats">
              <term>
                <property>swift.container.sync.ContainerSync.container_stats</property>
              </term>
              <listitem>
                <para>Per container stats. These are collected per container.
                                puts - the number of puts that were done for the container
                                deletes - the number of deletes that were fot the container
                                bytes - the total number of bytes transferred per the container</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_sync">
              <term>
                <property>swift.container.sync.ContainerSync.container_sync</property>
              </term>
              <listitem>
                <para>Checks the given path for a container database, determines if syncing
                                is turned on for that database and, if so, sends any updates to the
                                other container.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_sync_row">
              <term>
                <property>swift.container.sync.ContainerSync.container_sync_row</property>
              </term>
              <listitem>
                <para>Sends the update the row indicates to the sync_to container.
                                Update can be either delete or put.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_syncs">
              <term>
                <property>swift.container.sync.ContainerSync.container_syncs</property>
              </term>
              <listitem>
                <para>Number of containers with sync turned on that were successfully
                                synced.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.container_time">
              <term>
                <property>swift.container.sync.ContainerSync.container_time</property>
              </term>
              <listitem>
                <para>Maximum amount of time to spend syncing a container before moving on
                                to the next one. If a container sync hasn’t finished in this time,
                                it’ll just be resumed next scan.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.devices">
              <term>
                <property>swift.container.sync.ContainerSync.devices</property>
              </term>
              <listitem>
                <para>Path to the local device mount points.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.interval">
              <term>
                <property>swift.container.sync.ContainerSync.interval</property>
              </term>
              <listitem>
                <para>Minimum time between full scans. This is to keep the daemon from
                                running wild on near empty systems.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.logger">
              <term>
                <property>swift.container.sync.ContainerSync.logger</property>
              </term>
              <listitem>
                <para>Logger to use for container-sync log lines.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.mount_check">
              <term>
                <property>swift.container.sync.ContainerSync.mount_check</property>
              </term>
              <listitem>
                <para>Indicates whether mount points should be verified as actual mount
                                points (normally true, false for tests and SAIO).</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.realms_conf">
              <term>
                <property>swift.container.sync.ContainerSync.realms_conf</property>
              </term>
              <listitem>
                <para>ContainerSyncCluster instance for validating sync-to values.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.report">
              <term>
                <property>swift.container.sync.ContainerSync.report</property>
              </term>
              <listitem>
                <para>Writes a report of the stats to the logger and resets the stats for the
                                next report.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.reported">
              <term>
                <property>swift.container.sync.ContainerSync.reported</property>
              </term>
              <listitem>
                <para>Time of last stats report.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.run_forever">
              <term>
                <property>swift.container.sync.ContainerSync.run_forever</property>
              </term>
              <listitem>
                <para>Runs container sync scans until stopped.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.run_once">
              <term>
                <property>swift.container.sync.ContainerSync.run_once</property>
              </term>
              <listitem>
                <para>Runs a single container sync scan.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.select_http_proxy">
              <term>
                <property>swift.container.sync.ContainerSync.select_http_proxy</property>
              </term>
              <listitem>
                <para/>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.sync.ContainerSync.sync_store">
              <term>
                <property>swift.container.sync.ContainerSync.sync_store</property>
              </term>
              <listitem>
                <para>ContainerSyncStore instance for iterating over synced containers</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.container.sync.random">
        <term>
          <function>swift.container.sync.random</function>
        </term>
        <listitem>
          <para/>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="container-updater">
    <title>Container Updater</title>
    <variablelist>
      <varlistentry xml:id="swift.container.updater.ContainerUpdater">
        <term>
          <literal>swift.container.updater.ContainerUpdater</literal>
        </term>
        <listitem>
          <para>Bases: <literal>swift.common.daemon.Daemon</literal></para>
          <para>Update container information in account listings.</para>
          <variablelist>
            <varlistentry xml:id="swift.container.updater.ContainerUpdater.container_report">
              <term>
                <property>swift.container.updater.ContainerUpdater.container_report</property>
              </term>
              <listitem>
                <para>Report container info to an account server.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.updater.ContainerUpdater.container_sweep">
              <term>
                <property>swift.container.updater.ContainerUpdater.container_sweep</property>
              </term>
              <listitem>
                <para>Walk the path looking for container DBs and process them.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.updater.ContainerUpdater.get_account_ring">
              <term>
                <property>swift.container.updater.ContainerUpdater.get_account_ring</property>
              </term>
              <listitem>
                <para>Get the account ring.  Load it if it hasn’t been yet.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.updater.ContainerUpdater.get_paths">
              <term>
                <property>swift.container.updater.ContainerUpdater.get_paths</property>
              </term>
              <listitem>
                <para>Get paths to all of the partitions on each drive to be processed.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.updater.ContainerUpdater.process_container">
              <term>
                <property>swift.container.updater.ContainerUpdater.process_container</property>
              </term>
              <listitem>
                <para>Process a container, and update the information in the account.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.updater.ContainerUpdater.run_forever">
              <term>
                <property>swift.container.updater.ContainerUpdater.run_forever</property>
              </term>
              <listitem>
                <para>Run the updater continuously.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.container.updater.ContainerUpdater.run_once">
              <term>
                <property>swift.container.updater.ContainerUpdater.run_once</property>
              </term>
              <listitem>
                <para>Run the updater once.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.container.updater.random">
        <term>
          <function>swift.container.updater.random</function>
        </term>
        <listitem>
          <para/>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</section>
