<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Object Versioning</title>
  <para>Object versioning in swift is implemented by setting a flag on the container
            to tell swift to version all objects in the container. The value of the flag is
            the container where the versions are stored (commonly referred to as the
            “archive container”). The flag itself is one of two headers, which determines
            how object <literal>DELETE</literal> requests are handled:</para>
  <itemizedlist>
    <listitem>
      <para>
        <literal>X-History-Location</literal>
      </para>
      <para>On <literal>DELETE</literal>, copy the current version of the object to the archive
                        container, write a zero-byte “delete marker” object that notes when the
                        delete took place, and delete the object from the versioned container. The
                        object will no longer appear in container listings for the versioned
                        container and future requests there will return <literal>404 Not Found</literal>. However,
                        the content will still be recoverable from the archive container.</para>
    </listitem>
    <listitem>
      <para>
        <literal>X-Versions-Location</literal>
      </para>
      <para>On <literal>DELETE</literal>, only remove the current version of the object. If any
                        previous versions exist in the archive container, the most recent one is
                        copied over the current version, and the copy in the archive container is
                        deleted. As a result, if you have 5 total versions of the object, you must
                        delete the object 5 times for that object name to start responding with
                        <literal>404 Not Found</literal>.</para>
    </listitem>
  </itemizedlist>
  <para>Either header may be used for the various containers within an account, but
            only one may be set for any given container. Attempting to set both
            simulataneously will result in a <literal>400 Bad Request</literal> response.</para>
  <note>
    <para>It is recommended to use a different archive container for
                each container that is being versioned.</para>
  </note>
  <note>
    <para>Enabling versioning on an archive container is not recommended.</para>
  </note>
  <para>When data is <literal>PUT</literal> into a versioned container (a container with the
            versioning flag turned on), the existing data in the file is redirected to a
            new object in the archive container and the data in the <literal>PUT</literal> request is
            saved as the data for the versioned object. The new object name (for the
            previous version) is <literal>&lt;archive_container&gt;/&lt;length&gt;&lt;object_name&gt;/&lt;timestamp&gt;</literal>,
            where <literal>length</literal> is the 3-character zero-padded hexadecimal length of the
            <literal>&lt;object_name&gt;</literal> and <literal>&lt;timestamp&gt;</literal> is the timestamp of when the previous
            version was created.</para>
  <para>A <literal>GET</literal> to a versioned object will return the current version of the object
            without having to do any request redirects or metadata lookups.</para>
  <para>A <literal>POST</literal> to a versioned object will update the object metadata as normal,
            but will not create a new version of the object. In other words, new versions
            are only created when the content of the object changes.</para>
  <para>A <literal>DELETE</literal> to a versioned object will be handled in one of two ways,
            as described above.</para>
  <para>To restore a previous version of an object, find the desired version in the
            archive container then issue a <literal>COPY</literal> with a <literal>Destination</literal> header
            indicating the original location. This will archive the current version similar
            to a <literal>PUT</literal> over the versioned object. If the client additionally wishes to
            permanently delete what was the current version, it must find the newly-created
            archive in the archive container and issue a separate <literal>DELETE</literal> to it.</para>
  <section>
    <title>How to Enable Object Versioning in a Swift Cluster</title>
    <para>This middleware was written as an effort to refactor parts of the proxy server,
                so this functionality was already available in previous releases and every
                attempt was made to maintain backwards compatibility. To allow operators to
                perform a seamless upgrade, it is not required to add the middleware to the
                proxy pipeline and the flag <literal>allow_versions</literal> in the container server
                configuration files are still valid, but only when using
                <literal>X-Versions-Location</literal>. In future releases, <literal>allow_versions</literal> will be
                deprecated in favor of adding this middleware to the pipeline to enable or
                disable the feature.</para>
    <para>In case the middleware is added to the proxy pipeline, you must also
                set <literal>allow_versioned_writes</literal> to <literal>True</literal> in the middleware options
                to enable the information about this middleware to be returned in a /info
                request.</para>
    <note>
      <para>You need to add the middleware to the proxy pipeline and set
                        <literal>allow_versioned_writes = True</literal> to use <literal>X-History-Location</literal>. Setting
                        <literal>allow_versions = True</literal> in the container server is not sufficient to
                        enable the use of <literal>X-History-Location</literal>.</para>
    </note>
    <section>
      <title>Upgrade considerations:</title>
      <para>If <literal>allow_versioned_writes</literal> is set in the filter configuration, you can leave
                    the <literal>allow_versions</literal> flag in the container server configuration files
                    untouched. If you decide to disable or remove the <literal>allow_versions</literal> flag, you
                    must re-set any existing containers that had the <literal>X-Versions-Location</literal> flag
                    configured so that it can now be tracked by the versioned_writes middleware.</para>
      <para>Clients should not use the <literal>X-History-Location</literal> header until all proxies in
                    the cluster have been upgraded to a version of Swift that supports it.
                    Attempting to use <literal>X-History-Location</literal> during a rolling upgrade may result
                    in some requests being served by proxies running old code, leading to data
                    loss.</para>
    </section>
  </section>
  <section>
    <title>Examples Using <literal>curl</literal> with <literal>X-Versions-Location</literal></title>
    <para>First, create a container with the <literal>X-Versions-Location</literal> header or add the
                header to an existing container. Also make sure the container referenced by
                the <literal>X-Versions-Location</literal> exists. In this example, the name of that
                container is “versions”:</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -XPUT -H "X-Auth-Token: &lt;token&gt;" -H "X-Versions-Location: versions" http://&lt;storage_url&gt;/container
curl -i -XPUT -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/versions</screen>
    <para>Create an object (the first version):</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -XPUT --data-binary 1 -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/container/myobject</screen>
    <para>Now create a new version of that object:</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -XPUT --data-binary 2 -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/container/myobject</screen>
    <para>See a listing of the older versions of the object:</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/versions?prefix=008myobject/</screen>
    <para>Now delete the current version of the object and see that the older version is
                gone from ‘versions’ container and back in ‘container’ container:</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -XDELETE -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/container/myobject
curl -i -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/versions?prefix=008myobject/
curl -i -XGET -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/container/myobject</screen>
  </section>
  <section>
    <title>Examples Using <literal>curl</literal> with <literal>X-History-Location</literal></title>
    <para>As above, create a container with the <literal>X-History-Location</literal> header and ensure
                that the container referenced by the <literal>X-History-Location</literal> exists. In this
                example, the name of that container is “versions”:</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -XPUT -H "X-Auth-Token: &lt;token&gt;" -H "X-History-Location: versions" http://&lt;storage_url&gt;/container
curl -i -XPUT -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/versions</screen>
    <para>Create an object (the first version):</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -XPUT --data-binary 1 -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/container/myobject</screen>
    <para>Now create a new version of that object:</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -XPUT --data-binary 2 -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/container/myobject</screen>
    <para>Now delete the current version of the object. Subsequent requests will 404:</para>
    <screen>curl -i -XDELETE -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/container/myobject
curl -i -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/container/myobject</screen>
    <para>A listing of the older versions of the object will include both the first and
                second versions of the object, as well as a “delete marker” object:</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/versions?prefix=008myobject/</screen>
    <para>To restore a previous version, simply <literal>COPY</literal> it from the archive container:</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -XCOPY -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/versions/008myobject/&lt;timestamp&gt; -H "Destination: container/myobject"</screen>
    <para>Note that the archive container still has all previous versions of the object,
                including the source for the restore:</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/versions?prefix=008myobject/</screen>
    <para>To permanently delete a previous version, <literal>DELETE</literal> it from the archive
                container:</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -XDELETE -H "X-Auth-Token: &lt;token&gt;" http://&lt;storage_url&gt;/versions/008myobject/&lt;timestamp&gt;</screen>
  </section>
  <section>
    <title>How to Disable Object Versioning in a Swift Cluster</title>
    <para>If you want to disable all functionality, set <literal>allow_versioned_writes</literal> to
                <literal>False</literal> in the middleware options.</para>
    <para>Disable versioning from a container (x is any value except empty):</para>
    <screen><?dbsuse-fo font-size="8pt"?>curl -i -XPOST -H "X-Auth-Token: &lt;token&gt;" -H "X-Remove-Versions-Location: x" http://&lt;storage_url&gt;/container</screen>
    <variablelist>
      <varlistentry xml:id="swift.common.middleware.versioned_writes.VersionedWritesContext">
        <term>
          <literal>swift.common.middleware.versioned_writes.VersionedWritesContext</literal>
        </term>
        <listitem>
          <para>Bases: <xref linkend="swift.common.wsgi.WSGIContext"/></para>
          <variablelist>
            <varlistentry xml:id="swift.common.middleware.versioned_writes.VersionedWritesContext.handle_obj_versions_delete_pop">
              <term>
                <property>swift.common.middleware.versioned_writes.VersionedWritesContext.handle_obj_versions_delete_pop</property>
              </term>
              <listitem>
                <para>Handle DELETE requests when in stack mode.</para>
                <para>Delete current version of object and pop previous version in its place.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.middleware.versioned_writes.VersionedWritesContext.handle_obj_versions_delete_push">
              <term>
                <property>swift.common.middleware.versioned_writes.VersionedWritesContext.handle_obj_versions_delete_push</property>
              </term>
              <listitem>
                <para>Handle DELETE requests when in history mode.</para>
                <para>Copy current version of object to versions_container and write a
                                delete marker before proceeding with original request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <variablelist>
            <varlistentry xml:id="swift.common.middleware.versioned_writes.VersionedWritesContext.handle_obj_versions_put">
              <term>
                <property>swift.common.middleware.versioned_writes.VersionedWritesContext.handle_obj_versions_put</property>
              </term>
              <listitem>
                <para>Copy current version of object to versions_container before proceeding
                                with original request.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry xml:id="swift.common.middleware.versioned_writes.check_container_format">
        <term>
          <function>swift.common.middleware.versioned_writes.check_container_format</function>
        </term>
        <listitem>
          <para>Validate that the header contains valid account or container name.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</section>
