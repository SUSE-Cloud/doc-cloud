<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Federated Identity</title>
  <para>You can use federation for keystone in two ways:</para>
  <itemizedlist>
    <listitem>
      <para>Supporting keystone as a SP (service provider) consuming identity
                    assertions issued by an external Identity Provider, such as SAML
                    assertions or OpenID Connect claims.</para>
    </listitem>
    <listitem>
      <para>Supporting keystone as an IdP (Identity Provider) fulfilling
                    authentication requests on behalf of Service Providers.</para>
      <note>
        <para>It is also possible to have one keystone act as an SP that
                        consumes Identity from another keystone acting as an IdP.</para>
      </note>
    </listitem>
  </itemizedlist>
  <para>There is currently support for two major federation protocols:</para>
  <itemizedlist>
    <listitem>
      <para>
        <link xlink:href="https://en.wikipedia.org/wiki/SAML_2.0">SAML</link>
      </para>
    </listitem>
    <listitem>
      <para>
        <link xlink:href="https://en.wikipedia.org/wiki/OpenID_Connect">OpenID Connect</link>
      </para>
    </listitem>
  </itemizedlist>
  <figure>
    <title>Keystone federation</title>
    <mediaobject>
      <imageobject role="fo">
        <imagedata fileref="keystone-federation.png" width="100%"/>
      </imageobject>
      <imageobject role="html">
        <imagedata fileref="keystone-federation.png" width="100%"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>To enable federation:</para>
  <procedure>
    <step>
      <para>Run keystone under Apache. See <link xlink:href="https://docs.openstack.org/ocata/install-guide-obs/keystone-install.html#configure-the-apache-http-server">Configure the Apache HTTP server</link>
                    for more information.</para>
      <note>
        <para>Other application servers, such as <link xlink:href="https://www.nginx.com/resources/wiki">nginx</link>,
                        have support for federation extensions that may work but are not tested
                        by the community.</para>
      </note>
    </step>
    <step>
      <para>Configure Apache to use a federation capable module.
                    We recommend Shibboleth, see <link xlink:href="https://docs.openstack.org/keystone/pike/advanced-topics/federation/shibboleth.html">the Shibboleth documentation</link>
                    for more information.</para>
      <note>
        <para>Another option is <literal>mod_auth_melon</literal>, see <link xlink:href="https://github.com/UNINETT/mod_auth_mellon">the mod’s github repo</link>
                        for more information.</para>
      </note>
    </step>
    <step>
      <para>Configure federation in keystone.</para>
    </step>
  </procedure>
  <note>
    <para>The external IdP is responsible for authenticating users and communicates
                the result of authentication to keystone using authentication assertions.
                Keystone maps these values to keystone user groups and assignments
                created in keystone.</para>
  </note>
  <section>
    <title>Supporting keystone as a SP</title>
    <para>To have keystone as an SP, you will need to configure
                keystone to accept assertions from external IdPs. Examples of external
                IdPs are:</para>
    <itemizedlist>
      <listitem>
      <para>ADFS (Active Directory Federation Services)<para/>
      </listitem>
      <listitem>
        <para>FreeIPA</para>
      </listitem>
      <listitem>
        <para>Tivoli Access Manager</para>
      </listitem>
      <listitem>
        <para>Keystone</para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Configuring federation in keystone</title>
      <procedure>
        <step>
          <para>Configure authentication drivers in <literal>keystone.conf</literal> by adding the
                            authentication methods to the <literal>[auth]</literal> section in <literal>keystone.conf</literal>.
                            Ensure the names are the same as to the protocol names added via Identity
                            API v3.</para>
          <para>For example:</para>
          <screen language="ini">[auth]
methods = external,password,token,mapped,openid</screen>
          <note>
            <para><literal>mapped</literal> and <literal>openid</literal> are the federation specific drivers.
                                The other names in the example are not related to federation.</para>
          </note>
        </step>
        <step>
          <para>Create local keystone groups and assign roles.</para>
          <important>
            <para>The keystone requires group-based role assignments to authorize
                                federated users. The federation mapping engine maps federated users into
                                local user groups, which are the actors in keystone’s role assignments.</para>
          </important>
        </step>
        <step>
          <para>Create an IdP object in keystone. The object must represent the
                            IdP you will use to authenticate end users:</para>
          <screen>PUT /OS-FEDERATION/identity_providers/{idp_id}</screen>
          <para>More configuration information for IdPs can be found <link xlink:href="https://developer.openstack.org/api-ref/identity/v3-ext/#register-an-identity-provider">Register an Identity Provider</link>.</para>
        </step>
        <step>
          <para>Add mapping rules:</para>
          <screen>PUT /OS-FEDERATION/mappings/{mapping_id}</screen>
          <para>More configuration information for mapping rules can be found <link xlink:href="https://developer.openstack.org/api-ref/identity/v3-ext/#create-a-mapping">Create a mapping</link>.</para>
          <note>
            <para>The only keystone API objects that support mapping are groups and users.</para>
          </note>
        </step>
        <step>
          <para>Add a protocol object and specify the mapping ID you want to use with the
                            combination of the IdP and protocol:</para>
          <screen>PUT /OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}</screen>
          <para>More configuration information for protocols can be found <link xlink:href="https://developer.openstack.org/api-ref/identity/v3-ext/#add-protocol-to-identity-provider">Add a protocol and attribute mapping to an identity provider</link>.</para>
        </step>
      </procedure>
    </section>
    <section>
      <title>Performing federated authentication</title>
      <procedure>
        <step>
          <para>Authenticate externally and generate an unscoped token in keystone:</para>
          <note>
            <para>Unlike other authentication methods in keystone, the user does
                                not issue an HTTP POST request with authentication data in the request body.
                                To start federated authentication a user must access the dedicated URL with
                                IdP’s and orotocol’s identifiers stored within a protected URL.
                                The URL has a format of:
                                <literal>/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth</literal>.</para>
          </note>
          <screen><?dbsuse-fo font-size="8pt"?>GET/POST /OS-FEDERATION/identity_providers/{identity_provider}/protocols/{protocol}/auth</screen>
        </step>
        <step>
          <para>Determine accessible resources. By using the previously returned token, the
                            user can issue requests to the list projects and domains that are
                            accessible.</para>
          <itemizedlist>
            <listitem>
              <para>List projects a federated user can access: <literal>GET /OS-FEDERATION/projects</literal></para>
            </listitem>
            <listitem>
              <para>List domains a federated user can access: <literal>GET /OS-FEDERATION/domains</literal></para>
            </listitem>
          </itemizedlist>
          <screen>GET /OS-FEDERATION/projects</screen>
        </step>
        <step>
          <para>Get a scoped token. A federated user can request a scoped token using
                            the unscoped token. A project or domain can be specified by either ID or
                            name. An ID is sufficient to uniquely identify a project or domain.</para>
          <screen>POST /auth/tokens</screen>
        </step>
      </procedure>
    </section>
  </section>
  <section>
    <title>Supporting keystone as an IdP</title>
    <para>When acting as an IdP, the primary role of keystone is
                to issue assertions about users owned by keystone. This is done using PySAML2.</para>
    <section>
      <title>Configuring federation in keystone</title>
      <para>There are certain settings in <literal>keystone.conf</literal> that must be set up, prior
                    to attempting to federate multiple keystone deployments.</para>
      <procedure>
        <step>
          <para>Within <literal>keystone.conf</literal>, assign values to the <literal>[saml]</literal>
                            related fields, for example:</para>
          <screen><?dbsuse-fo font-size="8pt"?>[saml]certfile=/etc/keystone/ssl/certs/ca.pemkeyfile=/etc/keystone/ssl/private/cakey.pemidp_entity_id=https://keystone.example.com/v3/OS-FEDERATION/saml2/idpidp_sso_endpoint=https://keystone.example.com/v3/OS-FEDERATION/saml2/ssoidp_metadata_path=/etc/keystone/saml2_idp_metadata.xml</screen>
        </step>
        <step>
          <para>We recommend the following <literal>Organization</literal> configuration options.
                            Ensure these values contain not special characters that may cause
                            problems as part of a URL:</para>
          <screen><?dbsuse-fo font-size="8pt"?>idp_organization_name=example_companyidp_organization_display_name=Example Corp.idp_organization_url=example.com</screen>
        </step>
        <step>
          <para>As with the <literal>Organization</literal> options, the <literal>Contact</literal> options are not
                            necessary, but it is advisable to set these values:</para>
          <screen><?dbsuse-fo font-size="8pt"?>idp_contact_company=example_companyidp_contact_name=Johnidp_contact_surname=Smithidp_contact_email=jsmith@example.comidp_contact_telephone=555-55-5555idp_contact_type=technical</screen>
        </step>
      </procedure>
    </section>
    <section>
      <title>Generate metadata</title>
      <para>Metadata must be exchanged to create a trust between the IdP and the SP.</para>
      <procedure>
        <step>
          <para>Create metadata for your keystone IdP, run the <literal>keystone-manage</literal> command
                            and pipe the output to a file. For example:</para>
          <screen>$ keystone-manage saml_idp_metadata &gt; /etc/keystone/saml2_idp_metadata.xml</screen>
          <note>
            <para>The file location must match the value of the <literal>idp_metadata_path</literal>
                                configuration option assigned previously.</para>
          </note>
        </step>
      </procedure>
    </section>
    <section>
      <title>Create a SP</title>
      <para>To setup keystone-as-a-Service-Provider properly, you will need to
                    understand what protocols are supported by external IdPs.
                    For example, keystone as an SP can allow identities to federate in from a
                    ADFS IdP but it must be configured to understand the SAML v2.0 protocol.
                    ADFS issues assertions using SAML v2.0. Some examples
                    of federated protocols include:</para>
      <itemizedlist>
        <listitem>
          <para>SAML v2.0</para>
        </listitem>
        <listitem>
          <para>OpenID Connect</para>
        </listitem>
      </itemizedlist>
      <para>The following instructions are an example of how you can configure
                    keystone as an SP.</para>
      <procedure>
        <step>
          <para>Create a new SP with an ID of BETA.</para>
        </step>
        <step>
          <para>Create a <literal>sp_url</literal> of <link xlink:href="http://beta.example.com/Shibboleth.sso/SAML2/ECP"/>.</para>
        </step>
        <step>
          <para>Create a <literal>auth_url</literal> of <link xlink:href="http://beta.example.com:5000/v3/OS-FEDERATION/identity_providers/beta/protocols/saml2/auth"/>.</para>
          <note>
            <para>Use the <literal>sp_url</literal> when creating a SAML assertion for BETA and signed by
                                the current keystone IdP. Use the <literal>auth_url</literal> when retrieving the token
                                for BETA once the SAML assertion is sent.</para>
          </note>
        </step>
        <step>
          <para>Set the <literal>enabled</literal> field to <literal>true</literal>. It is set to
                            <literal>false</literal> by default.</para>
        </step>
        <step>
          <para>Your output should reflect the following example:</para>
          <screen><?dbsuse-fo font-size="8pt"?> $ curl -s -X PUT \
-H "X-Auth-Token: $OS_TOKEN"\
-H "Content-Type: application/json"\
-d '{"service_provider": {"auth_url": "http://beta.example.com:5000/v3/OS-FEDERATION/identity_providers/beta/protocols/saml2/auth", "sp_url": "https://example.com:5000/Shibboleth.sso/SAML2/ECP", "enabled": true}}'\
http://localhost:5000/v3/OS-FEDERATION/service_providers/BETA | python -mjson.tool</screen>
        </step>
      </procedure>
    </section>
  </section>
  <section>
    <title>keystone-to-keystone</title>
    <para>Keystone acting as an IdP is known as
                or k2k federation, where a keystone somewhere is acting as the SP
                and another keystone is acting as the IdP. All IdPs issue
                assertions about the identities it owns using a <literal>Protocol</literal>.</para>
  </section>
  <section>
    <title>Mapping rules</title>
    <para>Mapping adds a set of rules to map federation attributes to keystone users
                or groups. An IdP has exactly one mapping specified per protocol.</para>
    <para>A mapping is a translation between assertions provided from an IdP and
                the permission and roles applied by an SP. Given an assertion from an IdP, an
                SP applies a mapping to translate attributes from the
                IdP to known roles. A mapping is typically
                owned by an SP.</para>
    <para>Mapping objects can be used multiple times by different combinations
                of IdP and protocol.</para>
    <para>A rule hierarchy is as follows:</para>
    <screen>
        {
         "rules": [
            {
                "local": [
                   {
                        "<user> or <group>"
                    }
                ],
                "remote": [
                    {
                        "<condition>"
                    }
                ]
            }
        ]
    }
    </screen>
    <itemizedlist>
      <listitem>
        <para><literal>rules</literal>: top-level list of rules.</para>
      </listitem>
      <listitem>
        <para><literal>local</literal>: a rule containing information on what local attributes
                        will be mapped.</para>
      </listitem>
      <listitem>
        <para><literal>remote</literal>: a rule containing information on what remote attributes will
                        be mapped.</para>
      </listitem>
      <listitem>
        <para><literal>condition</literal>: contains information on conditions that allow a rule, can
                        only be set in a remote rule.</para>
      </listitem>
    </itemizedlist>
    <para>For more information on mapping rules, see <link xlink:href="https://docs.openstack.org/keystone/pike/advanced-topics/federation/mapping_combinations.html#mapping-rules">Mapping Rules</link>.</para>
    <section>
      <title>Mapping creation</title>
      <para>Mapping creation starts with the communication between the IdP and SP.
                    The IdP usually provides a set of assertions that their users
                    have in their assertion document. The SP will have to map
                    those assertions to known groups and roles.
                    For example:</para>
      <screen>
          Identity Provider 1:
            name: jsmith
            groups: hacker
            other: <assertion information>
          The Service Provider may have 3 groups:
            Admin Group
            Developer Group
            User Group

          The mapping created by the Service Provider might look like:
            Local:
            Group: Developer Group
          Remote:
            Groups: hackers
      </screen>
      <para>The <literal>Developer Group</literal> may have a role assignment on the
                    <literal>Developer Project</literal>. When <literal>jsmith</literal> authenticates against IdP 1, it
                    presents that assertion to the SP.The SP maps the <literal>jsmith</literal> user to the
                    <literal>Developer Group</literal> because the assertion says <literal>jsmith</literal> is a member of
                    the <literal>hacker</literal> group.</para>
    </section>
    <section>
      <title>Mapping examples</title>
      <para>A bare bones mapping is sufficient if you would like all federated users to
                    have the same authorization in the SP cloud. However, mapping is
                    quite powerful and flexible. You can map different remote
                    users into different user groups in keystone, limited only by the number of
                    assertions your IdP makes about each user.</para>
      <para>A mapping is composed of a list of rules, and each rule is further composed of
                    a list of remote attributes and a list of local attributes. If a rule is
                    matched, all of the local attributes are applied in the SP. For a
                    rule to match, all of the remote attributes it defines must match.</para>
      <para>In the base case, a federated user simply needs an assertion containing
                    an email address to be identified in the SP cloud. To achieve that, only
                    one rule is needed that requires the presence of one remote attribute:</para>
                    <screen>
                            {
                        "rules": [
                            {
                                "remote": [
                                    {
                                        "type": "Email"
                                    }
                                ],
                                "local": [
                                    {
                                        "user": {
                                            "name": "{0}"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                    </screen>
      <para>However, that is not particularly useful as the federated user would receive no
                    authorization. To rectify it, you can map all federated users with email
                    addresses into a <literal>federated-users</literal> group in the <literal>default</literal> domain. All
                    federated users will then be able to consume whatever role assignments that
                    user group has already received in keystone:</para>
      <note>
        <para>In this example, there is only one rule requiring one remote attribute.</para>
      </note>
      <screen>
                {
        "rules": [
          {
              "remote": [
                  {
                      "type": "Email"
                  }
              ],
              "local": [
                  {
                      "user": {
                          "name": "{0}"
                      }
                  },
                  {
                      "group": {
                          "domain": {
                              "id": "0cd5e9"
                          },
                          "name": "federated-users"
                      }
                  }
              ]
          }
        ]
        }
      </screen>
      <para>This example can be expanded by adding a second rule that conveys
                    additional authorization to only a subset of federated users. Federated users
                    with a <literal>title</literal> attribute that matches either <literal>Manager</literal> or
                    <literal>Supervisor</literal> are granted the hypothetical <literal>observer</literal> role, which would
                    allow them to perform any read-only API call in the cloud:</para>
      <screen>
        {
    "rules": [
        {
            "remote": [
                {
                    "type": "Email"
                },
            ],
            "local": [
                {
                    "user": {
                        "name": "{0}"
                    }
                },
                {
                    "group": {
                        "domain": {
                            "id": "default"
                        },
                        "name": "federated-users"
                    }
                }
            ]
        },
        {
            "remote": [
                {
                    "type": "Title",
                    "any_one_of": [".*Manager$", "Supervisor"],
                    "regex": "true"
                },
            ],
            "local": [
                {
                    "group": {
                        "domain": {
                            "id": "default"
                        },
                        "name": "observers"
                    }
                }
            ]
        }
    ]
}
      </screen>
      <note>
        <para><literal>any_one_of</literal> and <literal>regex</literal> in the rule above map federated users into
                        the <literal>observers</literal> group when a user’s <literal>Title</literal> assertion matches any of
                        the regular expressions specified in the <literal>any_one_of</literal> attribute.</para>
      </note>
      <para>Keystone also supports the following:</para>
      <itemizedlist>
        <listitem>
          <para><literal>not_any_of</literal>, matches any assertion that does not include one of
                            the specified values.</para>
        </listitem>
        <listitem>
          <para><literal>blacklist</literal>, matches all assertions of the specified type except
                            those included in the specified value.</para>
        </listitem>
        <listitem>
          <para><literal>whitelist</literal> does not match any assertion except those listed in the
                            specified value.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</section>
