<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Integrate Identity with LDAP</title>
  <para>The OpenStack Identity service supports integration with existing LDAP
            directories for authentication and authorization services. LDAP back
            ends require initialization before configuring the OpenStack Identity
            service to work with it. For more information, see <link xlink:href="https://wiki.openstack.org/wiki/OpenLDAP">Setting up LDAP
                for use with Keystone</link>.</para>
  <para>When the OpenStack Identity service is configured to use LDAP back ends,
            you can split authentication (using the <emphasis>identity</emphasis> feature) and
            authorization (using the <emphasis>assignment</emphasis> feature). OpenStack Identity only
            supports read-only LDAP integration.</para>
  <para>The <emphasis>identity</emphasis> feature enables administrators to manage users and groups
            by each domain or the OpenStack Identity service entirely.</para>
  <para>The <emphasis>assignment</emphasis> feature enables administrators to manage project role
            authorization using the OpenStack Identity service SQL database, while
            providing user authentication through the LDAP directory.</para>
  <note>
    <para>It is possible to isolate identity related information to LDAP in a
                deployment and keep resource information in a separate datastore. It is not
                possible to do the opposite, where resource information is stored in LDAP
                and identity information is stored in SQL. If the resource or assignment
                back ends are integrated with LDAP, the identity back end must also be
                integrated with LDAP.</para>
  </note>
  <section xml:id="identity-ldap-server-setup">
    <title>Identity LDAP server set up</title>
    <important>
      <para>If you are using SELinux (enabled by default on RHEL derivatives),
                    then in order for the OpenStack Identity service to access LDAP servers,
                    you must enable the <literal>authlogin_nsswitch_use_ldap</literal> boolean value for
                    SELinux on the server running the OpenStack Identity service. To enable
                    and make the option persistent across reboots, set the following boolean
                    value as the root user:</para>
      <screen language="console"># setsebool -P authlogin_nsswitch_use_ldap on</screen>
    </important>
    <para>The Identity configuration is split into two separate back ends; identity
                (back end for users and groups), and assignments (back end for domains,
                projects, roles, role assignments). To configure Identity, set options
                in the <literal>/etc/keystone/keystone.conf</literal> file. See
                <xref linkend="integrate-identity-backend-ldap"/> for Identity back end configuration
                examples. Modify these examples as needed.</para>
    <para>
      <emphasis role="bold">To define the destination LDAP server</emphasis>
    </para>
    <para>Define the destination LDAP server in the <literal>/etc/keystone/keystone.conf</literal> file:</para>
    <screen language="ini">[ldap]
url = ldap://localhost
user = dc=Manager,dc=example,dc=org
password = samplepassword
suffix = dc=example,dc=org</screen>
    <para>Multiple LDAP servers can be supplied to <literal>url</literal> to provide high-availability
                support for a single LDAP backend. To specify multiple LDAP servers, simply
                change the <literal>url</literal> option in the <literal>[ldap]</literal> section to be a list, separated by
                commas:</para>
    <screen language="ini">url = "ldap://localhost,ldap://backup.localhost"</screen>
    <para>
      <emphasis role="bold">Additional LDAP integration settings</emphasis>
    </para>
    <para>Set these options in the <literal>/etc/keystone/keystone.conf</literal> file for a
                single LDAP server, or <literal>/etc/keystone/domains/keystone.DOMAIN_NAME.conf</literal>
                files for multiple back ends. Example configurations appear below each
                setting summary:</para>
    <para>
      <emphasis role="bold">Query option</emphasis>
    </para>
    <itemizedlist>
      <listitem>
        <para>Use <literal>query_scope</literal> to control the scope level of data presented
                                (search only the first level or search an entire sub-tree)
                                through LDAP.</para>
      </listitem>
      <listitem>
        <para>Use <literal>page_size</literal> to control the maximum results per page. A value
                                of zero disables paging.</para>
      </listitem>
      <listitem>
        <para>Use <literal>alias_dereferencing</literal> to control the LDAP dereferencing
                                option for queries.</para>
      </listitem>
    </itemizedlist>
    <screen language="ini">[ldap]
query_scope = sub
page_size = 0
alias_dereferencing = default
chase_referrals =</screen>
    <para>
      <emphasis role="bold">Debug</emphasis>
    </para>
    <para>Use <literal>debug_level</literal> to set the LDAP debugging level for LDAP calls.
                A value of zero means that debugging is not enabled.</para>
    <screen language="ini">[ldap]
debug_level = 4095</screen>
    <para>This setting sets <literal>OPT_DEBUG_LEVEL</literal> in the underlying python library. This
                field is a bit mask (integer), and the possible flags are documented in the
                OpenLDAP manpages. Commonly used values include 255 and 4095, with 4095 being
                more verbose and 0 being disabled. We recommend consulting the documentation
                for your LDAP back end when using this option.</para>
    <warning>
      <para>Enabling <literal>debug_level</literal> will negatively impact performance.</para>
    </warning>
    <para>
      <emphasis role="bold">Connection pooling</emphasis>
    </para>
    <para>Various LDAP back ends use a common LDAP module to interact with LDAP data. By
                default, a new connection is established for each LDAP operation. This is
                expensive when TLS support is enabled, which is a likely configuration in an
                enterprise setup. Reusing connections from a connection pool drastically
                reduces overhead of initiating a new connection for every LDAP operation.</para>
    <para>Use <literal>use_pool</literal> to enable LDAP connection pooling. Configure the
                connection pool size, maximum retry, reconnect trials, timeout (-1
                indicates indefinite wait) and lifetime in seconds.</para>
    <screen language="ini">[ldap]
use_pool = true
pool_size = 10
pool_retry_max = 3
pool_retry_delay = 0.1
pool_connection_timeout = -1
pool_connection_lifetime = 600</screen>
    <para>
      <emphasis role="bold">Connection pooling for end user authentication</emphasis>
    </para>
    <para>LDAP user authentication is performed via an LDAP bind operation. In large
                deployments, user authentication can use up all available connections in a
                connection pool. OpenStack Identity provides a separate connection pool
                specifically for user authentication.</para>
    <para>Use <literal>use_auth_pool</literal> to enable LDAP connection pooling for end user
                authentication. Configure the connection pool size and lifetime in seconds.
                Both <literal>use_pool</literal> and <literal>use_auth_pool</literal> must be enabled to pool connections for
                user authentication.</para>
    <screen language="ini">[ldap]
use_auth_pool = false
auth_pool_size = 100
auth_pool_connection_lifetime = 60</screen>
    <para>When you have finished the configuration, restart the OpenStack Identity
                service.</para>
    <warning>
      <para>During the service restart, authentication and authorization are
                    unavailable.</para>
    </warning>
  </section>
  <section xml:id="integrate-identity-backend-ldap">
    <title>Integrate Identity back end with LDAP</title>
    <para>The Identity back end contains information for users, groups, and group
                member lists. Integrating the Identity back end with LDAP allows
                administrators to use users and groups in LDAP.</para>
    <important>
      <para>For OpenStack Identity service to access LDAP servers, you must
                    define the destination LDAP server in the
                    <literal>/etc/keystone/keystone.conf</literal> file. For more information,
                    see <xref linkend="identity-ldap-server-setup"/>.</para>
    </important>
    <para>
      <emphasis role="bold">To integrate one Identity back end with LDAP</emphasis>
    </para>
    <procedure>
      <step>
        <para>Enable the LDAP Identity driver in the <literal>/etc/keystone/keystone.conf</literal>
                        file. This allows LDAP as an identity back end:</para>
        <screen language="ini">[identity]
#driver = sql
driver = ldap</screen>
      </step>
      <step>
        <para>Create the organizational units (OU) in the LDAP directory, and define
                        the corresponding location in the <literal>/etc/keystone/keystone.conf</literal>
                        file:</para>
        <screen language="ini">[ldap]
user_tree_dn = ou=Users,dc=example,dc=org
user_objectclass = inetOrgPerson

group_tree_dn = ou=Groups,dc=example,dc=org
group_objectclass = groupOfNames</screen>
        <note>
          <para>These schema attributes are extensible for compatibility with
                            various schemas. For example, this entry maps to the person
                            attribute in Active Directory:</para>
          <screen language="ini">user_objectclass = person</screen>
        </note>
        <para>Restart the OpenStack Identity service.</para>
        <warning>
          <para>During service restart, authentication and authorization are
                            unavailable.</para>
        </warning>
      </step>
    </procedure>
    <para>
      <emphasis role="bold">To integrate multiple Identity back ends with LDAP</emphasis>
    </para>
    <procedure>
      <step>
        <para>Set the following options in the <literal>/etc/keystone/keystone.conf</literal>
                        file:</para>
        <procedure>
          <step>
            <para>Enable the LDAP driver:</para>
            <screen language="ini">[identity]
#driver = sql
driver = ldap</screen>
          </step>
          <step>
            <para>Enable domain-specific drivers:</para>
            <screen language="ini">[identity]
domain_specific_drivers_enabled = True
domain_config_dir = /etc/keystone/domains</screen>
          </step>
        </procedure>
      </step>
      <step>
        <para>Restart the OpenStack Identity service.</para>
        <warning>
          <para>During service restart, authentication and authorization are
                            unavailable.</para>
        </warning>
      </step>
      <step>
        <para>List the domains using the dashboard, or the OpenStackClient CLI. Refer
                        to the <link xlink:href="https://docs.openstack.org/developer/python-openstackclient/command-list.html">Command List</link>
                        for a list of OpenStackClient commands.</para>
      </step>
      <step>
        <para>Create domains using OpenStack dashboard, or the OpenStackClient CLI.</para>
      </step>
      <step>
        <para>For each domain, create a domain-specific configuration file in the
                        <literal>/etc/keystone/domains</literal> directory. Use the file naming convention
                        <literal>keystone.DOMAIN_NAME.conf</literal>, where DOMAIN_NAME is the domain name
                        assigned in the previous step.</para>
        <note>
          <para>The options set in the
                            <literal>/etc/keystone/domains/keystone.DOMAIN_NAME.conf</literal> file will
                            override options in the <literal>/etc/keystone/keystone.conf</literal> file.</para>
        </note>
      </step>
      <step>
        <para>Define the destination LDAP server in the
                        <literal>/etc/keystone/domains/keystone.DOMAIN_NAME.conf</literal> file. For example:</para>
        <screen language="ini">[ldap]
url = ldap://localhost
user = dc=Manager,dc=example,dc=org
password = samplepassword
suffix = dc=example,dc=org</screen>
      </step>
      <step>
        <para>Create the organizational units (OU) in the LDAP directories, and define
                        their corresponding locations in the
                        <literal>/etc/keystone/domains/keystone.DOMAIN_NAME.conf</literal> file. For example:</para>
        <screen language="ini">[ldap]
user_tree_dn = ou=Users,dc=example,dc=org
user_objectclass = inetOrgPerson

group_tree_dn = ou=Groups,dc=example,dc=org
group_objectclass = groupOfNames</screen>
        <note>
          <para>These schema attributes are extensible for compatibility with
                            various schemas. For example, this entry maps to the person
                            attribute in Active Directory:</para>
          <screen language="ini">user_objectclass = person</screen>
        </note>
      </step>
      <step>
        <para>Restart the OpenStack Identity service.</para>
        <warning>
          <para>During service restart, authentication and authorization are
                            unavailable.</para>
        </warning>
      </step>
    </procedure>
    <para>
      <emphasis role="bold">Additional LDAP integration settings</emphasis>
    </para>
    <para>Set these options in the <literal>/etc/keystone/keystone.conf</literal> file for a
                single LDAP server, or <literal>/etc/keystone/domains/keystone.DOMAIN_NAME.conf</literal>
                files for multiple back ends. Example configurations appear below each
                setting summary:</para>
    <variablelist>
      <varlistentry>
        <term>Filters</term>
        <listitem>
          <para>Use filters to control the scope of data presented through LDAP.</para>
          <screen language="ini">[ldap]
user_filter = (memberof=cn=openstack-users,ou=workgroups,dc=example,dc=org)
group_filter =</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Identity attribute mapping</term>
        <listitem>
          <para>Mask account status values (include any additional attribute
                            mappings) for compatibility with various directory services.
                            Superfluous accounts are filtered with <literal>user_filter</literal>.</para>
          <para>Setting attribute ignore to list of attributes stripped off on
                            update.</para>
          <para>For example, you can mask Active Directory account status attributes
                            in the <literal>/etc/keystone/keystone.conf</literal> file:</para>
          <screen language="ini">[ldap]
user_id_attribute      = cn
user_name_attribute    = sn
user_mail_attribute    = mail
user_pass_attribute    = userPassword
user_enabled_attribute = userAccountControl
user_enabled_mask      = 2
user_enabled_invert    = false
user_enabled_default   = 512
user_default_project_id_attribute =
user_additional_attribute_mapping =

group_id_attribute     = cn
group_name_attribute   = ou
group_member_attribute = member
group_desc_attribute   = description
group_additional_attribute_mapping =</screen>
          <para>It is possible to model more complex LDAP schemas. For example, in the user
                            object, the objectClass posixAccount from <link xlink:href="https://tools.ietf.org/html/rfc2307">RFC2307</link>
                            is very common. If this is the underlying objectClass, then the <literal>uid</literal>
                            field should probably be <literal>uidNumber</literal> and the <literal>username</literal> field should be
                            either <literal>uid</literal> or <literal>cn</literal>. The following illustrates the configuration:</para>
          <screen language="ini">[ldap]
user_id_attribute = uidNumber
user_name_attribute = cn</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Enabled emulation</term>
        <listitem>
          <para>OpenStack Identity supports emulation for integrating with LDAP servers that
                            do not provide an <literal>enabled</literal> attribute for users. This allows OpenStack
                            Identity to advertise <literal>enabled</literal> attributes when the user entity in LDAP
                            does not. The <literal>user_enabled_emulation</literal> option must be enabled and the
                            <literal>user_enabled_emulation_dn</literal> option must be a valid LDAP group. Users in
                            the group specified by <literal>user_enabled_emulation_dn</literal> will be marked as
                            <literal>enabled</literal>. For example, the following will mark any user who is a member
                            of the <literal>enabled_users</literal> group as enabled:</para>
          <screen language="ini">[ldap]
user_enabled_emulation = True
user_enabled_emulation_dn = cn=enabled_users,cn=groups,dc=openstack,dc=org</screen>
          <para>If the directory server has an enabled attribute, but it is not a boolean
                            type, a mask can be used to convert it. This is useful when the enabled
                            attribute is an integer value. The following configuration highlights the
                            usage:</para>
          <screen language="ini">[ldap]
user_enabled_attribute = userAccountControl
user_enabled_mask = 2
user_enabled_default = 512</screen>
          <para>In this case, the attribute is an integer and the enabled attribute is
                            listed in bit 1. If the mask configured <literal>user_enabled_mask</literal> is different
                            from 0, it retrieves the attribute from <literal>user_enabled_attribute</literal> and
                            performs an add operation with the <literal>user_enabled_mask</literal>. If the sum of the
                            operation matches the mask, then the account is disabled.</para>
          <para>The value of <literal>user_enabled_attribute</literal> is also saved before applying the
                            add operation in <literal>enabled_nomask</literal>. This is done in case the user needs to
                            be enabled or disabled. Lastly, setting <literal>user_enabled_default</literal> is needed
                            in order to create a default value on the integer attribute (512 = NORMAL
                            ACCOUNT in Active Directory).</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>When you have finished configuration, restart the OpenStack Identity
                service.</para>
    <warning>
      <para>During service restart, authentication and authorization are
                    unavailable.</para>
    </warning>
  </section>
  <section>
    <title>Secure the OpenStack Identity service connection to an LDAP back end</title>
    <para>We recommend securing all connections between OpenStack Identity and LDAP. The
                Identity service supports the use of TLS to encrypt LDAP traffic. Before
                configuring this, you must first verify where your certificate authority file
                is located. For more information, see the <link xlink:href="https://docs.openstack.org/security-guide/secure-communication/introduction-to-ssl-and-tls.html">OpenStack Security Guide SSL
                    introduction</link>.</para>
    <para>Once you verify the location of your certificate authority file:</para>
    <para>
      <emphasis role="bold">To configure TLS encryption on LDAP traffic</emphasis>
    </para>
    <procedure>
      <step>
        <para>Open the <literal>/etc/keystone/keystone.conf</literal> configuration file.</para>
      </step>
      <step>
        <para>Find the <literal>[ldap]</literal> section.</para>
      </step>
      <step>
        <para>In the <literal>[ldap]</literal> section, set the <literal>use_tls</literal> configuration key to
                        <literal>True</literal>. Doing so will enable TLS.</para>
      </step>
      <step>
        <para>Configure the Identity service to use your certificate authorities file.
                        To do so, set the <literal>tls_cacertfile</literal> configuration key in the <literal>ldap</literal>
                        section to the certificate authorities file’s path.</para>
        <note>
          <para>You can also set the <literal>tls_cacertdir</literal> (also in the <literal>ldap</literal>
                            section) to the directory where all certificate authorities files
                            are kept. If both <literal>tls_cacertfile</literal> and <literal>tls_cacertdir</literal> are set,
                            then the latter will be ignored.</para>
        </note>
      </step>
      <step>
        <para>Specify what client certificate checks to perform on incoming TLS
                        sessions from the LDAP server. To do so, set the <literal>tls_req_cert</literal>
                        configuration key in the <literal>[ldap]</literal> section to <literal>demand</literal>, <literal>allow</literal>, or
                        <literal>never</literal>:</para>
        <itemizedlist>
          <listitem>
            <para><literal>demand</literal> - The LDAP server always receives certificate
                                        requests. The session terminates if no certificate
                                        is provided, or if the certificate provided cannot be verified
                                        against the existing certificate authorities file.</para>
          </listitem>
          <listitem>
            <para><literal>allow</literal> - The LDAP server always receives certificate
                                        requests. The session will proceed as normal even if a certificate
                                        is not provided. If a certificate is provided but it cannot be
                                        verified against the existing certificate authorities file, the
                                        certificate will be ignored and the session will proceed as
                                        normal.</para>
          </listitem>
          <listitem>
            <para><literal>never</literal> - A certificate will never be requested.</para>
          </listitem>
        </itemizedlist>
      </step>
    </procedure>
    <para>When you have finished configuration, restart the OpenStack Identity
                service.</para>
    <note>
      <para>If you are unable to connect to LDAP via OpenStack Identity, or observe a
                    <emphasis>SERVER DOWN</emphasis> error, set the <literal>TLS_CACERT</literal> in <literal>/etc/ldap/ldap.conf</literal> to
                    the same value specified in the <literal>[ldap] tls_certificate</literal> section of
                    <literal>keystone.conf</literal>.</para>
    </note>
    <para>On distributions that include openstack-config, you can configure TLS
                encryption on LDAP traffic by running the following commands instead.</para>
    <screen language="console"># openstack-config --set /etc/keystone/keystone.conf \
  ldap use_tls True
# openstack-config --set /etc/keystone/keystone.conf \
  ldap tls_cacertfile ``CA_FILE``
# openstack-config --set /etc/keystone/keystone.conf \
  ldap tls_req_cert ``CERT_BEHAVIOR``</screen>
    <para>Where:</para>
    <itemizedlist>
      <listitem>
        <para><literal>CA_FILE</literal> is the absolute path to the certificate authorities file
                        that should be used to encrypt LDAP traffic.</para>
      </listitem>
      <listitem>
        <para><literal>CERT_BEHAVIOR</literal> specifies what client certificate checks to perform
                        on an incoming TLS session from the LDAP server (<literal>demand</literal>,
                        <literal>allow</literal>, or <literal>never</literal>).</para>
      </listitem>
    </itemizedlist>
  </section>
</section>
