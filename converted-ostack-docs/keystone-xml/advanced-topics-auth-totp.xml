<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Time-based One-time Password (TOTP)</title>
  <section>
    <title>Configuring TOTP</title>
    <para>TOTP is not enabled in Keystone by default.  To enable it add the <literal>totp</literal>
                authentication method to the <literal>[auth]</literal> section in <literal>keystone.conf</literal>:</para>
    <screen language="ini">[auth]
methods = external,password,token,oauth1,totp</screen>
    <para>For a user to have access to TOTP, he must have configured TOTP credentials in
                Keystone and a TOTP device (i.e. <link xlink:href="http://www.google.com/2step">Google Authenticator</link>).</para>
    <para>TOTP uses a base32 encoded string for the secret. The secret must be at least
                128 bits (16 bytes). The following python code can be used to generate a TOTP
                secret:</para>
    <screen language="python">import base64
message = '1234567890123456'
print base64.b32encode(message).rstrip('=')</screen>
    <para>Example output:</para>
    <screen>GEZDGNBVGY3TQOJQGEZDGNBVGY</screen>
    <para>This generated secret can then be used to add new ‘totp’ credentials to a
                specific user.</para>
    <section>
      <title>Create a TOTP credential</title>
      <para>Create <literal>totp</literal> credentials for user:</para>
      <screen language="bash">USER_ID=b7793000f8d84c79af4e215e9da78654
SECRET=GEZDGNBVGY3TQOJQGEZDGNBVGY

curl -i \
  -H "Content-Type: application/json" \
  -d '
{
    "credential": {
        "blob": "'$SECRET'",
        "type": "totp",
        "user_id": "'$USER_ID'"
    }
}' \
  http://localhost:5000/v3/credentials ; echo</screen>
    </section>
    <section>
      <title>Google Authenticator</title>
      <para>On a device install Google Authenticator and inside the app click on ‘Set up
                    account’ and then click on ‘Enter provided key’.  In the input fields enter
                    account name and secret.  Optionally a QR code can be generated programmatically
                    to avoid having to type the information.</para>
    </section>
    <section>
      <title>QR code</title>
      <para>Create TOTP QR code for device:</para>
      <screen language="python">import qrcode

secret='GEZDGNBVGY3TQOJQGEZDGNBVGY'
uri = 'otpauth://totp/{name}?secret={secret}&amp;issuer={issuer}'.format(
    name='name',
    secret=secret,
    issuer='Keystone')

img = qrcode.make(uri)
img.save('totp.png')</screen>
      <para>In Google Authenticator app click on ‘Set up account’ and then click on ‘Scan
                    a barcode’, and then scan the ‘totp.png’ image.  This should create a new TOTP
                    entry in the application.</para>
    </section>
  </section>
  <section>
    <title>Authenticate with TOTP</title>
    <para>Google Authenticator will generate a 6 digit PIN (passcode) every few seconds.
                Use the passcode and your user ID to authenticate using the <literal>totp</literal> method.</para>
    <section>
      <title>Tokens</title>
      <para>Get a token with default scope (may be unscoped) using totp:</para>
      <screen language="bash">USER_ID=b7793000f8d84c79af4e215e9da78654
PASSCODE=012345

curl -i \
  -H "Content-Type: application/json" \
  -d '
{ "auth": {
        "identity": {
            "methods": [
                "totp"
            ],
            "totp": {
                "user": {
                    "id": "'$USER_ID'",
                    "passcode": "'$PASSCODE'"
                }
            }
        }
    }
}' \
  http://localhost:5000/v3/auth/tokens ; echo</screen>
    </section>
  </section>
</section>
