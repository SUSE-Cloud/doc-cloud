<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Performance and scaling</title>
  <para>Before you begin tuning Keystone for performance and scalability, you should
            first know that Keystone is just a two tier horizontally-scalable web
            application, and the most effective methods for scaling it are going to be the
            same as for any other similarly designed web application: give it more
            processes, more memory, scale horizontally, and load balance the result.</para>
  <para>With that said, there are many opportunities for tuning the performance of
            Keystone, many of which are actually trade-offs between performance and
            security that you need to judge for yourself, and tune accordingly.</para>
  <section>
    <title>Pruning expired tokens from backend storage</title>
    <para>Using a persistent token format will result in an ever-growing backend store.
                Keystone will not remove, or prune, tokens from the backend even after they are
                expired. This can be managed manually using <literal>keystone-manage token_flush</literal>,
                which will purge expired tokens from the data store in batches. Diligently
                pruning expired tokens will prevent token bloat.</para>
    <note>
      <para>This optimization is not necessary for deployments leveraging Fernet
                    tokens, which are non-persistent in nature.</para>
    </note>
  </section>
  <section>
    <title>Keystone configuration options that affect performance</title>
    <para>These are all of the options in <literal>keystone.conf</literal> that have a direct impact on
                performance. See the help descriptions for these options for more specific
                details on how and why you might want to tune these options for yourself.</para>
    <itemizedlist>
      <listitem>
        <para><literal>[DEFAULT] crypt_strength</literal>: Reduce this number to increase performance,
                        increase this number to make SQL managed password checking more secure.</para>
      </listitem>
      <listitem>
        <para><literal>[DEFAULT] max_project_tree_depth</literal>: Reduce this number to increase
                        performance, increase this number to cater to more complicated hierarchical
                        multitenancy use cases.</para>
      </listitem>
      <listitem>
        <para><literal>[DEFAULT] max_password_length</literal>: Reduce this number to increase
                        performance, increase this number to allow for more secure passwords.</para>
      </listitem>
      <listitem>
        <para><literal>[cache] enable</literal>: Enable this option to increase performance, but you also
                        need to configure other options in the <literal>[cache]</literal> section to actually
                        utilize caching.</para>
      </listitem>
      <listitem>
        <para><literal>[token] provider</literal>: All supported token providers have been primarily
                        driven by performance considerations. UUID and Fernet both require online
                        validation (cacheable HTTP calls back to keystone to validate tokens).
                        Fernet has the highest scalability characteristics overall, but requires more
                        work to validate, and therefore enabling caching (<literal>[cache] enable</literal>) is
                        absolutely critical.</para>
      </listitem>
      <listitem>
        <para><literal>[fernet] max_active_keys</literal>: If you’re using Fernet tokens, decrease this
                        option to improve performance, increase this option to support more advanced
                        key rotation strategies.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Keystone middleware configuration options that affect performance</title>
    <para>This configuration resides in the paste pipelines of the services consuming
                token validation from keystone. For example, the nova, cinder, and swift services.</para>
    <itemizedlist>
      <listitem>
        <para><literal>cache</literal>: When keystone’s <literal>auth_token</literal> middleware is deployed with a
                        swift cache, use this option to have <literal>auth_token</literal> middleware share a caching
                        backend with swift. Otherwise, use the <literal>memcached_servers</literal> option instead.</para>
      </listitem>
      <listitem>
        <para><literal>memcached_servers</literal>: Set this option to share a cache across
                        <literal>keystonemiddleware.auth_token</literal> processes.</para>
      </listitem>
      <listitem>
        <para><literal>token_cache_time</literal>: Increase this option to improve performance, decrease
                        this option to respond to token revocation events more quickly (thereby
                        increasing security).</para>
      </listitem>
      <listitem>
        <para><literal>revocation_cache_time</literal>: Increase this option to improve performance,
                        decrease this option to respond to token revocation events more quickly
                        (thereby increasing security).</para>
      </listitem>
      <listitem>
        <para><literal>memcache_security_strategy</literal>: Do not set this option to improve
                        performance, but set it to improve security where you’re sharing memcached
                        with other processes.</para>
      </listitem>
      <listitem>
        <para><literal>include_service_catalog</literal>: Disable this option to improve performance, if
                        the protected service does not require a service catalog.</para>
      </listitem>
    </itemizedlist>
  </section>
</section>
