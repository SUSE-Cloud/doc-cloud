<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec.operation.identity">
 <title>Understanding Domains, Projects, Users, Groups, and Roles</title>
 <para>
  The identity service uses these concepts for authentication within your cloud
  and these are descriptions of each of them.
 </para>
 <para>
  The &kw-hos-phrase; identity service uses OpenStack Keystone and the concepts
  of domains, projects, users, groups, and roles to manage authentication. This
  page describes how these work together.
 </para>
 <section xml:id="domains_projects_roles">
  <title>Domains, Projects, Users, Groups, and Roles</title>
  <para>
   Most large business organizations use an identity system such as Microsoft
   Active Directory to store and manage their internal user information. A
   variety of applications such as HR systems are, in turn, used to manage the
   data inside of Active Directory. These same organizations often deploy a
   separate user management system for external users such as contractors,
   partners, and customers. Multiple authentication systems are then deployed
   to support multiple types of users.
  </para>
  <para>
   An LDAP-compatible directory such as Active Directory provides a top-level
   organization or domain component. In this example, the organization is
   called Acme. The domain component (DC) is defined as acme.com. Underneath
   the top level domain component are entities referred to as organizational
   units (OU). Organizational units are typically designed to reflect the
   entity structure of the organization. For example, this particular schema
   has 3 different organizational units for the Marketing, IT, and Contractors
   units or departments of the Acme organization. Users (and other types of
   entities like printers) are then defined appropriately underneath each
   organizational entity. The Keystone domain entity can be used to match the
   LDAP OU entity; each LDAP OU can have a corresponding Keystone domain
   created. In this example, both the Marketing and IT domains represent
   internal employees of Acme and use the same authentication source. The
   Contractors domain contains all external people associated with Acme.
   UserIDs associated with the Contractor domain are maintained in a separate
   user directory and thus have a different authentication source assigned to
   the corresponding Keystone-defined Contractors domain.
  </para>
  <para>
   A public cloud deployment usually supports multiple, separate organizations.
   Keystone domains can be created to provide a domain per organization with
   each domain configured to the underlying organization's authentication
   source. For example, the ABC company would have a Keystone domain created
   called "abc". All users authenticating to the "abc" domain would be
   authenticated against the authentication system provided by the ABC
   organization; in this case ldap://ad.abc.com
  </para>
 </section>
 <section xml:id="domains">
  <title>Domains</title>
  <para>
   A domain is a top-level container targeted at defining major organizational
   entities.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Domains can be used in a multi-tenant OpenStack deployment to segregate
     projects and users from different companies in a public cloud deployment
     or different organizational units in a private cloud setting.
    </para>
   </listitem>
   <listitem>
    <para>
     Domains provide the means to identify multiple authentication sources.
    </para>
   </listitem>
   <listitem>
    <para>
     Each domain is unique within an OpenStack implementation.
    </para>
   </listitem>
   <listitem>
    <para>
     Multiple projects can be assigned to a domain but each project can only
     belong to a single domain.
    </para>
   </listitem>
   <listitem>
    <para>
     Each domain and project have an assigned admin.
    </para>
   </listitem>
   <listitem>
    <para>
     Domains are created by the "admin" service account and domain admins are
     assigned by the "admin" user.
    </para>
   </listitem>
   <listitem>
    <para>
     The "admin" UserID (UID) is created during the Keystone installation, has
     the "admin" role assigned to it, and is defined as the "Cloud Admin". This
     UID is created using the "magic" or "secret" admin token found in the
     default 'keystone.conf' file installed during &kw-hos; keystone
     installation after the Keystone service has been installed. This secret
     token should be removed after installation and the "admin" password
     changed.
    </para>
   </listitem>
   <listitem>
    <para>
     The "default" domain is created automatically during the &kw-hos; Keystone
     installation.
    </para>
   </listitem>
   <listitem>
    <para>
     The "default" domain contains all OpenStack service accounts that are
     installed during the &kw-hos; keystone installation process.
    </para>
   </listitem>
   <listitem>
    <para>
     No users but the OpenStack service accounts should be assigned to the
     "default" domain.
    </para>
   </listitem>
   <listitem>
    <para>
     Domain admins can be any UserID inside or outside of the domain.
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section xml:id="domain_admin">
  <title>Domain Administrator</title>
  <para>
   A UUID is a domain administrator for a given domain if that UID has a
   domain-scoped token scoped for the given domain. This means that the UID has
   the "admin" role assigned to it for the selected domain.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The Cloud Admin UID assigns the domain administrator role for a domain to
     a selected UID.
    </para>
   </listitem>
   <listitem>
    <para>
     A domain administrator can create and delete local users who have
     authenticated against Keystone. These users will be assigned to the domain
     belonging to the domain administrator who creates the UserID.
    </para>
   </listitem>
   <listitem>
    <para>
     A domain administrator can only create users and projects within her
     assigned domains.
    </para>
   </listitem>
   <listitem>
    <para>
     A domain administrator can assign the "admin" role of their domains to
     another UID or revoke it; each UID with the "admin" role for a specified
     domain will be a co-administrator for that domain.
    </para>
   </listitem>
   <listitem>
    <para>
     A UID can be assigned to be the domain admin of multiple domains.
    </para>
   </listitem>
   <listitem>
    <para>
     A domain administrator can assign non-admin roles to any users and groups
     within their assigned domain, including projects owned by their assigned
     domain.
    </para>
   </listitem>
   <listitem>
    <para>
     A domain admin UID can belong to projects within their administered
     domains.
    </para>
   </listitem>
   <listitem>
    <para>
     Each domain can have a different authentication source.
    </para>
   </listitem>
   <listitem>
    <para>
     The domain field is used during the initial login to define the source of
     authentication.
    </para>
   </listitem>
   <listitem>
    <para>
     The "List Users" function can only be executed by a UID with the domain
     admin role.
    </para>
   </listitem>
   <listitem>
    <para>
     A domain administrator can assign a UID from outside of their domain the
     "domain admin" role but it is assumed that the domain admin would know the
     specific UID and would not need to list users from an external domain.
    </para>
   </listitem>
   <listitem>
    <para>
     A domain administrator can assign a UID from outside of their domain the
     "project admin" role for a specific project within their domain but it is
     assumed that the domain admin would know the specific UID and would not
     need to list users from an external domain.
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section xml:id="projects">
  <title>Projects</title>
  <para>
   The domain administrator creates projects within his assigned domain and
   assigns the project admin role to each project to a selected UID. A UID is a
   project administrator for a given project if that UID has a project-scoped
   token scoped for the given project. There can be multiple projects per
   domain. The project admin sets the project quota settings, adds/deletes
   users and groups to and from the project, and defines the user/group roles
   for the assigned project. Users can be belong to multiple projects and have
   different roles on each project. Users are assigned to a specific domain and
   a default project. Roles are assigned per project.
  </para>
 </section>
 <section xml:id="users_groups">
  <title>Users and Groups</title>
  <para>
   Each user belongs to one domain only. Domain assignments are defined either
   by the domain configuration files or by a domain administrator when creating
   a new, local (user authenticated against Keystone) user. There is no current
   method for "moving" a user from one domain to another. A user can belong to
   multiple projects within a domain with a different role assignment per
   project. A group is a collection of users. Users can be assigned to groups
   either by the project admin or automatically via mappings if an external
   authentication source is defined for the assigned domain. Groups can be
   assigned to multiple projects within a domain and have different roles
   assigned to the group per project. A group can be assigned the "admin" role
   for a domain or project. All members of the group will be an "admin" for the
   selected domain or project.
  </para>
 </section>
 <section xml:id="roles">
  <title>Roles</title>
  <para>
   Service roles represent the functionality used to implement the OpenStack
   role based access control (RBAC), model used to manage access to each
   OpenStack service. Roles are named and assigned per user or group for each
   project by the identity service. Role definition and policy
   enforcement are defined outside of the identity service independently by
   each OpenStack service. The token generated by the identity service for each
   user authentication contains the role assigned to that user for a particular
   project. When a user attempts to access a specific OpenStack service, the
   role is parsed by the service, compared to the service-specific policy file,
   and then granted the resource access defined for that role by the service
   policy file.
  </para>
  <para>
   Each service has its own service policy file with the
   /etc/[SERVICE_CODENAME]/policy.json file name format where
   [SERVICE_CODENAME] represents a specific OpenStack service name. For
   example, the OpenStack Nova service would have a policy file called
   /etc/nova/policy.json. With Service policy files can be modified and
   deployed to control nodes from the &lcm;. Administrators are
   advised to validate policy changes before checking in the changes to the
   site branch of the local git repository before rolling the changes into
   production. Do not make changes to policy files without having a way to
   validate them.
  </para>
  <para>
   The policy files are located at the following site branch locations on the
   &lcm;.
  </para>
<screen>~/openstack/ardana/ansible/roles/GLA-API/templates/policy.json.j2
~/openstack/ardana/ansible/roles/ironic-common/files/policy.json
~/openstack/ardana/ansible/roles/KEYMGR-API/templates/policy.json
~/openstack/ardana/ansible/roles/heat-common/files/policy.json
~/openstack/ardana/ansible/roles/CND-API/templates/policy.json
~/openstack/ardana/ansible/roles/nova-common/files/policy.json
~/openstack/ardana/ansible/roles/CEI-API/templates/policy.json.j2
~/openstack/ardana/ansible/roles/neutron-common/templates/policy.json.j2</screen>
  <para>
   For test and validation, policy files can be modified in a non-production
   environment from the <filename>~/scratch/</filename> directory. For a specific
   policy file, run a search for policy.json. To deploy policy changes for a
   service, run the service specific reconfiguration playbook (for example,
   nova-reconfigure.yml). For a complete list of reconfiguration playbooks,
   change directories to <filename>~/scratch/ansible/next/ardana/ansible</filename>
   and run this command:
  </para>
<screen>&prompt.ardana;ls | grep reconfigure</screen>
  <para>
   A read-only role named <literal>project_observer</literal> is explicitly
   created in &kw-hos-phrase;. Any user who is granted this role can use
   <literal>list_project</literal>.
  </para>
 </section>
</section>
