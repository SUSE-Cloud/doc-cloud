<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Introduction to Networking</title>
  <para>The Networking service, code-named neutron, provides an API that lets
            you define network connectivity and addressing in the cloud. The
            Networking service enables operators to leverage different networking
            technologies to power their cloud networking. The Networking service
            also provides an API to configure and manage a variety of network
            services ranging from L3 forwarding and NAT to load balancing, edge
            firewalls, and IPsec VPN.</para>
  <para>For a detailed description of the Networking API abstractions and their
            attributes, see the <link xlink:href="https://developer.openstack.org/api-ref/networking/v2/">OpenStack Networking API v2.0
                Reference</link>.</para>
  <note>
    <para>If you use the Networking service, do not run the Compute
                <literal>nova-network</literal> service (like you do in traditional Compute deployments).
                When you configure networking, see the Compute-related topics in this
                Networking section.</para>
  </note>
  <section>
    <title>Networking API</title>
    <para>Networking is a virtual network service that provides a powerful API to
                define the network connectivity and IP addressing that devices from
                other services, such as Compute, use.</para>
    <para>The Compute API has a virtual server abstraction to describe computing
                resources. Similarly, the Networking API has virtual network, subnet,
                and port abstractions to describe networking resources.</para>
    <informaltable>
      <tgroup cols="2">
        <colspec colname="c1" colwidth="19.7*"/>
        <colspec colname="c2" colwidth="80.3*"/>
        <thead>
          <row>
            <entry>
              <para>Resource</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <emphasis role="bold">Network</emphasis>
              </para>
            </entry>
            <entry>
              <para>An isolated L2 segment, analogous to VLAN in the physical
                                    networking world.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <emphasis role="bold">Subnet</emphasis>
              </para>
            </entry>
            <entry>
              <para>A block of v4 or v6 IP addresses and associated
                                    configuration state.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <emphasis role="bold">Port</emphasis>
              </para>
            </entry>
            <entry>
              <para>A connection point for attaching a single device, such as
                                    the NIC of a virtual server, to a virtual network. Also
                                    describes the associated network configuration, such as
                                    the MAC and IP addresses to be used on that port.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      <emphasis role="bold">Networking resources</emphasis>
    </para>
    <para>To configure rich network topologies, you can create and configure
                networks and subnets and instruct other OpenStack services like Compute
                to attach virtual devices to ports on these networks.</para>
    <para>In particular, Networking supports each project having multiple private
                networks and enables projects to choose their own IP addressing scheme,
                even if those IP addresses overlap with those that other projects use.</para>
    <para>The Networking service:</para>
    <itemizedlist>
      <listitem>
        <para>Enables advanced cloud networking use cases, such as building
                        multi-tiered web applications and enabling migration of applications
                        to the cloud without changing IP addresses.</para>
      </listitem>
      <listitem>
        <para>Offers flexibility for administrators to customize network
                        offerings.</para>
      </listitem>
      <listitem>
        <para>Enables developers to extend the Networking API. Over time, the
                        extended functionality becomes part of the core Networking API.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Configure SSL support for networking API</title>
    <para>OpenStack Networking supports SSL for the Networking API server. By
                default, SSL is disabled but you can enable it in the <literal>neutron.conf</literal>
                file.</para>
    <para>Set these options to configure SSL:</para>
    <variablelist>
      <varlistentry>
        <term>
          <literal>use_ssl = True</literal>
        </term>
        <listitem>
          <para>Enables SSL on the networking API server.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>ssl_cert_file = PATH_TO_CERTFILE</literal>
        </term>
        <listitem>
          <para>Certificate file that is used when you securely start the Networking
                            API server.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>ssl_key_file = PATH_TO_KEYFILE</literal>
        </term>
        <listitem>
          <para>Private key file that is used when you securely start the Networking
                            API server.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>ssl_ca_file = PATH_TO_CAFILE</literal>
        </term>
        <listitem>
          <para>Optional. CA certificate file that is used when you securely start
                            the Networking API server. This file verifies connecting clients.
                            Set this option when API clients must authenticate to the API server
                            by using SSL certificates that are signed by a trusted CA.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>tcp_keepidle = 600</literal>
        </term>
        <listitem>
          <para>The value of TCP_KEEPIDLE, in seconds, for each server socket when
                            starting the API server. Not supported on OS X.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>retry_until_window = 30</literal>
        </term>
        <listitem>
          <para>Number of seconds to keep retrying to listen.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>backlog = 4096</literal>
        </term>
        <listitem>
          <para>Number of backlog requests with which to configure the socket.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Load-Balancer-as-a-Service (LBaaS) overview</title>
    <para>Load-Balancer-as-a-Service (LBaaS) enables Networking to distribute
                incoming requests evenly among designated instances. This distribution
                ensures that the workload is shared predictably among instances and
                enables more effective use of system resources. Use one of these load
                balancing methods to distribute incoming requests:</para>
    <variablelist>
      <varlistentry>
        <term>Round robin</term>
        <listitem>
          <para>Rotates requests evenly between multiple instances.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Source IP</term>
        <listitem>
          <para>Requests from a unique source IP address are consistently directed
                            to the same instance.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Least connections</term>
        <listitem>
          <para>Allocates requests to the instance with the least number of active
                            connections.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <informaltable>
      <tgroup cols="2">
        <colspec colname="c1" colwidth="32.9*"/>
        <colspec colname="c2" colwidth="67.1*"/>
        <thead>
          <row>
            <entry>
              <para>Feature</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <emphasis role="bold">Monitors</emphasis>
              </para>
            </entry>
            <entry>
              <para>LBaaS provides availability monitoring with the
                                    <literal>ping</literal>, TCP, HTTP and HTTPS GET methods.
                                    Monitors are implemented to determine whether
                                    pool members are available to handle requests.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <emphasis role="bold">Management</emphasis>
              </para>
            </entry>
            <entry>
              <para>LBaaS is managed using a variety of tool sets.
                                    The REST API is available for programmatic
                                    administration and scripting. Users perform
                                    administrative management of load balancers
                                    through either the CLI (<literal>neutron</literal>) or the
                                    OpenStack Dashboard.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <emphasis role="bold">Connection limits</emphasis>
              </para>
            </entry>
            <entry>
              <para>Ingress traffic can be shaped with <emphasis>connection
                                        limits</emphasis>. This feature allows workload control,
                                    and can also assist with mitigating DoS (Denial
                                    of Service) attacks.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <emphasis role="bold">Session persistence</emphasis>
              </para>
            </entry>
            <entry>
              <para>LBaaS supports session persistence by ensuring
                                    incoming requests are routed to the same instance
                                    within a pool of multiple instances. LBaaS
                                    supports routing decisions based on cookies and
                                    source IP address.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>
  <section>
    <title>Firewall-as-a-Service (FWaaS) overview</title>
    <para>For information on Firewall-as-a-Service (FWaaS), consult the <link xlink:href="https://docs.openstack.org/neutron/pike/admin/fwaas.html">Networking Guide</link>.</para>
  </section>
  <section>
    <title>Allowed-address-pairs</title>
    <para><literal>Allowed-address-pairs</literal> enables you to specify
                mac_address and ip_address(cidr) pairs that pass through a port regardless
                of subnet. This enables the use of protocols such as VRRP, which floats
                an IP address between two instances to enable fast data plane failover.</para>
    <note>
      <para>Currently, only the ML2, Open vSwitch, and VMware NSX plug-ins
                    support the allowed-address-pairs extension.</para>
    </note>
    <para>
      <emphasis role="bold">Basic allowed-address-pairs operations.</emphasis>
    </para>
    <itemizedlist>
      <listitem>
        <para>Create a port with a specified allowed address pair:</para>
        <screen language="console">$ openstack port create port1 --allowed-address \
ip-address=&lt;IP_CIDR&gt;[,mac_address=&lt;MAC_ADDRESS]</screen>
      </listitem>
      <listitem>
        <para>Update a port by adding allowed address pairs:</para>
        <screen language="console">$ openstack port set PORT_UUID --allowed-address \
ip-address=&lt;IP_CIDR&gt;[,mac_address=&lt;MAC_ADDRESS]</screen>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Virtual-Private-Network-as-a-Service (VPNaaS)</title>
    <para>The VPNaaS extension enables OpenStack projects to extend private networks
                across the internet.</para>
    <para>VPNaas is a service. It is a parent object that associates a VPN
                with a specific subnet and router. Only one VPN service object can be
                created for each router and each subnet. However, each VPN service object
                can have any number of IP security connections.</para>
    <para>The Internet Key Exchange (IKE) policy specifies the authentication and
                encryption algorithms to use during phase one and two negotiation of a VPN
                connection. The IP security policy specifies the authentication and encryption
                algorithm and encapsulation mode to use for the established VPN connection.
                Note that you cannot update the IKE and IPSec parameters for live tunnels.</para>
    <para>You can set parameters for site-to-site IPsec connections, including peer
                CIDRs, MTU, authentication mode, peer address, DPD settings, and status.</para>
    <para>The current implementation of the VPNaaS extension provides:</para>
    <itemizedlist>
      <listitem>
        <para>Site-to-site VPN that connects two private networks.</para>
      </listitem>
      <listitem>
        <para>Multiple VPN connections per project.</para>
      </listitem>
      <listitem>
        <para>IKEv1 policy support with 3des, aes-128, aes-256, or aes-192 encryption.</para>
      </listitem>
      <listitem>
        <para>IPSec policy support with 3des, aes-128, aes-192, or aes-256 encryption,
                        sha1 authentication, ESP, AH, or AH-ESP transform protocol, and tunnel or
                        transport mode encapsulation.</para>
      </listitem>
      <listitem>
        <para>Dead Peer Detection (DPD) with hold, clear, restart, disabled, or
                        restart-by-peer actions.</para>
      </listitem>
    </itemizedlist>
    <para>The VPNaaS driver plugin can be configured in the neutron configuration file.
                You can then enable the service.</para>
  </section>
</section>
