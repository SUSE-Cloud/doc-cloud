<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>IPv6</title>
  <para>This section describes the following items:</para>
  <itemizedlist>
    <listitem>
      <para>How to enable dual-stack (IPv4 and IPv6 enabled) instances.</para>
    </listitem>
    <listitem>
      <para>How those instances receive an IPv6 address.</para>
    </listitem>
    <listitem>
      <para>How those instances communicate across a router to other subnets or
                    the internet.</para>
    </listitem>
    <listitem>
      <para>How those instances interact with other OpenStack services.</para>
    </listitem>
  </itemizedlist>
  <para>Enabling a dual-stack network in OpenStack Networking simply requires
            creating a subnet with the <literal>ip_version</literal> field set to <literal>6</literal>, then the
            IPv6 attributes (<literal>ipv6_ra_mode</literal> and <literal>ipv6_address_mode</literal>) set.  The
            <literal>ipv6_ra_mode</literal> and <literal>ipv6_address_mode</literal> will be described in detail in
            the next section. Finally, the subnets <literal>cidr</literal> needs to be provided.</para>
  <para>This section does not include the following items:</para>
  <itemizedlist>
    <listitem>
      <para>Single stack IPv6 project networking</para>
    </listitem>
    <listitem>
      <para>OpenStack control communication between servers and services over an IPv6
                    network.</para>
    </listitem>
    <listitem>
      <para>Connection to the OpenStack APIs via an IPv6 transport network</para>
    </listitem>
    <listitem>
      <para>IPv6 multicast</para>
    </listitem>
    <listitem>
      <para>IPv6 support in conjunction with any out of tree routers, switches, services
                    or agents whether in physical or virtual form factors.</para>
    </listitem>
  </itemizedlist>
  <section>
    <title>Neutron subnets and the IPv6 API attributes</title>
    <para>As of Juno, the OpenStack Networking service (neutron) provides two
                new attributes to the subnet object, which allows users of the API to
                configure IPv6 subnets.</para>
    <para>There are two IPv6 attributes:</para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>ipv6_ra_mode</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>ipv6_address_mode</literal>
        </para>
      </listitem>
    </itemizedlist>
    <para>These attributes can be set to the following values:</para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>slaac</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>dhcpv6-stateful</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>dhcpv6-stateless</literal>
        </para>
      </listitem>
    </itemizedlist>
    <para>The attributes can also be left unset.</para>
    <section>
      <title>IPv6 addressing</title>
      <para>The <literal>ipv6_address_mode</literal> attribute is used to control how addressing is
                    handled by OpenStack. There are a number of different ways that guest
                    instances can obtain an IPv6 address, and this attribute exposes these
                    choices to users of the Networking API.</para>
    </section>
    <section>
      <title>Router advertisements</title>
      <para>The <literal>ipv6_ra_mode</literal> attribute is used to control router
                    advertisements for a subnet.</para>
      <para>The IPv6 Protocol uses Internet Control Message Protocol packets
                    (ICMPv6) as a way to distribute information about networking. ICMPv6
                    packets with the type flag set to 134 are called “Router
                    Advertisement” packets, which contain information about the router
                    and the route that can be used by guest instances to send network
                    traffic.</para>
      <para>The <literal>ipv6_ra_mode</literal> is used to specify if the Networking service should
                    generate Router Advertisement packets for a subnet.</para>
    </section>
    <section>
      <title>ipv6_ra_mode and ipv6_address_mode combinations</title>
      <informaltable>
        <tgroup cols="5">
          <colspec colname="c1" colwidth="10.0*"/>
          <colspec colname="c2" colwidth="10.0*"/>
          <colspec colname="c3" colwidth="10.0*"/>
          <colspec colname="c4" colwidth="10.0*"/>
          <colspec colname="c5" colwidth="60.0*"/>
          <thead>
            <row>
              <entry>
                <para>ipv6 ra mode</para>
              </entry>
              <entry>
                <para>ipv6 address mode</para>
              </entry>
              <entry>
                <para>radvd A,M,O</para>
              </entry>
              <entry>
                <para>External Router A,M,O</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <emphasis>N/S</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  <emphasis>N/S</emphasis>
                </para>
              </entry>
              <entry>
                <para>Off</para>
              </entry>
              <entry>
                <para>Not Defined</para>
              </entry>
              <entry>
                <para>Backwards compatibility with pre-Juno IPv6 behavior.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>N/S</emphasis>
                </para>
              </entry>
              <entry>
                <para>slaac</para>
              </entry>
              <entry>
                <para>Off</para>
              </entry>
              <entry>
                <para>1,0,0</para>
              </entry>
              <entry>
                <para>Guest instance obtains IPv6 address from non-OpenStack router using SLAAC.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>N/S</emphasis>
                </para>
              </entry>
              <entry>
                <para>dhcpv6-stateful</para>
              </entry>
              <entry>
                <para>Off</para>
              </entry>
              <entry>
                <para>0,1,1</para>
              </entry>
              <entry>
                <para>Not currently implemented in the reference implementation.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <emphasis>N/S</emphasis>
                </para>
              </entry>
              <entry>
                <para>dhcpv6-stateless</para>
              </entry>
              <entry>
                <para>Off</para>
              </entry>
              <entry>
                <para>1,0,1</para>
              </entry>
              <entry>
                <para>Not currently implemented in the reference implementation.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>slaac</para>
              </entry>
              <entry>
                <para>
                  <emphasis>N/S</emphasis>
                </para>
              </entry>
              <entry>
                <para>1,0,0</para>
              </entry>
              <entry>
                <para>Off</para>
              </entry>
              <entry>
                <para>Not currently implemented in the reference implementation.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>dhcpv6-stateful</para>
              </entry>
              <entry>
                <para>
                  <emphasis>N/S</emphasis>
                </para>
              </entry>
              <entry>
                <para>0,1,1</para>
              </entry>
              <entry>
                <para>Off</para>
              </entry>
              <entry>
                <para>Not currently implemented in the reference implementation.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>dhcpv6-stateless</para>
              </entry>
              <entry>
                <para>
                  <emphasis>N/S</emphasis>
                </para>
              </entry>
              <entry>
                <para>1,0,1</para>
              </entry>
              <entry>
                <para>Off</para>
              </entry>
              <entry>
                <para>Not currently implemented in the reference implementation.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>slaac</para>
              </entry>
              <entry>
                <para>slaac</para>
              </entry>
              <entry>
                <para>1,0,0</para>
              </entry>
              <entry>
                <para>Off</para>
              </entry>
              <entry>
                <para>Guest instance obtains IPv6 address from OpenStack managed radvd using SLAAC.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>dhcpv6-stateful</para>
              </entry>
              <entry>
                <para>dhcpv6-stateful</para>
              </entry>
              <entry>
                <para>0,1,1</para>
              </entry>
              <entry>
                <para>Off</para>
              </entry>
              <entry>
                <para>Guest instance obtains IPv6 address from dnsmasq using DHCPv6
                                        stateful and optional info from dnsmasq using DHCPv6.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>dhcpv6-stateless</para>
              </entry>
              <entry>
                <para>dhcpv6-stateless</para>
              </entry>
              <entry>
                <para>1,0,1</para>
              </entry>
              <entry>
                <para>Off</para>
              </entry>
              <entry>
                <para>Guest instance obtains IPv6 address from OpenStack managed
                                        radvd using SLAAC and optional info from dnsmasq using
                                        DHCPv6.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>slaac</para>
              </entry>
              <entry>
                <para>dhcpv6-stateful</para>
              </entry>
              <entry/>
              <entry/>
              <entry>
                <para>
                  <emphasis>Invalid combination.</emphasis>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>slaac</para>
              </entry>
              <entry>
                <para>dhcpv6-stateless</para>
              </entry>
              <entry/>
              <entry/>
              <entry>
                <para>
                  <emphasis>Invalid combination.</emphasis>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>dhcpv6-stateful</para>
              </entry>
              <entry>
                <para>slaac</para>
              </entry>
              <entry/>
              <entry/>
              <entry>
                <para>
                  <emphasis>Invalid combination.</emphasis>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>dhcpv6-stateful</para>
              </entry>
              <entry>
                <para>dhcpv6-stateless</para>
              </entry>
              <entry/>
              <entry/>
              <entry>
                <para>
                  <emphasis>Invalid combination.</emphasis>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>dhcpv6-stateless</para>
              </entry>
              <entry>
                <para>slaac</para>
              </entry>
              <entry/>
              <entry/>
              <entry>
                <para>
                  <emphasis>Invalid combination.</emphasis>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>dhcpv6-stateless</para>
              </entry>
              <entry>
                <para>dhcpv6-stateful</para>
              </entry>
              <entry/>
              <entry/>
              <entry>
                <para>
                  <emphasis>Invalid combination.</emphasis>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </section>
  <section>
    <title>Project network considerations</title>
    <section>
      <title>Dataplane</title>
      <para>Both the Linux bridge and the Open vSwitch dataplane modules support
                    forwarding IPv6
                    packets amongst the guests and router ports. Similar to IPv4, there is no
                    special configuration or setup required to enable the dataplane to properly
                    forward packets from the source to the destination using IPv6. Note that these
                    dataplanes will forward Link-local Address (LLA) packets between hosts on the
                    same network just fine without any participation or setup by OpenStack
                    components after the ports are all connected and MAC addresses learned.</para>
    </section>
    <section>
      <title>Addresses for subnets</title>
      <para>There are three methods currently implemented for a subnet to get its
                    <literal>cidr</literal> in OpenStack:</para>
      <procedure>
        <step>
          <para>Direct assignment during subnet creation via command line or Horizon</para>
        </step>
        <step>
          <para>Referencing a subnet pool during subnet creation</para>
        </step>
        <step>
          <para>Using a Prefix Delegation (PD) client to request a prefix for a
                            subnet from a PD server</para>
        </step>
      </procedure>
      <para>In the future, additional techniques could be used to allocate subnets
                    to projects, for example, use of an external IPAM module.</para>
    </section>
    <section>
      <title>Address modes for ports</title>
      <note>
        <para>An external DHCPv6 server in theory could override the full
                        address OpenStack assigns based on the EUI-64 address, but that
                        would not be wise as it would not be consistent through the system.</para>
      </note>
      <para>IPv6 supports three different addressing schemes for address configuration and
                    for providing optional network information.</para>
      <variablelist>
        <varlistentry>
          <term>Stateless Address Auto Configuration (SLAAC)</term>
          <listitem>
            <para>Address configuration using Router Advertisement (RA).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>DHCPv6-stateless</term>
          <listitem>
            <para>Address configuration using RA and optional information
                                using DHCPv6.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>DHCPv6-stateful</term>
          <listitem>
            <para>Address configuration and optional information using DHCPv6.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>OpenStack can be setup such that OpenStack Networking directly
                    provides RA, DHCP
                    relay and DHCPv6 address and optional information for their networks
                    or this can be delegated to external routers and services based on the
                    drivers that are in use. There are two neutron subnet attributes -
                    <literal>ipv6_ra_mode</literal> and <literal>ipv6_address_mode</literal> – that determine how IPv6
                    addressing and network information is provided to project instances:</para>
      <itemizedlist>
        <listitem>
          <para><literal>ipv6_ra_mode</literal>: Determines who sends RA.</para>
        </listitem>
        <listitem>
          <para><literal>ipv6_address_mode</literal>: Determines how instances obtain IPv6 address,
                            default gateway, or optional information.</para>
        </listitem>
      </itemizedlist>
      <para>For the above two attributes to be effective, <literal>enable_dhcp</literal> of the
                    subnet object must be set to True.</para>
    </section>
    <section>
      <title>Using SLAAC for addressing</title>
      <para>When using SLAAC, the currently supported combinations for <literal>ipv6_ra_mode</literal> and
                    <literal>ipv6_address_mode</literal> are as follows.</para>
      <informaltable>
        <tgroup cols="3">
          <colspec colname="c1" colwidth="14.3*"/>
          <colspec colname="c2" colwidth="14.3*"/>
          <colspec colname="c3" colwidth="71.4*"/>
          <thead>
            <row>
              <entry>
                <para>ipv6_ra_mode</para>
              </entry>
              <entry>
                <para>ipv6_address_mode</para>
              </entry>
              <entry>
                <para>Result</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Not specified.</para>
              </entry>
              <entry>
                <para>SLAAC</para>
              </entry>
              <entry>
                <para>Addresses are assigned using EUI-64, and an external router
                                        will be used for routing.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>SLAAC</para>
              </entry>
              <entry>
                <para>SLAAC</para>
              </entry>
              <entry>
                <para>Address are assigned using EUI-64, and OpenStack Networking
                                        provides routing.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Setting <literal>ipv6_ra_mode</literal> to <literal>slaac</literal> will result in OpenStack Networking
                    routers being configured to send RA packets, when they are created.
                    This results in the following values set for the address configuration
                    flags in the RA messages:</para>
      <itemizedlist>
        <listitem>
          <para>Auto Configuration Flag = 1</para>
        </listitem>
        <listitem>
          <para>Managed Configuration Flag = 0</para>
        </listitem>
        <listitem>
          <para>Other Configuration Flag = 0</para>
        </listitem>
      </itemizedlist>
      <para>New or existing neutron networks that contain a SLAAC enabled IPv6 subnet will
                    result in all neutron ports attached to the network receiving IPv6 addresses.
                    This is because when RA broadcast messages are sent out on a neutron
                    network, they are received by all IPv6 capable ports on the network,
                    and each port will then configure an IPv6 address based on the
                    information contained in the RA packet. In some cases, an IPv6 SLAAC
                    address will be added to a port, in addition to other IPv4 and IPv6 addresses
                    that the port already has been assigned.</para>
    </section>
    <section>
      <title>DHCPv6</title>
      <para>For DHCPv6, the currently supported combinations are as
                    follows:</para>
      <informaltable>
        <tgroup cols="3">
          <colspec colname="c1" colwidth="14.3*"/>
          <colspec colname="c2" colwidth="14.3*"/>
          <colspec colname="c3" colwidth="71.4*"/>
          <thead>
            <row>
              <entry>
                <para>ipv6_ra_mode</para>
              </entry>
              <entry>
                <para>ipv6_address_mode</para>
              </entry>
              <entry>
                <para>Result</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>DHCPv6-stateless</para>
              </entry>
              <entry>
                <para>DHCPv6-stateless</para>
              </entry>
              <entry>
                <para>Addresses are assigned through RAs (see SLAAC above) and optional
                                        information is delivered through DHCPv6.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>DHCPv6-stateful</para>
              </entry>
              <entry>
                <para>DHCPv6-stateful</para>
              </entry>
              <entry>
                <para>Addresses and optional information are assigned using DHCPv6.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Setting DHCPv6-stateless for <literal>ipv6_ra_mode</literal> configures the neutron
                    router with radvd agent to send RAs. The list below captures the
                    values set for the address configuration flags in the RA packet in
                    this scenario. Similarly, setting DHCPv6-stateless for
                    <literal>ipv6_address_mode</literal> configures neutron DHCP implementation to provide
                    the additional network information.</para>
      <itemizedlist>
        <listitem>
          <para>Auto Configuration Flag = 1</para>
        </listitem>
        <listitem>
          <para>Managed Configuration Flag = 0</para>
        </listitem>
        <listitem>
          <para>Other Configuration Flag = 1</para>
        </listitem>
      </itemizedlist>
      <para>Setting DHCPv6-stateful for <literal>ipv6_ra_mode</literal> configures the neutron
                    router with radvd agent to send RAs. The list below captures the
                    values set for the address configuration flags in the RA packet in
                    this scenario. Similarly, setting DHCPv6-stateful for
                    <literal>ipv6_address_mode</literal> configures neutron DHCP implementation to provide
                    addresses and additional network information through DHCPv6.</para>
      <itemizedlist>
        <listitem>
          <para>Auto Configuration Flag = 0</para>
        </listitem>
        <listitem>
          <para>Managed Configuration Flag = 1</para>
        </listitem>
        <listitem>
          <para>Other Configuration Flag = 1</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section>
    <title>Router support</title>
    <para>The behavior of the neutron router for IPv6 is different than for IPv4 in
                a few ways.</para>
    <para>Internal router ports, that act as default gateway ports for a network, will
                share a common port for all IPv6 subnets associated with the network. This
                implies that there will be an IPv6 internal router interface with multiple
                IPv6 addresses from each of the IPv6 subnets associated with the network and a
                separate IPv4 internal router interface for the IPv4 subnet. On the other
                hand, external router ports are allowed to have a dual-stack configuration
                with both an IPv4 and an IPv6 address assigned to them.</para>
    <para>Neutron project networks that are assigned Global Unicast Address (GUA)
                prefixes and addresses don’t require NAT on the neutron router external gateway
                port to access the outside world. As a consequence of the lack of NAT the
                external router port doesn’t require a GUA to send and receive to the external
                networks. This implies a GUA IPv6 subnet prefix is not necessarily needed for
                the neutron external network. By default, a IPv6 LLA associated with the
                external gateway port can be used for routing purposes. To handle this
                scenario, the implementation of router-gateway-set API in neutron has been
                modified so that an IPv6 subnet is not required for the external network that
                is associated with the neutron router. The LLA address of the upstream router
                can be learned in two ways.</para>
    <procedure>
      <step>
        <para>In the absence of an upstream RA support, <literal>ipv6_gateway</literal> flag can be set
                        with the external router gateway LLA in the neutron L3 agent configuration
                        file. This also requires that no subnet is associated with that port.</para>
      </step>
      <step>
        <para>The upstream router can send an RA and the neutron router will
                        automatically learn the next-hop LLA, provided again that no subnet is
                        assigned and the <literal>ipv6_gateway</literal> flag is not set.</para>
      </step>
    </procedure>
    <para>Effectively the <literal>ipv6_gateway</literal> flag takes precedence over an RA that
                is received from the upstream router. If it is desired to use a GUA
                next hop that is accomplished by allocating a subnet to the external
                router port and assigning the upstream routers GUA address as the
                gateway for the subnet.</para>
    <note>
      <para>It should be possible for projects to communicate with each other
                    on an isolated network (a network without a router port) using LLA
                    with little to no participation on the part of OpenStack. The authors
                    of this section have not proven that to be true for all scenarios.</para>
    </note>
    <note>
      <para>When using the neutron L3 agent in a configuration where it is
                    auto-configuring an IPv6 address via SLAAC, and the agent is
                    learning its default IPv6 route from the ICMPv6 Router Advertisement,
                    it may be necessary to set the
                    <literal>net.ipv6.conf.&lt;physical_interface&gt;.accept_ra</literal> sysctl to the
                    value <literal>2</literal> in order for routing to function correctly.
                    For a more detailed description, see the <link xlink:href="https://bugs.launchpad.net/neutron/+bug/1616282">bug</link>.</para>
    </note>
    <section>
      <title>Neutron’s Distributed Router feature and IPv6</title>
      <para>IPv6 does work when the Distributed Virtual Router functionality is enabled,
                    but all ingress/egress traffic is via the centralized router (hence, not
                    distributed). More work is required to fully enable this functionality.</para>
    </section>
  </section>
  <section>
    <title>Advanced services</title>
    <section>
      <title>VPNaaS</title>
      <para>VPNaaS supports IPv6, but support in Kilo and prior releases will have
                    some bugs that may limit how it can be used. More thorough and
                    complete testing and bug fixing is being done as part of the Liberty
                    release. IPv6-based VPN-as-a-Service is configured similar to the IPv4
                    configuration. Either or both the <literal>peer_address</literal> and the
                    <literal>peer_cidr</literal> can specified as an IPv6 address. The choice of
                    addressing modes and router modes described above should not impact
                    support.</para>
    </section>
    <section>
      <title>LBaaS</title>
      <para>TODO</para>
    </section>
    <section>
      <title>FWaaS</title>
      <para>FWaaS allows creation of IPv6 based rules.</para>
    </section>
    <section>
      <title>NAT &amp; Floating IPs</title>
      <para>At the current time OpenStack Networking does not provide any facility
                    to support any flavor of NAT with IPv6. Unlike IPv4 there is no
                    current embedded support for floating IPs with IPv6. It is assumed
                    that the IPv6 addressing amongst the projects is using GUAs with no
                    overlap across the projects.</para>
    </section>
  </section>
  <section>
    <title>Security considerations</title>
    <section>
      <title>Configuring interfaces of the guest</title>
      <para>OpenStack currently doesn’t support the privacy extensions defined by RFC 4941.
                    The interface identifier and DUID used must be directly derived from the MAC
                    as described in RFC 2373. The compute hosts must not be setup to utilize the
                    privacy extensions when generating their interface identifier.</para>
      <para>There is no provisions for an IPv6-based metadata service similar to what is
                    provided for IPv4. In the case of dual stacked guests though it is always
                    possible to use the IPv4 metadata service instead.</para>
      <para>Unlike IPv4 the MTU of a given network can be conveyed in the RA messages sent
                    by the router as well as in the DHCP messages.</para>
    </section>
  </section>
  <section>
    <title>OpenStack control &amp; management network considerations</title>
    <para>As of the Kilo release, considerable effort has gone in to ensuring
                the project network can handle dual stack IPv6 and IPv4 transport
                across the variety of configurations described above. OpenStack control
                network can be run in a dual stack configuration and OpenStack API
                endpoints can be accessed via an IPv6 network. At this time, Open vSwitch
                (OVS) tunnel types - STT, VXLAN, GRE, support both IPv4 and IPv6 endpoints.</para>
  </section>
  <section>
    <title>Prefix delegation</title>
    <para>From the Liberty release onwards, OpenStack Networking supports IPv6 prefix
                delegation. This section describes the configuration and workflow steps
                necessary to use IPv6 prefix delegation to provide automatic allocation of
                subnet CIDRs. This allows you as the OpenStack administrator to rely on an
                external (to the OpenStack Networking service) DHCPv6 server to manage your
                project network prefixes.</para>
    <note>
      <para>Prefix delegation became available in the Liberty release, it is
                    not available in the Kilo release. HA and DVR routers
                    are not currently supported by this feature.</para>
    </note>
    <section>
      <title>Configuring OpenStack Networking for prefix delegation</title>
      <para>To enable prefix delegation, edit the <literal>/etc/neutron/neutron.conf</literal> file.</para>
      <screen language="console">ipv6_pd_enabled = True</screen>
      <note>
        <para>If you are not using the default dibbler-based driver for prefix
                        delegation, then you also need to set the driver in
                        <literal>/etc/neutron/neutron.conf</literal>:</para>
        <screen language="console">pd_dhcp_driver = &lt;class path to driver&gt;</screen>
        <para>Drivers other than the default one may require extra configuration,
                        refer to <xref linkend="extra-driver-conf"/></para>
      </note>
      <para>This tells OpenStack Networking to use the prefix delegation mechanism for
                    subnet allocation when the user does not provide a CIDR or subnet pool id when
                    creating a subnet.</para>
    </section>
    <section>
      <title>Requirements</title>
      <para>To use this feature, you need a prefix delegation capable DHCPv6 server that is
                    reachable from your OpenStack Networking node(s). This could be software
                    running on the OpenStack Networking node(s) or elsewhere, or a physical router.
                    For the purposes of this guide we are using the open-source DHCPv6 server,
                    Dibbler. Dibbler is available in many Linux package managers, or from source at
                    <link xlink:href="https://github.com/tomaszmrugalski/dibbler">tomaszmrugalski/dibbler</link>.</para>
      <para>When using the reference implementation of the OpenStack Networking prefix
                    delegation driver, Dibbler must also be installed on your OpenStack Networking
                    node(s) to serve as a DHCPv6 client. Version 1.0.1 or higher is required.</para>
      <para>This guide assumes that you are running a Dibbler server on the network node
                    where the external network bridge exists. If you already have a prefix
                    delegation capable DHCPv6 server in place, then you can skip the following
                    section.</para>
    </section>
    <section>
      <title>Configuring the Dibbler server</title>
      <para>After installing Dibbler, edit the <literal>/etc/dibbler/server.conf</literal> file:</para>
      <screen language="none">script "/var/lib/dibbler/pd-server.sh"

iface "br-ex" {
    pd-class {
        pd-pool 2001:db8:2222::/48
        pd-length 64
    }
}</screen>
      <para>The options used in the configuration file above are:</para>
      <itemizedlist>
        <listitem>
          <para><literal>script</literal>
                            Points to a script to be run when a prefix is delegated or
                            released. This is only needed if you want instances on your
                            subnets to have external network access. More on this below.</para>
        </listitem>
        <listitem>
          <para><literal>iface</literal>
                            The name of the network interface on which to listen for
                            prefix delegation messages.</para>
        </listitem>
        <listitem>
          <para><literal>pd-pool</literal>
                            The larger prefix from which you want your delegated
                            prefixes to come. The example given is sufficient if you do
                            not need external network access, otherwise a unique
                            globally routable prefix is necessary.</para>
        </listitem>
        <listitem>
          <para><literal>pd-length</literal>
                            The length that delegated prefixes will be. This must be
                            64 to work with the current OpenStack Networking reference implementation.</para>
        </listitem>
      </itemizedlist>
      <para>To provide external network access to your instances, your Dibbler server also
                    needs to create new routes for each delegated prefix. This is done using the
                    script file named in the config file above. Edit the
                    <literal>/var/lib/dibbler/pd-server.sh</literal> file:</para>
      <screen language="bash">if [ "$PREFIX1" != "" ]; then
    if [ "$1" == "add" ]; then
        sudo ip -6 route add ${PREFIX1}/64 via $REMOTE_ADDR dev $IFACE
    fi
    if [ "$1" == "delete" ]; then
        sudo ip -6 route del ${PREFIX1}/64 via $REMOTE_ADDR dev $IFACE
    fi
fi</screen>
      <para>The variables used in the script file above are:</para>
      <itemizedlist>
        <listitem>
          <para><literal>$PREFIX1</literal>
                            The prefix being added/deleted by the Dibbler server.</para>
        </listitem>
        <listitem>
          <para><literal>$1</literal>
                            The operation being performed.</para>
        </listitem>
        <listitem>
          <para><literal>$REMOTE_ADDR</literal>
                            The IP address of the requesting Dibbler client.</para>
        </listitem>
        <listitem>
          <para><literal>$IFACE</literal>
                            The network interface upon which the request was received.</para>
        </listitem>
      </itemizedlist>
      <para>The above is all you need in this scenario, but more information on
                    installing, configuring, and running Dibbler is available in the Dibbler user
                    guide, at <link xlink:href="http://klub.com.pl/dhcpv6/doc/dibbler-user.pdf">Dibbler – a portable DHCPv6</link>.</para>
      <para>To start your Dibbler server, run:</para>
      <screen language="console"># dibbler-server run</screen>
      <para>Or to run in headless mode:</para>
      <screen language="console"># dibbler-server start</screen>
      <para>When using DevStack, it is important to start your server after the
                    <literal>stack.sh</literal> script has finished to ensure that the required network
                    interfaces have been created.</para>
    </section>
    <section>
      <title>User workflow</title>
      <para>First, create a network and IPv6 subnet:</para>
      <screen language="console">$ openstack network create ipv6-pd
+---------------------------+--------------------------------------+
| Field                     | Value                                |
+---------------------------+--------------------------------------+
| admin_state_up            | UP                                   |
| availability_zone_hints   |                                      |
| availability_zones        |                                      |
| created_at                | 2017-01-25T19:26:01Z                 |
| description               |                                      |
| headers                   |                                      |
| id                        | 4b782725-6abe-4a2d-b061-763def1bb029 |
| ipv4_address_scope        | None                                 |
| ipv6_address_scope        | None                                 |
| mtu                       | 1450                                 |
| name                      | ipv6-pd                              |
| port_security_enabled     | True                                 |
| project_id                | 61b7eba037fd41f29cfba757c010faff     |
| provider:network_type     | vxlan                                |
| provider:physical_network | None                                 |
| provider:segmentation_id  | 46                                   |
| revision_number           | 3                                    |
| router:external           | Internal                             |
| shared                    | False                                |
| status                    | ACTIVE                               |
| subnets                   |                                      |
| tags                      | []                                   |
| updated_at                | 2017-01-25T19:26:01Z                 |
+---------------------------+--------------------------------------+

$ openstack subnet create --ip-version 6 --ipv6-ra-mode slaac \
--ipv6-address-mode slaac --use-default-subnet-pool \
--network ipv6-pd ipv6-pd-1
+------------------------+--------------------------------------+
| Field                  | Value                                |
+------------------------+--------------------------------------+
| allocation_pools       | ::2-::ffff:ffff:ffff:ffff            |
| cidr                   | ::/64                                |
| created_at             | 2017-01-25T19:31:53Z                 |
| description            |                                      |
| dns_nameservers        |                                      |
| enable_dhcp            | True                                 |
| gateway_ip             | ::1                                  |
| headers                |                                      |
| host_routes            |                                      |
| id                     | 1319510d-c92c-4532-bf5d-8bcf3da761a1 |
| ip_version             | 6                                    |
| ipv6_address_mode      | slaac                                |
| ipv6_ra_mode           | slaac                                |
| name                   | ipv6-pd-1                            |
| network_id             | 4b782725-6abe-4a2d-b061-763def1bb029 |
| project_id             | 61b7eba037fd41f29cfba757c010faff     |
| revision_number        | 2                                    |
| service_types          |                                      |
| subnetpool_id          | prefix_delegation                    |
| updated_at             | 2017-01-25T19:31:53Z                 |
| use_default_subnetpool | True                                 |
+------------------------+--------------------------------------+</screen>
      <para>The subnet is initially created with a temporary CIDR before one can be
                    assigned by prefix delegation. Any number of subnets with this temporary CIDR
                    can exist without raising an overlap error. The subnetpool_id is automatically
                    set to <literal>prefix_delegation</literal>.</para>
      <para>To trigger the prefix delegation process, create a router interface between
                    this subnet and a router with an active interface on the external network:</para>
      <screen language="console">$ openstack router add subnet router1 ipv6-pd-1</screen>
      <para>The prefix delegation mechanism then sends a request via the external network
                    to your prefix delegation server, which replies with the delegated prefix. The
                    subnet is then updated with the new prefix, including issuing new IP addresses
                    to all ports:</para>
      <screen language="console">$ openstack subnet show ipv6-pd-1
+-------------------+--------------------------------------+
| Field             | Value                                |
+-------------------+--------------------------------------+
| allocation_pools  | 2001:db8:2222:6977::2-2001:db8:2222: |
|                   | 6977:ffff:ffff:ffff:ffff             |
| cidr              | 2001:db8:2222:6977::/64              |
| created_at        | 2017-01-25T19:31:53Z                 |
| description       |                                      |
| dns_nameservers   |                                      |
| enable_dhcp       | True                                 |
| gateway_ip        | 2001:db8:2222:6977::1                |
| host_routes       |                                      |
| id                | 1319510d-c92c-4532-bf5d-8bcf3da761a1 |
| ip_version        | 6                                    |
| ipv6_address_mode | slaac                                |
| ipv6_ra_mode      | slaac                                |
| name              | ipv6-pd-1                            |
| network_id        | 4b782725-6abe-4a2d-b061-763def1bb029 |
| project_id        | 61b7eba037fd41f29cfba757c010faff     |
| revision_number   | 4                                    |
| service_types     |                                      |
| subnetpool_id     | prefix_delegation                    |
| updated_at        | 2017-01-25T19:35:26Z                 |
+-------------------+--------------------------------------+</screen>
      <para>If the prefix delegation server is configured to delegate globally routable
                    prefixes and setup routes, then any instance with a port on this subnet should
                    now have external network access.</para>
      <para>Deleting the router interface causes the subnet to be reverted to the temporary
                    CIDR, and all ports have their IPs updated. Prefix leases are released and
                    renewed automatically as necessary.</para>
    </section>
    <section>
      <title>References</title>
      <para>The following link provides a great step by step tutorial on setting up IPv6
                    with OpenStack: <link xlink:href="http://www.debug-all.com/?p=52">Tenant IPV6 deployment in OpenStack Kilo release</link>.</para>
    </section>
    <section xml:id="extra-driver-conf">
      <title>Extra configuration</title>
      <section>
        <title>Neutron dhcpv6_pd_agent</title>
        <para>To enable the driver for the dhcpv6_pd_agent, set pd_dhcp_driver to this in
                        <literal>/etc/neutron/neutron.conf</literal>:</para>
        <screen language="console">pd_dhcp_driver = neutron_pd_agent</screen>
        <para>To allow the neutron-pd-agent to communicate with prefix delegation servers,
                        you must set which network interface to use for external communication. In
                        DevStack the default for this is <literal>br-ex</literal>:</para>
        <screen language="console">pd_interface = br-ex</screen>
        <para>Once you have stacked run the command below to start the neutron-pd-agent:</para>
        <screen language="console">neutron-pd-agent --config-file /etc/neutron/neutron.conf</screen>
      </section>
    </section>
  </section>
</section>
