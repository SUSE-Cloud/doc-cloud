<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>

<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="upgrade_git_merge">
 <title>Resolving Git Merge Conflicts During Upgrade</title>
 <section xml:id="idg-all-upgrade-upgrade_git_merge-xml-2">
  <title>Introduction</title>
  <para>
   When you perform an upgrade, &kw-hos; attempts to incorporate new or updated
   configuration information on top of your existing environment. However, if
   you have made certain changes to your environment, &kw-hos; cannot
   automatically determine whether to keep your changes or drop them in favour
   of the new or updated configurations that it wants to put in place. This
   will result in a <literal>merge conflict</literal> occurring during upgrade
   and it will be up to you to manually resolve the conflict before the upgrade
   can proceed.
  </para>
  <para>
   This document gives an overview of how to approach the issue of merge
   conflicts, showing general procedures for determining where the conflict is
   occurring, alternative methods for resolution, and a fallback procedure for
   the case where the resolution goes wrong and you need to start from scratch.
  </para>
  <para>
   For a general overview of how &kw-hos; uses Git, see the introductory
   article in the Installation section <xref linkend="using_git"/>. In
   particular, note how the <literal>site</literal> branch is the one most
   used by the end-user, while the <literal>hos</literal> branch contains the
   "upstream" source code corresponding to the contents of the
   <literal>~/helion</literal> directory on a pristine fresh installation.
  </para>
 </section>
 <section>
  <title>Identifying the occurrence of a <literal>merge conflict</literal></title>
  <para>
   If you hit a <literal>merge conflict</literal> during upgrade, you will
   observe output similar to the following on the console:
  </para>
<screen >Auto-merging hos/ansible/roles/nova-compute-esx/defaults/main.yml
Auto-merging hos/ansible/roles/nova-common/templates/nova.conf.j2
<emphasis role="bold">CONFLICT (content): Merge conflict in hos/ansible/roles/nova-common/templates/nova.conf.j2</emphasis>
Auto-merging hos/ansible/roles/nova-cli/tasks/availability_zones.yml
Auto-merging hos/ansible/roles/nova-api/templates/api-paste.ini.j2</screen>
 </section>
 <section>
  <title>Examining Conflicts</title>
  <para>
   Use <literal>git status</literal> to see the discover the source of the
   problem:
  </para>
<screen >...
        new file:   tech-preview/entry-scale-kvm-vsa-mml/data/swift/rings.yml
        modified:   tech-preview/mid-scale/README.md
        modified:   tech-preview/mid-scale/data/control_plane.yml

Unmerged paths:
  (use "git add/rm &lt;file&gt;..." as appropriate to mark resolution)

        <emphasis role="bold">both modified:   hos/ansible/roles/nova-common/templates/nova.conf.j2</emphasis></screen>
  <para>
   Edit the file
   <literal>hos/ansible/roles/nova-common/templates/nova.conf.j2</literal> to
   see the conflict markers:
  </para>
<screen >[neutron]
admin_auth_url = {{ neutron_admin_auth_url }}
admin_password = {{ neutron_admin_password }}
admin_tenant_name = {{ neutron_admin_tenant_name }}
admin_username = {{ neutron_admin_username }}
<emphasis role="bold">&lt;&lt;&lt;&lt;&lt;&lt;&lt;HEAD
metadata_proxy_shared_secret = top_secret_password111
=======
metadata_proxy_shared_secret = {{ neutron_metadata_proxy_shared_secret }}
&gt;&gt;&gt;&gt;&gt;&gt;&gt; hos</emphasis>
neutron_auth_strategy = keystone
neutron_ca_certificates_file = /etc/ssl/certs/ca-certificates.crt
service_metadata_proxy = True</screen>
  <para>
   This indicates that &kw-hos-phrase; 3.0 is trying to set the value of
   <literal>metadata_proxy_shared_secret</literal> to be <literal>{{
   neutron_metadata_proxy_shared_secret }}</literal> whereas previously you
   have set its value to <literal>top_secret_password111</literal>.
  </para>
 </section>
 <section>
  <title>Examining differences between your current version and the previous upstream version</title>
  <para>
   Typically, the previous upstream version will be the last-but-one commit on
   the <literal>hos</literal> branch. This version will have been created
   during the initial installation of your cloud (or perhaps during a previous
   upgrade). So in total, there are three significant versions of the file:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The previous "upstream" version on the <literal>hos</literal> branch.
    </para>
   </listitem>
   <listitem>
    <para>
     Your current version on the <literal>site</literal> branch.
    </para>
   </listitem>
   <listitem>
    <para>
     The new "upstream" version on the <literal>hos</literal> branch.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   You can identify the previous "upstream" version using <literal>git
   merge-base</literal>
  </para>
<screen >git merge-base hos site
<emphasis role="bold">2eda1df48e2822533c50f80f5bfd7a9d788bdf73</emphasis></screen>
  <para>
   And then use <literal>git log</literal> to see where this commit occurs in
   the history of the <literal>hos</literal> branch.
  </para>
<screen >git log hos --
commit 22cfa83f3526baf30b3697e971a712930f86f611
Author: Helion git user &lt;helion@hpe.com&gt;
Date:   Mon Jan 18 00:30:33 2016 +0000

    New drop

commit <emphasis role="bold">2eda1df48e2822533c50f80f5bfd7a9d788bdf73</emphasis>
Author: Helion git user &lt;helion@hp.com&gt;
Date:   Sun Jan 17 19:14:01 2016 +0000

    New drop</screen>
  <para>
   In this instance, we can see that the relevant commit is in fact the
   last-but-one commit and so we can use the simplified name
   <literal>hos^1</literal> to identify that commit.
  </para>
<screen >git diff <emphasis role="bold">hos^1</emphasis> HEAD -- hos/ansible/roles/nova-common/templates/nova.conf.j2</screen>
  <para>
   In the diff output, you should be able to see how you changed the value for
   <literal>metadata_proxy_shared_secret</literal> from
   <literal>unset</literal> to <literal>top_secret_password111</literal>:
  </para>
<screen >diff --git a/hos/ansible/roles/nova-common/templates/nova.conf.j2 b/hos/ansible/roles/nova-common/templates/nova.conf.j2
index 597a982..05cb07c 100644
--- a/hos/ansible/roles/nova-common/templates/nova.conf.j2
+++ b/hos/ansible/roles/nova-common/templates/nova.conf.j2
@@ -132,7 +132,7 @@ admin_auth_url = {{ neutron_admin_auth_url }}
 admin_password = {{ neutron_admin_password }}
 admin_tenant_name = {{ neutron_admin_tenant_name }}
 admin_username = {{ neutron_admin_username }}
<emphasis role="bold">-metadata_proxy_shared_secret = unset
+metadata_proxy_shared_secret = top_secret_password111</emphasis>
 neutron_auth_strategy = keystone
 neutron_ca_certificates_file = /etc/ssl/certs/ca-certificates.crt
 service_metadata_proxy = True</screen>
 </section>
 <section>
  <title>Examining differences between your current version and the new upstream version</title>
  <para>
   To compare your change with the new upstream version from &kw-hos-phrase; on
   the <literal>hos</literal> branch you can use <literal>git diff HEAD hos --
   &lt;&lt;path/to/file&gt;&gt;</literal>:
  </para>
<screen >git diff HEAD hos -- hos/ansible/roles/nova-common/templates/nova.conf.j2</screen>
  <para>
   In the extract of output below, you can see your value
   <literal>top_secret_password111</literal> and the new value <literal>{{
   neutron_metadata_proxy_shared_secret }}</literal> that &kw-hos-phrase; wants
   to set.
  </para>
<screen >..
 admin_username = {{ neutron_admin_username }}
<emphasis role="bold">-metadata_proxy_shared_secret = top_secret_password111
+metadata_proxy_shared_secret = {{ neutron_metadata_proxy_shared_secret }}</emphasis>
 neutron_auth_strategy = keystone
 neutron_ca_certificates_file = /etc/ssl/certs/ca-certificates.crt</screen>
 </section>
 <section>
  <title>Examining differences between the new upstream version and the previous upstream version</title>
  <para>
   To compare the new upstream version from &kw-hos-phrase; with the previous
   upstream version from your initial install (or previous upgrade):
  </para>
<screen >git diff $(git merge-base hos HEAD) hos -- hos/ansible/roles/nova-common/templates/nova.conf.j2</screen>
  <para>
   In the extract of output below, you can see the new upstream value
   <literal>{{ neutron_metadata_proxy_shared_secret }}</literal> that
   &kw-hos-phrase; wants to set and the previous upstream value
   <literal>unset</literal>.
  </para>
<screen > admin_password = {{ neutron_admin_password }}
 admin_tenant_name = {{ neutron_admin_tenant_name }}
 admin_username = {{ neutron_admin_username }}
<emphasis role="bold">-metadata_proxy_shared_secret = unset
+metadata_proxy_shared_secret = {{ neutron_metadata_proxy_shared_secret }}</emphasis>
 neutron_auth_strategy = keystone
 neutron_ca_certificates_file = /etc/ssl/certs/ca-certificates.crt</screen>
 </section>
 <section>
  <title>Using <literal>stage markers</literal> to view clean versions of files (without conflict markers)</title>
  <para>
   You can use the <literal>git show</literal> command with stage markers to
   view files without having conflict markers embedded in them. Stage 1 is the
   previous upstream version (<emphasis role="bold">:1</emphasis>), stage 2 is
   your current version (<emphasis role="bold">:2</emphasis>) while stage 3 is
   the new upstream version (<emphasis role="bold">:3</emphasis>).
  </para>
  <para>
   <emphasis role="bold">Stage 1</emphasis>
  </para>
<screen >git show <emphasis role="bold">:1</emphasis>:hos/ansible/roles/nova-common/templates/nova.conf.j2 </screen>
<screen >...
admin_username = {{ neutron_admin_username }}
<emphasis role="bold">metadata_proxy_shared_secret = unset</emphasis>
neutron_auth_strategy = keystone
neutron_ca_certificates_file = /etc/ssl/certs/ca-certificates.crt
...</screen>
  <para>
   <emphasis role="bold">Stage 2</emphasis>
  </para>
<screen >git show <emphasis role="bold">:2</emphasis>:hos/ansible/roles/nova-common/templates/nova.conf.j2</screen>
<screen >...
admin_username = {{ neutron_admin_username }}
<emphasis role="bold">metadata_proxy_shared_secret = top_secret_password111</emphasis>
neutron_auth_strategy = keystone
neutron_ca_certificates_file = /etc/ssl/certs/ca-certificates.crt
...</screen>
  <para>
   <emphasis role="bold">Stage 3</emphasis>
  </para>
<screen >git show <emphasis role="bold">:3</emphasis>:hos/ansible/roles/nova-common/templates/nova.conf.j2</screen>
<screen >...
admin_username = {{ neutron_admin_username }}
<emphasis role="bold">metadata_proxy_shared_secret = {{ neutron_metadata_proxy_shared_secret }}</emphasis>
neutron_auth_strategy = keystone
neutron_ca_certificates_file = /etc/ssl/certs/ca-certificates.crt            
...</screen>
 </section>
 <section>
  <title>Resolving the conflict</title>
  <para>
   There are two approaches to resolving the conflict:
  </para>
  <orderedlist>
   <listitem>
    <para>
     Edit the merged file containing the conflict markers, keeping the change
     you want to preserve and removing the conflict markers and any changes you
     want to discard.
    </para>
   </listitem>
   <listitem>
    <para>
     Take the new upstream version of the file and re-apply any changes you
     would like to keep from your current version.
    </para>
   </listitem>
  </orderedlist>
 </section>
 <section>
  <title>Resolving the conflict - editing the file containing the conflict markers</title>
  <para>
   Edit the file
   <literal>hos/ansible/roles/nova-common/templates/nova.conf.j2</literal> and
   if you want to maintain your change, then delete the lines in bold below:
  </para>
<screen >[neutron]
admin_auth_url = {{ neutron_admin_auth_url }}
admin_password = {{ neutron_admin_password }}
admin_tenant_name = {{ neutron_admin_tenant_name }}
admin_username = {{ neutron_admin_username }}
<emphasis role="bold">&lt;&lt;&lt;&lt;&lt;&lt;&lt;HEAD</emphasis>
metadata_proxy_shared_secret = top_secret_password111
<emphasis role="bold">=======
metadata_proxy_shared_secret = {{ neutron_metadata_proxy_shared_secret }}
&gt;&gt;&gt;&gt;&gt;&gt;&gt; hos</emphasis>
neutron_auth_strategy = keystone
neutron_ca_certificates_file = /etc/ssl/certs/ca-certificates.crt
service_metadata_proxy = True</screen>
  <para>
   Your file should now look like this:
  </para>
<screen >[neutron]
admin_auth_url = {{ neutron_admin_auth_url }}
admin_password = {{ neutron_admin_password }}
admin_tenant_name = {{ neutron_admin_tenant_name }}
admin_username = {{ neutron_admin_username }}
metadata_proxy_shared_secret = top_secret_password111
neutron_auth_strategy = keystone
neutron_ca_certificates_file = /etc/ssl/certs/ca-certificates.crt
service_metadata_proxy = True</screen>
 </section>
 <section>
  <title>Resolving the conflict - re-applying your changes to new upstream version</title>
  <para>
   Create a copy of the new upstream version (see Stage 3 above) in your
   working directory:
  </para>
<screen >git show <emphasis role="bold">:3</emphasis>:hos/ansible/roles/nova-common/templates/nova.conf.j2 &gt; \
hos/ansible/roles/nova-common/templates/nova.conf.j2</screen>
  <para>
   Now edit the file
   <literal>hos/ansible/roles/nova-common/templates/nova.conf.j2</literal> and
   manually re-apply that changes you want.
  </para>
 </section>
 <section>
  <title>Completing the merge procedure</title>
  <para>
   You may want to check that the changes you have applied are correct. Compare
   the new upstream version with the version in your working directory:
  </para>
<screen >git diff hos -- hos/ansible/roles/nova-common/templates/nova.conf.j2</screen>
  <para>
   If you are happy with the resolution, you can stage your changes using:
  </para>
<screen >git add hos/ansible/roles/nova-common/templates/nova.conf.j2</screen>
  <para>
   Apply the above steps to all the merge conflicts you encounter, and when you
   have them resolved to your satisfaction, complete the merge:
  </para>
<screen >git commit -m "complete merge"</screen>
 </section>
 <section>
  <title>Recovering from Errors</title>
  <para>
   If you make a mistake during the resolution process, you can return your
   working directory to a clean copy of the <literal>site</literal> branch
   using:
  </para>
<screen >git reset --hard</screen>
  <para>
   If the new upstream version contains files that didn't exist in the previous
   version, these files will be left behind - you can seem them using
   <literal>git status</literal>. To clean up these files, remove them and then
   reset:
  </para>
<screen>git rm -rf hos
git reset --hard</screen>
  <para>
   Alternatively, you can use <literal>git stash</literal> to save these files
   to transient stash queue.
  </para>
 </section>
</section>
