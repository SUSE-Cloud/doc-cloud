<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entity-decl.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec.ecp-prepare-localhost">
 <title>Prepare Localhost</title>
  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ccp-ose-localhost.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ccp-ose-localhost.png"/>
    </imageobject>
   </mediaobject>
  </informalfigure>
 <section xml:id="ecp-base-software">
  <title>Base software</title>
  <para>
    Install the following software on your <literal>localhost</literal>:
  </para>
    <itemizedlist>
      <listitem>
        <para>
          jq
        </para>
      </listitem>
      <listitem>
        <para>
          ipcalc
        </para>
      </listitem>
      <listitem>
        <para>
          git
        </para>
      </listitem>
      <listitem>
        <para>
          python3-virtualenv
        </para>
      </listitem>
    </itemizedlist>
  <para>
    Optionally, localhost can be preinstalled with the following
    software:
  </para>
    <itemizedlist>
      <listitem>
        <para>
          ansible&gt;=2.7.0
        </para>
      </listitem>
      <listitem>
        <para>
          python3-openstackclient
        </para>
      </listitem>
      <listitem>
        <para>
          python3-requests
        </para>
      </listitem>
      <listitem>
        <para>
          python3-jmespath
        </para>
      </listitem>
      <listitem>
        <para>
          python3-openstacksdk
        </para>
      </listitem>
      <listitem>
        <para>
          python3-netaddr
        </para>
      </listitem>
    </itemizedlist>
  <para>
    Containerized SUSE OpenStack Cloud only supports the Python3 variant of
    packages. Generally, the <command>python</command> command invokes Python
    version 2. <emphasis role="bold">This version will not work with
    Containerized SUSE OpenStack Cloud.</emphasis>
  </para>
  <para>
    If the optional software packages are not installed, they will be
    installed in a venv in <filename>/.ansiblevenv</filename>.
  </para>
  <note>
   <para>
    The requirements that will be installed in that workspace are:
   </para>
   <screen>ansible==2.7.8
netaddr==0.7.19
jmespath==0.9.3
requests==2.21.0
ara==0.16.3
openstacksdk==0.22.0</screen>
  </note>
</section>
<section xml:id="ecp-cloning-this-repository">
  <title>Cloning this repository</title>
  <para>
    To get started, clone this repository. This repository uses
    submodules, so you must get all the code to make sure the playbooks
    work.
  </para>
  <screen>git clone --recursive https://github.com/SUSE-Cloud/socok8s.git</screen>
  <para>
    Alternatively, one can fetch/update the tree of the submodules by
    running:
  </para>
  <screen>git submodule update --init --recursive</screen>
</section>
<section xml:id="ecp-configure-ansible">
  <title>Configure Ansible</title>
  <section xml:id="ecp-use-ara-recommended">
    <title>Use ARA (recommended)</title>
    <para>
      To use ARA, set the following environment variable before running
      <filename>run.sh</filename>.
    </para>
    <screen>export USE_ARA='True'</screen>
    <para>
      To set up ARA more permanently for your user on localhost, create
      an Ansible configuration file loading ARA plugins:
    </para>
    <screen>python3 -m ara.setup.ansible | tee ~/.ansible.cfg</screen>
    <para>
      For more details on ARA's web interface, please <link
      xlink:href="https://ara.readthedocs.io/en/stable/webserver.html">Read The
      ARA Docs</link>.
    </para>
  </section>
  <section xml:id="ecp-enable-pipelining-recommended">
    <title>Enable pipelining (recommended)</title>
    <para>
      You can improve SSH connections by enabling pipelining:
    </para>
    <screen>cat &lt;&lt; EOF &gt;&gt; ~/.ansible.cfg
[ssh_connection]
pipelining = True
EOF</screen>
  </section>
</section>
<section xml:id="ecp-deploymechanism">
  <title>Defining a workspace</title>
  <para>
    socok8s can create a <xref linkend="term-def-workspace"/>, install things
    (eg. Ansible in a virtualenv), or create resources (for example, OpenStack
    Heat stacks if the deployment mechanism is openstack). For all of these
    operations, an environment variable called
    <literal>SOCOK8S_ENVNAME</literal> must be set. This variable must be
    unique if multiple environments are installed in parallel.
  </para>
  <screen>export SOCOK8S_ENVNAME='soc-west'</screen>
</section>
<section xml:id="ecp-set-the-deployment-mechanism">
  <title>Set the Deployment Mechanism</title>
  <para>
    The SUSE Containerized OpenStack tooling can work with two different
    mechanisms:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Bring your own environment
      </para>
    </listitem>
    <listitem>
      <para>
        Deploy everything on top of OpenStack (experimental).
      </para>
    </listitem>
  </itemizedlist>
  <para>
    This behavior can be changed by setting the environment variable
    <literal>DEPLOYMENT_MECHANISM</literal>. Its default value is
    <literal>kvm</literal>. To deploy <xref linkend="term-def-caasp"/>, <xref
    linkend="term-def-ses"/>, and Containerized OpenStack on top of an
    OpenStack environment (for CI for example), run:
  </para>
  <screen>export DEPLOYMENT_MECHANISM='openstack'</screen>
  <section xml:id="ecp-configureopenstackdeploymentmechanism">
    <title>Configure OpenStack Deployment Mechanism (experimental)</title>
    <para>
      Your environment must have an OpenStack client configuration file.
      For that, create the
      <filename>~/.config/openstack/clouds.yaml</filename> file.
    </para>
    <para>
      The following is an example if you are running on an
      <literal>engcloud</literal>:
    </para>
    <screen>clouds:
  engcloud:
    region_name: CustomRegion
    auth:
      auth_url: https://keystone_url/v3
      username: john # your username here
      password: my-super-secret-password # your password here or add it into secure.yaml
      project_name: cloud
      project_domain_name: default
      user_domain_name: ldap_users # this is just an example, adapt to your needs
    identity_api_version: 3
ansible:
  use_hostnames: True
  expand_hostvars: False
  fail_on_errors: True</screen>
    <para>
      Now pre-create your environment. The convention here is to use
      your username as part of the name of objects you create.
    </para>
    <para>
      Create a keypair on your cloud (named further
      <emphasis>engcloud</emphasis>) using either the Horizon web
      interface or the OpenStackClient (OSC)
      <command>openstack keypair create</command> command for accessing
      the instances created. Remember the name of this keypair (which
      appears as <literal>soc-west-key</literal> in the example below).
    </para>
    <para>
      Set this for <emphasis role="bold">all</emphasis> the following
      scripts in a deployment:
    </para>
    <screen>export SOCOK8S_ENVNAME='soc-west'
# 'engcloud' is the name in the `clouds.yaml`
export OS_CLOUD=engcloud
# Set to the name of the keypair you created
export KEYNAME=soc-west-key
#replace with the actual external network name in your OpenStack environment
export EXTERNAL_NETWORK=floating</screen>
    <para>
      Proceed to next section of the documentation,
      <xref linkend="sec.ecp-prepare-target-hosts"/>.
    </para>
  </section>
</section>
</section>
