<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entity-decl.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec.deploy-airship-openstack">
 <title>Deploy Airship and OpenStack</title>
  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ccp-cloud_deploy.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ccp-cloud_deploy.png"/>
    </imageobject>
   </mediaobject>
  </informalfigure>
 <para>
  To deploy SUSE OpenStack cloud using Airship, run:
 </para>
 <screen>./run.sh deploy</screen>
<para>
  This script takes several minutes to finish.
</para>
<section xml:id="deploymentprogress">
  <title>Track Deployment Progress</title>
  <section xml:id="using-kubectl">
    <title>Using <literal>kubectl</literal></title>
    <para>
      To check the deployment progress of the Airship UCP services:
    </para>
    <screen>kubectl get po -n ucp</screen>
    <para>
      To check the deployment progress of the Openstack services:
    </para>
    <screen>kubectl get po -n openstack</screen>
  </section>
  <section>
   <title>OpenStack Services</title>
   <para>
    Containerized SUSE OpenStack Cloud deploys OpenStack Cinder, Glance, Heat,
    Horizon, Keystone, Neutron, and Nova.
   </para>
   <para>
    Containerized SUSE OpenStack Cloud deployment will automatically add the
    following host rules to the <filename>/etc/hosts</filename> file on the
    deployer:
   </para>
   <screen>10.10.10.10 identity.openstack.svc.cluster.local
10.10.10.10 image.openstack.svc.cluster.local
10.10.10.10 volume.openstack.svc.cluster.local
10.10.10.10 compute.openstack.svc.cluster.local
10.10.10.10 network.openstack.svc.cluster.local
10.10.10.10 dashboard.openstack.svc.cluster.local
10.10.10.10 nova-novncproxy.openstack.svc.cluster.local
10.10.10.10 orchestration.openstack.svc.cluster.local</screen>
   <para>
    You can access OpenStack service public endpoints using the host names
    listed in the <filename>/etc/hosts</filename> file. For example, access
    OpenStack Horizon (dashboard) at
    <literal>http://dashboard.openstack.svc.cluster.local</literal>.
   </para>
   <para>
    You can access Horizon and other OpenStack service APIs from a different
    system by adding the entries above to DNS or /etc/hosts on that system.
   </para>
   <para>
    Distributed Virtual Routing (DVR) is not supported in this Technology
    Preview.
   </para>
  </section>
  <section xml:id="using-kubernetes-dashboard">
    <title>Using Kubernetes Dashboard</title>
    <para>
      Deploy the Kubernetes Dashboard UI with the instructions for <link
      xlink:href="https://github.com/kubernetes/dashboard">Kubernetes
      Dashboard</link>.
    </para>
  </section>
  <section xml:id="using-shipyard-cli">
    <title>Using Shipyard CLI</title>
    <para>
      Airship Shipyard CLI allows you to retrieve the progress and
      status of deployment actions.
    </para>
    <para>
      To use the CLI, you must set up two environment variables:
    </para>
    <screen>export OS_CLOUD=airship
export OS_PASSWORD=PPPPPEEEEEEdLbdlbdlb_Ry</screen>
    <para>
      The OS_PASSWORD is the Shipyard service password in the UCP keystone. It
      can be found in the
      <filename>secrets/ucp_shipyard_keystone_password</filename> file in your
      workspace on the deployer node.
    </para>
    <para>
      To check the workflow status of the deployment action, run:
    </para>
    <screen>/opt/airship-shipyard/tools/shipyard.sh describe action/01D821AZ27H6NCSPV01RXQPDST</screen>
    <para>
      The last argument is the action key in Shipyard. Its value is stored in
      the <filename>soc-keys.yaml</filename> file in your workspace, for
      example,
    </para>
    <screen>Site:
name: soc
action_key: action/01D963GH0B621TBQHZAH8MW9JE</screen>
    <para>
      Sample output of the Shipyard describe command:
    </para>
    <screen>Name:                  update_software
Action:                action/01D963GH0B621TBQHZAH8MW9JE
Lifecycle:             Complete
Parameters:            {}
Datetime:              2019-04-23 22:01:57.003504+00:00
Dag Status:            success
Context Marker:        b2157815-e993-4333-b881-4937084441dd
User:                  shipyard

Steps                                                                Index        State          Footnotes
step/01D963GH0B621TBQHZAH8MW9JE/action_xcom                          1            success
step/01D963GH0B621TBQHZAH8MW9JE/dag_concurrency_check                2            success
step/01D963GH0B621TBQHZAH8MW9JE/deployment_configuration             3            success
step/01D963GH0B621TBQHZAH8MW9JE/validate_site_design                 4            success
step/01D963GH0B621TBQHZAH8MW9JE/armada_build                         5            success
step/01D963GH0B621TBQHZAH8MW9JE/decide_airflow_upgrade               6            success
step/01D963GH0B621TBQHZAH8MW9JE/armada_get_status                    7            success
step/01D963GH0B621TBQHZAH8MW9JE/armada_post_apply                    8            success
step/01D963GH0B621TBQHZAH8MW9JE/upgrade_airflow                      9            skipped
step/01D963GH0B621TBQHZAH8MW9JE/skip_upgrade_airflow                 10           success
step/01D963GH0B621TBQHZAH8MW9JE/deckhand_validate_site_design        11           success
step/01D963GH0B621TBQHZAH8MW9JE/armada_validate_site_design          12           success
step/01D963GH0B621TBQHZAH8MW9JE/armada_get_releases                  13           success
step/01D963GH0B621TBQHZAH8MW9JE/create_action_tag                    14           success

Commands        User            Datetime
invoke          shipyard        2019-04-23 22:01:57.752593+00:00

Validations: None

Action Notes:
&gt; action metadata:01D963GH0B621TBQHZAH8MW9JE(2019-04-23 22:01:57.736165+00:00): Configdoc revision 1</screen>
  </section>
  <section xml:id="logs">
    <title>Logs</title>
    <para>
      To check Airship logs, run the Shipyard logs CLI command, for
      example:
    </para>
    <screen>/opt/airship-shipyard/tools/shipyard.sh logs step/01D963GH0B621TBQHZAH8MW9JE/armada_build</screen>
    <para>
      To check logs from a running container, use the
      <literal>kubectl</literal> logs command. For example, to retrieve the
      test output from the Keystone Rally test, run:
    </para>
    <screen>kubectl logs airship-keystone-test -n openstack</screen>
  </section>
</section>
<section xml:id="run-developer-mode">
  <title>Run Developer Mode</title>
  <para>
    If you want to patch upstream Helm charts or build your own container
    images, set the following environment variables before deployment:
  </para>
  <screen>export SOCOK8S_DEVELOPER_MODE='True'
export AIRSHIP_BUILD_LOCAL_IMAGES='true'
./run.sh deploy</screen>
  <para>
    Alternatively, you can add the following two lines to the
    <filename>env/extravars</filename> file:
  </para>
  <screen>SOCOK8S_DEVELOPER_MODE: true
AIRSHIP_BUILD_LOCAL_IMAGES: true</screen>
</section>
</section>
