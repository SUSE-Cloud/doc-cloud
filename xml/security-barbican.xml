<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="barbican">
 <title>Key Management with the &secret_store; Service</title>
<!--<li><xref href="../upgrade/enable_barbican_for_upgrade.dita#barbicanUpgrade"
  Enabling Barbican when upgrading</xref> from previous versions of
  <keyword keyref="kw-hos"/> (separate document)</li>-->
 <section xml:id="idg-all-security-barbican-xml-4">
  <title>&secret_store; Service Overview</title>
  <para>
   &secret_store; is an &ostack; key management service offering secure storage,
   provisioning, and management of key data. The &secret_store; service provides
   management of secrets, keys and certificates via multiple storage back-ends.
   The support for various back ends is provided via a plug-in mechanism, a Key
   Management Interoperability Protocol (KMIP) plug-in for a KMIP-compliant HSM
   Hardware Secure Module (HSM) device. &secret_store; supports symmetric and
   asymmetric key generation using various algorithms. Cinder, neutron-lbaas v2
   and Nova will integrate with &secret_store; for their encryption key
   generation and storage.
  </para>
  <para>
   &secret_store; has two types of core feature sets:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The <emphasis>&secret_store; component</emphasis>, a Web Server Gateway
     Interface (WSGI) application that exposes a REST API for
     secrets/containers/orders.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>&secret_store; workers</emphasis> for asynchronous processing,
     which is used for various messaging-event-driven tasks related to
     certificate generation.
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section xml:id="features">
  <title>Key Features</title>
  <para>
   The major features of the &secret_store; key management service are:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The ability to encrypt volumes/disks. In an &ostack; context, this
     means support for encrypting Cinder volumes (volume encryption). Cinder
     has its own key manager interface (KeyMgr) and can use BarbicanClient as
     one of its implementations. By default in &kw-hos-phrase;, Cinder uses
     &secret_store; as its key manager when &secret_store; is enabled. KeyMgr
     encrypts data
     in the virtualization host before writing data to the remote disk. There
     are three options available in &kw-hos;:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Tenant-based encryption for block volume storage using &secret_store;
       for KMS,
      </para>
     </listitem>
     <listitem>
      <para>
       &secret_store; with KMIP and PKCS11 and external KMS (certified with
       &mf; ESKM),
      </para>
     </listitem>
     <listitem>
      <para>
       3PAR StoreServ Data-At-Rest Encryption,
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Storage and retrieval of secrets (passwords)
    </para>
   </listitem>
   <listitem>
    <para>
     Certificate management for Load Balancer as a Service V2 (previously known
     as Neutron-LBaaS)
    </para>
   </listitem>
   <listitem>
    <para>
     The ability to define and manage access policies for key material
    </para>
   </listitem>
   <listitem>
    <para>
     Administrative functionality, and the ability to control the lifecycle of
     key material
    </para>
   </listitem>
   <listitem>
    <para>
     A well-defined auditing ability in &ostack; services for key access
     and lifecycle events
    </para>
   </listitem>
   <listitem>
    <para>
     Key management as a service for PaaS application(s) deployed on an
     &ostack; cloud
    </para>
   </listitem>
   <listitem>
    <para>
     The ability to scale key management effectively and make it highly
     available (able to handle failover)
    </para>
   </listitem>
  </itemizedlist>
  <warning>
   <para>
    Do not delete the certificate container associated with your load balancer
    listeners before deleting the load balancers themselves. If you delete the
    certificate first, future operations on your load balancers and failover
    will stop working.
   </para>
  </warning>
 </section>
 <section xml:id="idg-all-security-barbican-xml-6">
  <title>Installation</title>
<!-- TODO UPGRADE -->
<!--The initial preparation for
  Barbican use looks like this:<p>Upgrade: if you are upgrading to <keyword
      keyref="kw-hos-phrase"/> from 2.x versions, you need follow these steps after upgrading
    from 2.x to 3.0:</p>
  <ol>
    <li>Enable Barbican via the control-plane.yml definition file. </li>
    <li>Add Barbican to services that are behind TLS (add TLS support for the Barbican load
      balancer endpoint).</li>
    <li> Add Barbican TLS to continue TLS beyond the internal load balancer (add TLS support for
      Barbican back end).</li>
    <li>The above TLS changes to the input-model definition and control-plane.yml definition
      have to be done together. These changes are explained in <xref
        href="../upgrade/enable_barbican_for_upgrade.dita#barbicanUpgrade"/>. </li>
    <li>Generate a master key. <note type="danger">Do not change your master key after deploying
        it to Barbican.</note></li>
  </ol>-->
  <para>
   New installations of &kw-hos-phrase;:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     For new installations, no changes are needed for &secret_store; to be
     enabled.
     When installing your cloud, you should use the input models which already
     define the necessary &secret_store; components. When using the pre-defined
     input model files that come with &kw-hos-phrase;, nothing else needs to be
     done in those files.
    </para>
   </listitem>
   <listitem>
    <para>
     Generate a master key.
    </para>
    <warning>
     <para>
      Do not change your master key after deploying it to &secret_store;.
     </para>
    </warning>
   </listitem>
   <listitem>
    <para>
     If you decide to make configuration changes to your clean install of
     &kw-hos-phrase;, you will need to redeploy the Barbican service. For
     details on available customization options, please see
     <xref linkend="barbicanAdmin"/>.
    </para>
   </listitem>
  </itemizedlist>
  <bridgehead renderas="sect4">Master Key Configuration</bridgehead>
  <para>
   &secret_store; currently supports databases and KMIP as its secret store
   back-ends.
   In &ostack; upstream additional back-ends are available, such as the
   PKCS11 and dogtag plug-ins, but they are not tested or supported by
   &kw-hos;.
  </para>
  <para>
   In &kw-hos;, by default &secret_store; is configured to use a database as a
   secret (keys) storage back-end.
   This back-end encrypts &secret_store;-managed keys with a
   project level key (<emphasis>KEK</emphasis>/Key Encryption Key) before
   storing it in the database. Project-level keys are encrypted using a master
   key. As part of the initial &secret_store; configuration, you must generate
   and configure this master key.
  </para>
  <para>
   When &secret_store; is used with <literal>simple_crypto_plugin</literal> as
   its secret store back-end, its master key needs to be defined
   <emphasis role="bold">before initial deployment</emphasis>. If no key is
   specified before deployment, the default master key is
   used&mdash;<emphasis role="bold">this practice is discouraged</emphasis>.
  </para>
  <procedure>
   <step>
    <para>
     Generate the master key using the provided python *generate_kek* script on
     the &clm; node:
    </para>
<screen>python ~/openstack/ardana/ansible/roles/KEYMGR-API/templates/generate_kek</screen>
    <para>
     The master key is generated at stdout from this command.
    </para>
   </step>
   <step>
    <para>
     Set the master key in
     <filename>~/openstack/my_cloud/config/barbican/barbican_deploy_config.yml</filename>.
    </para>
   </step>
   <step>
    <para>
     If there is an existing <literal>barbican_customer_master_key</literal>
     value, replace it with the generated master key you just generated.
    </para>
   </step>
   <step>
    <para>
     Commit the change to the Git repository:
    </para>
<screen>cd ~/openstack
git add -A
git commit -m "My config"</screen>
   </step>
   <step>
    <para>
     Run ready-deployment:
    </para>
<screen>cd ~/openstack/ardana/ansible/
ansible-playbook -i hosts/localhost ready-deployment.yml</screen>
   </step>
   <step>
    <para>
     When the master key is set, continue with your cloud deployment.
    </para>
   </step>
  </procedure>
  <bridgehead renderas="sect4">Upgrade Master Key Configuration</bridgehead>
  <procedure>
   <step>
    <para>
     Check the master key.
    </para>
    <para>
     If a master key is already defined, check
     <filename>~/openstack/ardana/ansible/roles/barbican-common/vars/barbican_deploy_config.yml</filename>
     for <literal>barbican_customer_master_key</literal> value. If the value
     does not have a prefix <literal>@ardana@</literal>, it is not encrypted.
     It is highly recommended to encrypt this value.
    </para>
   </step>
   <step>
    <para>
     Encrypt the existing key during upgrade:
    </para>
    <substeps>
     <step>
      <para>
       Set up the environment variable.
      </para>
<screen>ARDANA_USER_PASSWORD_ENCRYPT_KEY</screen>
      <para>
       which contains the key used to encrypt &secret_store; master key.
      </para>
     </step>
     <step>
      <para>
       Before you run any playbooks, you need to export the encryption key in
       the following environment variable:
      </para>
      <substeps>
       <step>
<screen>export ARDANA_USER_PASSWORD_ENCRYPT_KEY=&lt;USER_ENCRYPTION_KEY&gt;</screen>
       </step>
       <step>
<screen>python
*roles/KEYMGR-API/templates/generate_kek &lt;barbican_customer_master_key&gt;</screen>
       </step>
       <step>
        <para>
         Master key is generated at stdout.
        </para>
       </step>
       <step>
        <para>
         Set this master key in file
        </para>
<screen>~/openstack/ardana/ansible/roles/barbican-common/vars/barbican_deploy_config.yml</screen>
       </step>
       <step>
        <para>
         Replace existing <literal>barbican_customer_master_key</literal> value
         with the master key you just generated.
        </para>
       </step>
       <step>
        <para>
         Commit the change in git repository.
        </para>
       </step>
       <step>
<screen>cd ~/openstack/ardana/ansible/
ansible-playbook -i hosts/localhost ready-deployment.yml</screen>
       </step>
       <step>
        <para>
         When the master key is set, continue with cloud deployment.
        </para>
       </step>
      </substeps>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Changing the master key during the upgrade process is discouraged.
     Changing the master key will result in a read error for existing secrets
     as they were encrypted using the previous master key.
    </para>
   </step>
  </procedure>
  <note>
   <para>
    For a &secret_store; deployment with a database back-end, the master key
    needs to be generated and configured before &secret_store; is deployed for
    the first time.
    Once the master key is set, it must not be modified.
   </para>
  </note>
  <note>
   <para>
    Changing the master key can result in read errors for existing secrets as
    those secrets are stored in the database and are encrypted using the
    previous master key. Once a new master key is used, &secret_store; will not
    be able to read those secrets. Also it will not be able to create new
    secrets within that project as the project key is encrypted using previous
    master key.
   </para>
  </note>
  <bridgehead renderas="sect4">KMIP Plug-in Support</bridgehead>
  <para>
   &secret_store; has a KMIP plug-in to store encryption keys (called secrets in
   &secret_store; service terminology) in an HSM device using the KMIP protocol.
   This plug-in has been tested against &mf; ESKM with KMIP server. To
   enable support for it, &secret_store; needs to be configured with the
   corresponding plug-in
   connection details, and client certificate information needs to be defined
   in its configuration. The ESKM KMIP server uses a client certificate to
   validate a KMIP client connection established by the &secret_store; server.
   As part of that KMIP configuration, playbooks provide a mechanism to upload
   your client certs to nodes hosting the &secret_store; API server.
  </para>
  <para>
   KMIP deployment instructions can be found in
   <xref linkend="configure_KMIP_ESKM"/>.
  </para>
  <note>
   <para>
    Installation and deployment of the &mf; ESKM or any other HSM devices
    and dependent components is beyond the scope of this document. Please refer
    the relevant documentation for your choice of product. For example, you can
    get more information on &mf; ESKM and related Data Security and
    Encryption Products at
    <link xlink:href="https://software.microfocus.com/en-us/products/eskm-enterprise-secure-key-management/overview"/>.
   </para>
  </note>
 </section>
 <section xml:id="sec.barbican.audit">
  <title>Auditing &secret_store; Events</title>
  <para>
   The &secret_store; service supports auditing and uses
   <xref linkend="idg-all-security-middleware_auditing-xml-1"/> to generate
   auditing data in Cloud Auditing Data Federation (CADF) format. The &kw-hos;
   input model has a mechanism to enable and disable auditing on a per-service
   basis. When &secret_store; auditing is enabled, it writes audit messages to
   an audit log file that is separate from the &secret_store; internal logging.
   The base location of audit log file is driven by common auditing
   configuration.
  </para>
  <bridgehead renderas="sect4">Enabling and Disabling Auditing</bridgehead>
  <para>
   The auditing of &secret_store; events can be enabled and disabled through the
   &secret_store; reconfigure playbook. As part of the configuration of
   &secret_store;, its audit messages can be directed to a log or to a
   messaging queue. By default, messages are written to the &secret_store; log
   file. Once an architecture-level decision is made with regards to the
   default consumer of audit events (either logging or messaging), the
   &secret_store; service can be configured to use
   it as the default option when auditing is enabled.
  </para>
  <para>
   Auditing can be disabled or enabled by following these steps on the &clm;
   node.
  </para>
  <procedure>
   <title>Enabling or Disabling Auditing</title>
   <step>
    <para>
     Edit the file
     <literal>~/openstack/my_cloud/definition/cloudConfig.yml</literal>. All
     audit-related configuration is defined in the audit-settings section. You
     must use valid YAML syntax when specifying values.
    </para>
   </step>
   <step>
    <para>
     Any service (including &secret_store;) that is listed under
     enabled-services or disabled-services will override the default setting.
     To enable auditing, make sure that the &secret_store; service name is in
     the enabled-services list
     of the <literal>audit-settings</literal> section or is not present in
     disabled-services list when default: is set to enabled.
    </para>
    <para>
     The relevant section of <literal>cloudConfig.yml</literal> is shown below.
     Enabled-services are commented out.
    </para>
    <para>
     The <literal>default: enabled</literal> setting applies to all services.
     If you want to disable (or enable) a few, whichever is the opposite of the
     default global setting you used, you can do so in a disabled-services (or
     enabled-services) section below it. Here the enabled-services entry is
     commented out. You should only have either a default of enabled (or
     disabled) or a section of disabled (or enabled). There is no need to
     duplicate the setting.
    </para>
<screen>audit-settings:
     default: enabled
     #enabled-services:
     #  - keystone
     #  - barbican
     disabled-services:
        - nova
        - barbican
        - keystone
        - cinder
        - ceilometer
        - neutron</screen>
   </step>
   <step>
    <para>
     When you are satisfied with your settings, copy the files to
     <literal>~/openstack/my_cloud/definition/</literal>, and commit the
     changes in the git repository. For example, if you are using the Entry
     Scale KVM model, you would copy from
     <filename>~/openstack/examples/entry-scale-kvm</filename> and commit.
    </para>
<screen>
 cp -r ~/openstack/examples/entry-scale-kvm/* ~/openstack/my_cloud/definition/
 cd ~/openstack
 git add -A
 git commit -m "My config"</screen>
   </step>
   <step>
    <para>
     Run the configuration processor and ready-deployment:
    </para>
<screen>cd ~/openstack/ardana/ansible/
 ansible-playbook -i hosts/localhost config-processor-run.yml
 ansible-playbook -i hosts/localhost ready-deployment.yml</screen>
   </step>
   <step>
    <para>
     Run barbican-reconfigure:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
 ansible-playbook -i hosts/verb_hosts barbican-reconfigure.yml</screen>
   </step>
  </procedure>
 </section>
 <section>
  <title>&secret_store; Key Management Service Bootstrap Data</title>
  <para>
   When the key management service is installed, some of the Keystone-related
   initial data is bootstrapped as part of its initial deployment. The data
   added is primarily related to &secret_store; user, roles, service and
   endpoint definitions, and &secret_store; role assignments.
  </para>
  <bridgehead renderas="sect4">User, Roles, Service and Endpoint Definitions</bridgehead>
  <informaltable colsep="1" rowsep="1">
   <tgroup cols="4">
    <colspec colname="c1" colnum="1" colwidth="1.0*"/>
    <colspec colname="c2" colnum="2" colwidth="2.0*"/>
    <colspec colname="c3" colnum="3" colwidth="6.0*"/>
    <colspec colname="c4" colnum="4" colwidth="6.0*"/>
    <thead>
     <row>
      <entry>Type</entry>
      <entry>Name or key-value pair</entry>
      <entry>Purpose</entry>
      <entry>Comments</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        Keystone User Account
       </para>
      </entry>
      <entry>
       <para>
        barbican
       </para>
      </entry>
      <entry>
       <para>
        &secret_store; user account associated with administrative privileges.
       </para>
      </entry>
      <entry>
       <para>
        Password is randomly generated and made available in the &secret_store;
        client environment setup script, <literal>barbican.osrc,</literal>, on
        the &clm; node.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Keystone User Account
       </para>
      </entry>
      <entry>
       <para>
        barbican_service
       </para>
      </entry>
      <entry>
       <para>
        Service account used for Keystone token validation by
        <literal>barbican</literal> service.
       </para>
      </entry>
      <entry>
       <para>
        Password is randomly generated and stored in barbican paste
        configuration, <filename>barbican-api-paste.ini</filename>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Keystone Role
       </para>
      </entry>
      <entry>
       <para>
        key-manager:creator
       </para>
      </entry>
      <entry>
       <para>
        Barbican specific role with privilege to create, modify, list, and
        delete keys and certificates.
       </para>
      </entry>
      <entry>
       <para>
        This role has the same privileges defined for
        <literal>creator</literal> role in upstream Barbican. Referenced in the
        service policy config file, <filename>policy.json</filename>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Keystone Role
       </para>
      </entry>
      <entry>
       <para>
        key-manager:admin
       </para>
      </entry>
      <entry>
       <para>
        Barbican-specific role that has administrative privileges. Privileges
        include modifications (update and delete) in container's consumer,
        transport keys, certificate authorities (CA), assignment, and
        management of per-project CA.
       </para>
      </entry>
      <entry>
       <para>
        This role has the same privileges defined for<literal>admin</literal>
        role in upstream Barbican. Referenced in the service policy config
        file, <filename>policy.json</filename>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Keystone Role
       </para>
      </entry>
      <entry>
       <para>
        key-manager:observer
       </para>
      </entry>
      <entry>
       <para>
        Barbican specific role which has privileges limited to read/list of
        keys, certificates.
       </para>
      </entry>
      <entry>
       <para>
        This role has the same privileges defined
        for<literal>observer</literal> role in upstream Barbican. Referenced in
        the service policy config file, <filename>policy.json</filename>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Keystone Role
       </para>
      </entry>
      <entry>
       <para>
        key-manager:auditor
       </para>
      </entry>
      <entry>
       <para>
        &secret_store; specific role which has privileges limited to reading
        metadata
        of keys, certificates. This role does not allow reading and listing of
        actual keys and certificates.
       </para>
      </entry>
      <entry>
       <para>
        This role has the same privileges defined for<literal>auditor</literal>
        role in upstream &secret_store;. Referenced in the service policy config
        file, <filename>policy.json</filename>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Keystone Role
       </para>
      </entry>
      <entry>
       <para>
        key-manager:service-admin
       </para>
      </entry>
      <entry>
       <para>
        &secret_store; specific role which has privilege to modify global
        preferred CA and modify default project quotas.
       </para>
      </entry>
      <entry>
       <para>
        This role has the same privileges defined
        for <literal>key-manager:service-admin</literal> role in upstream
        &secret_store;. Referenced in the service policy config file,
        <filename>policy.json</filename>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Keystone Service
       </para>
      </entry>
      <entry>
       <para>
        name: barbican type: key-manager
       </para>
      </entry>
      <entry>
       <para>
        Barbican service definition. Service type is
        <emphasis>key-manager</emphasis>.
       </para>
      </entry>
      <entry></entry>
     </row>
     <row>
      <entry>
       <para>
        Keystone Endpoint
       </para>
      </entry>
      <entry>
       <para>
        interface: internal region: region1
       </para>
      </entry>
      <entry>
       <para>
        Barbican internal endpoint. This is the load-balanced endpoint exposed
        for internal service usage.
       </para>
      </entry>
      <entry></entry>
     </row>
     <row>
      <entry>
       <para>
        Keystone Endpoint
       </para>
      </entry>
      <entry>
       <para>
        interface: public region: region1
       </para>
      </entry>
      <entry>
       <para>
        Barbican public endpoint. This is the load-balanced endpoint exposed
        for external/public service usage.
       </para>
      </entry>
      <entry></entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <bridgehead renderas="sect4">Role Assignments</bridgehead>
  <informaltable colsep="1" rowsep="1">
   <tgroup cols="4">
    <colspec colname="c1" colnum="1" colwidth="1.0*"/>
    <colspec colname="c2" colnum="2" colwidth="1.0*"/>
    <colspec colname="c3" colnum="3" colwidth="3.0*"/>
    <colspec colname="c4" colnum="4" colwidth="8.0*"/>
    <thead>
     <row>
      <entry>User name</entry>
      <entry>Project name</entry>
      <entry>Role name</entry>
      <entry>Purpose</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>barbican</entry>
      <entry>admin</entry>
      <entry>key-manager:admin</entry>
      <entry>
       <para>
        User is assigned Barbican administration privileges on Keystone-defined
        <literal>admin</literal> project. This allows the user to manage
        Barbican resources associated with that project using the Barbican CLI
        setup.
       </para>
      </entry>
     </row>
     <row>
      <entry>barbican</entry>
      <entry>admin</entry>
      <entry>key-manager:service-admin </entry>
      <entry>
       <para>
        User is assigned Barbican service administration privileges on
        Keystone-defined <literal>admin</literal> project. This role and the
        one above allows full Barbican-related administration capabilities.
       </para>
      </entry>
     </row>
     <row>
      <entry>barbican</entry>
      <entry>admin</entry>
      <entry>admin</entry>
      <entry>
       <para>
        User assigned Keystone defined administrative role on its
        <literal>admin</literal> project. This way customer can continue to use
         &secret_store; CLI and &ostack; CLI without need to switch when testing
        or verifying data.
       </para>
      </entry>
     </row>
     <row>
      <entry>admin</entry>
      <entry>admin</entry>
      <entry>key-manager:admin</entry>
      <entry>
       <para>
        Keystone-defined <literal>admin</literal> user is given Barbican
        related administrative privileges on Keystone-defined
        <literal>admin</literal> project.
       </para>
      </entry>
     </row>
     <row>
      <entry>admin</entry>
      <entry>admin</entry>
      <entry>key-manager:service-admin</entry>
      <entry>
       <para>
        In lines of above role assignment, &secret_store; specific service
        administrator role
        is assigned to allow global preferred CA and quotas modifications.
       </para>
      </entry>
     </row>
     <row>
      <entry>barbican_service</entry>
      <entry>services</entry>
      <entry>service</entry>
      <entry>
       <para>
        &secret_store; service account is given <literal>service</literal> role
        on <literal>services</literal> project for token validation. API server
        uses this for creating scoped service token and then includes it as
        <literal>X-Service-Token</literal> when requesting customer/client
        token validation from Keystone.
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </section>
 <section xml:id="idg-all-security-barbican-xml-11">
  <title>Known issues and workarounds</title>
  <orderedlist>
   <listitem>
    <para>
     Make sure that in your Certificate Signing Request (CSR) <literal>Common
     Name</literal> matches the <literal>barbican_kmip_username</literal> value
     defined in
     <filename>roles/barbican-common/vars/barbican_deploy_config.yml</filename>.
     Otherwise you may see an internal server error message in Barbican for
     secret create request.
    </para>
   </listitem>
   <listitem>
    <para>
     Barbican does not return a clear error message with regards to client
     certificate setup and its connectivity with KMIP server. During secret
     create request, a general "Internal Server Error" is returned when the
     certificate is invalid or missing any of necessary client certificate data
     (client certificate, key and CA root certificate).
    </para>
   </listitem>
<!-- Commented in DITA original -->
<!--<li>After reconfiguring VIP from TLS to non-TLS , false measurements appear in monitoring.
          Monasca measurements for http_status checks alternate between '0' and '1' as shown
          below.</li>-->
  </orderedlist>
<!-- Commented in DITA original -->
<!--<codeblock>stack@padawan-ccp-c1-m1-mgmt:~$ monasca
        - -os-username monasca measurement-list - -dimensions
        component=barbican-api,monitored_host_type=vip,api_endpoint=internal - -merge_metrics</codeblock>
     <codeblock> http_status 2016-02-17T20:17:00
+................+....................+................................+............….+.….….….…...+
| name        | dimensions | timestamp                | value        | value_meta |
+................+.….…....+....................................+................-+..................+
| http_status |            | 2016-02-17T20:17:28.000Z |        1.000 |            |
|             |            | 2016-02-17T20:17:29.000Z |        0.000 |            |
|             |            | 2016-02-17T20:17:29.000Z |        1.000 |            |
|             |            | 2016-02-17T20:17:31.000Z |        0.000 |            |
|             |            | 2016-02-17T20:17:31.000Z |        1.000 |            |
|             |            | 2016-02-17T20:17:57.000Z |        0.000 |            |
|             |            | 2016-02-17T20:17:57.000Z |        1.000 |            |
+......................................................................................................+</codeblock>Both
      URLs (http and https) are being monitored after the non-TLS switch. To remedy this, edit the
      control plane definition file,
      <codeph>control_plane.yml</codeph>:<codeblock>~/openstack/my_cloud/definition/data/control_plane.yml</codeblock>Make
      changes to add Barbican service components if not already there, as explained next:-->
 </section>
<!-- Commented in DITA original -->
<!--<section conref="../upgrade/enable_barbican_for_upgrade.dita#barbicanUpgrade/config"/>-->
<!--<section>Commit the change in git repository.
      <codeblock>cd ~/helion
git add -A
git commit -m "My config"</codeblock>
      Then run the
      config-processor-run and ready-deployment playbooks:
      <codeblock>cd ~/openstack/ardana/ansible/
ansible-playbook -i hosts/localhost config-processor-run.yml
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
      Then run the site.yml
      playbook:<codeblock>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts site.yml</codeblock>
    </section>-->
</chapter>
