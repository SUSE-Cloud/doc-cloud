<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<!---->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="notifications">
 <title>Ceilometer Metering Service Notifications</title>
<!---->
 <para>
  Ceilometer uses the notification agent to listen to the message queue,
  convert notifications to Events and Samples, and apply pipeline actions.
 </para>
 <section xml:id="whitelist">
  <title>Manage Whitelisting and Polling</title>
  <para>
   &productname; is designed to reduce the amount of data that is stored.
   &productname;'s use of a SQL-based cluster, which is not recommended for big data,
   means you must control the data that Ceilometer collects. You can do this by
   filtering (whitelisting) the data or by using the configuration files for
   the Ceilometer Polling Agent and the Ceilometer Notificfoation Agent.
  </para>
  <para>
   Whitelisting is used in a rule specification as a positive filtering
   parameter. Whitelist is only included in rules that can be used in direct
   mappings, for identity service issues such as service discovery,
   provisioning users, groups, roles, projects, domains as well as user
   authentication and authorization.
  </para>
  <para>
   You can run tests against specific scenarios to see if filtering reduces the
   amount of data stored. You can create a test by editing or creating a run
   filter file (whitelist). For steps on how to do this, see:
   <xref linkend="api_verification"/>.
  </para>
  <para>
   Ceilometer Polling Agent (polling agent) and Ceilometer Notification Agent
   (notification agent) use different pipeline.yaml files to configure meters
   that are collected. This prevents accidentally polling for meters which can
   be retrieved by the polling agent as well as the notification agent. For
   example, glance image and image.size are meters which can be retrieved both
   by polling and notifications.
  </para>
  <para>
   In both of the separate configuration files, there is a setting for
   <literal>interval</literal>. The interval attribute determines the
   frequency, in seconds, of how often data is collected. You can use this
   setting to control the amount of resources that are used for notifications
   and for polling. For example, you want to use more resources for
   notifications and less for polling. To accomplish this you would set the
   <literal>interval</literal> in the polling configuration file to a large
   amount of time, such as 604800 seconds, which polls only once a week. Then
   in the notifications configuration file, you can set the
   <literal>interval</literal> to a higher amount, such as collecting data
   every 30 seconds.
  </para>
  <important>
   <para>
    Swift account data will be collected using the polling mechanism in an
    hourly interval.
   </para>
  </important>
  <para>
   Setting this interval to manage both notifications and polling is the
   recommended procedure when using a SQL cluster back-end.
  </para>
  <para>
   <emphasis role="bold">Sample Ceilometer Polling Agent file:</emphasis>
  </para>
<screen>#File: ~/opt/stack/service/ceilometer-polling/etc/pipeline-polling.yaml
---
sources:
    - name: swift_source
      interval: 3600
      meters:
          - "storage.objects"
          - "storage.objects.size"
          - "storage.objects.containers"
      resources:
      discovery:
      sinks:
          - meter_sink
sinks:
    - name: meter_sink
      transformers:
      publishers:
         - notifier://</screen>
  <para>
   <emphasis role="bold">Sample Ceilometer Notification Agent(notification
   agent) file:</emphasis>
  </para>
<screen>#File:    ~/opt/stack/service/ceilometer-agent-notification/etc/pipeline-agent-notification.yaml
---
sources:
    - name: meter_source
      interval: 30
      meters:
          - "instance"
          - "image"
          - "image.size"
          - "image.upload"
          - "image.delete"
          - "volume"
          - "volume.size"
          - "snapshot"
          - "snapshot.size"
          - "ip.floating"
          - "network"
          - "network.create"
          - "network.update"
resources:
discovery:
sinks:
          - meter_sink
sinks:
    - name: meter_sink
      transformers:
      publishers:
         - notifier://</screen>
  <para>
   Both of the pipeline files have two major sections:
  </para>
  <variablelist>
   <varlistentry>
    <term>Sources</term>
    <listitem>
     <para>
      represents the data that is collected either from notifications posted by
      services or through polling. In the Sources section there is a list of
      meters. These meters define what kind of data is collected. For a full
      list refer to the Ceilometer documentation available at:
      <link xlink:href="http://docs.openstack.org/admin-guide/telemetry-measurements.html">Telemetry
      Measurements</link>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Sinks</term>
    <listitem>
     <para>
      represents how the data is modified before it is published to the
      internal queue for collection and storage.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   You will only need to change a setting in the Sources section to control the
   data collection interval.
  </para>
  <para>
   For more information, see
   <link xlink:href="http://docs.openstack.org/admin-guide-cloud/telemetry-measurements.html">Telemetry
   Measurements</link>
  </para>
  <para>
   <emphasis role="bold">To change the Ceilometer Polling Agent interval
   setting:</emphasis>
  </para>
  <procedure>
   <step>
    <para>
     To find the polling agent configuration file, run:
    </para>
<screen>cd ~/opt/stack/service/ceilometer-polling/etc</screen>
   </step>
   <step>
    <para>
     In a text editor, open the following file:
    </para>
<screen>pipeline-polling.yaml</screen>
   </step>
   <step>
    <para>
     In the following section, change the value of <literal>interval</literal>
     to the desired amount of time:
    </para>
<screen>---
sources:
    - name: swift_source
      interval: 3600
      meters:
          - "storage.objects"
          - "storage.objects.size"
          - "storage.objects.containers"
      resources:
      discovery:
      sinks:
          - meter_sink
sinks:
    - name: meter_sink
      transformers:
      publishers:
         - notifier://</screen>
    <para>
     In the sample code above, the polling agent will collect data every 600
     seconds, or 10 minutes.
    </para>
   </step>
  </procedure>
  <para>
   <emphasis role="bold">To change the Ceilometer Notification Agent
   (notification agent) interval setting:</emphasis>
  </para>
  <procedure>
   <step>
    <para>
     To find the notification agent configuration file, run:
    </para>
<screen>cd /opt/stack/service/ceilometer-agent-notification</screen>
   </step>
   <step>
    <para>
     In a text editor, open the following file:
    </para>
<screen>pipeline-agent-notification.yaml</screen>
   </step>
   <step>
    <para>
     In the following section, change the value of <literal>interval</literal>
     to the desired amount of time:
    </para>
<screen>sources:
    - name: meter_source
      interval: 30
      meters:
          - "instance"
          - "image"
          - "image.size"
          - "image.upload"
          - "image.delete"
          - "volume"
          - "volume.size"
          - "snapshot"
          - "snapshot.size"
          - "ip.floating"
          - "network"
          - "network.create"
          - "network.update"</screen>
    <para>
     In the sample code above, the notification agent will collect data every
     30 seconds.
    </para>
   </step>
  </procedure>
  <note>
   <para>
    The <literal>pipeline-agent-notification.yaml</literal> file needs to be changed on all
    controller nodes to change the white-listing and polling strategy.
   </para>
  </note>
 </section>
 <section xml:id="idg-all-metering-metering_notifications-xml-7">
  <title>Edit the List of Meters</title>
  <para>
   The number of enabled meters can be reduced or increased by editing the
   pipeline configuration of the notification and polling agents. To deploy
   these changes you must then restart the agent. If pollsters and
   notifications are both modified, then you will have to restart both the
   Polling Agent and the Notification Agent. Ceilometer Collector will also
   need to be restarted. The following code is an example of a compute-only
   Ceilometer Notification Agent (notification agent)
   <emphasis role="bold">pipeline-agent-notification.yaml </emphasis>file:
  </para>
<screen>---
sources:
    - name: meter_source
      interval: 86400
      meters:
          - "instance"
          - "memory"
          - "vcpus"
          - "compute.instance.create.end"
          - "compute.instance.delete.end"
          - "compute.instance.update"
          - "compute.instance.exists"
      sinks:
          - meter_sink
sinks:
    - name: meter_sink
      transformers:
      publishers:
          - notifier://</screen>
  <important>
   <para>
    If you enable meters at the container level in this file, every time the
    polling interval triggers a collection, at least 5 messages per existing
    container in Swift are collected.
   </para>
  </important>
  <para>
   The following table illustrates the amount of data produced hourly in
   different scenarios:
  </para>
  <informaltable>
   <tgroup cols="4">
    <tbody>
     <row>
      <entry>Swift Containers</entry>
      <entry>Swift Objects per container</entry>
      <entry>Samples per Hour</entry>
      <entry>Samples stored per 24 hours</entry>
     </row>
     <row>
      <entry>10</entry>
      <entry>10</entry>
      <entry>500</entry>
      <entry>12000</entry>
     </row>
     <row>
      <entry>10</entry>
      <entry>100</entry>
      <entry>5000</entry>
      <entry>120000</entry>
     </row>
     <row>
      <entry>100</entry>
      <entry>100</entry>
      <entry>50000</entry>
      <entry>1200000</entry>
     </row>
     <row>
      <entry>100</entry>
      <entry>1000</entry>
      <entry>500000</entry>
      <entry>12000000</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <para>
   The data in the table shows that even a very small Swift storage with 10
   containers and 100 files will store 120,000 samples in 24 hours, generating
   a total of 3.6 million samples.
  </para>
  <important>
   <para>
    The size of each file does not have any impact on the number of samples
    collected. As shown in the table above, the smallest number of samples
    results from polling when there are a small number of files and a small
    number of containers. When there are a lot of small files and containers,
    the number of samples is the highest.
   </para>
  </important>
 </section>
 <section xml:id="meters_add">
  <title>Add Resource Fields to Meters</title>
  <para>
   By default, not all the resource metadata fields for an event are recorded
   and stored in Ceilometer. If you want to collect metadata fields for a
   consumer application, for example, it is easier to add a field to an
   existing meter rather than creating a new meter. If you create a new meter,
   you must also reconfigure Ceilometer.
  </para>
  <important>
   <para>
    Consider the following information before you add or edit a meter:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      You can add a maximum of 12 new fields.
     </para>
    </listitem>
    <listitem>
     <para>
      Adding or editing a meter causes all non-default meters to STOP receiving
      notifications. You will need to restart Ceilometer.
     </para>
    </listitem>
    <listitem>
     <para>
      New meters added to the <literal>pipeline-polling.yaml.j2</literal> file
      must also be added to the
      <literal>pipeline-agent-notification.yaml.j2</literal> file. This is due
      to the fact that polling meters are drained by the notification agent and
      not by the collector.
     </para>
    </listitem>
    <listitem>
     <para>
      After &productname; is installed, services like compute, cinder, glance, and
      neutron are configured to publish Ceilometer meters by default. Other
      meters can also be enabled after the services are configured to start
      publishing the meter. The only requirement for publishing a meter is that
      the <literal>origin</literal> must have a value of
      <literal>notification</literal>. For a complete list of meters, see the
      OpenStack documentation on
      <link xlink:href="http://docs.openstack.org/admin-guide/telemetry-measurements.html">Measurements</link>.
     </para>
    </listitem>
    <listitem>
     <para>
      Not all meters are supported. Meters collected by Ceilometer Compute
      Agent or any agent other than Ceilometer Polling are not supported or
      tested with &productname;.
     </para>
    </listitem>
    <listitem>
     <para>
      Identity meters are disabled by Keystone.
     </para>
    </listitem>
    <listitem>
     <para>
      To enable Ceilometer to start collecting meters, some services require
      you enable the meters you need in the service first before enabling them
      in Ceilometer. Refer to the documentation for the specific service before
      you add new meters or resource fields.
     </para>
    </listitem>
   </itemizedlist>
  </important>
  <para>
   <emphasis role="bold">To add Resource Metadata fields:</emphasis>
  </para>
  <procedure>
   <step>
    <para>
     Log on to the &lcm; (deployer node).
    </para>
   </step>
   <step>
    <para>
     To change to the Ceilometer directory, run:
    </para>
<screen>&prompt.ardana;cd ~/openstack/my_cloud/config/ceilometer </screen>
   </step>
   <step>
    <para>
     In a text editor, open the target configuration file (for example,
     monasca-field-definitions.yaml.j2).
    </para>
   </step>
   <step>
    <para>
     In the metadata section, either add a new meter or edit an existing one
     provided by &productname;.
    </para>
   </step>
   <step>
    <para>
     Include the metadata fields you need. You can use the <literal>instance
     meter</literal> in the file as an example.
    </para>
   </step>
   <step>
    <para>
     Save and close the configuration file.
    </para>
   </step>
   <step>
    <para>
     To save your changes in &productname;, run:
    </para>
<screen>&prompt.ardana;cd ~/openstack
&prompt.ardana;git add -A
&prompt.ardana;git commit -m "My config"</screen>
   </step>
   <step>
    <para>
     If you added a new meter, reconfigure Ceilometer:
    </para>
<screen>&prompt.ardana;cd ~/openstack/ardana/ansible/
# To run the config-processor playbook:
&prompt.ardana;ansible-playbook -i hosts/localhost config-processor-run.yml
#To run the ready-deployment playbook:
&prompt.ardana;ansible-playbook -i hosts/localhost ready-deployment.yml
&prompt.ardana;cd ~/scratch/ansible/next/ardana/ansible/
&prompt.ardana;ansible-playbook -i hosts/verb_hosts ceilometer-reconfigure.yml</screen>
   </step>
  </procedure>
 </section>
 <section xml:id="update_pollSwift">
  <title>Update the Polling Strategy and Swift Considerations</title>
  <para>
   Polling can be very taxing on the system due to the sheer volume of data
   thtyat the system may have to process. It also has a severe impact on
   queries since the database will now have a very large amount of data to scan
   to respond to the query. This consumes a great amount of cpu and memory.
   This can result in long wait times for query responses, and in extreme cases
   can result in timeouts.
  </para>
  <para>
   There are 3 polling meters in Swift:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     storage.objects
    </para>
   </listitem>
   <listitem>
    <para>
     storage.objects.size
    </para>
   </listitem>
   <listitem>
    <para>
     storage.objects.containers
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Here is an example of <filename>pipeline.yml</filename> in which
   Swift polling is set to occur hourly.
  </para>
<screen>---
      sources:
      - name: swift_source
      interval: 3600
      meters:
      - "storage.objects"
      - "storage.objects.size"
      - "storage.objects.containers"
      resources:
      discovery:
      sinks:
      - meter_sink
      sinks:
      - name: meter_sink
      transformers:
      publishers:
      - notifier://</screen>
  <para>
   With this configuration above, we did not enable polling of container based
   meters and we only collect 3 messages for any given tenant, one for each
   meter listed in the configuration files. Since we have 3 messages only per
   tenant, it does not create a heavy load on the MySQL database as it would
   have if container-based meters were enabled. Hence, other APIs are not
   hit because of this data collection configuration.
  </para>
 </section>
</section>
