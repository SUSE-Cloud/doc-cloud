<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xml:id="api_verification"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>API Verification</title>
 <para>
  &kw-hos-phrase; provides a tool, Tempest, that you can use to verify that
  your cloud deployment completed successfully:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <xref linkend="sec.api_verification.prereq"/>
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="sec.api_verification.tempest"/>
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <xref linkend="sec.api_verification.running"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec.api_verification.result"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec.api_verification.custom"/>
     </para>
    </listitem>
   </itemizedlist>
  </listitem>
  <listitem>
   <para>
    <xref linkend="sec.verify_block_storage.volume"/>
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="sec.verify_block_storage.swift"/>
   </para>
  </listitem>
 </itemizedlist>
 <section xml:id="sec.api_verification.prereq">
  <title>Prerequisites</title>
  <para>
   The verification tests rely on you having an external network setup and a
   cloud image in your image (Glance) repository. Run the following playbook to
   configure your cloud:
  </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts ardana-cloud-configure.yml</screen>
  <note>
   <para>
    In &kw-hos-phrase;, the EXT_NET_CIDR setting for the external network is
    now specified in the input model - see
    <xref linkend="configobj_neutron_external_networks"/>.
   </para>
  </note>
 </section>
 <section xml:id="sec.api_verification.tempest">
  <title>Tempest Integration Tests</title>
  <para>
   Tempest is a set of integration tests for OpenStack API validation,
   scenarios, and other specific tests to be run against a live OpenStack
   cluster. In &kw-hos-phrase;, Tempest has been modeled as a service and this
   gives you the ability to locate Tempest anywhere in the cloud. It is
   recommended that you install Tempest on your &lcm; node - that
   is where it resides by default in a new installation.
  </para>
  <para>
   A version of the upstream
   <link xlink:href="http://docs.openstack.org/developer/tempest/">Tempest</link>
   integration tests is pre-deployed on the &lcm; node.
   For details on what Tempest is testing, you can check the contents of this
   file on your &lcm;:
  </para>
<screen>/opt/stack/tempest/run_filters/ci.txt</screen>
  <para>
   You can use these embedded tests to verify if the deployed cloud is
   functional.
  </para>
  <para>
   For more information on running Tempest tests, see
   <link xlink:href="https://git.openstack.org/cgit/openstack/tempest/tree/README.rst">Tempest
   - The OpenStack Integration Test Suite</link>.
  </para>
  <important>
   <para>
    Running these tests requires access to the deployed cloud's identity admin
    credentials
   </para>
  </important>
  <para>
   Tempest creates and deletes test accounts and test resources for test
   purposes.
  </para>
  <para>
   In certain cases Tempest might fail to clean-up some of test resources after
   a test is complete, for example in case of failed tests.
  </para>
 </section>
 <section xml:id="sec.api_verification.running">
  <title>Running the Tests</title>
  <para>
   To run the default set of Tempest tests:
  </para>
  <procedure>
   <step>
    <para>
     Log in to the &lcm;.
    </para>
        </step>
   <step>
    <para>
     Ensure you can access your cloud:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts cloud-client-setup.yml
source /etc/environment</screen>
   </step>
   <step>
    <para>
     Run the tests:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts tempest-run.yml</screen>
   </step>
  </procedure>
  <para>
   Optionally, you can <xref linkend="sec.api_verification.custom"/>.
  </para>
 </section>
 <section xml:id="sec.api_verification.result">
  <title>Viewing Test Results</title>
  <para>
   Tempest is deployed under <literal>/opt/stack/tempest</literal>. Test
   results are written in a log file in the following directory:
  </para>
<screen>/opt/stack/tempest/logs</screen>
  <para>
   A detailed log file is written to:
  </para>
<screen>/opt/stack/tempest/tempest.log</screen>
  <para>
   The results are also stored in the <literal>testrepository</literal>
   database.
  </para>
  <para>
   To access the results after the run:
  </para>
  <procedure>
   <step>
    <para>
     Log in to the &lcm;.
    </para>
   </step>
   <step>
    <para>
     Change to the <literal>tempest</literal> directory and list the test
     results:
    </para>
<screen>cd /opt/stack/tempest
./venv/bin/testr last</screen>
   </step>
  </procedure>
  <important>
   <para>
    If you encounter an error saying "local variable 'run_subunit_content'
    referenced before assignment", you may need to log in as the
    <literal>tempest</literal> user to run this command. This is due to a known
    issue reported at
    <link xlink:href="https://bugs.launchpad.net/testrepository/+bug/1348970"/>.
   </para>
  </important>
  <para>
   See
   <link xlink:href="https://testrepository.readthedocs.org/en/latest/">Test
   Repository Users Manual</link> for more details on how to manage the test
   result repository.
  </para>
 </section>
 <section xml:id="sec.api_verification.custom">
  <title>Customizing the Test Run</title>
  <para>
   There are several ways available to customize which tests will be executed.
  </para>
  <itemizedlist>
  <!-- FIXME: The following was commented in the DITA original -->
  <!--  <li>
            <xref type="section" href="#tempest/service">Run Tests for a Specific Service</xref>
          </li> -->
   <listitem>
    <para>
     <xref linkend="sec.api_verification.service"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec.api_verification.list"/>
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section xml:id="sec.api_verification.service">
  <title>Run Tests for Specific Services and Exclude Specific Features</title>
  <para>
   Tempest allows you to test specific services and features using the
   <literal>tempest.conf</literal> configuration file.
  </para>
  <para>
   A working configuration file with inline documentation is deployed under
   <literal>/opt/stack/tempest/etc/</literal>.
  </para>
  <para>
   To use this, follow these steps:
  </para>
  <procedure>
   <step>
    <para>
     Log in to the &lcm;.
    </para>
   </step>
   <step>
    <para>
     Edit the
     <literal>/opt/stack/tempest/configs/tempest_region0.conf</literal> file.
    </para>
   </step>
   <step>
    <para>
     To test specific service, edit the <literal>[service_available]</literal>
     section and clear the comment character <literal>#</literal> and set a
     line to <literal>true</literal> to test that service or
     <literal>false</literal> to not test that service.
    </para>
<screen>cinder = true
neutron = false</screen>
   </step>
   <step>
    <para>
     To test specific features, edit any of the
     <literal>*_feature_enabled</literal> sections to enable or disable tests
     on specific features of a service.
    </para>
<screen>[volume-feature-enabled]
[compute-feature-enabled]
[identity-feature-enabled]
[image-feature-enabled]
[network-feature-enabled]
[object-storage-feature-enabled]</screen>
<screen>#Is the v2 identity API enabled (boolean value)
api_v2 = true
#Is the v3 identity API enabled (boolean value)
api_v3 = false</screen>
   </step>
   <step>
    <para>
     Then run tests normally
    </para>
   </step>
  </procedure>
 </section>
 <section xml:id="sec.api_verification.list">
  <title>Run Tests Matching a Series of White and Blacklists</title>
  <para>
   You can run tests against specific scenarios by editing or creating a run
   filter file.
  </para>
  <para>
   Run filter files are deployed under
   <literal>/opt/stack/tempest/run_filters</literal>.
  </para>
  <para>
   Use run filters to whitelist or blacklist specific tests or groups of tests:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     lines starting with # or empty are ignored
    </para>
   </listitem>
   <listitem>
    <para>
     lines starting with <literal>+</literal> are whitelisted
    </para>
   </listitem>
   <listitem>
    <para>
     lines starting with <literal>-</literal> are blacklisted
    </para>
   </listitem>
   <listitem>
    <para>
     lines not matching any of the above conditions are blacklisted
    </para>
   </listitem>
  </itemizedlist>
  <para>
   If whitelist is empty, all available tests are fed to blacklist. If
   blacklist is empty, all tests from whitelist are returned.
  </para>
  <para>
   Whitelist is applied first. The blacklist is executed against the set of
   tests returned by the whitelist.
  </para>
  <para>
   To run whitelist and blacklist tests:
  </para>
  <procedure>
   <step>
    <para>
     Log in to the &lcm;.
    </para>
   </step>
   <step>
    <para>
     Make sure you can access the cloud:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts cloud-client-setup.yml
source /etc/environment</screen>
   </step>
   <step>
    <para>
     Run the tests:
    </para>
<screen>
<?dbsuse-fo font-size="0.70em"?>
cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts tempest-run.yml  -e run_filter &lt;run_filter_name&gt;</screen>
   </step>
  </procedure>
  <para>
   Note that the run_filter_name is the name of the run_filter file except for
   the extension. For instance, to run using the filter from the file
   /opt/stack/tempest/run_filters/ci.txt, use the following:
  </para>
<screen>ansible-playbook -i hosts/verb_hosts tempest-run.yml -e run_filter=ci</screen>
  <para>
   Documentation on the format of white and black-lists is available at:
  </para>
<screen>/opt/stack/tempest/tests2skip.py</screen>
  <para>
   Example:
  </para>
  <para>
   The following entries run API tests, exclude tests that are less relevant
   for deployment validation, such as negative, admin, cli and third-party (EC2)
   tests:
  </para>
<screen>+tempest\.api\.*
*[Aa]dmin.*
*[Nn]egative.*
- tempest\.cli.*
- tempest\.thirdparty\.*</screen>
 </section>
 <!-- FIXME: The following was commented in the DITA original. -->
 <!--
 <section id="issues">
   <title>Known issues</title>
   <p>The following failing tests can be excluded from the test run by adding the following to
     the <codeph>tests2skip.txt file</codeph>:</p>
 </section>
 <section id="exclude">
   <title>Exclude tests for features that are not available and test not compatible</title>
   <codeblock>
     <codeph>tempest\.api\.compute\.certificates\.*
       tempest\.api\.compute\.servers.test_disk_config\.*
       tempest\.api\.network\.test_fwaas_extensions\.*
       tempest\.api\.network\.test_vpnaas_extensions\.*
       tempest\.api\.network\.test_load_balancer\.*
       tempest\.api\.image\.v1\.test_image\.CreateRegisterImagesTest\.test_register_http_image
       tempest\.api\.image\.v1\.test_images\.CreateRegisterImagesTest\.test_register_remote_image
       tempest.api\.network\.test_metering_extensions\.MeteringTestJSON
       tempest\.api\.network\.test_metering_extensions\.MeteringIpV6TestJSON
       tempest\.api\.compute\.test_live_block_migration.LiveBlockMigrationTestJSON\.test_live_block_migration
       tempest\.api\.compute\.floating_ips\.test_list_floating_ips\.FloatingIPDetailsTestJSON\.test_list_floating_ip_pools
     </codeph>
   </codeblock>
 </section>
 <section id="fail">
   <title>Known failures</title>
   <p>The following tests will result in failure using the installed Tempest library. These known
     failures can be fixed by installing the <codeph>tempest-lib&gt;=0.2.0</codeph> OpenStack
     Functional Testing Library.</p>
   <p>See <xref href="https://pypi.python.org/pypi/tempest-lib/0.2.0"
       format="html">tempest-lib 0.2.0</xref> for information on downloading the library.</p>
   <codeblock>
     <codeph>tempest\.api\.object_storage\.test_container_staticweb\.StaticWebTest\.test_web_index
       tempest\.api\.object_storage\.test_container_staticweb\.StaticWebTest\.test_web_listing_css
       tempest\.api\.object_storage\.test_container_services\.ContainerTest\.test_update_container_metadata_with_delete_metadata
       tempest\.api\.object_storage\.test_container_services\.ContainerTest\.test_update_container_metadata_with_delete_metadata_key
       tempest\.api\.object_storage\.test_object_slo\.ObjectSloTest\.test_upload_manifest
       tempest\.api\.object_storage\.test_container_sync_middleware\.ContainerSyncMiddlewareTest\.test_container_synchronization
     </codeph>
   </codeblock>
 </section>
 -->
</section>
