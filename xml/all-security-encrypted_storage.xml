<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="password_encryption">
 <title>Encryption of Passwords and Sensitive Data</title>
 <para>
  In &kw-hos-phrase;, sensitive connection data is encrypted. The passwords
  that are encrypted include:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Inter-service passwords generated by the configuration processor (Keystone,
    MySQL, RabbitMQ and Vertica passwords)
   </para>
  </listitem>
  <listitem>
   <para>
    Secret keys generated by the configuration processor (MySQL cluster-id,
    erlang cookie for RabbitMQ, Horizon secret key, Keystone admin token)
   </para>
  </listitem>
  <listitem>
   <para>
    User-supplied passwords (iLO passwords, Block Storage backend passwords)
   </para>
  </listitem>
 </itemizedlist>
 <section>
  <title><!-- FIXME: no title?? --></title>
  <informaltable colsep="1" rowsep="1">
   <tgroup cols="4">
    <colspec colname="c1" colnum="1"/>
    <colspec colname="c2" colnum="2"/>
    <colspec colname="c3" colnum="3"/>
    <colspec colname="c4" colnum="4"/>
    <thead>
     <row>
      <entry>What is encrypted</entry>
      <entry>Encryption mechanism</entry>
      <entry>Is password changeable</entry>
      <entry>Is encryption key changeable</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        Inter-service passwords and secret keys generated by the configuration
        processor (Keystone, MySQL, RabbitMQ and Vertica passwords)
       </para>
      </entry>
      <entry>Uses PyCrypto libraries &amp; Ansible vault for encryption</entry>
      <entry>No</entry>
      <entry>
       <para>
        Yes
       </para>
       <para>
        Passphrase for the encryption key will be prompted when running Ansible
        playbook. Can also use command
        <command>ask-ansible-pass</command>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        User supplied passwords (iLO passwords, Block Storage backend
        passwords)
       </para>
      </entry>
      <entry>OpenSSL</entry>
      <entry>Yes</entry>
      <entry>
       <para>
        Yes
       </para>
       <para>
        The environment variable HOS_USER_PASSWORD_ENCRYPT_KEY must contain the
        key used to encrypt those passwords.
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <para>
   Other protected data:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The SSH private key used by Ansible to connect to client nodes from the
     lifecycle manager is protected with a passphrase.
    </para>
   </listitem>
   <listitem>
    <para>
     The Swift swift-hash prefix and suffix values are encrypted.
    </para>
   </listitem>
   <listitem>
    <para>
     All of the Ansible variables generated by the configuration processor are
     encrypted and held in Ansible Vault.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   However, if a user wants to change the encryption keys then that can be done
   for all categories of password and secret-keys listed below, and the
   processes are documented.
  </para>
  <para>
   The ssh private key passphrase needs to be entered once before any Ansible
   plays are run against the cloud.
  </para>
  <para>
   The configuration processor encryption key will be prompted for when the
   relevant Ansible play is run. Once the configuration processor output has
   been encrypted, all subsequent Ansible plays need to have --ask-ansible-pass
   added to the command line to ensure that the encryption key which is needed
   by Ansible is prompted for.
  </para>
  <para>
   Finally, if user-supplied passwords have been encrypted (this process uses
   the OpenSSL library) then the environment variable
   HOS_USER_PASSWORD_ENCRYPT_KEY must contain the key used to encrypt those
   passwords.
  </para>
  <para>
   In the case where the HOS_USER_PASSWORD_ENCRYPT_KEY environment variable is
   either null, the empty string, or not defined, then no encryption will be
   performed on your passwords when using the hosencrypt.py script.
  </para>
  <para>
   The generated passwords are stored in Ansible inputs generated by the
   configuration processor and also in the persistent state information
   maintained by the configuration processor.
  </para>
 </section>
 <section xml:id="protection">
  <title>Protecting sensitive data on the lifecycle manager</title>
  <para>
   There are a number of mechanisms that can be used to protect sensitive data
   such as passwords, some Ansible inputs, and the SSH key used by Ansible on
   the lifecycle manager. See the installation documents for details. Please
   remember the need to guard against exposure of your environment variables,
   which may happen through observation over the shoulder.
  </para>
  <para>
   There are instructions included in the installation documents that show how
   to encrypt your data using the <literal>hosencrypt.py</literal> script. You
   may want to change the encryption keys used to protect your sensitive data
   in the future and this shows you how:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <emphasis role="bold">SSH keys</emphasis> - Run the command below to
     change the passphrase used to protect the key:
    </para>
<screen>ssh-keygen -f id_rsa -p</screen>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">configuration processor Key</emphasis> - If you wish
     to change an encryption password that you have already used when running
     the configuration processor then enter the existing password at the first
     prompt and the new password at the second prompt when running the
     configuration processor playbook. See <xref linkend="install_kvm"/> for
     more details.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">iLO passwords, VSA password if encrypted with
     <literal>hosencrypt.py</literal></emphasis> - Rerun the utility specifying
     a new encryption key when prompted. You will need to enter the plain text
     passwords at the password prompt.
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section>
  <title>Interacting with Encrypted Files</title>
  <para>
   Once you have enabled encryption in your environment you may have a need to
   interact with these encrypted files at a later time. This section will show
   you how.
  </para>
  <para>
   <emphasis role="bold">hosencrypt.py script password encryption</emphasis>
  </para>
  <para>
   If you used the <literal>hosencrypt.py</literal> script to encrypt your iLO
   or other passwords and have a need to view them later, you can do so with
   these steps.
  </para>
  <para>
   You will want to ensure that the
   <literal>HOS_USER_PASSWORD_ENCRYPT_KEY</literal> environment variable is set
   prior to running these commands:
  </para>
<screen>export HOS_USER_PASSWORD_ENCRYPT_KEY="&lt;encryption_key&gt;"</screen>
  <para>
   To view an encrypted password, you can use this command below which will
   promot you for the encrypted password value. It will then output the
   decrypted value:
  </para>
<screen>./hosencrypt.py -d</screen>
  <para>
   <emphasis role="bold">Configuration processor encryption key</emphasis>
  </para>
  <para>
   If you have used the encryption options available with the configuration
   processor, which uses Ansible vault, you can do so with these commands. Each
   of these commands will prompt you for the password you used when setting the
   encryption initially.
  </para>
  <para>
   To view an encrypted file in read-only mode, use this command:
  </para>
<screen>ansible-vault view &lt;filename&gt;</screen>
  <para>
   To edit an encrypted file, use this command. This allows you to edit a
   decrypted version of the file without the need to decrypt and re-encrypt it:
  </para>
<screen>ansible-vault edit &lt;filename&gt;</screen>
  <para>
   For other available commands, use the help file:
  </para>
<screen>ansible-vault -h</screen>
 </section>
</chapter>
