<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="configuring_check_plugins">
 <title>Configuring Check Plugins</title>
 <para>
  <emphasis role="bold">Manually configure a plugin when unit-testing using the
  monasca-setup script installed with the monasca-agent</emphasis>
 </para>
 <para>
  Find a good explanation of configuring plugins here:
  <link xlink:href="https://github.com/openstack/monasca-agent/blob/master/docs/Agent.md#configuring"/>
 </para>
 <para>
  SSH to a node that has both the monasca-agent installed as well as the
  component you wish to monitor.
 </para>
 <para>
  The following is an example command that configures a plugin that has no
  parameters (uses the detection plugin class name).
 </para>
<screen>&prompt.root;/usr/bin/monasca-setup -d ARDANACeilometer</screen>
 <para>
  The following is an example command that configures the apache plugin and
  includes related parameters.
 </para>
<screen>&prompt.root;/usr/bin/monasca-setup -d apache -a 'url=http://192.168.245.3:9095/server-status?auto'</screen>
 <para>
  If there is a change in the configuration it will restart the monasca-agent
  on the host so the configuration is loaded.
 </para>
 <para>
  After the plugin is configured, you can verify that the configuration file
  has your changes (see the next <emphasis role="bold">Verify that your check plugin
  is configured</emphasis> section).
 </para>
 <para>
  Use the monasca CLI to see if your metric exists (see the
  <emphasis role="bold">Verify that metrics exist</emphasis> section).
 </para>
 <para>
  <emphasis role="bold">Using Ansible modules to configure plugins in
  &kw-hos-phrase;</emphasis>
 </para>
 <para>
  The <literal>monasca_agent_plugin</literal> module is installed as part of
  the monasca-agent role.
 </para>
 <para>
  The following Ansible example configures the process.py plugin for the
  Ceilometer detection plugin. The following example only passes in the name of
  the detection class.
 </para>
<screen>- name: _CEI-CMN | monasca_configure |
    Run Monasca agent &lcm; specific ceilometer detection plugin
  become: yes
  monasca_agent_plugin:
    name: "ARDANACeilometer"</screen>
 <para>
  If a password or other sensitive data are passed to the detection plugin, the
  <literal>no_log</literal> option should be set to
  <emphasis role="bold">True</emphasis>. If the <literal>no_log</literal>
  option is not set to <emphasis role="bold">True</emphasis>, the data passed
  to the plugin will be logged to syslog.
 </para>
 <para>
  The following Ansible example configures the Cassandra plugin and passes in
  related arguments.
 </para>
<screen>
 - name: Run Monasca Agent detection plugin for Cassandra
   monasca_agent_plugin:
     name: "Cassandra"
     args="directory_names={{ FND_CDB.vars.cassandra_data_dir }},{{ FND_CDB.vars.cassandra_commit_log_dir }} process_username={{ FND_CDB.vars.cassandra_user }}"
   when: database_type == 'cassandra'</screen>
 <para>
  The following Ansible example configures the Keystone endpoint using the
  http_check.py detection plugin. The class name <literal>httpcheck</literal>
  of the http_check.py detection plugin is the name.
 </para>
<screen>&prompt.root;- name:  keystone-monitor | local_monitor |
    Setup active check on keystone internal endpoint locally
  become: yes
  monasca_agent_plugin:
    name: "httpcheck"
    args: "use_keystone=False \
           url=http://{{ keystone_internal_listen_ip }}:{{
               keystone_internal_port }}/v3 \
           dimensions=service:identity-service,\
                       component:keystone-api,\
                       api_endpoint:internal,\
                       monitored_host_type:instance"
  tags:
    - keystone
    - keystone_monitor</screen>
 <para>
  <emphasis role="bold">Verify that your check plugin is configured</emphasis>
 </para>
 <para>
  All check configuration files are located in the following directory. You can
  see the plugins that are running by looking at the plugin configuration
  directory.
 </para>
<screen>/etc/monasca/agent/conf.d/</screen>
 <para>
  When the monasca-agent starts up, all of the check plugins that have a
  matching configuration file in the
  <literal>/etc/monasca/agent/conf.d/</literal> directory will be loaded.
 </para>
 <para>
  If there are errors running the check plugin they will be written to the
  following error log file.
 </para>
<screen>/var/log/monasca/agent/collector.log</screen>
 <para>
  You can change the monasca-agent log level by modifying the
  <literal>log_level</literal> option in the
  <literal>/etc/monasca/agent/agent.yaml</literal> configuration file, and then
  restarting the monasca-agent, using the following command.
 </para>
<screen>&prompt.root;service openstack-monasca-agent restart</screen>
 <para>
  You can debug a check plugin by running <literal>monasca-collector</literal>
  with the check option. The following is an example of the
  <literal>monasca-collector</literal> command.
 </para>
<screen>&prompt.sudo;/usr/bin/monasca-collector check <replaceable>CHECK_NAME</replaceable></screen>
 <para>
  <emphasis role="bold">Verify that metrics exist</emphasis>
 </para>
 <para>
  Begin by logging in to your deployer or controller node.
 </para>
 <para>
  Run the following set of commands, including the <literal>monasca
  metric-list</literal> command. If the metric exists, it will be displayed in
  the output.
 </para>
<screen>&prompt.ardana;source ~/service.osrc
&prompt.ardana;monasca metric-list --name <replaceable>METRIC_NAME</replaceable></screen>
</section>
