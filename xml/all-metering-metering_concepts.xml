<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<!---->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ceilo_metering_concepts_overview">
 <title>Understanding the Metering Service Concepts</title>
 <section xml:id="ceilo_concept_intro"><title>Ceilometer Introduction</title>
  <para>
   Before configuring the Ceilometer Metering Service, make sure you understand
   how it works.
  </para>

 <section xml:id="ceilo_architecture">
  <title>Metering Architecture</title>
  <para>
   Helion OpenStack automatically configures Ceilometer to use Logging and
   Monitoring Service (Monasca) as its backend. Ceilometer is deployed on the
   same control plane nodes as Monasca.
  </para>
  <para>
   The installation of Celiometer creates several management nodes running
   different metering components.
  </para>
  <para>
   <emphasis role="bold">Ceilometer Components on Controller nodes</emphasis>
  </para>
  <para>
   This controller node is the first of the High Available (HA) cluster. In
   this node there is an instance of the Ceilometer API running under the HA
   Proxy Virtual IP address.
  </para>
  <para>
   <emphasis role="bold">Ceilometer Sample Polling</emphasis>
  </para>
  <para>
   Sample Polling is part of the Polling Agent. Now that Ceilometer API uses
   Monasca API (query) instead of the MySQL database, messages are posted by
   Notification Agent directly to Monasca API.
  </para>
  <para>
   <emphasis role="bold">Ceilometer Polling Agent</emphasis>
  </para>
  <para>
   The Polling Agent is responsible for coordinating the polling activity. It
   parses the <emphasis role="bold">pipeline.yml</emphasis> configuration file
   and identifies all the sources that need to be polled. The sources are then
   evaluated using a discovery mechanism and all the sources are translated to
   resources where a dedicated pollster can retrieve and publish data. At each
   identified interval the discovery mechanism is triggered, the resource list
   is composed, and the data is polled and sent to the queue.
  </para>
  <para>
   <emphasis role="bold">Ceilometer Collector No Longer Required</emphasis>
  </para>
  <para>
   In previous versions, the collector was responsible for getting the
   samples/events from the RabbitMQ service and storing it in the main
   database. The Ceilometer Collector is no longer enabled. Now that
   Notification Agent posts the data directly to Monasca API, the collector is
   no longer required
  </para>
 </section>
 <section xml:id="ceilo_about_meters">
  <title>Meter Reference</title>
  <para>
   The Ceilometer API collects basic information grouped into categories known
   as meters. A meter is the unique resource-usage measurement of a particular
   OpenStack service. Each OpenStack service defines what type of data is
   exposed for metering.
  </para>
  <para>
   Each meter has the following characteristics:
  </para>
  <informaltable colsep="1" rowsep="1">
   <tgroup cols="2">
    <colspec colname="c1" colnum="1" colwidth="1*"/>
    <colspec colname="c2" colnum="2" colwidth="3.55*"/>
    <thead>
     <row>
      <entry>Attribute</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>Name</entry>
      <entry>Description of the meter</entry>
     </row>
     <row>
      <entry>Unit of Measurement</entry>
      <entry>The method by which the data is measured. For example: storage meters are
                defined in Gigabytes (GB) and network bandwidth is measured in Gigabits
                (Gb).</entry>
     </row>
     <row>
      <entry>Type</entry>
      <entry><para>The origin of the meter's data. OpenStack defines the following origins: </para><itemizedlist>
        <listitem>
         <para>
          Cumulative - Increasing over time (instance hours)
         </para>
        </listitem>
        <listitem>
         <para>
          Gauge - a discrete value. For example: the number of floating IP
          addresses or image uploads.
         </para>
        </listitem>
        <listitem>
         <para>
          Delta - Changing over time (bandwidth)
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <para>
   A meter is defined for every measurable resource. A meter can exist beyond
   the actual existence of a particular resource, such as an active instance,
   to provision long-cycle use cases such as billing.
  </para>
  <important>
   <para>
    For a list of meter types and default meters installed with Helion, see
    <xref linkend="topic3051"/>
   </para>
  </important>
  <para>
   The most common meter submission method is notifications. With this method,
   each service sends the data from their respective meters on a periodic basis
   to a common notifications bus.
  </para>
  <para>
   Ceilometer, in turn, pulls all of the events from the bus and saves the
   notifications in a Ceilometer-specific database. The period of time that the
   data is collected and saved is known as the Ceilometer expiry and is
   configured during Ceilometer installation. Each meter is collected from one
   or more samples, gathered from the messaging queue or polled by agents. The
   samples are represented by counter objects. Each counter has the following
   fields:
  </para>
  <informaltable colsep="1" rowsep="1">
   <tgroup cols="2">
    <colspec colname="c1" colnum="1" colwidth="1*"/>
    <colspec colname="c2" colnum="2" colwidth="3.55*"/>
    <thead>
     <row>
      <entry>Attribute</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>counter_name</entry>
      <entry>Description of the counter</entry>
     </row>
     <row>
      <entry>counter_unit</entry>
      <entry>The method by which the data is measured. For example: data can be
                defined in Gigabytes (GB) or for network bandwidth, measured in Gigabits
                (Gb).</entry>
     </row>
     <row>
      <entry>counter_typee</entry>
      <entry>
       <para>The origin of the counter's data. OpenStack defines the following origins:</para>
       <itemizedlist>
        <listitem>
         <para>
          Cumulative - Increasing over time (instance hours)
         </para>
        </listitem>
        <listitem>
         <para>
          Gauge - a discrete value. For example: the number of floating IP
          addresses or image uploads.
         </para>
        </listitem>
        <listitem>
         <para>
          Delta - Changing over time (bandwidth)
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
     <row>
      <entry>counter_volume</entry>
      <entry>The volume of data measured (CPU ticks, bytes transmitted, etc.). Not used for gauge
                counters. Set to a default value such as 1.</entry>
     </row>
     <row>
      <entry>resource_id</entry>
      <entry>The identifier of the resource measured (UUID)</entry>
     </row>
     <row>
      <entry>project_id</entry>
      <entry>The project (tenant) ID to which the resource belongs.</entry>
     </row>
     <row>
      <entry>user_id</entry>
      <entry>The ID of the user who owns the resource.</entry>
     </row>
     <row>
      <entry>resource_metadata</entry>
      <entry>Other data transmitted in the metering notification payload.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </section>
 <section xml:id="Ceilo_rbac_ov">
  <title>Role Based Access Control (RBAC)</title>
  <para>
   A user with the <emphasis role="bold">admin role</emphasis> can access all
   API functions across all projects by default. Ceilometer also supports the
   ability to assign access to a specific API function by
   <emphasis role="bold">project</emphasis> and
   <emphasis role="bold">UserID</emphasis>. User access is configured in the
   Ceilometer policy file and enables you to grant specific API functions to
   specific users for a specific project.
  </para>
  <para>
   For instructions on how to configure role-based access, see
   <xref linkend="topic15050"/>.
  </para>
 </section>
</section>
</section>