<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<!---->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ceilo_samples">
 <title>Metering Service Samples</title>
<!---->
 <para>
  Samples are discrete collections of a particular meter or the actual usage
  data defined by a meter description. Each sample is time-stamped and includes
  a variety of data that varies per meter but usually includes the project ID
  and UserID of the entity that consumed the resource represented by the meter
  and sample.
 </para>
 <para>
  In a typical deployment, the number of samples can be in the tens of
  thousands if not higher for a specific collection period depending on overall
  activity.
 </para>
 <para>
  Sample collection and data storage expiry settings are configured in
  Ceilometer. Use cases that include collecting data for monthly billing cycles
  are usually stored over a period of 45 days and require a large, scalable,
  back-end database to support the large volume of samples generated by
  production OpenStack deployments.
 </para>
 <para>
  <emphasis role="bold">Example configuration:</emphasis>
 </para>
<screen>[database]
metering_time_to_live=-1</screen>
 <para>
  In our example use case, to construct a complete billing record, an external
  billing application must collect all pertinent samples. Then the results must
  be sorted, summarized, and combine with the results of other types of metered
  samples that are required. This function is known as aggregation and is
  external to the Ceilometer service.
 </para>
 <para>
  Meter data, or samples, can also be collected directly from the service APIs
  by individual Ceilometer polling agents. These polling agents directly access
  service usage by calling the API of each service.
 </para>
 <para>
  OpenStack services such as Swift currently only provide metered data through
  this function and some of the other OpenStack services provide specific
  metrics only through a polling action.
 </para>
</section>
