<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="websso">
 <title>Configuring Web Single Sign-On</title>
 <para>
  This topic explains how to implement web single sign-on.
 </para>
 <section>
  <title>What is WebSSO?</title>
  <para>
   WebSSO, or web single sign-on, is a method for web browsers to receive
   current authentication information from an identity provider system without
   requiring a user to log in again to the application displayed by the
   browser. Users initially access the identity provider web page and supply
   their credentials. If the user successfully authenticates with the identity
   provider, the authentication credentials are then stored in the userâ€™s web
   browser and automatically provided to all web-based applications, such as
   the Horizon dashboard in &kw-hos-phrase;. If users have not yet
   authenticated with an identity provider or their credentials have timed out,
   they are automatically redirected to the identity provider to renew their
   credentials.
  </para>
 </section>
 <section>
  <title>Limitations</title>
  <itemizedlist xml:id="idg-all-operations-configuring-identity-websso-xml-6">
   <listitem>
    <para>
     The WebSSO function supports only Horizon web authentication. It is not
     supported for direct API or CLI access.
    </para>
   </listitem>
   <listitem>
    <para>
     The &kw-hos; WebSSO function was tested with Microsoft Active Directory
     Federation Services (AD FS). The instructions provided are pertinent to
     AD FS and are intended to provide a sample configuration for deploying
     WebSSO with an external identity provider. If you have a different
     identity provider such as Ping Identity or IBM Tivoli, consult with those
     vendors for specific instructions for those products.
    </para>
   </listitem>
   <listitem>
    <para>
     Only WebSSO federation using the SAML method is supported in
     &kw-hos-phrase; . OpenID-based federation is not currently supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">WebSSO has a change password option in User
     Settings, but note that this function is not accessible for users
     authenticating with external systems such as LDAP or SAML Identity
     Providers.</emphasis>
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section>
  <title>Enabling WebSSO</title>
  <para>
   &kw-hos-phrase; provides WebSSO support for the Horizon web interface.
   This support requires several configuration steps including editing the
   Horizon configuration file as well as ensuring that the correct Keystone
   authentication configuration is enabled to receive the authentication
   assertions provided by the identity provider.
  </para>
  <para>
   The following is the workflow that depicts how Horizon and Keystone supports
   WebSSO if no current authentication assertion is available.
  </para>
  <orderedlist xml:id="ul_fcj_z4g_4v">
   <listitem>
    <para>
     Horizon redirects the web browser to the Keystone endpoint.
    </para>
   </listitem>
   <listitem>
    <para>
     Keystone automatically redirects the web browser to the correct identity
     provider authentication web page based on the Keystone configuration file.
    </para>
   </listitem>
   <listitem>
    <para>
     The user authenticates with the identity provider.
    </para>
   </listitem>
   <listitem>
    <para>
     The identity provider automatically redirects the web browser back to the
     Keystone endpoint.
    </para>
   </listitem>
   <listitem>
    <para>
     Keystone generates the required Javascript code to POST a token back to
     Horizon.
    </para>
   </listitem>
   <listitem>
    <para>
     Keystone automatically redirects the web browser back to Horizon and the
     user can then access projects and resources assigned to the user.
    </para>
   </listitem>
  </orderedlist>
  <para>
   The following diagram provides more details on the WebSSO authentication
   workflow.
  </para>
  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="Keystone-ADFS-WebSSO-Authentication-Sequence.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="Keystone-ADFS-WebSSO-Authentication-Sequence.png"/>
    </imageobject>
   </mediaobject>
 </informalfigure>
  <para>
   Note that the Horizon dashboard service never talks directly to the Keystone
   identity service until the end of the sequence, after the federated unscoped
   token negotiation has completed. The browser interacts with the Horizon
   dashboard service, the Keystone identity service, and AD FS on their
   respective public endpoints.
  </para>
  <para>
   The following sequence of events is depicted in the diagram.
  </para>
  <orderedlist>
   <listitem>
    <para>
     The user's browser reaches the Horizon dashboard service's login page. The
     user selects AD FS login from the drop-down menu.
    </para>
   </listitem>
   <listitem>
    <para>
     The Horizon dashboard service issues an HTTP Redirect (301) to redirect
     the browser to the Keystone identity service's (public) SAML2 Web SSO
     endpoint (/auth/OS-FEDERATION/websso/saml2). The endpoint is protected by
     Apache mod_shib (shibboleth).
    </para>
   </listitem>
   <listitem>
    <para>
     The browser talks to the Keystone identity service. Because the user's
     browser does not have an active session with AD FS, the Keystone identity
     service issues an HTTP Redirect (301) to the browser, along with the
     required SAML2 request, to the AD FS endpoint.
    </para>
   </listitem>
   <listitem>
    <para>
     The browser talks to AD FS. AD FS returns a login form. The browser presents
     it to the user.
    </para>
   </listitem>
   <listitem>
    <para>
     The user enters credentials (such as username and password) and submits
     the form to AD FS.
    </para>
   </listitem>
   <listitem>
    <para>
     Upon successful validation of the user's credentials, AD FS issues an HTTP
     Redirect (301) to the browser, along with the SAML2 assertion, to the
     Keystone identity service's (public) SAML2 endpoint
     (/auth/OS-FEDERATION/websso/saml2).
    </para>
   </listitem>
   <listitem>
    <para>
     The browser talks to the Keystone identity service. the Keystone identity
     service validates the SAML2 assertion and issues a federated unscoped
     token. the Keystone identity service returns JavaScript code to be
     executed by the browser, along with the federated unscoped token in the
     headers.
    </para>
   </listitem>
   <listitem>
    <para>
     Upon execution of the JavaScript code, the browser is redirected to the
     Horizon dashboard service with the federated unscoped token in the header.
    </para>
   </listitem>
   <listitem>
    <para>
     The browser talks to the Horizon dashboard service with the federated
     unscoped token.
    </para>
   </listitem>
   <listitem>
    <para>
     With the unscoped token, the Horizon dashboard service talks to the
     Keystone identity service's (internal) endpoint to get a list of projects
     the user has access to.
    </para>
   </listitem>
   <listitem>
    <para>
     The Horizon dashboard service rescopes the token to the first project in
     the list. At this point, the user is successfully logged in.
    </para>
   </listitem>
  </orderedlist>
 </section>
 <section>
  <title>Prerequisites</title>
 <section>
  <title>Creating AD FS metadata</title>
  <para>
   For information about creating Active Directory Federation Services
   metadata, see the section <citetitle>To create edited AD FS 2.0 metadata
   with an added scope element</citetitle> of
   <link xlink:href="https://technet.microsoft.com/en-us/library/gg317734"/>.
  </para>
  <orderedlist>
   <listitem>
    <para>
     On the AD FS computer, use a browser such as Internet Explorer to view
     <literal>https://&lt;adfs_server_hostname&gt;/FederationMetadata/2007-06/FederationMetadata.xml</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     On the File menu, click Save as, and then navigate to the Windows desktop
     and save the file with the name adfs_metadata.xml. Make sure to change the
     Save as type drop-down box to All Files (*.*).
    </para>
   </listitem>
   <listitem>
    <para>
     Use Windows Explorer to navigate to the Windows desktop, right-click
     adfs_metadata.xml, and then click Edit.
    </para>
   </listitem>
   <listitem>
    <para>
     In Notepad, insert the following XML in the first element. Before editing,
     the EntityDescriptor appears as follows:
    </para>
<screen>&lt;EntityDescriptor ID="abc123" entityID=http://WIN-CAICP35LF2I.vlan44.domain/adfs/services/trust xmlns="urn:oasis:names:tc:SAML:2.0:metadata" &gt;</screen>
    <para>
     After editing, it should look like this:
    </para>
<screen>&lt;EntityDescriptor ID="abc123" entityID="http://WIN-CAICP35LF2I.vlan44.domain/adfs/services/trust" xmlns="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:shibmd="urn:mace:shibboleth:metadata:1.0"&gt;</screen>
   </listitem>
   <listitem>
    <para>
     In Notepad, on the Edit menu, click Find. In Find what, type IDPSSO, and
     then click Find Next.
    </para>
   </listitem>
   <listitem>
    <para>
     Insert the following XML in this section: Before editing, the
     IDPSSODescriptor appears as follows:
    </para>
<screen>&lt;IDPSSODescriptor protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol"&gt;&lt;KeyDescriptor use="encryption"&gt;</screen>
    <para>
     After editing, it should look like this:
    </para>
<screen>&lt;IDPSSODescriptor protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol"&gt;&lt;Extensions&gt;&lt;shibmd:Scope regexp="false"&gt;vlan44.domain&lt;/shibmd:Scope&gt;&lt;/Extensions&gt;&lt;KeyDescriptor use="encryption"&gt;</screen>
   </listitem>
   <listitem>
    <para>
     Delete the metadata document signature section of the file (the bold text
     shown in the following code). Because you have edited the document, the
     signature will now be invalid. Before editing the signature appears as
     follows:
    </para>
<screen>&lt;EntityDescriptor ID="abc123" entityID="http://FSWEB.contoso.com/adfs/services/trust" xmlns="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:shibmd="urn:mace:shibboleth:metadata:1.0"&gt;
<emphasis role="bold">&lt;ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"&gt;
    SIGNATURE DATA
&lt;/ds:Signature&gt;</emphasis>
&lt;RoleDescriptor xsi:type=â€¦&gt;</screen>
    <para>
     After editing it should look like this:
    </para>
<screen>&lt;EntityDescriptor ID="abc123" entityID="http://FSWEB.contoso.com/adfs/services/trust" xmlns="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:shibmd="urn:mace:shibboleth:metadata:1.0"&gt;
&lt;RoleDescriptor xsi:type=â€¦&gt;</screen>
   </listitem>
   <listitem>
    <para>
     Save and close adfs_metadata.xml.
    </para>
   </listitem>
   <listitem>
    <para>
     Copy adfs_metadata.xml to the &lcm; node in your preferred
     location. Here it is /tmp.
    </para>
   </listitem>
  </orderedlist>
 </section>
 <section>
  <title>Setting Up WebSSO</title>
  <para>
   Start by creating a config file <filename>adfs_config.yml</filename> with the
   following parameters and place it in any directory on your &lcm;,
   such as <filename>/tmp</filename>.
  </para>
<screen>keystone_trusted_idp: adfs
keystone_sp_conf:
    idp_metadata_file: /tmp/adfs_metadata.xml
    shib_sso_application_entity_id: http://sp_uri_entityId
    shib_sso_idp_entity_id: http://default_idp_uri_entityId
    target_domain:
        name: domain1
        description: my domain
    target_project:
        name: project1
        description: my project
    target_group:
        name: group1
        description: my group
    role:
        name: service
    identity_provider:
        id: adfs_idp1
        description: This is the AD FS identity provider.
    mapping:
        id: mapping1
        rules_file: adfs_mapping.json
    protocol:
        id: saml2
    attribute_map:
        -
          name: http://schemas.xmlsoap.org/claims/Group
          id: ADFS_GROUP
        -
          name: urn:oid:1.3.6.1.4.1.5923.1.1.1.6
          id: ADFS_LOGIN</screen>
  <para>
   A sample config file like this exists in
   roles/KEY-API/files/samples/websso/keystone_configure_adfs_sample.yml. Here
   are some detailed descriptions for each of the config options:
  </para>
<screen>keystone_trusted_idp: A flag to indicate if this configuration is used for WebSSO or K2K. The value can be either 'adfs' or 'k2k'.
keystone_sp_conf:
    shib_sso_idp_entity_id: The AD FS URI used as an entity Id to identity the IdP.
    shib_sso_application_entity_id: The Service Provider URI used as a entity Id. It can be any URI here for Websso as long as it is unique to the SP.
    target_domain: A domain where the group will be created from.
        name: Any domain name. If it does not exist, it will be created or be updated.
        description: Any description.
    target_project: A project scope that the group has.
        name: Any project name. If it does not exist, it will be created or be updated.
        description: Any description.
    target_group: A group will be created from 'target_domain'.
        name: Any group name. If it does not exist, it will be created or be updated.
        description: Any description.
    role: A role will be assigned on 'target_project'. This role impacts the idp user scoped token permission at sp side.
        name: It has to be an existing role.
    idp_metadata_file: A reference to the AD FS metadata file that validates the SAML2 assertion.
    identity_provider: An AD FS IdP
        id: Any Id. If it does not exist, it will be created or be updated. This Id needs to be shared with the client so that the right mapping will be selected.
        description: Any description.
    mapping: A mapping in json format that maps a federated user to a corresponding group.
        id: Any Id. If it does not exist, it will be created or be updated.
        rules_file: A reference to the file that has the mapping in json.
    protocol: The supported federation protocol.
        id: 'saml2' is the only supported protocol for Websso.
    attribute_map: A shibboleth mapping defined additional attributes to map the attributes from the SAML2 assertion to the Websso mapping that SP understands.
        -
          name: An attribute name from the SAML2 assertion.
          id: An Id that the above name will be mapped to.</screen>
  <orderedlist>
   <listitem>
    <para>
     In the preceding config file, /tmp/adfs_config.yml, make sure the
     idp_metadata_file references the previously generated AD FS metadata file.
     In this case:
    </para>
<screen>idp_metadata_file: /tmp/adfs_metadata.xml</screen>
   </listitem>
   <listitem>
    <para>
     Create a mapping file that is referenced from the preceding config file,
     such as /tmp/adfs_sp_mapping.json. rules_file: /tmp/adfs_sp_mapping.json.
     The following is an example of the mapping file, existing in
     roles/KEY-API/files/samples/websso/adfs_sp_mapping.json:
    </para>
<screen>[
             {
               "local": [{
                     "user": {
                         "name": "{0}"
                     }
                 }],
                 "remote": [{
                     "type": "ADFS_LOGIN"
                 }]
              },
              {
                "local": [{
                    "group": {
                        "id": "GROUP_ID"
                    }
                }],
                "remote": [{
                    "type": "ADFS_GROUP",
                "any_one_of": [
                    "Domain Users"
                    ]
                }]
              }
 ]        </screen>
    <para>
     You can find more details about how the WebSSO mapping works at
     <link xlink:href="http://docs.openstack.org"/>.
     Also see <xref linkend="maprules"/> for more information.
    </para>
   </listitem>
   <listitem>
    <para>
     Go to ~/scratch/ansible/next/ardana/ansible and run the following
     playbook to enable WebSSO in the Keystone identity service:
    </para>
<screen>ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml -e@/tmp/adfs_config.yml</screen>
   </listitem>
   <listitem>
    <para>
     Enable WebSSO in the Horizon dashboard service by setting
     horizon_websso_enabled flag to True in roles/HZN-WEB/defaults/main.yml and
     then run the horizon-reconfigure playbook:
    </para>
<screen>&prompt.ardana;ansible-playbook -i hosts/verb_hosts horizon-reconfigure.yml</screen>
   </listitem>
  </orderedlist>
 </section>
 <section xml:id="maprules">
  <title>Mapping rules</title>
  <para>
   One IdP-SP has only one mapping. The last mapping that the customer
   configures will be the one used and will overwrite the old mapping setting.
   Therefore, if the example mapping adfs_sp_mapping.json is used, the
   following behavior is expected because it maps the federated user only to
   the one group configured in
   <literal>keystone_configure_adfs_sample.yml</literal>.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Configure domain1/project1/group1, mapping1; websso login horizon, see
     project1;
    </para>
   </listitem>
   <listitem>
    <para>
     Then reconfigure: domain1/project2/group1. mapping1, websso login horizon,
     see project1 and project2;
    </para>
   </listitem>
   <listitem>
    <para>
     Reconfigure: domain3/project3/group3; mapping1, websso login horizon, only
     see project3; because now the IDP mapping maps the federated user to
     group3, which only has priviliges on project3.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   If you need a more complex mapping, you can use a custom mapping file, which
   needs to be specified in keystone_configure_adfs_sample.yml -&gt;
   rules_file.
  </para>
  <para>
   You can use different attributes of the AD FS user in order to map to
   different or multiple groups.
  </para>
  <para>
   An example of a more complex mapping file is
   adfs_sp_mapping_multiple_groups.json, as follows.
  </para>
  <para>
   adfs_sp_mapping_multiple_groups.json
  </para>
<screen>[
  {
    "local": [
      {
        "user": {
          "name": "{0}"
        }
      },
      {
        "group": {
           "name": "group1",
           "domain":{
             "name": "domain1"
           }
        }
      }
    ],
    "remote":[{
      "type": "ADFS_LOGIN"
    },
    {
      "type": "ADFS_GROUP",
      "any_one_of":[
         "Domain Users"
      ]
     }
    ]
   },
  {
    "local": [
      {
        "user": {
          "name": "{0}"
        }
      },
      {
        "group": {
           "name": "group2",
           "domain":{
             "name": "domain2"
           }
        }
      }
    ],
    "remote":[{
      "type": "ADFS_LOGIN"
    },
    {
      "type": "ADFS_SCOPED_AFFILIATION",
      "any_one_of": [
          "member@contoso.com"
      ]
    },
    ]
   }
]
</screen>
  <para>
   The adfs_sp_mapping_multiple_groups.json must be run together with
   keystone_configure_mutiple_groups_sample.yml, which adds a new attribute for
   the shibboleth mapping. That file is as follows:
  </para>
  <para>
   keystone_configure_mutiple_groups_sample.yml
  </para>
<screen>#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---

keystone_trusted_idp: adfs
keystone_sp_conf:
    identity_provider:
        id: adfs_idp1
        description: This is the AD FS identity provider.
    idp_metadata_file: /opt/stack/adfs_metadata.xml

    shib_sso_application_entity_id: http://blabla
    shib_sso_idp_entity_id: http://WIN-CAICP35LF2I.vlan44.domain/adfs/services/trust

    target_domain:
        name: domain2
        description: my domain

    target_project:
        name: project6
        description: my project

    target_group:
        name: group2
        description: my group

    role:
        name: admin

    mapping:
        id: mapping1
        rules_file: /opt/stack/adfs_sp_mapping_multiple_groups.json

    protocol:
        id: saml2

    attribute_map:
        -
          name: http://schemas.xmlsoap.org/claims/Group
          id: ADFS_GROUP
        -
          name: urn:oid:1.3.6.1.4.1.5923.1.1.1.6
          id: ADFS_LOGIN
        -
          name: urn:oid:1.3.6.1.4.1.5923.1.1.1.9
          id: ADFS_SCOPED_AFFILIATION
</screen>
 </section>
 </section>
 <section>
  <title>Setting up the AD FS server as the identity provider</title>
  <para>
   For AD FS to be able to communicate with the Keystone identity service, you
   need to add the Keystone identity service as a trusted relying party for
   AD FS and also specify the user attributes that you want to send to the
   Keystone identity service when users authenticate via WebSSO.
  </para>
  <para>
   For more information, see the
   <link xlink:href="https://technet.microsoft.com/en-us/library/gg317734">Microsoft
   AD FS wiki</link>, section "Step 2: Configure AD FS 2.0 as the identity
   provider and shibboleth as the Relying Party".
  </para>
  <para>
   Log in to the AD FS server.
  </para>
  <para>
   <emphasis role="bold">Add a relying party using metadata</emphasis>
  </para>
  <orderedlist>
   <listitem>
    <para>
     From Server Manager Dashboard, click Tools on the upper right, then ADFS
     Management.
    </para>
   </listitem>
   <listitem>
    <para>
     Right-click ADFS, and then select Add Relying Party Trust.
    </para>
   </listitem>
   <listitem>
    <para>
     Click Start, leave the already selected option <literal>Import data about
     the relying party published online or on a local network</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     In the Federation metadata address field, type
     <literal>&lt;keystone_publicEndpoint&gt;/Shibboleth.sso/Metadata</literal>
     (your Keystone identity service Metadata endpoint), and then click Next.
     You can also import metadata from a file. Create a file with the content
     of the result of the following curl command
    </para>
<screen>curl &lt;keystone_publicEndpoint&gt;/Shibboleth.sso/Metadata</screen>
    <para>
     and then choose this file for importing the metadata for the relying
     party.
    </para>
   </listitem>
   <listitem>
    <para>
     In the Specify Display Name page, choose a proper name to identify this
     trust relationship, and then click Next.
    </para>
   </listitem>
   <listitem>
    <para>
     On the Choose Issuance Authorization Rules page, leave the default Permit
     all users to access the relying party selected, and then click Next.
    </para>
   </listitem>
   <listitem>
    <para>
     Click Next, and then click Close.
    </para>
   </listitem>
  </orderedlist>
  <para>
   <emphasis role="bold">Edit claim rules for relying party trust</emphasis>
  </para>
  <orderedlist>
   <listitem>
    <para>
     The Edit Claim Rules dialog box should already be open. If not, In the
     ADFS center pane, under Relying Party Trusts, right-click your newly
     created trust, and then click Edit Claim Rules.
    </para>
   </listitem>
   <listitem>
    <para>
     On the Issuance Transform Rules tab, click Add Rule.
    </para>
   </listitem>
   <listitem>
    <para>
     On the Select Rule Template page, select Send LDAP Attributes as Claims,
     and then click Next.
    </para>
   </listitem>
   <listitem>
    <para>
     On the Configure Rule page, in the Claim rule name box, type Get Data.
    </para>
   </listitem>
   <listitem>
    <para>
     In the Attribute Store list, select Active Directory.
    </para>
   </listitem>
   <listitem>
    <para>
     In the Mapping of LDAP attributes section, create the following mappings.
    </para>
    <informaltable colsep="1" rowsep="1">
     <tgroup cols="2">
      <colspec colname="c1" colnum="1" colwidth="1.0*"/>
      <colspec colname="c2" colnum="2" colwidth="1.0*"/>
      <thead>
       <row>
        <entry> LDAP Attribute</entry>
        <entry>Outgoing Claim Type</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Token-Groups â€“ Unqualified Names</entry>
        <entry>Group</entry>
       </row>
       <row>
        <entry>User-Principal-Name</entry>
        <entry>UPN</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </listitem>
   <listitem>
    <para>
     Click Finish.
    </para>
   </listitem>
   <listitem>
    <para>
     On the Issuance Transform Rules tab, click Add Rule.
    </para>
   </listitem>
   <listitem>
    <para>
     On the Select Rule Template page, select Send Claims Using a Custom Rule,
     and then click Next.
    </para>
   </listitem>
   <listitem>
    <para>
     In the Configure Rule page, in the Claim rule name box, type Transform UPN
     to epPN.
    </para>
   </listitem>
   <listitem>
    <para>
     In the Custom Rule window, type or copy and paste the following:
    </para>
<screen>c:[Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn"]
=&gt; issue(Type = "urn:oid:1.3.6.1.4.1.5923.1.1.1.6", Value = c.Value, Properties["http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/attributename"] = "urn:oasis:names:tc:SAML:2.0:attrname-format:uri");</screen>
   </listitem>
   <listitem>
    <para>
     Click Finish.
    </para>
   </listitem>
   <listitem>
    <para>
     On the Issuance Transform Rules tab, click Add Rule.
    </para>
   </listitem>
   <listitem>
    <para>
     On the Select Rule Template page, select Send Claims Using a Custom Rule,
     and then click Next.
    </para>
   </listitem>
   <listitem>
    <para>
     On the Configure Rule page, in the Claim rule name box, type Transform
     Group to epSA.
    </para>
   </listitem>
   <listitem>
    <para>
     In the Custom Rule window, type or copy and paste the following:
    </para>
<screen>c:[Type == "http://schemas.xmlsoap.org/claims/Group", Value == "Domain Users"]
=&gt; issue(Type = "urn:oid:1.3.6.1.4.1.5923.1.1.1.9", Value = "member@contoso.com", Properties["http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/attributename"] = "urn:oasis:names:tc:SAML:2.0:attrname-format:uri");</screen>
   </listitem>
   <listitem>
    <para>
     Click Finish, and then click OK.
    </para>
   </listitem>
  </orderedlist>
  <para>
   This list of Claim Rules is just an example and can be modified or enhanced
   based on the customer's necessities and AD FS setup specifics.
  </para>
  <para>
   <emphasis role="bold">Create a sample user on the AD FS server</emphasis>
  </para>
  <orderedlist>
   <listitem>
    <para>
     From the Server Manager Dashboard, click Tools on the upper right, then
     Active Directory Users and Computer.
    </para>
   </listitem>
   <listitem>
    <para>
     Right click User, then New, and then User.
    </para>
   </listitem>
   <listitem>
    <para>
     Follow the on-screen instructions.
    </para>
   </listitem>
  </orderedlist>
  <para>
   You can test the Horizon dashboard service "Login with ADFS" by opening a
   browser at the Horizon dashboard service URL and choose
   <literal>Authenticate using: ADFS Credentials</literal>. You should be
   redirected to the ADFS login page and be able to log into the Horizon
   dashboard service with your ADFS credentials.
  </para>
 </section>
</section>
