<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<!---->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="Quickstart_Guide">
 <title>&kw-hos; Quickstart Guide</title>
 <section>
  <title>Introduction</title>
  <para>
   This document provides simplified instructions for installing and setting up
   a &kw-hos;. Use this quickstart guide to build testing, demonstration, and
   lab-type environments., rather than production installations. When you
   complete this quickstart process, you will have a fully functioning &kw-hos;
   demo environment.
  </para>
  <note>
   <para>
    These simplified instructions are intended for testing or
    demonstration. Instructions for production installations are in <xref
    linkend="cloudinstallation"/>.
   </para>
  </note>
 </section>
 <section>
  <title>Overview of components</title>
  <para>
   The following are short descriptions of the components that &kw-hos; employs
   when installing and deploying your cloud.
  </para>
  <formalpara>
   <title>Ansible</title>
   <para>
    Ansible is a powerful configuration management tool used by &kw-hos; to
    manage nearly all aspects of your cloud infrastructure. Most commands in
    this quickstart guide execute Ansible scripts, known as playbooks. You will
    run playbooks that install packages, edit configuration files, manage
    network settings, and take care of the general administration tasks
    required to get your cloud up and running.
   </para>
  </formalpara>
  <para>
   Get more information on Ansible at
   <link xlink:href="https://www.ansible.com/"/>.
  </para>
  <formalpara>
   <title>Cobbler</title>
   <para>
    Cobbler is another third-party tool used by &productname; to deploy
    operating systems across the physical servers that make up your cloud. Find
    more info at <link xlink:href="http://cobbler.github.io/"/>.
   </para>
  </formalpara>
  <formalpara>
   <title>Git</title>
   <para>
    Git is the version control system used to manage the configuration files
    that define your cloud. Any changes made to your cloud configuration files
    must be committed to the locally hosted git repository to take effect. Read
    more information on Git at <link xlink:href="https://git-scm.com/"/>.
   </para>
  </formalpara>
 </section>
 <section>
  <title>Preparation</title>
  <para>
   Successfully deploying a &kw-hos; environment is a large endeavor, but it is
   not complicated. For a successful deployment, you must put a number of
   components in place before rolling out your cloud. Most importantly, a basic
   &kw-hos; requires the proper network infrastrucure. Because &kw-hos;
   segregates the network traffic of many of its elements, if the necessary
   networks, routes, and firewall access rules are not in place, communication
   required for a successful deployment will not occur.
  </para>
 </section>
 <section xml:id="section_v5g_dvv_xw">
  <title>Getting Started</title>
  <para>
   When your network infrastructure is in place, go ahead and set up the &lcm;.
   This is the server that will orchestrate the deployment of the rest of your
   cloud. It is also the server you will run most of your deployment and
   management commands on.
  </para>
  <para>
   <emphasis role="bold">Set up the &lcm;</emphasis>
  </para>
  <procedure>
   <step>
    <para>
     <emphasis role="bold">Download the installation media</emphasis>
    </para>
    <para>
     Obtain a copy of the &kw-hos; installation media, and make sure that it is
     accessible by the server that you are installing it on. Your method of
     doing this may vary. For instance, some may choose to load the
     installation ISO on a USB drive and physically attach it to the server,
     while others may run the IPMI Remote Console and attach the ISO to a
     virtual disc drive.
    </para>
   </step>
   <step>
    <para>
     <emphasis role="bold">Install the operating system</emphasis>
    </para>
    <substeps>
     <step>
      <para>
       Boot your server, using the installation media as the boot source.
      </para>
     </step>
     <step>
      <para>
       Choose "install" from the list of options and choose your preferred
       keyboard layout, location, language, and other settings.
      </para>
     </step>
     <step>
      <para>
       Set the address, netmask, and gateway for the primary network interface.
      </para>
     </step>
     <step>
      <para>
       Create a root user account.
      </para>
     </step>
    </substeps>
    <para>
     Proceed with the OS installation. After the installation is complete and
     the server has rebooted into the new OS, log in with the user account you
     created.
    </para>
   </step>
   <step>
    <para>
     <emphasis role="bold">Configure the new server</emphasis>
    </para>
    <substeps>
     <step>
      <para>
       SSH to your new server, and set a valid DNS nameserver in the
       <filename>/etc/resolv.conf</filename> file.
      </para>
     </step>
     <step>
      <para>
       Set the environment variable <literal>LC_ALL</literal>:
      </para>
<screen>export LC_ALL=C</screen>
     </step>
    </substeps>
    <para>
     You now have a server running SUSE Linux Enterprise Server (&hlinux;).
     The next step is to configure this machine as a &lcm;.
    </para>
   </step>
   <step>
    <para>
     <emphasis role="bold">Configure the &lcm;</emphasis>
    </para>
    <para>
     The installation media you used to install the OS on the server also has
     the files that will configure your cloud. You need to mount this
     installation media on your new server in order to use these files.
    </para>
    <substeps>
     <step>
      <para>
       Using the URL that you obtained the &kw-hos; installation media from,
       run <literal>wget</literal> to download the ISO file to your server:
      </para>
<screen>wget <replaceable>INSTALLATION_ISO_URL</replaceable></screen>
     </step>
     <step>
      <para>
       Now mount the ISO in the <filename>/media/cdrom/</filename> directory
      </para>
<screen>sudo mount <replaceable>INSTALLATION_ISO</replaceable> /media/cdrom/</screen>
     </step>
     <step>
      <para>
       Unpack the tar file found in the
       <filename>/media/cdrom/ardana/</filename> directory where you just
       mounted the ISO:
      </para>
<screen>tar xvf /media/cdrom/ardana/ardana-x.x.x-x.tar</screen>
     </step>
     <step>
      <para>
       Now you will install and configure all the components needed to turn this
       server into a &lcm;. Run the <filename>ardana-init.bash</filename>
       script from the uncompressed tar file:
      </para>
<screen>~/ardana-x.x.x/ardana-init.bash</screen>
      <para>
       The <filename>ardana-init.bash</filename> script prompts you to enter an
       optional SSH passphrase. This passphrase protects the RSA key used to
       SSH to the other cloud nodes. This is an optional passphrase, and you
       can skip it by pressing <keycap function="enter"/> at the prompt.
      </para>
      <para>
       The <filename>ardana-init.bash</filename> script automatically installs
       and configures everything needed to set up this server as the lifecycle
       manager for your cloud.
      </para>
      <para>
       When the script has finished running, you can proceed to the next step,
       editing your input files.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     <emphasis role="bold">Edit your input files</emphasis>
    </para>
    <para>
     Your &productname; input files are where you define your cloud
     infrastructure and how it runs. The input files define options such as
     which servers are included in your cloud, the type of disks the servers
     use, and their network configuration. The input files also define which
     services your cloud will provide and use, the network architecture, and
     the storage backends for your cloud.
    </para>
    <para>
     There are several example configurations, which you can find on your &lcm;
     in the <filename>~/openstack/examples/</filename> directory.
    </para>
    <substeps>
     <step>
      <para>
       The simplest way to set up your cloud is to copy the contents of one of
       these example configurations to your
       <filename>~/openstack/mycloud/definition/</filename> directory. You can
       then edit the copied files and define your cloud.
      </para>
<screen>cp -r ~/openstack/examples/<replaceable>CHOSEN_EXAMPLE</replaceable>/* ~/openstack/my_cloud/definition/</screen>
     </step>
     <step>
      <para>
       Edit the files in your
       <filename>~/openstack/my_cloud/definition/</filename> directory to
       define your cloud.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     <emphasis role="bold">Commit your changes</emphasis>
    </para>
    <para>
     When you finish editing the necessary input files, stage them, and
     then commit the changes to the local Git repository:
    </para>
<screen>cd ~/openstack/ardana/ansible
git add -A
git commit -m "My commit message"</screen>
   </step>
   <step>
    <para>
     <emphasis role="bold">Image your servers</emphasis>
    </para>
    <para>
     Now that you have finished editing your input files, you can deploy the
     configuration to the servers that will comprise your cloud.
    </para>
    <substeps>
     <step>
      <para>
       Image the servers. You will install the &hlinux; operating system across
       all the servers in your cloud, using Ansible playbooks to trigger the
       process.
      </para>
     </step>
     <step>
      <para>
       The following playbook confirms that your servers are accessible over
       their IPMI ports, which is a prerequisite for the imaging process:
      </para>
<screen>ansible-playbook -i hosts/localhost bm-power-status.yml</screen>
     </step>
     <step>
      <para>
       Now validate that your cloud configuration files have proper YAML syntax
       by running the <filename>config-processor-run.yml</filename> playbook:
      </para>
<screen>ansible-playbook -i hosts/localhost config-processor-run.yml</screen>
      <para>
       If you receive an error when running the preceeding playbook, one or
       more of your configuration files has an issue. Refer to the output of
       the Ansible playbook, and look for clues in the Ansible log file, found
       at <filename>~/.ansible/ansible.log</filename>.
      </para>
     </step>
     <step>
      <para>
       The next step is to prepare your imaging system, Cobbler, to deploy
       operating systems to all your cloud nodes:
      </para>
<screen>ansible-playbook -i hosts/localhost cobbler-deploy.yml</screen>
     </step>
     <step>
      <para>
       Now you can image your cloud nodes. You will use an Ansible playbook to
       trigger Cobbler to deploy operating systems to all the nodes you
       specified in your input files:
      </para>
<screen>ansible-playbook -i hosts/localhost bm-reimage.yml</screen>
      <para>
       The <filename>bm-reimage.yml</filename> playbook performs the following
       operations:
      </para>
      <orderedlist>
       <listitem>
        <para>
         Powers down the servers.
        </para>
       </listitem>
       <listitem>
        <para>
         Sets the servers to boot from a network interface.
        </para>
       </listitem>
       <listitem>
        <para>
         Powers on the servers and performs a PXE OS installation.
        </para>
       </listitem>
       <listitem>
        <para>
         Waits for the servers to power themselves down as part of a successful
         OS installation. This can take some time.
        </para>
       </listitem>
       <listitem>
        <para>
         Sets the servers to boot from their local hard disks and powers on the
         servers.
        </para>
       </listitem>
       <listitem>
        <para>
         Waits for the SSH service to start on the servers and verifies that
         they have the expected host-key signature.
        </para>
       </listitem>
      </orderedlist>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     <emphasis role="bold">Deploy your cloud</emphasis>
    </para>
    <para>
     Now that your servers are running the &hlinux; operating system, it is time
     to configure them for the roles they will play in your new cloud.
    </para>
    <substeps>
     <step>
      <para>
       Prepare the &lcm; to deploy your cloud configuration to all the nodes:
      </para>
<screen>ansible-playbook -i hosts/localhost ready-deployment.yml</screen>
      <para>
       NOTE: The preceding playbook creates a new directory,
       <filename>~/scratch/ansible/next/ardana/ansible/</filename>, from which
       you will run many of the following commands.
      </para>
     </step>
     <step performance="optional">
      <para>
       If you are reusing servers or disks to run your cloud, you can
       wipe the disks of your newly imaged servers by running the
       <filename>wipe_disks.yml</filename> playbook:
      </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible/
ansible-playbook -i hosts/verb_hosts wipe_disks.yml</screen>
      <para>
       The <filename>wipe_disks.yml</filename> playbook removes any existing
       data from the drives on your new servers. This can be helpful if you are
       reusing servers or disks. This action will not affect the OS partitions
       on the servers.
      </para>
     </step>
     <step>
      <para>
       Now it is time to deploy your cloud. Do this by running the
       <filename>site.yml</filename> playbook, which pushes the configuration
       you defined in the input files out to all the servers that will host
       your cloud.
      </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible/
ansible-playbook -i hosts/verb_hosts site.yml</screen>
      <para>
       The <filename>site.yml</filename> playbook installs packages, starts
       services, configures network interface settings, sets iptables firewall
       rules, and more. Upon successful completion of this playbook, your
       &kw-hos; will be in place and in a running state. This playbook can take
       up to six hours to complete.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     <emphasis role="bold">SSH to your nodes</emphasis>
    </para>
    <para>
     Now that you have successfully run <filename>site.yml</filename>, your cloud
     will be up and running. You can verify connectivity to your nodes by
     connecting to each one by using SSH. You can find the IP addresses of your
     nodes by viewing the <filename>/etc/hosts</filename> file.
    </para>
    <para>
     For security reasons, you can only SSH to your nodes from the &lcm;. SSH
     connections from any machine other than the &lcm; will be refused by the
     nodes.
    </para>
    <para>
     From the &lcm;, SSH to your nodes:
    </para>
<screen>ssh &lt;management IP address of node&gt;</screen>
    <para>
     Also note that SSH is limited to your cloud's management network. Each
     node has an address on the management network, and you can find this
     address by reading the <filename>/etc/hosts</filename> or
     <filename>server_info.yml</filename> file.
    </para>
   </step>
  </procedure>
 </section>
</section>
