<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Telemetry best practices</title>
  <para>The following are some suggested best practices to follow when deploying
            and configuring the Telemetry service. The best practices are divided
            into data collection and storage.</para>
  <section>
    <title>Data collection</title>
    <procedure>
      <step>
        <para>The Telemetry service collects a continuously growing set of data. Not
                        all the data will be relevant for an administrator to monitor.</para>
        <itemizedlist>
          <listitem>
            <para>Based on your needs, you can edit the <literal>polling.yaml</literal> and
                                <literal>pipeline.yaml</literal> configuration files to include select meters to
                                generate or process</para>
          </listitem>
          <listitem>
            <para>By default, Telemetry service polls the service APIs every 10
                                minutes. You can change the polling interval on a per meter basis by
                                editing the <literal>polling.yaml</literal> configuration file.</para>
            <warning>
              <para>If the polling interval is too short, it will likely increase the
                                    stress on the service APIs.</para>
            </warning>
          </listitem>
        </itemizedlist>
      </step>
      <step>
        <para>If polling many resources or at a high frequency, you can add additional
                        central and compute agents as necessary. The agents are designed to scale
                        horizontally.</para>
      </step>
      <step>
        <para><literal>workload_partitioning</literal> of notification agents is only required if
                        the pipeline configuration leverages transformers. It may also be enabled if
                        batching is required to minimize load on the defined publisher targets. If
                        transformers are not enabled, multiple agents may still be deployed without
                        <literal>workload_partitioning</literal> and processing will be done greedily.</para>
      </step>
    </procedure>
  </section>
  <section>
    <title>Data storage</title>
    <note>
      <para>As of Newton, data storage is not recommended in ceilometer. Alarm,
                    metric, and event data should be stored in aodh, gnocchi, and panko
                    respectively. The following details only relate to ceilometer’s legacy
                    API.</para>
    </note>
    <procedure>
      <step>
        <para>We recommend that you avoid open-ended queries. In order to get better
                        performance, you can use reasonable time ranges or other query
                        constraints for retrieving measurements.</para>
        <para>For example, this open-ended query might return an unpredictable amount
                        of data:</para>
        <screen language="console">$ ceilometer sample-list --meter cpu -q 'resource_id=INSTANCE_ID_1'</screen>
        <para>Whereas, this well-formed query returns a more reasonable amount of
                        data, hence better performance:</para>
        <screen language="console"><?dbsuse-fo font-size="8pt"?>$ ceilometer sample-list --meter cpu -q 'resource_id=INSTANCE_ID_1;timestamp &gt; 2015-05-01T00:00:00;timestamp &lt; 2015-06-01T00:00:00'</screen>
        <note>
          <para>The number of items returned will be
                            restricted to the value defined by <literal>default_api_return_limit</literal> in the
                            <literal>ceilometer.conf</literal> configuration file. Alternatively, the value can
                            be set per query by passing <literal>limit</literal> option in request.</para>
        </note>
      </step>
      <step>
        <para>We recommend that you install the API behind <literal>mod_wsgi</literal>, as it provides
                        more settings to tweak, like <literal>threads</literal> and <literal>processes</literal> in case of
                        <literal>WSGIDaemon</literal>.</para>
        <note>
          <para>For more information on how to configure <literal>mod_wsgi</literal>, see the
                            <link xlink:href="https://docs.openstack.org/ceilometer/pike/">Telemetry Install Documentation</link>.</para>
        </note>
      </step>
      <step>
        <para>The collection service provided by the Telemetry project is not intended
                        to be an archival service. Set a Time to Live (TTL) value to expire data
                        and minimize the database size. If you would like to keep your data for
                        longer time period, you may consider storing it in a data warehouse
                        outside of Telemetry.</para>
        <note>
          <para>For more information on how to set the TTL, see
                            <xref linkend="telemetry-expiry"/>.</para>
        </note>
      </step>
      <step>
        <para>We recommend that you do not run MongoDB on the same node as the
                        controller. Keep it on a separate node optimized for fast storage for
                        better performance. Also it is advisable for the MongoDB node to have a
                        lot of memory.</para>
        <note>
          <para>For more information on how much memory you need, see <link xlink:href="http://docs.mongodb.org/manual/faq/diagnostics/#how-do-i-calculate-how-much-ram-i-need-for-my-application">MongoDB
                                FAQ</link>.</para>
        </note>
      </step>
      <step>
        <para>Use replica sets in MongoDB. Replica sets provide high availability
                        through automatic failover. If your primary node fails, MongoDB will
                        elect a secondary node to replace the primary node, and your cluster
                        will remain functional.</para>
        <para>For more information on replica sets, see the <link xlink:href="http://docs.mongodb.org/manual/tutorial/deploy-replica-set/">MongoDB replica sets
                            docs</link>.</para>
      </step>
      <step>
        <para>Use sharding in MongoDB. Sharding helps in storing data records across
                        multiple machines and is the MongoDB’s approach to meet the demands of
                        data growth.</para>
        <para>For more information on sharding, see the <link xlink:href="http://docs.mongodb.org/manual/sharding/">MongoDB sharding
                            docs</link>.</para>
      </step>
    </procedure>
  </section>
</section>
