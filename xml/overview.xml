<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>

<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="tech_overview">
 <title>&kw-hos-tm;: Overview</title>
 <para>
  &kw-hos-phrase; is the latest OpenStack-based infrastructure-as-a-service
  cloud platform release from &suse;. It is based on the &ostack-current;
  release and implements core services and features of &latest_ostack; while
  providing new installation and management features.
 </para>
 <section>
  <title>Installation, Configuration, and Management</title>
  <para>
   With the release of &kw-hos-phrase; comes an easy installation and
   configuration workflow. Installation of the basic cloud requires that you
   run a handful of commands, or use the new installation GUI to step through
   installation in a wizard-like fashion.
  </para>
  <para>
   &ostack; services are installed during the installation process, so there
   is no need to install and configure them individually. Instead, in
   &kw-hos-phrase;, configuration, including which services to install, how
   many nodes you will have, what their individual roles will be, what storage
   will be used, which networks will handle which traffic, and installation and
   configuration of the underlying operating system on each node is declared in
   configuration objects stored in YAML files.
  </para>
  <para>
   These files allow customization, and &kw-hos-phrase; ships with complete
   sets describing a few common configurations. You may base your deployment on
   one of these templates and customize from there if you wish.
  </para>
  <para>
   This installation and configuration is made possible by &kw-hos-phrase;, the
   configuration processor, a set of Python scripts that consume the data
   stored in the configuration YAML files and output Ansible variables used to
   configure networks, services, servers, and the other applications upon which
   the cloud runs.
  </para>
  <para>
   As you will read in <xref linkend="cha.input-model-intro-concept"/>, the
   configuration processor reads and validates the input model described in
   the YAML files discussed above, combines it with the service definitions
   provided by &kw-hos; and any persisted state information about the current
   deployment to produce a set of Ansible variables that can be used to
   deploy the cloud. It also produces a set of information files that provide
   details about the configuration. By reading this document you will gain a
   thorough understanding of how &kw-hos-phrase; allows you to deploy and
   manage your cloud via this comprehensive "wrapper" around cloud
   configuration.
  </para>
  <para>
   The example configurations that ship with &kw-hos-phrase; are described in
   <xref linkend="example_configurations"/>.
  </para>
  <xi:include xpointer="element(/1/2)" href="planning+installation-example_config_xpointer.xml"/>
 </section>
 <section>
  <title>Post-deployment Reconfiguration and Management</title>
  <para>
   In addition to initial installation and deployment, the addition of the
   configuration processor means that you can reconfigure your cloud easily
   after deployment. Note that due to its combination of deployment and
   lifecycle-management features, we may use the terms deployer and lifecycle
   manager interchangeably throughout the &kw-hos-phrase; documentation to
   refer to the features described in this document.
  </para>
  <para>
   By executing pre-written, supplied Ansible playbooks in the form of a single
   command, you may perform management tasks such as those below, along with
   many others.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     start, stop, and get the status of &ostack; services
    </para>
   </listitem>
   <listitem>
    <para>
     add and remove controller, compute, and storage nodes
    </para>
   </listitem>
   <listitem>
    <para>
     back up or restore control plane nodes
    </para>
   </listitem>
   <listitem>
    <para>
     migrate &o_blockstore; volumes
    </para>
   </listitem>
   <listitem>
    <para>
     start and stop logging
    </para>
   </listitem>
   <listitem>
    <para>
     erase nodes to baremetal
    </para>
   </listitem>
   <listitem>
    <para>
     re-image nodes
    </para>
   </listitem>
   <listitem>
    <para>
     reconfigure &swift; to add or replace drives
    </para>
   </listitem>
   <listitem>
    <para>
     validate &swift; drives against the storage model declared
    </para>
   </listitem>
  </itemizedlist>
  <para>
   While the internal management of &ostack; services and the configuration of
   their functionality still occurs via the service APIs and follows the
   methodology outlined by &ostack;, the high-level management of the services
   themselves and their interaction with the cloud is accomplished via the
   Ansible playbooks mentioned here.
  </para>
 </section>
 <section>
  <title>Configuration Versioning</title>
  <para>
   In &kw-hos-phrase;, the YAML files that define your cloud configuration are
   stored in a local git repository that is installed along with the cloud. The
   cloud deployment Ansible playbooks look in the appropriate git directories
   and execute changes when run. This allows you to keep an historical record
   of configuration changes as well as help you identify issues that arise
   later.
  </para>
 </section>
 <xi:include href="introduction-tech_overview_ataglance.xml"/>
 <xi:include href="introduction-tech_overview_hlm.xml"/>
 <xi:include href="introduction-tech_overview_newimproved.xml"/>
 <xi:include href="introduction-tech_overview_valueadd.xml"/>
 <xi:include href="introduction-tech_overview_linux.xml"/>
 <xi:include href="introduction-tech_overview_openstack.xml"/>
</section>
