<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<chapter xml:id="admin-guide-trove" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Trove Administration Guide</title>
      <section xml:id="database">
        <title>Database</title>
          <para>The Database service provides scalable and reliable cloud
                provisioning functionality for both relational and non-relational
                database engines. Users can quickly and easily use database features
                without the burden of handling complex administrative tasks. Cloud
                users and database administrators can provision and manage multiple
                database instances as needed.</para>
          <para>The Database service provides resource isolation at high performance
                levels, and automates complex administrative tasks such as deployment,
                configuration, patching, backups, restores, and monitoring.</para>
          <para>You can modify various cluster characteristics by editing the
                <literal>/etc/trove/trove.conf</literal> file. A comprehensive list of the Database
                service configuration options is described in the <link xlink:href="https://docs.openstack.org/ocata/config-reference/database.html">Database service</link>
                chapter in the <emphasis>Configuration Reference</emphasis>.</para>
        </section>
        <section xml:id="create-a-data-store">
          <title>Create a data store</title>
          <para>An administrative user can create data stores for a variety of
                databases.</para>
          <para>This section assumes you do not yet have a MySQL data store, and shows
                you how to create a MySQL data store and populate it with a MySQL 5.5
                data store version.</para>
          <para>
            <emphasis role="bold">To create a data store</emphasis>
          </para>
          <procedure>
            <step>
              <para>
                <emphasis role="bold">Create a trove image</emphasis>
              </para>
              <para>Create an image for the type of database you want to use, for
                        example, MySQL, MongoDB, Cassandra.</para>
              <para>This image must have the trove guest agent installed, and it must
                        have the <literal>trove-guestagent.conf</literal> file configured to connect to
                        your OpenStack environment. To configure <literal>trove-guestagent.conf</literal>,
                        add the following lines to <literal>trove-guestagent.conf</literal> on the guest
                        instance you are using to build your image:</para>
              <screen language="ini"><![CDATA[rabbit_host = controller
rabbit_password = RABBIT_PASS
nova_proxy_admin_user = admin
nova_proxy_admin_pass = ADMIN_PASS
nova_proxy_admin_tenant_name = service
trove_auth_url = http://controller:35357/v2.0]]></screen>
              <para>This example assumes you have created a MySQL 5.5 image called
                        <literal>mysql-5.5.qcow2</literal>.</para>
              <important>
                <para>If you have a guest image that was created with an OpenStack version
                            before Kilo, modify the guest agent init script for the guest image to
                            read the configuration files from the directory <literal>/etc/trove/conf.d</literal>.</para>
                <para>For a backwards compatibility with pre-Kilo guest instances, set the
                            database service configuration options <literal>injected_config_location</literal> to
                            <literal>/etc/trove</literal> and <literal>guest_info</literal> to <literal>/etc/guest_info</literal>.</para>
              </important>
            </step>
            <step>
              <para>
                <emphasis role="bold">Register image with Image service</emphasis>
              </para>
              <para>You need to register your guest image with the Image service.</para>
              <para>In this example, you use the <command>openstack image create</command>
                        command to register a <literal>mysql-5.5.qcow2</literal> image.</para>
              <screen language="console"><![CDATA[$ openstack image create mysql-5.5 --disk-format qcow2 --container-format bare --public < mysql-5.5.qcow2
+------------------+------------------------------------------------------+
| Field            | Value                                                |
+------------------+------------------------------------------------------+
| checksum         | 133eae9fb1c98f45894a4e60d8736619                     |
| container_format | bare                                                 |
| created_at       | 2016-12-21T12:10:02Z                                 |
| disk_format      | qcow2                                                |
| file             | /v2/images/d1afb4f0-2360-4400-8d97-846b1ab6af52/file |
| id               | d1afb4f0-2360-4400-8d97-846b1ab6af52                 |
| min_disk         | 0                                                    |
| min_ram          | 0                                                    |
| name             | mysql-5.5                                            |
| owner            | 5669caad86a04256994cdf755df4d3c1                     |
| protected        | False                                                |
| schema           | /v2/schemas/image                                    |
| size             | 13200896                                             |
| status           | active                                               |
| tags             |                                                      |
| updated_at       | 2016-12-21T12:10:03Z                                 |
| virtual_size     | None                                                 |
| visibility       | public                                               |
+------------------+------------------------------------------------------+]]></screen>
            </step>
            <step>
              <para>
                <emphasis role="bold">Create the data store</emphasis>
              </para>
              <para>Create the data store that will house the new image. To do this, use
                        the <command>trove-manage</command><command>datastore_update</command> command.</para>
              <para>This example uses the following arguments:</para>
              <informaltable>
                <tgroup cols="3">
                  <colspec colname="c1" colwidth="20"/>
                  <colspec colname="c2" colwidth="20"/>
                  <colspec colname="c3" colwidth="20"/>
                  <thead>
                    <row>
                      <entry>
                        <para>Argument</para>
                      </entry>
                      <entry>
                        <para>Description</para>
                      </entry>
                      <entry>
                        <para>In this example:</para>
                      </entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>
                        <para>config file</para>
                      </entry>
                      <entry>
                        <para>The configuration file to use.</para>
                      </entry>
                      <entry>
                        <para>
                          <literal>--config-file=/etc/trove/trove.conf</literal>
                        </para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>name</para>
                      </entry>
                      <entry>
                        <para>Name you want to use for this data store.</para>
                      </entry>
                      <entry>
                        <para>
                          <literal>mysql</literal>
                        </para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>default version</para>
                      </entry>
                      <entry>
                        <para>You can attach multiple versions/images to a data store. For
                                            example, you might have a MySQL 5.5 version and a MySQL 5.6
                                            version. You can designate one version as the default, which
                                            the system uses if a user does not explicitly request a
                                            specific version.</para>
                      </entry>
                      <entry>
                        <para>
                          <literal>""</literal>
                        </para>
                        <para>At this point, you do not yet have a default version, so pass
                                            in an empty string.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
              <para>Example:</para>
              <screen language="console"><![CDATA[$ trove-manage --config-file=/etc/trove/trove.conf datastore_update mysql ""]]></screen>
            </step>
            <step>
              <para>
                <emphasis role="bold">Add a version to the new data store</emphasis>
              </para>
              <para>Now that you have a MySQL data store, you can add a version to it,
                        using the <command>trove-manage</command><command>datastore_version_update</command>
                        command. The version indicates which guest image to use.</para>
              <para>This example uses the following arguments:</para>
              <informaltable>
                <tgroup cols="3">
                  <colspec colname="c1" colwidth="20"/>
                  <colspec colname="c2" colwidth="20"/>
                  <colspec colname="c3" colwidth="20"/>
                  <thead>
                    <row>
                      <entry>
                        <para>Argument</para>
                      </entry>
                      <entry>
                        <para>Description</para>
                      </entry>
                      <entry>
                        <para>In this example:</para>
                      </entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>
                        <para>config file</para>
                      </entry>
                      <entry>
                        <para>The configuration file to use.</para>
                      </entry>
                      <entry>
                        <para>
                          <literal>--config-file=/etc/trove/trove.conf</literal>
                        </para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>data store</para>
                      </entry>
                      <entry>
                        <para>The name of the data store you just created via
                                            <literal>trove-manage</literal><command>datastore_update</command>.</para>
                      </entry>
                      <entry>
                        <para>
                          <literal>mysql</literal>
                        </para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>version name</para>
                      </entry>
                      <entry>
                        <para>The name of the version you are adding to the data store.</para>
                      </entry>
                      <entry>
                        <para>
                          <literal>mysql-5.5</literal>
                        </para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>data store manager</para>
                      </entry>
                      <entry>
                        <para>Which data store manager to use for this version. Typically,
                                            the data store manager is identified by one of the following
                                            strings, depending on the database:</para>
                        <itemizedlist>
                          <listitem>
                            <para>cassandra</para>
                          </listitem>
                          <listitem>
                            <para>couchbase</para>
                          </listitem>
                          <listitem>
                            <para>couchdb</para>
                          </listitem>
                          <listitem>
                            <para>db2</para>
                          </listitem>
                          <listitem>
                            <para>mariadb</para>
                          </listitem>
                          <listitem>
                            <para>mongodb</para>
                          </listitem>
                          <listitem>
                            <para>mysql</para>
                          </listitem>
                          <listitem>
                            <para>percona</para>
                          </listitem>
                          <listitem>
                            <para>postgresql</para>
                          </listitem>
                          <listitem>
                            <para>pxc</para>
                          </listitem>
                          <listitem>
                            <para>redis</para>
                          </listitem>
                          <listitem>
                            <para>vertica</para>
                          </listitem>
                        </itemizedlist>
                      </entry>
                      <entry>
                        <para>
                          <literal>mysql</literal>
                        </para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>glance ID</para>
                      </entry>
                      <entry>
                        <para>The ID of the guest image you just added to the Image
                                            service. You can get this ID by using the glance
                                            <command>image-show</command> IMAGE_NAME command.</para>
                      </entry>
                      <entry>
                        <para>bb75f870-0c33-4907-8467-1367f8cb15b6</para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>packages</para>
                      </entry>
                      <entry>
                        <para>If you want to put additional packages on each guest that
                                            you create with this data store version, you can list the
                                            package names here.</para>
                      </entry>
                      <entry>
                        <para>
                          <literal>""</literal>
                        </para>
                        <para>In this example, the guest image already contains all the
                                            required packages, so leave this argument empty.</para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>active</para>
                      </entry>
                      <entry>
                        <variablelist>
                          <varlistentry>
                            <term>Set this to either 1 or 0:</term>
                            <listitem>
                              <itemizedlist>
                                <listitem>
                                  <para><literal>1</literal> = active</para>
                                </listitem>
                                <listitem>
                                  <para><literal>0</literal> = disabled</para>
                                </listitem>
                              </itemizedlist>
                            </listitem>
                          </varlistentry>
                        </variablelist>
                      </entry>
                      <entry>
                        <para>1</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
              <para>Example:</para>
              <screen language="console"><![CDATA[$ trove-manage --config-file=/etc/trove/trove.conf datastore_version_update mysql mysql-5.5 mysql GLANCE_ID "" 1]]></screen>
              <para><emphasis role="bold">Optional:</emphasis> Set your new version as the default version. To do
                        this, use the <command>trove-manage</command><command>datastore_update</command>
                        command again, this time specifying the version you just created.</para>
              <screen language="console"><![CDATA[$ trove-manage --config-file=/etc/trove/trove.conf datastore_update mysql mysql-5.5]]></screen>
            </step>
            <step>
              <para>
                <emphasis role="bold">Load validation rules for configuration groups</emphasis>
              </para>
              <note>
                <para>
                  <emphasis role="bold">Applies only to MySQL and Percona data stores</emphasis>
                </para>
                <itemizedlist>
                  <listitem>
                    <para>If you just created a MySQL or Percona data store, then you need
                                    to load the appropriate validation rules, as described in this
                                    step.</para>
                  </listitem>
                  <listitem>
                    <para>If you just created a different data store, skip this step.</para>
                  </listitem>
                </itemizedlist>
              </note>
              <para><emphasis role="bold">Background.</emphasis> You can manage database configuration tasks by using
                        configuration groups. Configuration groups let you set configuration
                        parameters, in bulk, on one or more databases.</para>
              <para>When you set up a configuration group using the trove
                        <command>configuration-create</command> command, this command compares the configuration
                        values you are setting against a list of valid configuration values
                        that are stored in the <literal>validation-rules.json</literal> file.</para>
              <informaltable>
                <tgroup cols="3">
                  <colspec colname="c1" colwidth="20"/>
                  <colspec colname="c2" colwidth="20"/>
                  <colspec colname="c3" colwidth="20"/>
                  <thead>
                    <row>
                      <entry>
                        <para>Operating System</para>
                      </entry>
                      <entry>
                        <para>Location of <literal>validation-rules.json</literal></para>
                      </entry>
                      <entry>
                        <para>Notes</para>
                      </entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>
                        <para>Ubuntu 14.04</para>
                      </entry>
                      <entry>
                        <para>
                          <literal>/usr/lib/python2.7/dist-packages/trove/templates/DATASTORE_NAME</literal>
                        </para>
                      </entry>
                      <entry>
                        <para>DATASTORE_NAME is the name of either the MySQL data store or
                                            the Percona data store. This is typically either <literal>mysql</literal>
                                            or <literal>percona</literal>.</para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>RHEL 7, CentOS 7, Fedora 20, and Fedora 21</para>
                      </entry>
                      <entry>
                        <para>
                          <literal>/usr/lib/python2.7/site-packages/trove/templates/DATASTORE_NAME</literal>
                        </para>
                      </entry>
                      <entry>
                        <para>DATASTORE_NAME is the name of either the MySQL data store or
                                            the Percona data store. This is typically either <literal>mysql</literal> or <literal>percona</literal>.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
              <para>Therefore, as part of creating a data store, you need to load the
                        <literal>validation-rules.json</literal> file, using the <command>trove-manage</command><command>db_load_datastore_config_parameters</command> command. This command
                        takes the following arguments:</para>
              <itemizedlist>
                <listitem>
                  <para>Data store name</para>
                </listitem>
                <listitem>
                  <para>Data store version</para>
                </listitem>
                <listitem>
                  <para>Full path to the <literal>validation-rules.json</literal> file</para>
                </listitem>
              </itemizedlist>
              <para>This example loads the <literal>validation-rules.json</literal> file for a MySQL
                        database on Ubuntu 14.04:</para>
              <screen language="console"><![CDATA[$ trove-manage db_load_datastore_config_parameters mysql mysql-5.5 /usr/lib/python2.7/dist-packages/trove/templates/mysql/validation-rules.json]]></screen>
            </step>
            <step>
              <para>
                <emphasis role="bold">Validate data store</emphasis>
              </para>
              <para>To validate your new data store and version, start by listing the
                        data stores on your system:</para>
              <screen language="console"><![CDATA[$ trove datastore-list
+--------------------------------------+--------------+
|                  id                  |     name     |
+--------------------------------------+--------------+
| 10000000-0000-0000-0000-000000000001 | Legacy MySQL |
| e5dc1da3-f080-4589-a4c2-eff7928f969a |    mysql     |
+--------------------------------------+--------------+]]></screen>
              <para>Take the ID of the MySQL data store and pass it in with the
                        <command>datastore-version-list</command> command:</para>
              <screen language="console"><![CDATA[$ trove datastore-version-list DATASTORE_ID
+--------------------------------------+-----------+
|                  id                  |    name   |
+--------------------------------------+-----------+
| 36a6306b-efd8-4d83-9b75-8b30dd756381 | mysql-5.5 |
+--------------------------------------+-----------+]]></screen>
            </step>
          </procedure>
          <section xml:id="data-store-classifications">
            <title>Data store classifications</title>
            <para>The Database service supports a variety of both relational and
                    non-relational database engines, but to a varying degree of support for
                    each <emphasis>data store</emphasis>. The Database service project has defined
                    several classifications that indicate the quality of support for each
                    data store. Data stores also implement different extensions.
                    An extension is called a <emphasis>strategy</emphasis> and is classified similar to
                    data stores.</para>
            <para>Valid classifications for a data store and a strategy are:</para>
            <itemizedlist>
              <listitem>
                <para>Experimental</para>
              </listitem>
              <listitem>
                <para>Technical preview</para>
              </listitem>
              <listitem>
                <para>Stable</para>
              </listitem>
            </itemizedlist>
            <para>Each classification builds on the previous one. This means that a data store
                    that meets the <literal>technical preview</literal> requirements must also meet all the
                    requirements for <literal>experimental</literal>, and a data store that meets the <literal>stable</literal>
                    requirements must also meet all the requirements for <literal>technical preview</literal>.</para>
            <para>
              <emphasis role="bold">Requirements</emphasis>
            </para>
            <itemizedlist>
              <listitem>
                <para>Experimental</para>
                <para>A data store is considered to be <literal>experimental</literal> if it meets these criteria:</para>
                <itemizedlist>
                  <listitem>
                    <para>It implements a basic subset of the Database service API including
                                    <literal>create</literal> and <literal>delete</literal>.</para>
                  </listitem>
                  <listitem>
                    <para>It has guest agent elements that allow guest agent creation.</para>
                  </listitem>
                  <listitem>
                    <para>It has a definition of supported operating systems.</para>
                  </listitem>
                  <listitem>
                    <para>It meets the other
                                    <link xlink:href="https://specs.openstack.org/openstack/trove-specs/specs/kilo/experimental-datastores.html#requirements">Documented Technical Requirements</link>.</para>
                  </listitem>
                </itemizedlist>
                <para>A strategy is considered <literal>experimental</literal> if:</para>
                <itemizedlist>
                  <listitem>
                    <para>It meets the
                                    <link xlink:href="https://specs.openstack.org/openstack/trove-specs/specs/kilo/experimental-datastores.html#requirements">Documented Technical Requirements</link>.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
              <listitem>
                <para>Technical preview</para>
                <para>A data store is considered to be a <literal>technical preview</literal> if it meets the
                            requirements of <literal>experimental</literal> and further:</para>
                <itemizedlist>
                  <listitem>
                    <para>It implements APIs required to plant and start the capabilities of the
                                    data store as defined in the
                                    <link xlink:href="https://wiki.openstack.org/wiki/Trove/DatastoreCompatibilityMatrix">Datastore Compatibility Matrix</link>.</para>
                    <note>
                      <para>It is not required that the data store implements all features like
                                        resize, backup, replication, or clustering to meet this classification.</para>
                    </note>
                  </listitem>
                  <listitem>
                    <para>It provides a mechanism for building a guest image that allows you to
                                    exercise its capabilities.</para>
                  </listitem>
                  <listitem>
                    <para>It meets the other
                                    <link xlink:href="https://specs.openstack.org/openstack/trove-specs/specs/kilo/experimental-datastores.html#requirements">Documented Technical Requirements</link>.</para>
                  </listitem>
                </itemizedlist>
                <important>
                  <para>A strategy is not normally considered to be <literal>technical
preview</literal>.</para>
                </important>
              </listitem>
              <listitem>
                <para>Stable</para>
                <para>A data store or a strategy is considered <literal>stable</literal> if:</para>
                <itemizedlist>
                  <listitem>
                    <para>It meets the requirements of <literal>technical preview</literal>.</para>
                  </listitem>
                  <listitem>
                    <para>It meets the other
                                    <link xlink:href="https://specs.openstack.org/openstack/trove-specs/specs/kilo/experimental-datastores.html#requirements">Documented Technical Requirements</link>.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
            <para>
              <emphasis role="bold">Initial Classifications</emphasis>
            </para>
            <para>The following table shows the current classification assignments for the
                    different data stores.</para>
            <informaltable>
              <tgroup cols="2">
                <colspec colname="c1" colwidth="30"/>
                <colspec colname="c2" colwidth="30"/>
                <thead>
                  <row>
                    <entry>
                      <para>Classification</para>
                    </entry>
                    <entry>
                      <para>Data store</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Stable</para>
                    </entry>
                    <entry>
                      <para>MySQL</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>Technical Preview</para>
                    </entry>
                    <entry>
                      <para>Cassandra, MongoDB</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>Experimental</para>
                    </entry>
                    <entry>
                      <para>All others</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </section>
          <section xml:id="redis-data-store-replication">
            <title>Redis data store replication</title>
            <para>Replication strategies are available for Redis with
                    several commands located in the Redis data store
                    manager:</para>
            <itemizedlist>
              <listitem>
                <para>
                  <command>create</command>
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>detach-replica</command>
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>eject-replica-source</command>
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>promote-to-replica-source</command>
                </para>
              </listitem>
            </itemizedlist>
            <para>Additional arguments for the <command>create</command> command
                    include <command>--replica_of</command> and
                    <command>--replica_count</command>.</para>
          </section>
          <section xml:id="redis-integration-and-unit-tests">
            <title>Redis integration and unit tests</title>
            <para>Unit tests and integration tests are also available for
                    Redis.</para>
            <procedure>
              <step>
                <para>Install trovestack:</para>
                <screen language="console"><![CDATA[$ ./trovestack install

.. note::

   Trovestack is a development script used for integration
   testing and Database service development installations.
   Do not use Trovestack in a production environment. For
   more information, see `the Database service
   developer docs <https://docs.openstack.org/developer/trove/dev/install.html#running-trovestack-to-setup-trove>`_]]></screen>
              </step>
              <step>
                <para>Start Redis:</para>
                <screen language="console"><![CDATA[$ ./trovestack kick-start redis]]></screen>
              </step>
              <step>
                <para>Run integration tests:</para>
                <screen language="console"><![CDATA[$ ./trovestack int-tests --group=replication]]></screen>
                <para>You can run <command>--group=redis_supported</command>
                            instead of <command>--group=replication</command> if needed.</para>
              </step>
            </procedure>
          </section>
        </section>
        <section xml:id="configure-a-cluster">
          <title>Configure a cluster</title>
          <para>An administrative user can configure various characteristics of a
                MongoDB cluster.</para>
          <para>
            <emphasis role="bold">Query routers and config servers</emphasis>
          </para>
          <para><emphasis role="bold">Background.</emphasis> Each cluster includes at least one query router and
                one config server. Query routers and config servers count against your
                quota. When you delete a cluster, the system deletes the associated
                query router(s) and config server(s).</para>
          <para><emphasis role="bold">Configuration.</emphasis> By default, the system creates one query router and
                one config server per cluster. You can change this by editing
                the <literal>/etc/trove/trove.conf</literal> file. These settings are in the
                <literal>mongodb</literal> section of the file:</para>
          <informaltable>
            <tgroup cols="2">
              <colspec colname="c1" colwidth="30"/>
              <colspec colname="c2" colwidth="30"/>
              <thead>
                <row>
                  <entry>
                    <para>Setting</para>
                  </entry>
                  <entry>
                    <para>Valid values are:</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>num_config_servers_per_cluster</para>
                  </entry>
                  <entry>
                    <para>1 or 3</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>num_query_routers_per_cluster</para>
                  </entry>
                  <entry>
                    <para>1 or 3</para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
      <section xml:id="build-guest-images" xml:base="building_guest_images">
        <title>Building Guest Images for OpenStack Trove</title>
        <section xml:id="overview">
          <title>Overview</title>
          <para>When Trove receives a command to create a guest instance, it does so
                by launching a Nova instance based on the appropriate guest image that
                is stored in Glance.</para>
          <para>To operate Trove it is vital to have a properly constructed guest
                image, and while tools are provided that help you build them,
                the Trove project itself does not distribute guest images. This
                document shows you how to build guest images for use with Trove.</para>
          <para>It is assumed that you have a working OpenStack deployment with the
                key services like Keystone, Glance, Swift, Cinder, Nova and networking
                through either Nova Networks or Neutron where you will deploy the
                guest images. It is also assumed that you have Trove functioning and
                all the Trove services operating normally. If you don’t have these
                prerequisites, this document won’t help you get them. Consult the
                appropriate documentation for installing and configuring OpenStack for
                that.</para>
        </section>
        <section xml:id="high-level-overview-of-a-trove-guest-instance">
          <title>High Level Overview of a Trove Guest Instance</title>
          <para>At the most basic level, a Trove Guest Instance is a Nova instance
                launched by Trove in response to a create command. For most of this
                document, we will confine ourselves to single instance databases; in
                other words, without the additional complexity of replication or
                mirroring. Guest instances and Guest images for replicated and
                mirrored database instances will be addressed specifically in later
                sections of this document.</para>
          <para>This section describes the various components of a Trove Guest
                Instance.</para>
          <section xml:id="operating-system-and-database">
            <title>Operating System and Database</title>
            <para>A Trove Guest Instance contains at least a functioning Operating
                    System and the database software that the instance wishes to provide
                    (as a Service). For example, if your chosen operating system is Ubuntu
                    and you wish to deliver MySQL version 5.5, then your guest instance is
                    a Nova instance running the Ubuntu operating system and will have
                    MySQL version 5.5 installed on it.</para>
          </section>
          <section xml:id="trove-guest-agent">
            <title>Trove Guest Agent</title>
            <para>Trove supports multiple databases, some of them are relational (RDBMS)
                    and some are non-relational (NoSQL). In order to provide a common
                    management interface to all of these, the Trove Guest Instance has on
                    it a ‘Guest Agent’. The Trove Guest Agent is a component of the
                    Trove system that is specific to the database running on that Guest
                    Instance.</para>
            <para>The purpose of the Trove Guest Agent is to implement the Trove Guest
                    Agent API for the specific database. This includes such things as the
                    implementation of the database ‘start’ and ‘stop’ commands. The Trove
                    Guest Agent API is the common API used by Trove to communicate with
                    any guest database, and the Guest Agent is the implementation of that
                    API for the specific database.</para>
            <para>The Trove Guest Agent runs on the Trove Guest Instance.</para>
          </section>
          <section xml:id="injected-configuration-for-the-guest-agent">
            <title>Injected Configuration for the Guest Agent</title>
            <para>When TaskManager launches the guest VM it injects the specific settings
                    for the guest into the VM, into the file <literal>/etc/trove/conf.d/guest_info.conf</literal>.
                    The file is injected one of three ways. If <literal>use_heat=True</literal>, it is injected
                    during the heat launch process. If <literal>use_nova_server_config_drive=True</literal>
                    it is injected via ConfigDrive. Otherwise, it is passed to the nova
                    create call as the files parameter and will be injected based on
                    the configuration of Nova; the Nova default is to discard the files.
                    If the settings in <literal>guest_info.conf</literal> are not present on the guest
                    Guest Agent will fail to start up.</para>
          </section>
          <section xml:id="persistent-storage-networking">
            <title>Persistent Storage, Networking</title>
            <para>The database stores data on persistent storage on Cinder (if
                    configured, see <literal>trove.conf</literal> and the <literal>volume_support</literal> parameter) or
                    ephemeral storage on the Nova instance. The database is accessible
                    over the network and the Guest Instance is configured for network
                    access by client applications.</para>
          </section>
        </section>
        <section xml:id="building-guest-images-using-dib">
          <title>Building Guest Images using DIB</title>
          <para>A Trove Guest Image can be built with any tool that produces an image
                accepted by Nova. In this document we describe how to build guest
                images using the ‘Disk Image Builder’ (DIB) tool, and we focus on
                building qemu images. DIB is an OpenStack tool and is available for
                download at
                <link xlink:href="https://git.openstack.org/cgit/openstack/diskimage-builder/tree/"/> or
                <link xlink:href="https://pypi.python.org/pypi/diskimage-builder/0.1.38"/>.</para>
          <para>DIB uses a chroot’ed environment to construct the image. The goal is
                to build a bare machine that has all the components required for
                launch by Nova.</para>
          <section xml:id="invocation">
            <title>Invocation</title>
            <para>You can download the DIB tool from OpenStack’s public git
                    repository.</para>
            <note>
              <para>DIB works with Ubuntu and Fedora (RedHat). Other
                    operating systems are not yet fully supported.</para>
            </note>
            <screen language="bash"><![CDATA[user@machine:/opt/stack$ git clone https://git.openstack.org/openstack/diskimage-builder
Cloning into 'diskimage-builder'...
remote: Counting objects: 8881, done.
remote: Total 8881 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (8881/8881), 1.92 MiB | 0 bytes/s, done.
Resolving deltas: 100% (4668/4668), done.
Checking connectivity... done.
user@machine:/opt/stack$]]></screen>
            <para>Ensure that you have qemu-img  and kpartx installed.</para>
            <para>The <command>disk-image-create</command> command is the main command in the DIB tool that
                    is used to build guest images for Trove. The <command>disk-image-create</command> command
                    takes the following options:</para>
            <screen language="bash"><![CDATA[user@machine:/opt/stack/diskimage-builder$ ./bin/disk-image-create -h
Usage: disk-image-create [OPTION]... [ELEMENT]...

Options:
    -a i386|amd64|armhf -- set the architecture of the image(default amd64)
    -o imagename -- set the imagename of the output image file(default image)
    -t qcow2,tar -- set the image types of the output image files (default qcow2)
       File types should be comma separated
    -x -- turn on tracing
    -u -- uncompressed; do not compress the image - larger but faster
    -c -- clear environment before starting work
    --image-size size -- image size in GB for the created image
    --image-cache directory -- location for cached images(default ~/.cache/image-create)
    --max-online-resize size -- max number of filesystem blocks to support when resizing.
       Useful if you want a really large root partition when the image is deployed.
       Using a very large value may run into a known bug in resize2fs.
       Setting the value to 274877906944 will get you a 1PB root file system.
       Making this value unnecessarily large will consume extra disk space
       on the root partition with extra file system inodes.
    --min-tmpfs size -- minimum size in GB needed in tmpfs to build the image
    --no-tmpfs -- do not use tmpfs to speed image build
    --offline -- do not update cached resources
    --qemu-img-options -- option flags to be passed directly to qemu-img.
       Options need to be comma separated, and follow the key=value pattern.
    --root-label label -- label for the root filesystem. Defaults to 'cloudimg-rootfs'.
    --ramdisk-element -- specify the main element to be used for building ramdisks.
       Defaults to 'ramdisk'. Should be set to 'dracut-ramdisk' for platforms such
       as RHEL and CentOS that do not package busybox.
    --install-type -- specify the default installation type. Defaults to 'source'. Set
       to 'package' to use package based installations by default.
    -n skip the default inclusion of the 'base' element
    -p package[,package,package] -- list of packages to install in the image
    -h|--help -- display this help and exit

ELEMENTS_PATH will allow you to specify multiple locations for the elements.

NOTE: At least one distribution root element must be specified.

Examples:
    disk-image-create -a amd64 -o ubuntu-amd64 vm ubuntu
    export ELEMENTS_PATH=~/source/tripleo-image-elements/elements
    disk-image-create -a amd64 -o fedora-amd64-heat-cfntools vm fedora heat-cfntools
user@machine:/opt/stack/diskimage-builder$]]></screen>
            <para>The example command provided above would build a perfectly functional
                    Nova image with the 64 bit Fedora operating system.</para>
            <para>In addition to the <literal>-a</literal> argument which specifies to build an amd64 (64
                    bit) image, and the <literal>-o</literal> which specifies the output file, the command
                    line lists the various elements that should be used in building the
                    image. The next section of this document talks about image elements.</para>
            <para>Building a Trove guest image is a little more involved and the standard
                    elements are highly configurable through the use
                    of environment variables.</para>
            <para>This command will create a guest image usable by Trove:</para>
            <screen language="bash"><![CDATA[# assign a suitable value for each of these environment
# variables that change the way the elements behave.
export HOST_USERNAME
export HOST_SCP_USERNAME
export GUEST_USERNAME
export CONTROLLER_IP
export TROVESTACK_SCRIPTS
export SERVICE_TYPE
export PATH_TROVE
export ESCAPED_PATH_TROVE
export SSH_DIR
export GUEST_LOGDIR
export ESCAPED_GUEST_LOGDIR
export DIB_CLOUD_INIT_DATASOURCES="ConfigDrive"
export DATASTORE_PKG_LOCATION
export BRANCH_OVERRIDE

# you typically do not have to change these variables
export ELEMENTS_PATH=$TROVESTACK_SCRIPTS/files/elements
export ELEMENTS_PATH+=:$PATH_DISKIMAGEBUILDER/elements
export ELEMENTS_PATH+=:$PATH_TRIPLEO_ELEMENTS/elements
export DIB_APT_CONF_DIR=/etc/apt/apt.conf.d
export DIB_CLOUD_INIT_ETC_HOSTS=true
local QEMU_IMG_OPTIONS=$(! $(qemu-img | grep -q 'version 1') && echo "--qemu-img-options compat=0.10")

# run disk-image-create that actually causes the image to be built
${PATH_DISKIMAGEBUILDER}/bin/disk-image-create -a amd64 -o "${VM}" \
    -x ${QEMU_IMG_OPTIONS} ${DISTRO} ${EXTRA_ELEMENTS} vm \
    cloud-init-datasources ${DISTRO}-guest ${DISTRO}-${SERVICE_TYPE}]]></screen>
          </section>
          <section xml:id="disk-image-builder-elements">
            <title>Disk Image Builder Elements</title>
            <para>DIB Elements are executed by the <command>disk-image-create</command> command to
                    produce the guest image. An element consists of a number of bash
                    scripts that are executed by DIB in a specific order to generate the
                    image. You provide the names of the elements that you would like
                    executed, in order, on the command line to disk-image-create.</para>
            <para>Elements are executed within the chroot’ed environment while DIB is
                    run. Elements are executed in phases and the various phases are (in
                    order) <literal>root.d</literal>, <literal>extra-data.d</literal>, <literal>pre-install.d</literal>,
                    <literal>install.d</literal>, <literal>post-install.d</literal>,
                    <literal>block-device.d</literal>, <literal>finalise.d</literal>, and
                    <literal>cleanup.d</literal>. The latter reference provides a very good
                    outline on writing elements and is a must read.</para>
            <para>Some elements use <literal>environment.d</literal> to setup environment
                    variables. Element dependencies can be established using the
                    <literal>element-deps</literal> and <literal>element-provides</literal>
                    files which are plain text files.</para>
          </section>
          <section xml:id="existing-elements">
            <title>Existing Elements</title>
            <para>DIB comes with some tools that are located in the elements directory.</para>
            <screen language="bash"><![CDATA[user@machine:/opt/stack/diskimage-builder/elements$ ls
apt-conf                         dpkg                      ramdisk
apt-preferences                  dracut-network            ramdisk-base
apt-sources                      dracut-ramdisk            rax-nova-agent
architecture-emulation-binaries  element-manifest          redhat-common
baremetal                        enable-serial-console     rhel
base                             epel                      rhel7
cache-url                        fedora                    rhel-common
centos7                          hwburnin                  rpm-distro
cleanup-kernel-initrd            hwdiscovery               select-boot-kernel-initrd
cloud-init-datasources           ilo                       selinux-permissive
cloud-init-nocloud               ironic-agent              serial-console
debian                           ironic-discoverd-ramdisk  source-repositories
debian-systemd                   iso                       stable-interface-names
debian-upstart                   local-config              svc-map
deploy                           manifests                 uboot
deploy-baremetal                 mellanox                  ubuntu
deploy-ironic                    modprobe-blacklist        ubuntu-core
deploy-kexec                     opensuse                  vm
dhcp-all-interfaces              package-installs          yum
dib-run-parts                    pip-cache                 zypper
disable-selinux                  pkg-map
dkms                             pypi]]></screen>
            <para>In addition, projects like TripleO provide elements as well.</para>
            <para>Trove provides a set of elements as part of the trove
                    project which will be described in the next section.</para>
          </section>
        </section>
        <section xml:id="trove-reference-elements">
          <title>Trove Reference Elements</title>
          <para>Reference elements provided by Trove are part of the trove project.</para>
          <para>In keeping with the philosophy of making elements layered, Trove
                provides two sets of elements. The first implements the guest agent
                for various operating systems and the second implements the database
                for these operating systems.</para>
          <section xml:id="provided-reference-elements">
            <title>Provided Reference Elements</title>
            <para>The Trove reference elements are located in the
                    <literal>trove/integration/scripts/files/elements</literal> directory. The elements
                    <literal>[operating-system]-guest</literal> provide the Trove Guest capabilities and the
                    <literal>[operating-system]-[database]</literal> elements provide support for each
                    database on the specified database.</para>
            <screen language="bash"><![CDATA[user@machine:/opt/stack/trove/integration/scripts/files/elements$ ls -l
total 56
drwxrwxr-x 5 user group 4096 Jan  7 12:47 fedora-guest
drwxrwxr-x 3 user group 4096 Jan  7 12:47 fedora-mongodb
drwxrwxr-x 3 user group 4096 Jan  7 12:47 fedora-mysql
drwxrwxr-x 3 user group 4096 Jan  7 12:47 fedora-percona
drwxrwxr-x 3 user group 4096 Jan  7 12:47 fedora-postgresql
drwxrwxr-x 3 user group 4096 Jan  7 12:47 fedora-redis
drwxrwxr-x 3 user group 4096 Jan  7 12:47 ubuntu-cassandra
drwxrwxr-x 3 user group 4096 Jan  7 12:47 ubuntu-couchbase
drwxrwxr-x 6 user group 4096 Jan  7 12:47 ubuntu-guest
drwxrwxr-x 3 user group 4096 Jan  7 12:47 ubuntu-mongodb
drwxrwxr-x 4 user group 4096 Jan  7 12:47 ubuntu-mysql
drwxrwxr-x 4 user group 4096 Jan  7 12:47 ubuntu-percona
drwxrwxr-x 3 user group 4096 Jan  7 12:47 ubuntu-postgresql
drwxrwxr-x 3 user group 4096 Jan  7 12:47 ubuntu-redis
user@machine:/opt/stack/trove/integration/scripts/files/elements$]]></screen>
            <para>With this infrastructure in place, and the elements from DIB and
                    TripleO accessible to the DIB command, one can generate the (for
                    example) Ubuntu guest image for Percona Server with the command line:</para>
            <screen language="bash"><![CDATA[${DIB} -a amd64 -o ${output-file} Ubuntu vm \
    cloud-init-datasources ubuntu-guest ubuntu-percona]]></screen>
            <para>Where <literal>${DIB}</literal> is the fully qualified path to the <command>disk-image-create</command>
                    command and <literal>${output-file}</literal> is the name of the output file to be
                    created.</para>
          </section>
          <section xml:id="contributing-reference-elements-when-implementing-a-new-datastore">
            <title>Contributing Reference Elements When Implementing a New Datastore</title>
            <para>When contributing a new datastore, you should contribute elements
                    that will allow any user of Trove to be able to build a guest image
                    for that datastore.</para>
            <para>This is typically accomplished by submitting files into the
                    trove project, as above.</para>
          </section>
        </section>
        <section xml:id="getting-the-guest-agent-code-onto-a-trove-guest-instance">
          <title>Getting the Guest Agent Code onto a Trove Guest Instance</title>
          <para>The guest agent code typically runs on the guest instance alongside
                the database. There are two ways in which the guest agent code can be
                placed on the guest instance and we describe both of these here.</para>
          <section xml:id="guest-agent-code-installed-at-build-time">
            <title>Guest Agent Code Installed at Build Time</title>
            <para>In this option, the guest agent code is built into the guest image,
                    thereby ensuring that all database instances that are launched with
                    the image will have the exact same version of the guest image.</para>
            <para>This can be accomplished by placing suitable code in the elements for
                    the image and these elements will ensure that the guest agent code is
                    installed on the image.</para>
          </section>
          <section xml:id="guest-agent-code-installed-at-run-time">
            <title>Guest Agent Code Installed at Run Time</title>
            <para>In this option, the guest agent code is not part of the guest image
                    and instead the guest agent code is obtained at runtime, potentially
                    from some well known location.</para>
            <para>In devstack, this is implemented in <literal>trove-guest.upstart.conf</literal> and
                    <literal>trove-guest.systemd.conf</literal>. Shown below is the code from
                    <literal>trove-guest.upstart.conf</literal> (this code may change in the future and
                    is shown here as an example only). See the code highlighted below:</para>
            <screen language="bash"><![CDATA[description "Trove Guest"
author "Auto-Gen"

start on (filesystem and net-device-up IFACE!=lo)
stop on runlevel [016]
chdir /var/run
pre-start script
    mkdir -p /var/run/trove
    chown GUEST_USERNAME:root /var/run/trove/

    mkdir -p /var/lock/trove
    chown GUEST_USERNAME:root /var/lock/trove/

    mkdir -p GUEST_LOGDIR
    chown GUEST_USERNAME:root GUEST_LOGDIR
    chmod +r /etc/guest_info

    # If /etc/trove does not exist, copy the trove source and the
    # guest agent config from the user's development environment
    if [ ! -d /etc/trove ]; then
->      sudo -u GUEST_USERNAME rsync -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' -avz --exclude='.*' HOST_SCP_USERNAME@NETWORK_GATEWAY:PATH_TROVE/ /home/GUEST_USERNAME/trove
        mkdir -p /etc/trove
->      sudo -u GUEST_USERNAME rsync -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' -avz --exclude='.*' HOST_SCP_USERNAME@NETWORK_GATEWAY:/etc/trove/trove-guestagent.conf ~GUEST_USERNAME/
        mv ~GUEST_USERNAME/trove-guestagent.conf /etc/trove/trove-guestagent.conf
    fi

end script

exec su -c "/home/GUEST_USERNAME/trove/contrib/trove-guestagent -config-file=/etc/guest_info --config-file=/etc/trove/trove-guestagent.conf" GUEST_USERNAME]]></screen>
            <para>In building an image for a production Trove deployment, it is a very
                    bad idea to use this mechanism. It makes sense in a development
                    environment where the thing that you are developing is in Trove and
                    part of the Guest Agent. This is because you get to merely boot a new
                    Trove instance and the freshly modified code gets run on the
                    Guest. But, in any other circumstance, it is much better to have the
                    guest image include the guest agent code.</para>
          </section>
        </section>
        <section xml:id="considerations-in-building-a-guest-image">
          <title>Considerations in Building a Guest Image</title>
          <para>In building a guest image, there are several considerations that one
                must take into account. Some of the ones that we have encountered are
                described below.</para>
          <section xml:id="speed-of-launch-and-start-up-activities">
            <title>Speed of Launch and Start-up Activities</title>
            <para>The actions performed on first boot can be very expensive and may
                    impact the time taken to launch a new guest instance. For example,
                    guest images that don’t have the database software pre-installed and
                    instead download and install during launch could take longer to
                    launch.</para>
            <para>In building a guest image, therefore care should be taken to ensure
                    that activities performed on first boot are traded off against the
                    demands for start-time.</para>
          </section>
          <section xml:id="database-licensing-and-database-software-download-issues">
            <title>Database licensing, and Database Software Download Issues</title>
            <para>Some database software downloads are licensed and manual steps are
                    required in order to obtain the installable software. In other
                    instances, no repositories may be setup to serve images of a
                    particular database. In these cases, it is suggested that an extra
                    step be used to build the guest image.</para>
            <section xml:id="user-manually-downloads-database-software">
              <title>User Manually Downloads Database Software</title>
              <para>The user manually downloads the database software in a suitable format
                        and places it in a specified location on the machine that will be used
                        to build the guest image.</para>
              <para>An environment variable <literal>DATASTORE_PKG_LOCATION</literal> is set to point
                        to this location. It can be a single file (for example <literal>new_db.deb</literal>)
                        or a folder (for example <literal>new_db_files</literal>) depending on what the elements
                        expect. In the latter case, the folder would need to contain all the
                        files that the elements need in order to install the database software
                        (a folder would typically be used only if more than one file was
                        required).</para>
            </section>
            <section xml:id="use-an-extra-data-d-folder">
              <title>Use an extra-data.d Folder</title>
              <para>Use an <literal>extra-data.d</literal> folder for the element and copy the file
                        into the image</para>
              <para>Steps in <literal>extra-data.d</literal> are run first, and outside the DIB chroot’ed
                        environment. The step here can copy the installable from
                        <literal>DATASTORE_PKG_LOCATION</literal> into the image
                        (typically into <literal>TMP_HOOKS_PATH</literal>).</para>
              <para>For example, if <literal>DATASTORE_PKG_LOCATION</literal> contains the full path to an
                        installation package, an element in this folder could contain the
                        following line:</para>
              <screen language="bash"><![CDATA[dd if=${DATASTORE_PKG_LOCATION} of=${TMP_HOOKS_PATH}/new_db.deb]]></screen>
            </section>
            <section xml:id="use-an-install-d-step-to-install-the-software">
              <title>Use an install.d Step to Install the Software</title>
              <para>A standard <literal>install.d</literal> step can now install the software from
                        <literal>TMP_HOOKS_DIR</literal>.</para>
              <para>For example, an element in this folder could contain:</para>
              <screen language="bash"><![CDATA[dpkg -i ${TMP_HOOKS_PATH}/new_db.deb]]></screen>
              <para>Once elements have been set up that expect a package to be available,
                        the guest image can be created by executing the following:</para>
              <screen language="bash"><![CDATA[DATASTORE_PKG_LOCATION=/path/to/new_db.deb ./script_to_call_dib.sh]]></screen>
              <para>Assuming the elements for <literal>new_db</literal> are available in the trove
                        repository, this would equate to:</para>
              <screen language="bash"><![CDATA[DATASTORE_PKG_LOCATION=/path/to/new_db.deb ./trovestack kick-start new_db]]></screen>
            </section>
          </section>
        </section>
        <section xml:id="building-guest-images-using-standard-elements">
          <title>Building Guest Images Using Standard Elements</title>
          <para>A good reference for how one builds guest images can be found by
                reviewing the trovestack script (<literal>trove/integration/scripts</literal>). Lower level
                routines that actually invoke Disk Image Builder can be found in
                <literal>trove/integration/scripts/functions_qemu</literal>.</para>
          <para>The following block of code illustrates the most basic invocation of
                DIB to create a guest image. This code is in
                <literal>trove/integration/scripts/functions_qemu</literal> as part of the function
                <literal>build_vm()</literal>. We look at this section of code in detail below.</para>
          <screen language="bash"><![CDATA[# assign a suitable value for each of these environment
# variables that change the way the elements behave.
export HOST_USERNAME
export HOST_SCP_USERNAME
export GUEST_USERNAME
export CONTROLLER_IP
export TROVESTACK_SCRIPTS
export SERVICE_TYPE
export PATH_TROVE
export ESCAPED_PATH_TROVE
export SSH_DIR
export GUEST_LOGDIR
export ESCAPED_GUEST_LOGDIR
export DIB_CLOUD_INIT_DATASOURCES="ConfigDrive"
export DATASTORE_PKG_LOCATION
export BRANCH_OVERRIDE

# you typically do not have to change these variables
export ELEMENTS_PATH=$TROVESTACK_SCRIPTS/files/elements
export ELEMENTS_PATH+=:$PATH_DISKIMAGEBUILDER/elements
export ELEMENTS_PATH+=:$PATH_TRIPLEO_ELEMENTS/elements
export DIB_APT_CONF_DIR=/etc/apt/apt.conf.d
export DIB_CLOUD_INIT_ETC_HOSTS=true
local QEMU_IMG_OPTIONS=$(! $(qemu-img | grep -q 'version 1') && echo "--qemu-img-options compat=0.10")

# run disk-image-create that actually causes the image to be built
${PATH_DISKIMAGEBUILDER}/bin/disk-image-create -a amd64 -o "${VM}" \
    -x ${QEMU_IMG_OPTIONS} ${DISTRO} ${EXTRA_ELEMENTS} vm \
    cloud-init-datasources ${DISTRO}-guest ${DISTRO}-${SERVICE_TYPE}]]></screen>
          <para>Several of the environment variables referenced above are referenced
                in the course of the Disk Image Building process.</para>
          <para>For example, let’s look at <literal>GUEST_LOGDIR</literal>. Looking at the element
                <literal>elements/fedora-guest/extra-data.d/20-guest-systemd</literal>, we find:</para>
          <screen language="bash"><![CDATA[#!/bin/bash

set -e
set -o xtrace

# CONTEXT: HOST prior to IMAGE BUILD as SCRIPT USER
# PURPOSE: stages the bootstrap file and upstart conf file while replacing variables so that guest image is properly
# configured

source $_LIB/die

[ -n "$TMP_HOOKS_PATH" ] || die "Temp hook path not set"

[ -n "${GUEST_USERNAME}" ] || die "GUEST_USERNAME needs to be set to the user for the guest image"
[ -n "${HOST_SCP_USERNAME}" ] || die "HOST_SCP_USERNAME needs to be set to the user for the host instance"
[ -n "${CONTROLLER_IP}" ] || die "CONTROLLER_IP needs to be set to the ip address that guests will use to contact the controller"
[ -n "${ESCAPED_PATH_TROVE}" ] || die "ESCAPED_PATH_TROVE needs to be set to the path to the trove directory on the trovestack host"
[ -n "${TROVESTACK_SCRIPTS}" ] || die "TROVESTACK_SCRIPTS needs to be set to the trove/integration/scripts dir"
[ -n "${ESCAPED_GUEST_LOGDIR}" ] || die "ESCAPED_GUEST_LOGDIR must be set to the escaped guest log dir"

sed "s/GUEST_USERNAME/${GUEST_USERNAME}/g;s/GUEST_LOGDIR/${ESCAPED_GUEST_LOGDIR}/g;s/HOST_SCP_USERNAME/${HOST_SCP_USERNAME}/g;s/CONTROLLER_IP/${CONTROLLER_IP}/g;s/PATH_TROVE/${ESCAPED_PATH_TROVE}/g" \
${TROVESTACK_SCRIPTS}/files/trove-guest.systemd.conf >
${TMP_HOOKS_PATH}/trove-guest.service]]></screen>
          <para>As you can see, the value of <literal>GUEST_LOGDIR</literal> is used in the <literal>extra-data.d</literal>
                script to appropriately configure the <literal>trove-guest.systemd.conf</literal> file.</para>
          <para>This pattern is one that you can expect in your own building of guest
                images. The invocation of <literal>disk-image-create</literal> provides a list of
                elements that are to be invoked in order.</para>
          <para>That list of elements is:</para>
          <screen language="bash"><![CDATA[${DISTRO}
${EXTRA_ELEMENTS}
vm
cloud-init-datasources
${DISTRO}-guest
${DISTRO}-${SERVICE_TYPE}]]></screen>
          <para>When invoked to (for example) create a MySQL guest image on Ubuntu, we
                can expect that DISTRO would be ‘Ubuntu’ and <literal>SERVICE_TYPE</literal> would be
                MySQL. And therefore these would end up being the elements:</para>
          <screen language="bash"><![CDATA[ubuntu                        From diskimage-builder/elements/ubuntu
vm                            From diskimage-builder/elements/vm
cloud-init-datasources        From diskimage-builder/elements/cloud-init-datasources
ubuntu-guest                  From trove/integration/scripts/files/elements/ubuntu-guest
ubuntu-mysql                  From trove/integration/scripts/files/elements/ubuntu-mysql]]></screen>
        </section>
        <section xml:id="references">
          <title>References</title>
        </section>
      </section>
      <section xml:id="database-module-usage" xml:base="database_module_usage">
        <title>Create and use modules for a database</title>
        <para>To continue with this document, we recommend that you have installed
            the Database service and populated your data store with images for the
            type and versions of databases that you want, and that you can create
            and access a database.</para>
        <para>This example shows you how to create and apply modules to a MySQL 5.6
            database and redis 3.2.6 database cluster.</para>
        <section xml:id="create-and-apply-a-module-to-a-mysql-database">
          <title>Create and apply a module to a mysql database</title>
          <procedure>
            <step>
              <para>
                <emphasis role="bold">Create the module file and trove module</emphasis>
              </para>
              <para>If you wish to apply a module, you must create the module first
                        and register it with the trove service. A user can not directly
                        apply a module to a trove instance.</para>
              <para>The module created here is a demo module called ping. It is the
                        basic type made for testing purposes. To create it, it is as
                        simple as the following <command>echo</command> command:</para>
              <screen language="console"><![CDATA[$ echo "message=Module.V1" > ping1.dat]]></screen>
              <para>You can create a test module and mysql database with the module
                        applied by doing the following:</para>
              <screen language="console"><![CDATA[$ trove module-create mymod ping ping1.dat --live_update \
  --datastore mysql

+----------------------+--------------------------------------+
| Property             | Value                                |
+----------------------+--------------------------------------+
| apply_order          | 5                                    |
| auto_apply           | False                                |
| created              | 2017-06-02T17:06:21                  |
| datastore            | all                                  |
| datastore_id         | None                                 |
| datastore_version    | all                                  |
| datastore_version_id | None                                 |
| description          | None                                 |
| id                   | 0065a8ed-0668-4db5-a4ad-d88d0a166388 |
| instance_count       | 2                                    |
| is_admin             | True                                 |
| live_update          | True                                 |
| md5                  | 7f700cc7b99606615f8b51946f6d3228     |
| name                 | mymod                                |
| priority_apply       | False                                |
| tenant               | eac1e46e5f7840e39012aff46a92073a     |
| tenant_id            | eac1e46e5f7840e39012aff46a92073a     |
| type                 | ping                                 |
| updated              | 2017-06-02T17:06:21                  |
| visible              | True                                 |
+----------------------+--------------------------------------+

$ trove create myinst 15 --size 1 --module mymod --datastore mysql

+-------------------------+--------------------------------------+
| Property                | Value                                |
+-------------------------+--------------------------------------+
| created                 | 2017-06-02T17:22:24                  |
| datastore               | mysql                                |
| datastore_version       | 5.6                                  |
| encrypted_rpc_messaging | True                                 |
| flavor                  | 15                                   |
| id                      | 6221b30c-8292-4378-b624-c7e9b0f8ba9e |
| name                    | myinst                               |
| region                  | RegionOne                            |
| server_id               | None                                 |
| status                  | BUILD                                |
| tenant_id               | eac1e46e5f7840e39012aff46a92073a     |
| updated                 | 2017-06-02T17:22:24                  |
| volume                  | 1                                    |
| volume_id               | None                                 |
+-------------------------+--------------------------------------+]]></screen>
            </step>
          </procedure>
          <procedure>
            <step>
              <para>
                <emphasis role="bold">Show and list modules</emphasis>
              </para>
              <para>You can view the modules on your instance by doing the following:</para>
              <screen language="console"><![CDATA[$ trove module-query myinst

+-------+------+-----------+---------+--------+-----------+------------------------+------------------------+
| Name  | Type | Datastore | Version | Status | Message   | Created                | Updated                |
+-------+------+-----------+---------+--------+-----------+------------------------+------------------------+
| mymod | ping | all       | all     | OK     | Module.V1 | 2017-06-02 17:23:40.50 | 2017-06-02 17:23:40.50 |
+-------+------+-----------+---------+--------+-----------+------------------------+------------------------+]]></screen>
              <para>You can count the instances each module is applied to by doing the
                        following:</para>
              <screen language="console"><![CDATA[$ trove module-instance-count mymod

+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| Module Name | Min Updated Date    | Max Updated Date    | Module MD5                       | Current | Count |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| mymod       | 2017-06-02T17:22:25 | 2017-06-02T17:22:25 | 7f700cc7b99606615f8b51946f6d3228 |    True |     1 |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+]]></screen>
              <para>You can list the instances that have a particular module applied
                        by doing the following:</para>
              <screen language="console"><![CDATA[$ trove module-instances mymod

+--------------------------------------+--------+-----------+-------------------+--------+-----------+------+-----------+----------------------------------+
| ID                                   | Name   | Datastore | Datastore Version | Status | Flavor ID | Size | Region    | Tenant ID                        |
+--------------------------------------+--------+-----------+-------------------+--------+-----------+------+-----------+----------------------------------+
| 6221b30c-8292-4378-b624-c7e9b0f8ba9e | myinst | mysql     | 5.6               | ACTIVE | 15        |    1 | RegionOne | eac1e46e5f7840e39012aff46a92073a |
+--------------------------------------+--------+-----------+-------------------+--------+-----------+------+-----------+----------------------------------+]]></screen>
            </step>
          </procedure>
        </section>
        <section xml:id="updating-and-creating-a-second-module-for-a-redis-cluster">
          <title>Updating and creating a second module for a redis cluster</title>
          <para>To update a module you should have another file ready to update the
                module with:</para>
          <screen language="console"><![CDATA[$ echo "message=Module.V2" > ping2.dat
$ trove module-update mymod --file ping2.dat

+----------------------+--------------------------------------+
| Property             | Value                                |
+----------------------+--------------------------------------+
| apply_order          | 5                                    |
| auto_apply           | False                                |
| created              | 2017-06-02T17:06:21                  |
| datastore            | all                                  |
| datastore_id         | None                                 |
| datastore_version    | all                                  |
| datastore_version_id | None                                 |
| description          | None                                 |
| id                   | 0065a8ed-0668-4db5-a4ad-d88d0a166388 |
| is_admin             | True                                 |
| live_update          | True                                 |
| md5                  | ba7c204979c8de54be6efb70a17d40b9     |
| name                 | mymod                                |
| priority_apply       | False                                |
| tenant               | eac1e46e5f7840e39012aff46a92073a     |
| tenant_id            | eac1e46e5f7840e39012aff46a92073a     |
| type                 | ping                                 |
| updated              | 2017-06-02T17:56:12                  |
| visible              | True                                 |
+----------------------+--------------------------------------+]]></screen>
          <para>Now to show the usage with a redis cluster, create as follows:</para>
          <screen language="console"><![CDATA[$ trove cluster-create myclust redis 3.2.6 \
  --instance=flavor=15,volume=1,module=mymod \
  --instance=flavor=15,volume=1,module=mymod \
  --instance=flavor=15,volume=1,module=mymod

+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2017-06-02T18:00:17                  |
| datastore         | redis                                |
| datastore_version | 3.2.6                                |
| id                | e4d91ca6-5980-430c-94d0-bf7abc63f712 |
| instance_count    | 3                                    |
| name              | myclust                              |
| task_description  | Building the initial cluster.        |
| task_name         | BUILDING                             |
| updated           | 2017-06-02T18:00:17                  |
+-------------------+--------------------------------------+]]></screen>
          <para>The original <command>count</command> command will show the first instance,
                unless the <literal>--include_clustered</literal> option is used. You can see the
                MD5 from each applied module, and you know that the single instance
                one is not current.</para>
          <screen language="console"><![CDATA[$ trove module-instance-count mymod

+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| Module Name | Min Updated Date    | Max Updated Date    | Module MD5                       | Current | Count |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| mymod       | 2017-06-02T17:22:25 | 2017-06-02T17:22:25 | 7f700cc7b99606615f8b51946f6d3228 |   False |     1 |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+

$ trove module-instance-count mymod --include_clustered

+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| Module Name | Min Updated Date    | Max Updated Date    | Module MD5                       | Current | Count |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| mymod       | 2017-06-02T17:22:25 | 2017-06-02T17:22:25 | 7f700cc7b99606615f8b51946f6d3228 |   False |     1 |
| mymod       | 2017-06-02T18:00:18 | 2017-06-02T18:00:18 | ba7c204979c8de54be6efb70a17d40b9 |    True |     3 |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+]]></screen>
          <para>Update the module again. By doing this, it will cause the instances
                to report their module is not current.</para>
          <screen language="console"><![CDATA[$ echo "message=Module.V3" > ping3.dat
$ trove module-update mymod --file ping3.dat

+----------------------+--------------------------------------+
| Property             | Value                                |
+----------------------+--------------------------------------+
| apply_order          | 5                                    |
| auto_apply           | False                                |
| created              | 2017-06-02T17:06:21                  |
| datastore            | all                                  |
| datastore_id         | None                                 |
| datastore_version    | all                                  |
| datastore_version_id | None                                 |
| description          | None                                 |
| id                   | 0065a8ed-0668-4db5-a4ad-d88d0a166388 |
| is_admin             | True                                 |
| live_update          | True                                 |
| md5                  | 869744bdd18e306a96c145df562065ab     |
| name                 | mymod                                |
| priority_apply       | False                                |
| tenant               | eac1e46e5f7840e39012aff46a92073a     |
| tenant_id            | eac1e46e5f7840e39012aff46a92073a     |
| type                 | ping                                 |
| updated              | 2017-06-02T18:06:53                  |
| visible              | True                                 |
+----------------------+--------------------------------------+

$ trove module-instance-count mymod --include_clustered

+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| Module Name | Min Updated Date    | Max Updated Date    | Module MD5                       | Current | Count |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| mymod       | 2017-06-02T17:22:25 | 2017-06-02T17:22:25 | 7f700cc7b99606615f8b51946f6d3228 |   False |     1 |
| mymod       | 2017-06-02T18:00:18 | 2017-06-02T18:00:18 | ba7c204979c8de54be6efb70a17d40b9 |   False |     3 |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+]]></screen>
          <para>To update an instance in a cluster you can use the
                <command>trove module-apply</command> command:</para>
          <screen language="console"><![CDATA[$ trove cluster-instances myclust

+--------------------------------------+------------------+-----------+------+--------+
| ID                                   | Name             | Flavor ID | Size | Status |
+--------------------------------------+------------------+-----------+------+--------+
| 393462d5-906d-4214-af0d-538b7f618b2d | myclust-member-2 | 15        |    1 | ACTIVE |
| a3fc5326-e1b6-456a-a8b1-08ad6bbb2278 | myclust-member-3 | 15        |    1 | ACTIVE |
| cba31d4b-d038-42c2-ab03-56c6c176b49d | myclust-member-1 | 15        |    1 | ACTIVE |
+--------------------------------------+------------------+-----------+------+--------+

$ trove module-apply 393462d5-906d-4214-af0d-538b7f618b2d mymod

+-------+------+-----------+---------+--------+-----------+
| Name  | Type | Datastore | Version | Status | Message   |
+-------+------+-----------+---------+--------+-----------+
| mymod | ping | all       | all     | OK     | Module.V3 |
+-------+------+-----------+---------+--------+-----------+

$ trove module-instance-count mymod --include_clustered

+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| Module Name | Min Updated Date    | Max Updated Date    | Module MD5                       | Current | Count |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| mymod       | 2017-06-02T17:22:25 | 2017-06-02T17:22:25 | 7f700cc7b99606615f8b51946f6d3228 |   False |     1 |
| mymod       | 2017-06-02T18:00:18 | 2017-06-02T18:00:18 | ba7c204979c8de54be6efb70a17d40b9 |   False |     2 |
| mymod       | 2017-06-02T18:18:37 | 2017-06-02T18:18:37 | 869744bdd18e306a96c145df562065ab |    True |     1 |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+]]></screen>
          <para>For variety in this example, create one more instance and module:</para>
          <screen language="console"><![CDATA[$ trove create myinst_2 15 --size 1 --module mymod

+-------------------------+--------------------------------------+
| Property                | Value                                |
+-------------------------+--------------------------------------+
| created                 | 2017-06-02T18:21:56                  |
| datastore               | redis                                |
| datastore_version       | 3.2.6                                |
| encrypted_rpc_messaging | True                                 |
| flavor                  | 15                                   |
| id                      | cdd85d94-13a0-4d90-89eb-9c05523d2ac6 |
| name                    | myinst_2                             |
| region                  | RegionOne                            |
| server_id               | None                                 |
| status                  | BUILD                                |
| tenant_id               | eac1e46e5f7840e39012aff46a92073a     |
| updated                 | 2017-06-02T18:21:56                  |
| volume                  | 1                                    |
| volume_id               | None                                 |
+-------------------------+--------------------------------------+

$ echo "message=Module.V4" > ping4.dat
$ trove module-update mymod --file ping4.dat

+----------------------+--------------------------------------+
| Property             | Value                                |
+----------------------+--------------------------------------+
| apply_order          | 5                                    |
| auto_apply           | False                                |
| created              | 2017-06-02T17:06:21                  |
| datastore            | all                                  |
| datastore_id         | None                                 |
| datastore_version    | all                                  |
| datastore_version_id | None                                 |
| description          | None                                 |
| id                   | 0065a8ed-0668-4db5-a4ad-d88d0a166388 |
| is_admin             | True                                 |
| live_update          | True                                 |
| md5                  | 6e2c81c1547d640b4c6e7752ed0e33ab     |
| name                 | mymod                                |
| priority_apply       | False                                |
| tenant               | eac1e46e5f7840e39012aff46a92073a     |
| tenant_id            | eac1e46e5f7840e39012aff46a92073a     |
| type                 | ping                                 |
| updated              | 2017-06-02T18:26:22                  |
| visible              | True                                 |
+----------------------+--------------------------------------+]]></screen>
          <para>Now we have 2 single instances, and 3 cluster instances on various
                versions of the module, none current.</para>
          <screen language="console"><![CDATA[$ trove list

+--------------------------------------+----------+-----------+-------------------+--------+-----------+------+-----------+
| ID                                   | Name     | Datastore | Datastore Version | Status | Flavor ID | Size | Region    |
+--------------------------------------+----------+-----------+-------------------+--------+-----------+------+-----------+
| 6221b30c-8292-4378-b624-c7e9b0f8ba9e | myinst   | mysql     | 5.6               | ACTIVE | 15        |    1 | RegionOne |
| cdd85d94-13a0-4d90-89eb-9c05523d2ac6 | myinst_2 | redis     | 3.2.6             | ACTIVE | 15        |    1 | RegionOne |
+--------------------------------------+----------+-----------+-------------------+--------+-----------+------+-----------+

$ trove module-instance-count mymod --include_clustered

+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| Module Name | Min Updated Date    | Max Updated Date    | Module MD5                       | Current | Count |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| mymod       | 2017-06-02T17:22:25 | 2017-06-02T17:22:25 | 7f700cc7b99606615f8b51946f6d3228 |   False |     1 |
| mymod       | 2017-06-02T18:00:18 | 2017-06-02T18:00:18 | ba7c204979c8de54be6efb70a17d40b9 |   False |     2 |
| mymod       | 2017-06-02T18:18:37 | 2017-06-02T18:21:57 | 869744bdd18e306a96c145df562065ab |   False |     2 |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+]]></screen>
          <para>When the latest module was created, the <literal>--include_clustered</literal> was
                not used. Use the <command>trove module-reapply</command> command:</para>
          <screen language="console"><![CDATA[$ trove module-reapply mymod --md5=869744bdd18e306a96c145df562065ab --include_clustered
$ trove module-instance-count mymod --include_clustered

+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| Module Name | Min Updated Date    | Max Updated Date    | Module MD5                       | Current | Count |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| mymod       | 2017-06-02T17:22:25 | 2017-06-02T17:22:25 | 7f700cc7b99606615f8b51946f6d3228 |   False |     1 |
| mymod       | 2017-06-02T18:00:18 | 2017-06-02T18:00:18 | ba7c204979c8de54be6efb70a17d40b9 |   False |     2 |
| mymod       | 2017-06-02T18:38:48 | 2017-06-02T18:38:48 | 6e2c81c1547d640b4c6e7752ed0e33ab |    True |     2 |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+]]></screen>
          <para>Now they are both updated. If the <literal>--force</literal> flag is used, it can
                reapply to already applied instances. Notice that the only thing that
                changes is the minimum and maximum updated date fields.</para>
          <screen language="console"><![CDATA[$ trove module-reapply mymod --md5=6e2c81c1547d640b4c6e7752ed0e33ab --include_clustered --force
$ trove module-instance-count mymod --include_clustered

+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| Module Name | Min Updated Date    | Max Updated Date    | Module MD5                       | Current | Count |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| mymod       | 2017-06-02T17:22:25 | 2017-06-02T17:22:25 | 7f700cc7b99606615f8b51946f6d3228 |   False |     1 |
| mymod       | 2017-06-02T18:00:18 | 2017-06-02T18:00:18 | ba7c204979c8de54be6efb70a17d40b9 |   False |     2 |
| mymod       | 2017-06-02T18:40:45 | 2017-06-02T18:40:46 | 6e2c81c1547d640b4c6e7752ed0e33ab |    True |     2 |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+]]></screen>
          <para>To bring every instance to the current version, use some of the
                optional arguments to control how many instances are updated at the
                same time. This is useful to avoid potential network issues, if the
                module payload is large. Since we are not using the <literal>--force</literal> flag,
                the minimum updated date will not change.</para>
          <screen language="console"><![CDATA[$ trove module-reapply mymod --include_clustered --batch_size=1 --delay=3
$ trove module-instance-count mymod --include_clustered

+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| Module Name | Min Updated Date    | Max Updated Date    | Module MD5                       | Current | Count |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+
| mymod       | 2017-06-02T18:40:45 | 2017-06-02T18:44:10 | 6e2c81c1547d640b4c6e7752ed0e33ab |    True |     5 |
+-------------+---------------------+---------------------+----------------------------------+---------+-------+]]></screen>
        </section>
      </section>
      <section xml:id="guest-cloud-init" xml:base="guest_cloud_init">
        <title>Guest Images via Cloud-Init</title>
        <section>
          <title>Overview</title>
          <para>While creating an image is the preferred method for providing a base
                for the Guest Instance, there may be cases where creating an image
                is impractical. In those cases a Guest instance can be based on
                an available Cloud Image and configured at boot via cloud-init.</para>
          <para>Currently the most tested Guest image is Ubunutu 14.04 (trusty).</para>
        </section>
        <section xml:id="setting-up-the-image">
          <title>Setting up the Image</title>
          <itemizedlist>
            <listitem>
              <para>Visit the <link xlink:href="https://cloud-images.ubuntu.com/trusty/20160816">Ubuntu Cloud Archive</link> and download <literal>trusty-server-cloudimg-amd64-disk1.img</literal>.</para>
            </listitem>
            <listitem>
              <para>Upload that image to glance, and note the glance ID for the image.</para>
            </listitem>
            <listitem>
              <para>Cloud-Init files go into the directory set by the <literal>cloudinit_location</literal>
                        configuration parameter, usually <literal>/etc/trove/cloudinit</literal>. Files in
                        that directory are of the format <literal>[datastore].cloudinit</literal>, for
                        example <literal>mysql.cloudinit</literal>.</para>
            </listitem>
            <listitem>
              <para>Create a cloud-init file for your datastore and put it into place.
                        For this example, it is assumed you are using Ubuntu 14.04, with
                        the MySQL database and a Trove Agent from the Mitaka release. You
                        would put this into <literal>/etc/trove/cloudinit/mysql.cloudinit</literal>.</para>
            </listitem>
          </itemizedlist>
          <screen language="console"><![CDATA[#cloud-config
# For Ubuntu-14.04 cloudimage
apt_sources:
- source: "cloud-archive:mitaka"
packages:
- trove-guestagent
- mysql-server-5.5
write_files:
- path: /etc/sudoers.d/trove
  content: |
    Defaults:trove !requiretty
    trove ALL=(ALL) NOPASSWD:ALL
runcmd:
- stop trove-guestagent
- cat /etc/trove/trove-guestagent.conf /etc/trove/conf.d/guest_info.conf >/etc/trove/trove.conf
- start trove-guestagent]]></screen>
          <itemizedlist>
            <listitem>
              <para>If you need to debug guests failing to launch simply append
                        the <literal>cloud-init</literal> to add a user to allow you to login and
                        debug the instance.</para>
            </listitem>
            <listitem>
              <para>When using <literal>trove-manage datastore_version_update</literal> to
                        define your datastore simply use the Glance ID you have for
                        the Trusty Cloud image.</para>
            </listitem>
          </itemizedlist>
          <para>When trove launches the Guest Instance, the <literal>cloud-init</literal> will install
                the Mitaka Trove Guest Agent and MySQL database, and then adjust
                the configuration files and launch the Guest Agent.</para>
        </section>
      </section>
      <section xml:id="secure-rpc-messaging" xml:base="secure_oslo_messaging">
        <title>Secure RPC messaging</title>
        <section xml:id="background">
          <title>Background</title>
          <para>Trove uses <literal>oslo_messaging.rpc</literal> for communication amongst the various
                control plane components and the guest agents. For secure operation of
                the system, these RPC calls can be fully encrypted. A control plane
                encryption key is used for communications between the API service and
                the taskmanager, and system generated per-instance keys are used for
                communication between the control plane and guest instances.</para>
          <para>This document provides some useful tips on how to use this mechanism.</para>
        </section>
        <section xml:id="the-default-system-behavior">
          <title>The default system behavior</title>
          <para>By default, the system will attempt to encrypt all RPC
                communication. This behavior is controlled by the following
                configuration parameters:</para>
          <itemizedlist>
            <listitem>
              <para><literal>enable_secure_rpc_messaging</literal></para>
              <para>boolean that determines whether rpc messages will be secured by
                        encryption. The default value is True.</para>
            </listitem>
            <listitem>
              <para><literal>taskmanager_rpc_encr_key</literal></para>
              <para>the key used for encrypting messages sent to the taskmanager. A
                        default value is provided for this and it is important that
                        deployers change this.</para>
            </listitem>
            <listitem>
              <para><literal>inst_rpc_key_encr_key</literal></para>
              <para>the key used for encrypting the per-instance keys when they are
                        stored in the trove infrastructure database (catalog). A default is
                        provided for this and it is important that deployers change this.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section xml:id="interoperability-and-upgrade">
          <title>Interoperability and Upgrade</title>
          <para>Consider the system as shown below which runs a version of code prior
                to the introduciton of this <literal>oslo_messaging.rpc</literal> security. Observe, for
                example that the instances table in the system catalog does not
                include the per-instance encrypted key column:</para>
          <screen><![CDATA[mysql> describe instances;
+----------------------+--------------+------+-----+---------+-------+
| Field                | Type         | Null | Key | Default | Extra |
+----------------------+--------------+------+-----+---------+-------+
| id                   | varchar(36)  | NO   | PRI | NULL    |       |
| created              | datetime     | YES  |     | NULL    |       |
| updated              | datetime     | YES  |     | NULL    |       |
| name                 | varchar(255) | YES  |     | NULL    |       |
| hostname             | varchar(255) | YES  |     | NULL    |       |
| compute_instance_id  | varchar(36)  | YES  |     | NULL    |       |
| task_id              | int(11)      | YES  |     | NULL    |       |
| task_description     | varchar(255) | YES  |     | NULL    |       |
| task_start_time      | datetime     | YES  |     | NULL    |       |
| volume_id            | varchar(36)  | YES  |     | NULL    |       |
| flavor_id            | varchar(255) | YES  |     | NULL    |       |
| volume_size          | int(11)      | YES  |     | NULL    |       |
| tenant_id            | varchar(36)  | YES  | MUL | NULL    |       |
| server_status        | varchar(64)  | YES  |     | NULL    |       |
| deleted              | tinyint(1)   | YES  | MUL | NULL    |       |
| deleted_at           | datetime     | YES  |     | NULL    |       |
| datastore_version_id | varchar(36)  | NO   | MUL | NULL    |       |
| configuration_id     | varchar(36)  | YES  | MUL | NULL    |       |
| slave_of_id          | varchar(36)  | YES  | MUL | NULL    |       |
| cluster_id           | varchar(36)  | YES  | MUL | NULL    |       |
| shard_id             | varchar(36)  | YES  |     | NULL    |       |
| type                 | varchar(64)  | YES  |     | NULL    |       |
| region_id            | varchar(255) | YES  |     | NULL    |       |
+----------------------+--------------+------+-----+---------+-------+
23 rows in set (0.00 sec)]]></screen>
          <para>We launch an instance of MySQL using this version of the software:</para>
          <screen><![CDATA[USER:/opt/stack/trove/integration/scripts$ openstack network list
+--------------------------------------+-------------+--------------------------------------+
| ID                                   | Name        | Subnets                              |
+--------------------------------------+-------------+--------------------------------------+
[...]
| 4bab02e7-87bb-4cc0-8c07-2f282c777c85 | public      | e620c4f5-749c-4212-b1d1-4a6e2c0a3f16 |
[...]
+--------------------------------------+-------------+--------------------------------------+

USER:/opt/stack/trove/integration/scripts$ trove create m2 25 --size 3 --nic net-id=4bab02e7-87bb-4cc0-8c07-2f282c777c85
+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2017-01-09T18:17:13                  |
| datastore         | mysql                                |
| datastore_version | 5.6                                  |
| flavor            | 25                                   |
| id                | bb0c9213-31f8-4427-8898-c644254b3642 |
| name              | m2                                   |
| region            | RegionOne                            |
| server_id         | None                                 |
| status            | BUILD                                |
| updated           | 2017-01-09T18:17:13                  |
| volume            | 3                                    |
| volume_id         | None                                 |
+-------------------+--------------------------------------+

USER:/opt/stack/trove/integration/scripts$ nova list
+--------------------------------------+------+--------+------------+-------------+-------------------+
| ID                                   | Name | Status | Task State | Power State | Networks          |
+--------------------------------------+------+--------+------------+-------------+-------------------+
| a4769ce2-4e22-4134-b958-6db6c23cb221 | m2   | BUILD  | spawning   | NOSTATE     | public=172.24.4.4 |
+--------------------------------------+------+--------+------------+-------------+-------------------+]]></screen>
          <para>And on that machine, the configuration file looks like this:</para>
          <screen><![CDATA[amrith@m2:~$ cat /etc/trove/conf.d/guest_info.conf
[DEFAULT]
guest_id=bb0c9213-31f8-4427-8898-c644254b3642
datastore_manager=mysql
tenant_id=56cca8484d3e48869126ada4f355c284]]></screen>
          <para>The instance goes online:</para>
          <screen><![CDATA[USER:/opt/stack/trove/integration/scripts$ trove show m2
+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2017-01-09T18:17:13                  |
| datastore         | mysql                                |
| datastore_version | 5.6                                  |
| flavor            | 25                                   |
| id                | bb0c9213-31f8-4427-8898-c644254b3642 |
| name              | m2                                   |
| region            | RegionOne                            |
| server_id         | a4769ce2-4e22-4134-b958-6db6c23cb221 |
| status            | ACTIVE                               |
| updated           | 2017-01-09T18:17:17                  |
| volume            | 3                                    |
| volume_id         | 16e57e3f-b462-4db2-968b-3c284aa2751c |
| volume_used       | 0.11                                 |
+-------------------+--------------------------------------+]]></screen>
          <para>For testing later, we launch a few more instances:</para>
          <screen><![CDATA[USER:/opt/stack/trove/integration/scripts$ trove create m3 25 --size 3 --nic net-id=4bab02e7-87bb-4cc0-8c07-2f282c777c85
USER:/opt/stack/trove/integration/scripts$ trove create m4 25 --size 3 --nic net-id=4bab02e7-87bb-4cc0-8c07-2f282c777c85

USER:/opt/stack/trove/integration/scripts$ trove list
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+
| ID                                   | Name | Datastore | Datastore Version | Status | Flavor ID | Size | Region    |
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+
| 6d55ab3a-267f-4b95-8ada-33fc98fd1767 | m4   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| 9ceebd62-e13d-43c5-953a-c0f24f08757e | m3   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| bb0c9213-31f8-4427-8898-c644254b3642 | m2   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+]]></screen>
          <para>In this condition, we take down the control plane and upgrade the
                software running on it. This will result in a catalog upgrade. Since
                this system is based on devstack, here’s what that looks like:</para>
          <screen><![CDATA[USER:/opt/stack/trove$ git branch
* master
  review/amrith/bp/secure-oslo-messaging-messages
USER:/opt/stack/trove$ git checkout review/amrith/bp/secure-oslo-messaging-messages
Switched to branch 'review/amrith/bp/secure-oslo-messaging-messages'
Your branch is ahead of 'gerrit/master' by 1 commit.
  (use "git push" to publish your local commits)
USER:/opt/stack/trove$ find . -name '*.pyc' -delete
USER:/opt/stack/trove$

USER:/opt/stack/trove$ trove-manage db_sync
[...]
2017-01-09 13:24:25.251 DEBUG migrate.versioning.repository [-] Config: OrderedDict([('db_settings', OrderedDict([('__name__', 'db_settings'), ('repository_id', 'Trove Migrations'), ('version_table', 'migrate_version'), ('required_dbs', "['mysql','postgres','sqlite']")]))]) from (pid=96180) __init__ /usr/local/lib/python2.7/dist-packages/migrate/versioning/repository.py:83
2017-01-09 13:24:25.260 INFO migrate.versioning.api [-] 40 -> 41...
2017-01-09 13:24:25.328 INFO migrate.versioning.api [-] done
2017-01-09 13:24:25.329 DEBUG migrate.versioning.util [-] Disposing SQLAlchemy engine Engine(mysql+pymysql://root:***@127.0.0.1/trove?charset=utf8) from (pid=96180) with_engine /usr/local/lib/python2.7/dist-packages/migrate/versioning/util/__init__.py:163
[...]]]></screen>
          <para>We observe that the new table in the system has the <literal>encrypted_key</literal> column:</para>
          <screen><![CDATA[mysql> describe instances;
+----------------------+--------------+------+-----+---------+-------+
| Field                | Type         | Null | Key | Default | Extra |
+----------------------+--------------+------+-----+---------+-------+
| id                   | varchar(36)  | NO   | PRI | NULL    |       |
| created              | datetime     | YES  |     | NULL    |       |
| updated              | datetime     | YES  |     | NULL    |       |
| name                 | varchar(255) | YES  |     | NULL    |       |
| hostname             | varchar(255) | YES  |     | NULL    |       |
| compute_instance_id  | varchar(36)  | YES  |     | NULL    |       |
| task_id              | int(11)      | YES  |     | NULL    |       |
| task_description     | varchar(255) | YES  |     | NULL    |       |
| task_start_time      | datetime     | YES  |     | NULL    |       |
| volume_id            | varchar(36)  | YES  |     | NULL    |       |
| flavor_id            | varchar(255) | YES  |     | NULL    |       |
| volume_size          | int(11)      | YES  |     | NULL    |       |
| tenant_id            | varchar(36)  | YES  | MUL | NULL    |       |
| server_status        | varchar(64)  | YES  |     | NULL    |       |
| deleted              | tinyint(1)   | YES  | MUL | NULL    |       |
| deleted_at           | datetime     | YES  |     | NULL    |       |
| datastore_version_id | varchar(36)  | NO   | MUL | NULL    |       |
| configuration_id     | varchar(36)  | YES  | MUL | NULL    |       |
| slave_of_id          | varchar(36)  | YES  | MUL | NULL    |       |
| cluster_id           | varchar(36)  | YES  | MUL | NULL    |       |
| shard_id             | varchar(36)  | YES  |     | NULL    |       |
| type                 | varchar(64)  | YES  |     | NULL    |       |
| region_id            | varchar(255) | YES  |     | NULL    |       |
| encrypted_key        | varchar(255) | YES  |     | NULL    |       |
+----------------------+--------------+------+-----+---------+-------+


mysql> select id, encrypted_key from instances;
+--------------------------------------+---------------+
| id                                   | encrypted_key |
+--------------------------------------+---------------+
| 13a787f2-b699-4867-a727-b3f4d8040a12 | NULL          |
+--------------------------------------+---------------+
1 row in set (0.00 sec)

USER:/opt/stack/trove$ sudo python setup.py install -f
[...]]]></screen>
          <para>We can now relaunch the control plane software but before we do that,
                we inspect the configuration parameters and disable secure RPC
                messaging by adding this line into the configuration files:</para>
          <screen><![CDATA[USER:/etc/trove$ grep enable_secure_rpc_messaging *.conf
trove-conductor.conf:enable_secure_rpc_messaging = False
trove.conf:enable_secure_rpc_messaging = False
trove-taskmanager.conf:enable_secure_rpc_messaging = False]]></screen>
          <para>The first thing we observe is that heartbeat messages from the
                existing instance are still properly handled by the conductor and the
                instance remains active:</para>
          <screen><![CDATA[2017-01-09 13:26:57.742 DEBUG oslo_messaging._drivers.amqpdriver [-] received message with unique_id: eafe22c08bae485e9346ce0fbdaa4d6c from (pid=96551) __call__ /usr/local/lib/python2.7/dist-packages/oslo_messaging/_drivers/amqpdriver.py:196
2017-01-09 13:26:57.744 DEBUG trove.conductor.manager [-] Instance ID: bb0c9213-31f8-4427-8898-c644254b3642, Payload: {u'service_status': u'running'} from (pid=96551) heartbeat /opt/stack/trove/trove/conductor/manager.py:88
2017-01-09 13:26:57.748 DEBUG trove.conductor.manager [-] Instance bb0c9213-31f8-4427-8898-c644254b3642 sent heartbeat at 1483986416.52  from (pid=96551) _message_too_old /opt/stack/trove/trove/conductor/manager.py:54
2017-01-09 13:26:57.750 DEBUG trove.conductor.manager [-] [Instance bb0c9213-31f8-4427-8898-c644254b3642] Rec'd message is younger than last seen. Updating. from (pid=96551) _message_too_old /opt/stack/trove/trove/conductor/manager.py:76
2017-01-09 13:27:01.197 DEBUG oslo_messaging._drivers.amqpdriver [-] received message with unique_id: df62b76523004338876bc7b08f8b7711 from (pid=96552) __call__ /usr/local/lib/python2.7/dist-packages/oslo_messaging/_drivers/amqpdriver.py:196
2017-01-09 13:27:01.200 DEBUG trove.conductor.manager [-] Instance ID: 9ceebd62-e13d-43c5-953a-c0f24f08757e, Payload: {u'service_status': u'running'} from (pid=96552) heartbeat /opt/stack/trove/trove/conductor/manager.py:88
2017-01-09 13:27:01.219 DEBUG oslo_db.sqlalchemy.engines [-] Parent process 96542 forked (96552) with an open database connection, which is being discarded and recreated. from (pid=96552) checkout /usr/local/lib/python2.7/dist-packages/oslo_db/sqlalchemy/engines.py:362
2017-01-09 13:27:01.225 DEBUG trove.conductor.manager [-] Instance 9ceebd62-e13d-43c5-953a-c0f24f08757e sent heartbeat at 1483986419.99  from (pid=96552) _message_too_old /opt/stack/trove/trove/conductor/manager.py:54
2017-01-09 13:27:01.231 DEBUG trove.conductor.manager [-] [Instance 9ceebd62-e13d-43c5-953a-c0f24f08757e] Rec'd message is younger than last seen. Updating. from (pid=96552) _message_too_old /opt/stack/trove/trove/conductor/manager.py:76

USER:/etc/trove$ trove list
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+
| ID                                   | Name | Datastore | Datastore Version | Status | Flavor ID | Size | Region    |
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+
| 6d55ab3a-267f-4b95-8ada-33fc98fd1767 | m4   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| 9ceebd62-e13d-43c5-953a-c0f24f08757e | m3   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| bb0c9213-31f8-4427-8898-c644254b3642 | m2   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+

USER:/etc/trove$ trove show m2
+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2017-01-09T18:17:13                  |
| datastore         | mysql                                |
| datastore_version | 5.6                                  |
| flavor            | 25                                   |
| id                | bb0c9213-31f8-4427-8898-c644254b3642 |
| name              | m2                                   |
| region            | RegionOne                            |
| server_id         | a4769ce2-4e22-4134-b958-6db6c23cb221 |
| status            | ACTIVE                               |
| updated           | 2017-01-09T18:17:17                  |
| volume            | 3                                    |
| volume_id         | 16e57e3f-b462-4db2-968b-3c284aa2751c |
| volume_used       | 0.11                                 |
+-------------------+--------------------------------------+]]></screen>
          <para>We now launch a new instance, recall that <literal>secure_rpc_messaging</literal> is
                disabled:</para>
          <screen><![CDATA[USER:/etc/trove$ trove create m10 25 --size 3 --nic net-id=4bab02e7-87bb-4cc0-8c07-2f282c777c85
+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2017-01-09T18:28:56                  |
| datastore         | mysql                                |
| datastore_version | 5.6                                  |
| flavor            | 25                                   |
| id                | 514ef051-0bf7-48a5-adcf-071d4a6625fb |
| name              | m10                                  |
| region            | RegionOne                            |
| server_id         | None                                 |
| status            | BUILD                                |
| updated           | 2017-01-09T18:28:56                  |
| volume            | 3                                    |
| volume_id         | None                                 |
+-------------------+--------------------------------------+]]></screen>
          <para>Observe that the task manager does not create a password for the instance:</para>
          <screen><![CDATA[2017-01-09 13:29:00.111 INFO trove.instance.models [-] Resetting task status to NONE on instance 514ef051-0bf7-48a5-adcf-071d4a6625fb.
2017-01-09 13:29:00.115 DEBUG trove.db.models [-] Saving DBInstance: {u'region_id': u'RegionOne', u'cluster_id': None, u'shard_id': None, u'deleted_at': None, u'id': u'514ef051-0bf7-48a5-adcf-071d4a6625fb', u'datastore_version_id': u'4a881cb5-9e48-4cb2-a209-4283ed44eb01', 'errors': {}, u'hostname': None, u'server_status': None, u'task_description': u'No tasks for the instance.', u'volume_size': 3, u'type': None, u'updated': datetime.datetime(2017, 1, 9, 18, 29, 0, 114971), '_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x7f460dbca410>, u'encrypted_key': None, u'deleted': 0, u'configuration_id': None, u'volume_id': u'cee2e17b-80fa-48e5-a488-da8b7809373a', u'slave_of_id': None, u'task_start_time': None, u'name': u'm10', u'task_id': 1, u'created': datetime.datetime(2017, 1, 9, 18, 28, 56), u'tenant_id': u'56cca8484d3e48869126ada4f355c284', u'compute_instance_id': u'2452263e-3d33-48ec-8f24-2851fe74db28', u'flavor_id': u'25'} from (pid=96635) save /opt/stack/trove/trove/db/models.py:64]]></screen>
          <para>The configuration file for this instance is:</para>
          <screen><![CDATA[amrith@m10:~$ cat /etc/trove/conf.d/guest_info.conf
[DEFAULT]
guest_id=514ef051-0bf7-48a5-adcf-071d4a6625fb
datastore_manager=mysql
tenant_id=56cca8484d3e48869126ada4f355c284]]></screen>
          <para>We can now shutdown the control plane again and enable the secure RPC
                capability. Observe that we’ve just commented out the lines (below):</para>
          <screen><![CDATA[trove-conductor.conf:# enable_secure_rpc_messaging = False
trove.conf:# enable_secure_rpc_messaging = False
trove-taskmanager.conf:# enable_secure_rpc_messaging = False]]></screen>
          <para>And create another database instance:</para>
          <screen><![CDATA[USER:/etc/trove$ trove create m20 25 --size 3 --nic net-id=4bab02e7-87bb-4cc0-8c07-2f282c777c85
+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2017-01-09T18:31:48                  |
| datastore         | mysql                                |
| datastore_version | 5.6                                  |
| flavor            | 25                                   |
| id                | 792fa220-2a40-4831-85af-cfb0ded8033c |
| name              | m20                                  |
| region            | RegionOne                            |
| server_id         | None                                 |
| status            | BUILD                                |
| updated           | 2017-01-09T18:31:48                  |
| volume            | 3                                    |
| volume_id         | None                                 |
+-------------------+--------------------------------------+]]></screen>
          <para>Observe that a unique per-instance encryption key was created for this
                instance:</para>
          <screen><![CDATA[2017-01-09 13:31:52.474 DEBUG trove.db.models [-] Saving DBInstance: {u'region_id': u'RegionOne', u'cluster_id': None, u'shard_id': None, u'deleted_at': None, u'id': u'792fa220-2a40-4831-85af-cfb0ded8033c', u'datastore_version_id': u'4a881cb5-9e48-4cb2-a209-4283ed44eb01', 'errors': {}, u'hostname': None, u'server_status': None, u'task_description': u'No tasks for the instance.', u'volume_size': 3, u'type': None, u'updated': datetime.datetime(2017, 1, 9, 18, 31, 52, 473552), '_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x7fdb14d44550>, u'encrypted_key': u'fVpHrkUIjVsXe7Fj7Lm4u2xnJUsWX2rMC9GL0AppILJINBZxLvkowY8FOa+asKS+8pWb4iNyukQQ4AQoLEUHUQ==', u'deleted': 0, u'configuration_id': None, u'volume_id': u'4cd563dc-fe08-477b-828f-120facf4351b', u'slave_of_id': None, u'task_start_time': None, u'name': u'm20', u'task_id': 1, u'created': datetime.datetime(2017, 1, 9, 18, 31, 49), u'tenant_id': u'56cca8484d3e48869126ada4f355c284', u'compute_instance_id': u'1e62a192-83d3-43fd-b32e-b5ee2fa4e24b', u'flavor_id': u'25'} from (pid=97562) save /opt/stack/trove/trove/db/models.py:64]]></screen>
          <para>And the configuration file on that instance includes an encryption key:</para>
          <screen><![CDATA[USER:~$ cat /etc/trove/conf.d/guest_info.conf
[DEFAULT]
guest_id=792fa220-2a40-4831-85af-cfb0ded8033c
datastore_manager=mysql
tenant_id=56cca8484d3e48869126ada4f355c284
instance_rpc_encr_key=eRz43LwE6eaxIbBlA2pNukzPjSdcQkVi

USER:/etc/trove$ trove list
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+
| ID                                   | Name | Datastore | Datastore Version | Status | Flavor ID | Size | Region    |
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+
| 514ef051-0bf7-48a5-adcf-071d4a6625fb | m10  | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| 6d55ab3a-267f-4b95-8ada-33fc98fd1767 | m4   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| 792fa220-2a40-4831-85af-cfb0ded8033c | m20  | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| 9ceebd62-e13d-43c5-953a-c0f24f08757e | m3   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| bb0c9213-31f8-4427-8898-c644254b3642 | m2   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+]]></screen>
          <para>At this point communication between API service and Task Manager, and
                between the control plane and instance m20 is encrypted but
                communication between control plane and all other instances is not
                encrypted.</para>
          <para>In this condition we can attempt some operations on the various
                instances. First with the legacy instances created on software that
                predated the secure RPC mechanism:</para>
          <screen><![CDATA[USER:/etc/trove$ trove database-list m2
+------+
| Name |
+------+
+------+
USER:/etc/trove$ trove database-create m2 foo2
USER:/etc/trove$ trove database-list m2
+------+
| Name |
+------+
| foo2 |
+------+]]></screen>
          <para>And at the same time with the instance m10 which is created with the
                current software but without RPC encryption:</para>
          <screen><![CDATA[USER:/etc/trove$ trove database-list m10
+------+
| Name |
+------+
+------+
USER:/etc/trove$ trove database-create m10 foo10
USER:/etc/trove$ trove database-list m10
+-------+
| Name  |
+-------+
| foo10 |
+-------+
USER:/etc/trove$]]></screen>
          <para>And finally with an instance that uses encrypted RPC communications:</para>
          <screen><![CDATA[USER:/etc/trove$ trove database-list m20
+------+
| Name |
+------+
+------+
USER:/etc/trove$ trove database-create m20 foo20
USER:/etc/trove$ trove database-list m20
+-------+
| Name  |
+-------+
| foo20 |
+-------+]]></screen>
          <para>Finally, we can upgrade an instance that has no encryption to have rpc
                encryption:</para>
          <screen><![CDATA[USER:/etc/trove$ trove datastore-list
+--------------------------------------+------------------+
| ID                                   | Name             |
+--------------------------------------+------------------+
| 8e052edb-5f14-4aec-9149-0a80a30cf5e4 | mysql            |
+--------------------------------------+------------------+
USER:/etc/trove$ trove datastore-version-list mysql
+--------------------------------------+------------------+
| ID                                   | Name             |
+--------------------------------------+------------------+
| 4a881cb5-9e48-4cb2-a209-4283ed44eb01 | 5.6              |
+--------------------------------------+------------------+]]></screen>
          <para>Let’s look at instance m2:</para>
          <screen><![CDATA[mysql> select id, name, encrypted_key from instances where id = 'bb0c9213-31f8-4427-8898-c644254b3642';
+--------------------------------------+------+---------------+
| id                                   | name | encrypted_key |
+--------------------------------------+------+---------------+
| bb0c9213-31f8-4427-8898-c644254b3642 | m2   | NULL          |
+--------------------------------------+------+---------------+
1 row in set (0.00 sec)

USER:/etc/trove$ trove upgrade m2 4a881cb5-9e48-4cb2-a209-4283ed44eb01

USER:/etc/trove$ trove list
+--------------------------------------+------+-----------+-------------------+---------+-----------+------+-----------+
| ID                                   | Name | Datastore | Datastore Version | Status  | Flavor ID | Size | Region    |
+--------------------------------------+------+-----------+-------------------+---------+-----------+------+-----------+
| 514ef051-0bf7-48a5-adcf-071d4a6625fb | m10  | mysql     | 5.6               | ACTIVE  | 25        |    3 | RegionOne |
| 6d55ab3a-267f-4b95-8ada-33fc98fd1767 | m4   | mysql     | 5.6               | ACTIVE  | 25        |    3 | RegionOne |
| 792fa220-2a40-4831-85af-cfb0ded8033c | m20  | mysql     | 5.6               | ACTIVE  | 25        |    3 | RegionOne |
| 9ceebd62-e13d-43c5-953a-c0f24f08757e | m3   | mysql     | 5.6               | ACTIVE  | 25        |    3 | RegionOne |
| bb0c9213-31f8-4427-8898-c644254b3642 | m2   | mysql     | 5.6               | UPGRADE | 25        |    3 | RegionOne |
+--------------------------------------+------+-----------+-------------------+---------+-----------+------+-----------+

USER:/etc/trove$ nova list
+--------------------------------------+------+---------+------------+-------------+--------------------+
| ID                                   | Name | Status  | Task State | Power State | Networks           |
+--------------------------------------+------+---------+------------+-------------+--------------------+
[...]
| a4769ce2-4e22-4134-b958-6db6c23cb221 | m2   | REBUILD | rebuilding | Running     | public=172.24.4.4  |
[...]
+--------------------------------------+------+---------+------------+-------------+--------------------+


2017-01-09 13:47:24.337 DEBUG trove.db.models [-] Saving DBInstance: {u'region_id': u'RegionOne', u'cluster_id': None, u'shard_id': None, u'deleted_at': None, u'id': u'bb0c9213-31f8-4427-8898-c644254b3642', u'datastore_version_id': u'4a881cb5-9e48-4cb2-a209-4283ed44eb01', 'errors': {}, u'hostname': None, u'server_status': None, u'task_description': u'Upgrading the instance.', u'volume_size': 3, u'type': None, u'updated': datetime.datetime(2017, 1, 9, 18, 47, 24, 337400), '_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x7fdb14d44150>, u'encrypted_key': u'gMrlHkEVxKgEFMTabzZr2TLJ6r5+wgfJfhohs7K/BzutWxs1wXfBswyV5Bgw4qeD212msmgSdOUCFov5otgzyg==', u'deleted': 0, u'configuration_id': None, u'volume_id': u'16e57e3f-b462-4db2-968b-3c284aa2751c', u'slave_of_id': None, u'task_start_time': None, u'name': u'm2', u'task_id': 89, u'created': datetime.datetime(2017, 1, 9, 18, 17, 13), u'tenant_id': u'56cca8484d3e48869126ada4f355c284', u'compute_instance_id': u'a4769ce2-4e22-4134-b958-6db6c23cb221', u'flavor_id': u'25'} from (pid=97562) save /opt/stack/trove/trove/db/models.py:64
2017-01-09 13:47:24.347 DEBUG trove.taskmanager.models [-] Generated unique RPC encryption key for instance = bb0c9213-31f8-4427-8898-c644254b3642, key = gMrlHkEVxKgEFMTabzZr2TLJ6r5+wgfJfhohs7K/BzutWxs1wXfBswyV5Bgw4qeD212msmgSdOUCFov5otgzyg== from (pid=97562) upgrade /opt/stack/trove/trove/taskmanager/models.py:1440
2017-01-09 13:47:24.350 DEBUG trove.taskmanager.models [-] Rebuilding instance m2(bb0c9213-31f8-4427-8898-c644254b3642) with image ea05cba7-2f70-4745-abea-136d7bcc16c7. from (pid=97562) upgrade /opt/stack/trove/trove/taskmanager/models.py:1445]]></screen>
          <para>The instance now has an encryption key in its configuration:</para>
          <screen><![CDATA[amrith@m2:~$ cat /etc/trove/conf.d/guest_info.conf
[DEFAULT]
guest_id=bb0c9213-31f8-4427-8898-c644254b3642
datastore_manager=mysql
tenant_id=56cca8484d3e48869126ada4f355c284
instance_rpc_encr_key=pN2hHEl171ngyD0mPvyV1xKJF2im01Gv

USER:/etc/trove$ trove list
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+
| ID                                   | Name | Datastore | Datastore Version | Status | Flavor ID | Size | Region    |
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+
[...]
| bb0c9213-31f8-4427-8898-c644254b3642 | m2   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
[...]
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+

USER:/etc/trove$ trove show m2
+-------------------+--------------------------------------+
| Property          | Value                                |
+-------------------+--------------------------------------+
| created           | 2017-01-09T18:17:13                  |
| datastore         | mysql                                |
| datastore_version | 5.6                                  |
| flavor            | 25                                   |
| id                | bb0c9213-31f8-4427-8898-c644254b3642 |
| name              | m2                                   |
| region            | RegionOne                            |
| server_id         | a4769ce2-4e22-4134-b958-6db6c23cb221 |
| status            | ACTIVE                               |
| updated           | 2017-01-09T18:50:07                  |
| volume            | 3                                    |
| volume_id         | 16e57e3f-b462-4db2-968b-3c284aa2751c |
| volume_used       | 0.13                                 |
+-------------------+--------------------------------------+

USER:/etc/trove$ trove database-list m2
+------+
| Name |
+------+
| foo2 |
+------+]]></screen>
          <para>We can similarly upgrade m4:</para>
          <screen><![CDATA[2017-01-09 13:51:43.078 DEBUG trove.instance.models [-] Instance 6d55ab3a-267f-4b95-8ada-33fc98fd1767 service status is running. from (pid=97562) load_instance /opt/stack/trove/trove/instance/models.py:534
2017-01-09 13:51:43.083 DEBUG trove.taskmanager.models [-] Upgrading instance m4(6d55ab3a-267f-4b95-8ada-33fc98fd1767) to new datastore version 5.6(4a881cb5-9e48-4cb2-a209-4283ed44eb01) from (pid=97562) upgrade /opt/stack/trove/trove/taskmanager/models.py:1410
2017-01-09 13:51:43.087 DEBUG trove.guestagent.api [-] Sending the call to prepare the guest for upgrade. from (pid=97562) pre_upgrade /opt/stack/trove/trove/guestagent/api.py:351
2017-01-09 13:51:43.087 DEBUG trove.guestagent.api [-] Calling pre_upgrade with timeout 600 from (pid=97562) _call /opt/stack/trove/trove/guestagent/api.py:86
2017-01-09 13:51:43.088 DEBUG oslo_messaging._drivers.amqpdriver [-] CALL msg_id: 41dbb7fff3dc4f8fa69d8b5f219809e0 exchange 'trove' topic 'guestagent.6d55ab3a-267f-4b95-8ada-33fc98fd1767' from (pid=97562) _send /usr/local/lib/python2.7/dist-packages/oslo_messaging/_drivers/amqpdriver.py:442
2017-01-09 13:51:45.452 DEBUG oslo_messaging._drivers.amqpdriver [-] received reply msg_id: 41dbb7fff3dc4f8fa69d8b5f219809e0 from (pid=97562) __call__ /usr/local/lib/python2.7/dist-packages/oslo_messaging/_drivers/amqpdriver.py:299
2017-01-09 13:51:45.452 DEBUG trove.guestagent.api [-] Result is {u'mount_point': u'/var/lib/mysql', u'save_etc_dir': u'/var/lib/mysql/etc', u'home_save': u'/var/lib/mysql/trove_user', u'save_dir': u'/var/lib/mysql/etc_mysql'}. from (pid=97562) _call /opt/stack/trove/trove/guestagent/api.py:91
2017-01-09 13:51:45.544 DEBUG trove.db.models [-] Saving DBInstance: {u'region_id': u'RegionOne', u'cluster_id': None, u'shard_id': None, u'deleted_at': None, u'id': u'6d55ab3a-267f-4b95-8ada-33fc98fd1767', u'datastore_version_id': u'4a881cb5-9e48-4cb2-a209-4283ed44eb01', 'errors': {}, u'hostname': None, u'server_status': None, u'task_description': u'Upgrading the instance.', u'volume_size': 3, u'type': None, u'updated': datetime.datetime(2017, 1, 9, 18, 51, 45, 544496), '_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x7fdb14972c10>, u'encrypted_key': u'0gBkJl5Aqb4kFIPeJDMTNIymEUuUUB8NBksecTiYyQl+Ibrfi7ME8Bi58q2n61AxbG2coOqp97ETjHRyN7mYTg==', u'deleted': 0, u'configuration_id': None, u'volume_id': u'b7dc17b5-d0a8-47bb-aef4-ef9432c269e9', u'slave_of_id': None, u'task_start_time': None, u'name': u'm4', u'task_id': 89, u'created': datetime.datetime(2017, 1, 9, 18, 20, 58), u'tenant_id': u'56cca8484d3e48869126ada4f355c284', u'compute_instance_id': u'f43bba63-3be6-4993-b2d0-4ddfb7818d27', u'flavor_id': u'25'} from (pid=97562) save /opt/stack/trove/trove/db/models.py:64
2017-01-09 13:51:45.557 DEBUG trove.taskmanager.models [-] Generated unique RPC encryption key for instance = 6d55ab3a-267f-4b95-8ada-33fc98fd1767, key = 0gBkJl5Aqb4kFIPeJDMTNIymEUuUUB8NBksecTiYyQl+Ibrfi7ME8Bi58q2n61AxbG2coOqp97ETjHRyN7mYTg== from (pid=97562) upgrade /opt/stack/trove/trove/taskmanager/models.py:1440
2017-01-09 13:51:45.560 DEBUG trove.taskmanager.models [-] Rebuilding instance m4(6d55ab3a-267f-4b95-8ada-33fc98fd1767) with image ea05cba7-2f70-4745-abea-136d7bcc16c7. from (pid=97562) upgrade /opt/stack/trove/trove/taskmanager/models.py:1445

USER:/etc/trove$ nova list
+--------------------------------------+------+---------+------------+-------------+--------------------+
| ID                                   | Name | Status  | Task State | Power State | Networks           |
+--------------------------------------+------+---------+------------+-------------+--------------------+
[...]
| f43bba63-3be6-4993-b2d0-4ddfb7818d27 | m4   | REBUILD | rebuilding | Running     | public=172.24.4.11 |
[...]
+--------------------------------------+------+---------+------------+-------------+--------------------+

2017-01-09 13:53:26.581 DEBUG trove.guestagent.api [-] Recover the guest after upgrading the guest's image. from (pid=97562) post_upgrade /opt/stack/trove/trove/guestagent/api.py:359
2017-01-09 13:53:26.581 DEBUG trove.guestagent.api [-] Recycling the client ... from (pid=97562) post_upgrade /opt/stack/trove/trove/guestagent/api.py:361
2017-01-09 13:53:26.581 DEBUG trove.guestagent.api [-] Calling post_upgrade with timeout 600 from (pid=97562) _call /opt/stack/trove/trove/guestagent/api.py:86
2017-01-09 13:53:26.583 DEBUG oslo_messaging._drivers.amqpdriver [-] CALL msg_id: 2e9ccc88715b4b98848a017e19b2938d exchange 'trove' topic 'guestagent.6d55ab3a-267f-4b95-8ada-33fc98fd1767' from (pid=97562) _send /usr/local/lib/python2.7/dist-packages/oslo_messaging/_drivers/amqpdriver.py:442

mysql> select id, name, encrypted_key from instances where name in ('m2', 'm4', 'm10', 'm20');
+--------------------------------------+------+------------------------------------------------------------------------------------------+
| id                                   | name | encrypted_key                                                                            |
+--------------------------------------+------+------------------------------------------------------------------------------------------+
| 514ef051-0bf7-48a5-adcf-071d4a6625fb | m10  | NULL                                                                                     |
| 6d55ab3a-267f-4b95-8ada-33fc98fd1767 | m4   | 0gBkJl5Aqb4kFIPeJDMTNIymEUuUUB8NBksecTiYyQl+Ibrfi7ME8Bi58q2n61AxbG2coOqp97ETjHRyN7mYTg== |
| 792fa220-2a40-4831-85af-cfb0ded8033c | m20  | fVpHrkUIjVsXe7Fj7Lm4u2xnJUsWX2rMC9GL0AppILJINBZxLvkowY8FOa+asKS+8pWb4iNyukQQ4AQoLEUHUQ== |
| bb0c9213-31f8-4427-8898-c644254b3642 | m2   | gMrlHkEVxKgEFMTabzZr2TLJ6r5+wgfJfhohs7K/BzutWxs1wXfBswyV5Bgw4qeD212msmgSdOUCFov5otgzyg== |
+--------------------------------------+------+------------------------------------------------------------------------------------------+

USER:/etc/trove$ trove list
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+
| ID                                   | Name | Datastore | Datastore Version | Status | Flavor ID | Size | Region    |
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+
| 514ef051-0bf7-48a5-adcf-071d4a6625fb | m10  | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| 6d55ab3a-267f-4b95-8ada-33fc98fd1767 | m4   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| 792fa220-2a40-4831-85af-cfb0ded8033c | m20  | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
| bb0c9213-31f8-4427-8898-c644254b3642 | m2   | mysql     | 5.6               | ACTIVE | 25        |    3 | RegionOne |
+--------------------------------------+------+-----------+-------------------+--------+-----------+------+-----------+]]></screen>
        </section>
        <section xml:id="inspecting-which-instances-are-using-secure-rpc-communications">
          <title>Inspecting which instances are using secure RPC communications</title>
          <para>An additional field is returned in the trove show command output to
                indicate whether any given instance is using secure RPC communication
                or not.</para>
          <note>
            <para>This field is only returned if the user is an admin. Non admin
                    users do not see the field.</para>
          </note>
          <screen><![CDATA[USER:/opt/stack/trove$ trove show m20
+-------------------------+--------------------------------------+
| Property                | Value                                |
+-------------------------+--------------------------------------+
| created                 | 2017-01-09T18:31:49                  |
| datastore               | mysql                                |
| datastore_version       | 5.6                                  |
| encrypted_rpc_messaging | True                                 |
| flavor                  | 25                                   |
| id                      | 792fa220-2a40-4831-85af-cfb0ded8033c |
| name                    | m20                                  |
| region                  | RegionOne                            |
| server_id               | 1e62a192-83d3-43fd-b32e-b5ee2fa4e24b |
| status                  | ACTIVE                               |
| updated                 | 2017-01-09T18:31:52                  |
| volume                  | 3                                    |
| volume_id               | 4cd563dc-fe08-477b-828f-120facf4351b |
| volume_used             | 0.11                                 |
+-------------------------+--------------------------------------+
USER:/opt/stack/trove$ trove show m10
+-------------------------+--------------------------------------+
| Property                | Value                                |
+-------------------------+--------------------------------------+
| created                 | 2017-01-09T18:28:56                  |
| datastore               | mysql                                |
| datastore_version       | 5.6                                  |
| encrypted_rpc_messaging | False                                |
| flavor                  | 25                                   |
| id                      | 514ef051-0bf7-48a5-adcf-071d4a6625fb |
| name                    | m10                                  |
| region                  | RegionOne                            |
| server_id               | 2452263e-3d33-48ec-8f24-2851fe74db28 |
| status                  | ACTIVE                               |
| updated                 | 2017-01-09T18:29:00                  |
| volume                  | 3                                    |
| volume_id               | cee2e17b-80fa-48e5-a488-da8b7809373a |
| volume_used             | 0.11                                 |
+-------------------------+--------------------------------------+
USER:/opt/stack/trove$ trove show m2
+-------------------------+--------------------------------------+
| Property                | Value                                |
+-------------------------+--------------------------------------+
| created                 | 2017-01-09T18:17:13                  |
| datastore               | mysql                                |
| datastore_version       | 5.6                                  |
| encrypted_rpc_messaging | True                                 |
| flavor                  | 25                                   |
| id                      | bb0c9213-31f8-4427-8898-c644254b3642 |
| name                    | m2                                   |
| region                  | RegionOne                            |
| server_id               | a4769ce2-4e22-4134-b958-6db6c23cb221 |
| status                  | ACTIVE                               |
| updated                 | 2017-01-09T18:50:07                  |
| volume                  | 3                                    |
| volume_id               | 16e57e3f-b462-4db2-968b-3c284aa2751c |
| volume_used             | 0.13                                 |
+-------------------------+--------------------------------------+
USER:/opt/stack/trove$ trove show m4
+-------------------------+--------------------------------------+
| Property                | Value                                |
+-------------------------+--------------------------------------+
| created                 | 2017-01-09T18:20:58                  |
| datastore               | mysql                                |
| datastore_version       | 5.6                                  |
| encrypted_rpc_messaging | True                                 |
| flavor                  | 25                                   |
| id                      | 6d55ab3a-267f-4b95-8ada-33fc98fd1767 |
| name                    | m4                                   |
| region                  | RegionOne                            |
| server_id               | f43bba63-3be6-4993-b2d0-4ddfb7818d27 |
| status                  | ACTIVE                               |
| updated                 | 2017-01-09T18:54:30                  |
| volume                  | 3                                    |
| volume_id               | b7dc17b5-d0a8-47bb-aef4-ef9432c269e9 |
| volume_used             | 0.13                                 |
+-------------------------+--------------------------------------+
USER:/opt/stack/trove$]]></screen>
          <para>In the API response, note that the additional key
                <literal>encrypted_rpc_messaging</literal> has been added (as below).</para>
          <note>
            <para>This field is only returned if the user is an admin. Non admin
                    users do not see the field.</para>
          </note>
          <screen><![CDATA[RESP BODY: {"instance": {"status": "ACTIVE", "updated": "2017-01-09T18:29:00", "name": "m10", "links": [{"href": "https://192.168.126.130:8779/v1.0/56cca8484d3e48869126ada4f355c284/instances/514ef051-0bf7-48a5-adcf-071d4a6625fb", "rel": "self"}, {"href": "https://192.168.126.130:8779/instances/514ef051-0bf7-48a5-adcf-071d4a6625fb", "rel": "bookmark"}], "created": "2017-01-09T18:28:56", "region": "RegionOne", "server_id": "2452263e-3d33-48ec-8f24-2851fe74db28", "id": "514ef051-0bf7-48a5-adcf-071d4a6625fb", "volume": {"used": 0.11, "size": 3}, "volume_id": "cee2e17b-80fa-48e5-a488-da8b7809373a", "flavor": {"id": "25", "links": [{"href": "https://192.168.126.130:8779/v1.0/56cca8484d3e48869126ada4f355c284/flavors/25", "rel": "self"}, {"href": "https://192.168.126.130:8779/flavors/25", "rel": "bookmark"}]}, "datastore": {"version": "5.6", "type": "mysql"}, "encrypted_rpc_messaging": false}}]]></screen>
        </section>
      </section>
     </chapter>
