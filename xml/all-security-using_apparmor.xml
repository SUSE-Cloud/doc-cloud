<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="topic_rmq_j1v_4t">
 <title>Refining Access Control with AppArmor</title>
 <para>
  AppArmor is a Mandatory Access Control (MAC) system as opposed to a
  discretionary access control system. It is a kernel-level security module for
  Linux that controls access to low-level resources based on rights granted via
  policies to a program rather than to a user role. It enforces rules at the
  lowest software layer (the kernel level) preventing software from
  circumventing resource restrictions that reside at levels above the kernel.
  With AppArmor, the final gatekeeper is closest to the hardware.
 </para>
 <para>
  Controlling resource access per application versus per user role allows you
  to enforce rules based on specifically what a program can do versus trying to
  create user roles that are broad enough yet specific enough to apply to a
  group of users. In addition, it prevents the trap of having to predict all
  possible vulnerabilities in order to be secure.
 </para>
 <para>
  AppArmor uses a hybrid of whitelisting and blacklisting rules, and its
  security policies are/can be cascading, permitting inheritance from different
  or more general policies. Policies are enforced on a per-process basis.
 </para>
 <para>
  AppArmor also lets you tie a process to a CPU core if you want, and set
  process priority.
 </para>
 <para>
  AppArmor profiles are loaded into the kernel, typically on boot. They can run
  in either enforcement or complain modes. In enforcement mode, the policy is
  enforced and policy violation attempts are reported. In complain mode, policy
  violation attempts are reported but not prevented.
 </para>
 <section xml:id="apparmor_helion">
  <title>AppArmor in &kw-hos-phrase;</title>
  <para>
   AppArmor in &kw-hos-phrase; is installed and enabled on the KVM compute
   nodes by default. It runs in enforce mode. It enforces mandatory access
   control policies for the libvirt process. Customers can run 'systemctl
   status apparmor' command on the compute nodes to check that the service is
   active.
  </para>
  <para>
   In this implementation it is designed to mitigate three threat scenarios:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Hypervisor breakout followed by compromise of hosting qemu/kvm process.
    </para>
   </listitem>
   <listitem>
    <para>
     Malicious manipulation of qemu APIs via Nova compute.
    </para>
   </listitem>
   <listitem>
    <para>
     Malicious manipulation of libvirt APIs via Nova compute.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The AppArmor profiles here:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Use the sVirt mechanism to deliver a very locked down profile for KVM /
     QEMU processes that guests run under. This enforces strict isolation of
     the guest VMs, which is significantly more useful than just securing
     libvirt.
    </para>
   </listitem>
   <listitem>
    <para>
     Contains important improvements over stock Debian profiles: including
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Preventing libvirt from writing to any system config.
      </para>
     </listitem>
     <listitem>
      <para>
       Preventing Libivirt from accessing any hardware and device nodes that
       are not required for Helion-based solutions. While the stock AppArmor
       profiles are more permissive, as libvirt supports a larger set of
       functionality than is exposed via Nova compute, the profiles included
       here only allow access to features exposed through Nova.
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>
 </section>
</chapter>
