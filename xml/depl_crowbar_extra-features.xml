<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter
[
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec.depl.adm_crowbar_extra-features">
 <title>Customizing &crow;</title>
 <section>
  <title>Skip Unready Nodes</title>
  <para>
   In large deployments with many nodes, there are always some nodes that are
   in a fail or unknown state. New &barcl;s cannot be applied to them and
   values cannot be updated in some &barcl;s that are already deployed. This
   happens because &crow; will refuse to apply a &barcl; to a list of nodes if
   they are not all in <literal>ready</literal> state.
  </para>
  <para>
   To avoid having to manually take out nodes that are not
   <literal>ready</literal>, there is a feature called <literal>skip unready
   nodes</literal>. Instead of refusing to apply the &barcl;, it will skip the
   nodes that it finds in any other state than <literal>ready</literal>.
  </para>
  <para>
   <emphasis role="bold">Enabling the Feature</emphasis>
  </para>
  <para>
   In <filename>/opt/dell/crowbar_framework/config/crowbar.yml</filename>, set
   the option <literal>skip_unready_nodes</literal> to <literal>true</literal>.
  </para>
<screen>default: &amp;default
skip_unready_nodes:
  enabled: false <emphasis role="bold">&lt;&lt;&lt; change to true</emphasis></screen>
  <para>
   <emphasis role="bold">Roles Affected</emphasis>
  </para>
  <para>
   All &Barcl; roles are affected. The default config file includes all the
   roles that have been tested and found to be working. Adding roles to the
   default list is not supported for the <literal>skip_unready_nodes</literal>
   feature. Removing default roles is supported.
  </para>
  <para>
   The list of currently supported roles to skip:
  </para>
<screen>- bmc-nat-client
- ceilometer-agent
- deployer-client
- dns-client
- ipmi
- logging-client
- nova-compute-ironic
- nova-compute-kvm
- nova-compute-qemu
- nova-compute-vmware
- nova-compute-xen
- nova-compute-zvm
- ntp-client
- provisioner-base
- suse-manager-client
- swift-storage
- updater</screen>
  <para>
   <emphasis role="bold">Determining Which Nodes Were Skipped</emphasis>
  </para>
  <para>
   Skipped nodes are logged to the &crow; log
   (<filename>/var/log/crowbar/production.log</filename>) where you can search
   for the text <literal>skipped until next chef run</literal>. This will print
   the log lines where nodes were skipped, the name of the node, and the
   &barcl; which was being applied.
  </para>
<screen>&prompt.user;grep "skipped until next chef run" /var/log/crowbar/production.log</screen>
  <important>
   <para>
    After enabling/disabling the <literal>skip_unready_nodes</literal> feature
    or adding/removing roles, the &crow; framework service must be restarted
    (<command>systemctl restart crowbar</command>) in order to use the updated
    settings.
   </para>
  </important>
 </section>
 <section>
  <title>Skip Unchanged Nodes</title>
  <para>
   When a &barcl; is applied, all nodes will run <literal>chef-client</literal>. Sometimes it is
   not necessary to run chef for each node as attributes or roles may have not
   changed for some of the nodes.
  </para>
  <para>
   The <literal>skip unchanged nodes</literal> feature allows nodes to be
   skipped if their attributes or roles have not changed. This can help speed
   up applying a barclamp, especially in large deployments and with roles that
   are usually applied to a lot of nodes, such as &o_comp;.
  </para>
  <para>
   <emphasis role="bold">Enabling the Feature</emphasis>
  </para>
  <para>
   In <filename>/opt/dell/crowbar_framework/config/crowbar.yml</filename>, set
   the option <literal>skip_unchanged_nodes</literal> to
   <literal>true</literal>.
  </para>
  <screen>default: &amp;default
skip_unchanged_nodes:
  enabled: false <emphasis role="bold">&lt;&lt;&lt; change to true</emphasis></screen>
 </section>
 <section>
  <title>Controlling Chef Restarts Manually</title>
  <para>
   When a service configuration has changed, &chef; forces this service to
   restart. Sometimes it is useful to have manual control of these
   restarts. This feature supports avoiding automatic restart of services and
   including them in a pending restart list.  Disabling restarts is
   enabled/disabled by &barcl; and cannot be done on a service level. In other
   words, enabling this feature on the &o_blockstore; &barcl; will disable
   automatic restarts for all &o_blockstore;-* services.
  </para>
  <para>
   Two steps are necessary to activate this feature:
  </para>
  <procedure>
   <step>
    <para>
     Enable <literal>disallow_restart</literal> in the &crow; configuration file
    </para>
   </step>
   <step>
    <para>
     Set the <literal>disable_restart</literal> flag for a specific &barcl;
     using <literal>crowbar-client</literal> or API
    </para>
   </step>
  </procedure>
  <para>
   <emphasis role="bold">Enabling the Feature</emphasis>
  </para>
  <procedure>
   <step>
    <para>
     In <filename>/opt/dell/crowbar_framework/config/crowbar.yml</filename>, set
     the option <literal>disallow_restart</literal> to <literal>true</literal>.
    </para>
    <screen>default: &amp;default
disallow_restart:
  enabled: false <emphasis role="bold">&lt;&lt;&lt; change to true</emphasis></screen>
   </step>
   <step>
    <para>
     The <literal>disable_restart</literal> flag can be set with the &crow;
     client or with the API.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Set Flag with &crow; Client
      </para>
      <para>
       The crowbar client options for this feature are accessed with the
       <command>crowbarctl services</command> command, and only work for
       &ostack-bare; services. The options are:
      </para>
      <variablelist>
       <varlistentry>
        <term>disable_restart</term>
        <listitem>
         <para>
          The parameters are the &barcl; name and the flag value
          (<literal>true</literal> to disable automatic restart and
          <literal>false</literal> to enable automatic restart). The command is
          <literal>crowbarctl services disable_restart
          <replaceable>BARCLAMP</replaceable> &lt;true|false&gt;</literal>. For
          example, to disable restart of the &o_ident; &barcl;, enter the
          command <command>crowbarctl services disable_restart keystone
          true</command>.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>restart_flags</term>
        <listitem>
         <para>
          Used to check the <literal>disable_restart</literal> flag for each
          barclamp
         </para>
         <screen>crowbarctl services restart_flags
{
  "nova": true,
  "keystone": true,
  "database": true
}</screen>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>list_restarts</term>
        <listitem>
         <para>
          Displays the list of pending restarts. The <literal>pending
          restart</literal> flag indicates that a service tried to
          restart due to the &chef; run but it did not due to the automatic
          restart being disabled. It also indicates that the service might have
          a new configuration and it will not be applied until it is manually
          restarted.
         </para>
         <para>
          In the following example, the <literal>pacemaker_service</literal>
          attribute indicates whether this service is managed by Pacemaker
          (usually in an HA environment) or it is a standalone service managed
          by <literal>systemd</literal> (usually in non-HA environments). More
          on Pacemaker at <xref linkend="sec.depl.ostack.pacemaker"/>. The
          service to restart will be <literal>apache2</literal> not managed by
          Pacemaker.
         </para>
         <screen>crowbarctl services list_restarts
{
  "<replaceable>NODE_IP</replaceable>": {
    "alias": "controller1",
    "keystone": {
      "apache2": {
        "pacemaker_service": false,
        "timestamp": "2017-11-22 11:17:49 UTC"
      }
    }
  }
}</screen>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>clear_restart</term>
        <listitem>
         <para>
          Removes the flag on a specific node for a specific service. It can
          be executed when the service has restarted manually. The command is
          <literal>crowbarctl services clear_restart
          <replaceable>NODE</replaceable>
          <replaceable>SERVICE</replaceable></literal>. For example, <command>crowbarctl
          services clear_restart <replaceable>NODE_IP</replaceable>
          apache2</command>
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
     <listitem>
      <para>
       Using the API to List, Get Status, Set and Clear Flags
      </para>
      <itemizedlist>
       <listitem>
        <para>
         /restart_management/configuration
        </para>
        <variablelist>
         <varlistentry>
          <term>GET</term>
         <listitem>
          <para>
           Lists the barclamps and the status of service reboots disallowed
          </para>
         </listitem>
         </varlistentry>
         <varlistentry>
          <term>POST (parameters: disallow_restarts, barclamp)</term>
          <listitem>
           <para>
            Sets the disallow_restart flag for a barclamp
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </listitem>
       <listitem>
        <para>
         /restart_management/restarts
        </para>
        <variablelist>
         <varlistentry>
          <term>GET</term>
         <listitem>
          <para>
           Lists all of the services needing restarts
          </para>
         </listitem>
         </varlistentry>
         <varlistentry>
          <term>POST (parameters: node, service)</term>
          <listitem>
           <para>
            Clears the restart flag for the given service in the given node
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </listitem>
      </itemizedlist>
     </listitem>
    </itemizedlist>
   </step>
  </procedure>
 </section>
 <section>
  <title>Prevent Automatic Restart</title>
  <para>
   Sometimes a change in a proposal requires services to be restarted on all
   implicated nodes. This could be a problem in a production environment where
   interrupting a service completely is not an option, and where manual restart
   control is needed. With the service <literal>disable_restart</literal>
   feature in <literal>crowbarctl</literal>, you can set a flag for certain
   proposals to prevent the automatic restart.
  </para>
  <para>
   <emphasis role="bold">Enabling the Feature</emphasis>
  </para>
  <procedure>
   <step>
    <para>
     In <filename>/opt/dell/crowbar_framework/config/crowbar.yml</filename>, set
     the option <literal>disallow_restart</literal> to <literal>true</literal>.
    </para>
    <screen>default: &amp;default
disallow_restart:
  enabled: false <emphasis role="bold">&lt;&lt;&lt; change to true</emphasis></screen>
   </step>
   <step>
    <para>
     Restart &crow;
    </para>
   </step>
   <step>
    <para>
     Enable the <literal>disable_restart</literal> flag in the affected
     cookbook.
    </para>
    <screen>crowbarctl services disable_restart <replaceable>COOKBOOK</replaceable> true</screen>
    <para>
     For example, to disable &o_ident; and &rabbit; restarts:
    </para>
    <screen>crowbarctl services disable_restart keystone true
crowbarctl services disable_restart rabbitmq true</screen>
   </step>
   <step>
    <para>
     To check the proposals that have <literal>disable_restart</literal>
     enabled:
    </para>
<screen>crowbarctl services restart_flags
{
  "rabbitmq": true,
  "keystone": true,
}</screen>
   </step>
  </procedure>
  <para>
   <emphasis role="bold">Check Pending Restarts</emphasis>
  </para>
  <para>
   When a proposal is applied with the <literal>disable_restart</literal> flag
   enabled, the implicated nodes will not restart. They will be listed as
   pending restarts. To check this list, run the command <command>crowbarctl
   services list_restarts</command>.
  </para>
  <para>
   In the following example, <literal>disable_restart</literal> is enabled for
   &rabbit;. After applying rabbitmq, <literal>list_restarts</literal> will
   show the affected nodes, the proposal, and the services to restart.
  </para>
  <screen>crowbarctl services list_restarts
{
   "d52-54-77-77-01-01.vo5.cloud.suse.de": {
    "alias": "controller1",
    "rabbitmq": {
      "rabbitmq-server": {
        "pacemaker_service": false,
        "timestamp": "2018-03-07 15:30:30 UTC"
      }
    }
  }
}</screen>
  <para>
   After a manual restart of the service, the flags should be cleaned. The
   following command will clean the flag for a specific node, for a specific
   proposal or all proposals, and for a specific service.
  </para>
  <screen>crowbarctl services clear_restart <replaceable>NODE [COOKBOOK [SERVICE]]</replaceable></screen>
  <para>
   For example, to clean the &rabbit; flag from the
   <literal>controller1</literal> node, run the command:
  </para>
  <screen>crowbarctl service clear_restart controller1 rabbitmq</screen>
  <para>
   To clean the <literal>controller1</literal> node, run the command:
  </para>
  <screen>crowbarctl service clear_restart controller1</screen>
</section>
</chapter>
