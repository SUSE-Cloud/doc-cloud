<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>

<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="backup-recovery">
 <title>Backup and Recovery</title>
 <para>
  Typical tasks of the Monitoring Service operator are to make regular backups,
  particularly of the data created during operation.
 </para>
 <para>
  At regular intervals, you should make a backup of all:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Databases.
   </para>
  </listitem>
  <listitem>
   <para>
    Configuration files of the individual agents and services.
   </para>
  </listitem>
  <listitem>
   <para>
    Monitoring and log dashboards you have created and saved.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  <phrase>SUSE OpenStack Cloud Monitoring</phrase> does not offer integrated
  backup and recovery mechanisms. Instead, use the mechanisms and
  procedures of the individual components.
 </para>
 <section>
  <title>Databases</title>
  <para>
   You need to create regular backups of the following databases on the host
   where the Monitoring Service is installed:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Elasticsearch database for historic log data.
    </para>
   </listitem>
   <listitem>
    <para>
     InfluxDB database for historic metrics data.
    </para>
   </listitem>
   <listitem>
    <para>
     MariaDB database for historic configuration information.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   It is recommended that backup and restore operations for databases are
   carried out by experienced operators only.
  </para>
 <bridgehead renderas="sect4">Preparations</bridgehead>
 <para>
 Before backing up and restoring a database, we recommend stopping the Monitoring
 API and the Log API on the <literal>monasca-server</literal> node, and check that all data is processed.
 This ensures that no data is written to a database during a backup and restore operation.
 After backing up and restoring a database, restart the APIs.
 </para>
 <para>
 To stop the Monitoring API and the Log API, use the following command:
 </para>
 <screen>systemctl stop apache2</screen>
 <para>
 To check that all Kafka queues are empty, list the existing consumer groups and
 check the LAG column for each group. It should be 0. For example:
 </para>
 <screen>
 kafka-consumer-groups.sh --zookeeper 192.168.56.81:2181 --list
 kafka-consumer-groups.sh --zookeeper 192.168.56.81:2181 --describe \
  --group 1_metrics | column -t -s ','
 kafka-consumer-groups.sh --zookeeper 192.168.56.81:2181 --describe \
  --group transformer-logstash-consumer | column -t -s ','
 kafka-consumer-groups.sh --zookeeper 192.168.56.81:2181 --describe \
  --group thresh-metric | column -t -s ','
  </screen>
  <para>
 To restart the Monitoring API and the Log API, use the following command:
 </para>
 <screen>systemctl start apache2</screen>
  <bridgehead renderas="sect4">Elasticsearch Database</bridgehead>
  <para>
   For backing up and restoring your Elasticsearch database, use the
   Snapshot and Restore module of Elasticsearch.
  </para>
  <para>
   To create a backup of the database, proceed as follows:
  </para>
  <orderedlist>
   <listitem>
    <para>
     Make sure that <command>curl</command> is installed, <command>zypper in curl</command>.
    </para>
   </listitem>
   <listitem>
    <para>
     Log in to the host where the Monitoring Service is installed.
    </para>
   </listitem>
   <listitem>
    <para>
     Create a snapshot repository. You need the Elasticsearch bind address for
     all commands. run <command>grep network.bind_host /etc/elasticsearch/elasticsearch.yml</command>
     to find the bind address, and replace <replaceable>IP</replaceable> in the
     following commands with this address. For example:
    </para>
 <screen>curl -XPUT http://<replaceable>IP</replaceable>:9200/_snapshot/my_backup -d '{
   "type": "fs",
   "settings": {
        "location": "/mount/backup/elasticsearch1/my_backup",
        "compress": true
   }
 }'</screen>
    <para>
     The example registers a shared file system repository (<literal>"type":
     "fs"</literal>) that uses the
     <filename>/mount/backup/elasticsearch1</filename> directory for storing
     snapshots.
    </para>
    <note>
     <para>
         The directory for storing snapshots must be configured in the <literal>elasticsearch/repo_dir</literal>
      setting in the Monasca barclamp (see the <link xlink:href="https://www.suse.com/documentation/suse-openstack-cloud-7/singlehtml/book_cloud_deploybook_cloud_deploy.html#sec.depl.ostack.monasca/">&clouddeploy-bare;</link>).
      The directory must be manually mounted before creating the snapshot. The
      <literal>elasticsearch</literal> user must be specified as the owner of the directory.
     </para>
    </note>
    <para>
     <literal>compress</literal> is turned on to compress the metadata files.
    </para>
   </listitem>
   <listitem>
    <para>
     Check whether the repository was created successfully:
    </para>

    <screen>curl -XGET http://<replaceable>IP</replaceable>:9200/_snapshot/my_backup</screen>
    <para>
     This example response shows a successfully created repository:
    </para>
 <screen>{
   "my_backup": {
     "type": "fs",
     "settings": {
       "compress": "true",
       "location": "/mount/backup/elasticsearch1/my_backup"
     }
   }
 }</screen>
   </listitem>
   <listitem>
    <para>
     Create a snapshot of your database that contains all indices. A repository
     can contain multiple snapshots of the same database. The name of a snapshot
     must be unique within the snapshots created for your database, for example:
    </para>
    <screen>curl -XPUT http://<replaceable>IP</replaceable>:9200/_snapshot/my_backup/snapshot_1?wait_for_completion=true</screen>
    <para>
     The example creates a snapshot named <literal>snapshot_1</literal> for all
     indices in the <literal>my_backup</literal> repository.
    </para>
   </listitem>
  </orderedlist>
  <para>
   To restore the database instance, proceed as follows:
  </para>
  <orderedlist>
   <listitem>
    <para>
     Close all indices of your database, for example:
    </para>
    <screen>curl -XPOST http://<replaceable>IP</replaceable>:9200/_all/_close</screen>
   </listitem>
   <listitem>
    <para>
     Restore all indices from the snapshot you have created, for example:
 </para>
 <screen>curl -XPOST http://<replaceable>IP</replaceable>:9200/_snapshot/my_backup/snapshot_1/_restore</screen>
    <para>
     The example restores all indices from <literal>snapshot_1</literal> that is
     stored in the <literal>my_backup</literal> repository.
    </para>
   </listitem>
  </orderedlist>
  <para>
   For additional information on backing up and restoring an Elasticsearch
   database, refer to the
   <link xlink:href="https://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-snapshots.html">Elasticsearch documentation</link>.
  </para>
  <bridgehead renderas="sect4">InfluxDB Database</bridgehead>
  <para>
   For backing up and restoring your InfluxDB database, you can use the InfluxDB
   shell. The shell is part of your InfluxDB distribution. If you installed
   InfluxDB via a package manager, the shell is, by default, installed in the
   <filename>/usr/bin</filename> directory.
  </para>
  <para>
   To create a backup of the database, proceed as follows:
  </para>
  <orderedlist>
   <listitem>
    <para>
     Log in to the InfluxDB database as a user who is allowed to run the
     <literal>influxdb</literal> service, for example:
    </para>
 <screen>su influxdb -s /bin/bash </screen>
   </listitem>
   <listitem>
    <para>
     Back up the database, for example:
    </para>
 <screen>influxd backup -database mon /mount/backup/mysnapshot</screen>
    <para>
        Monasca is using <literal>mon</literal> as the name of the database
     The example creates the backup for the database in
     <filename>/mount/backup/mysnapshot</filename>.
    </para>
   </listitem>
  </orderedlist>
  <para>
   Before restoring the database, make sure that all database processes are shut
   down. To restore the database, you can then proceed as follows:
  </para>
  <orderedlist>
   <listitem>
    <para>
     If required, delete all files not included in the backup by dropping the database
     before you carry out the restore operation. A restore operation restores all
     files included in the backup. Files created or merged at a later point in time
     are not affected. For example:
    </para>
    <screen>influx -host <replaceable>IP</replaceable> -execute 'drop database mon;'</screen>
    <para>
        Replace <replaceable>IP</replaceable> with the IP address that the database
        is listening to. You can run <command>influxd config</command> and look up
        the IP address in the <literal>[http]</literal> section.
        </para>
   </listitem>
     <listitem>
    <para>
        Stop the InfluxDB database service:
    </para>
 <screen>
 systemctl stop influxdb
 </screen>
 </listitem>
   <listitem>
    <para>
     Log in to the InfluxDB database as a user who is allowed to run the
     <literal>influxdb</literal> service:
    </para>
    <screen>su influxdb -s /bin/bash</screen>
   </listitem>
   <listitem>
    <para>
    Restore the metastore:
    </para>
 <screen>influxd restore -metadir /var/opt/influxdb/meta /mount/backup/mysnapshot</screen>
   </listitem>
   <listitem>
    <para>
     Restore the database, for example:
    </para>
 <screen>influxd restore -database mon -datadir /var/opt/influxdb/data /mount/backup/mysnapshot</screen>
   <para>
     The example restores the backup from
     <filename>/mount/backup/mysnapshot</filename> to
     <filename>/var/opt/influxdb/influxdb.conf</filename>.
    </para>
   </listitem>
   <listitem>
    <para>
     Ensure that the file permissions for the restored database are set
     correctly:
    </para>
 <screen>chown -R influxdb:influxdb /var/opt/influxdb</screen>
   </listitem>
   <listitem>
    <para>
     Start the InfluxDB database service:
    </para>
 <screen>systemctl start influxdb</screen>
   </listitem>
  </orderedlist>
  <para>
   For additional information on backing up and restoring an InfluxDB database,
   refer to the
   <link xlink:href="https://docs.influxdata.com/influxdb/v1.1/administration/backup_and_restore/">InfluxDB documentation</link>.
  </para>

  <bridgehead renderas="sect4">MariaDB Database</bridgehead>
  <para>
   For backing up and restoring your MariaDB database, you can use the
   <command>mysqldump</command> utility program. <command>mysqldump</command>
   performs a logical backup that produces a set of SQL statements. These
   statements can later be executed to restore the database.
  </para>
  <para>
   To back up your MariaDB database, you must be the owner of the database or a
   user with superuser privileges, for example:
  </para>
 <screen>mysqldump -u root -p mon &gt; dumpfile.sql</screen>
  <para>
   In addition to the name of the database, you have to specify the name and the
   location where <command>mysqldump</command> stores its output.
  </para>
  <para>
   To restore your MariaDB database, proceed as follows:
  </para>
  <orderedlist>
   <listitem>
    <para>
     Log in to the host where the Monitoring Service is installed as a user with
     root privileges.
    </para>
   </listitem>
   <listitem>
    <para>
        Make sure that the <command>mariadb</command> service is running:
    </para>
    <screen>systemctl start mariadb</screen>
   </listitem>
   <listitem>
    <para>
     Log in to the database you have backed up as a user with root privileges, for example:
    </para>
 <screen>mysql -u root -p mon</screen>
   </listitem>
   <listitem>
    <para>
     Remove and then re-create the database:
    </para>

 <screen>
 DROP DATABASE mon;
 CREATE DATABASE mon;</screen>
   </listitem>
   <listitem>
    <para>
 Exit mariadb:
    </para>
    <screen>\q</screen>
   </listitem>
   <listitem>
    <para>
     Restore the database, for example:
    </para>

 <screen>mysql -u root -p mon &lt; dumpfile.sql</screen>
   </listitem>
  </orderedlist>
  <para>
   For additional information on backing up and restoring a MariaDB database
   with <literal>mysqldump</literal>, refer to the
   <link xlink:href="https://mariadb.com/kb/en/mariadb/mysqldump/">MariaDB
   documentation</link>.
  </para>
 </section>

 <section>
  <title>Configuration Files</title>
  <para>
   Below you find a list of the configuration files of the agents and the
   individual services included in the Monitoring Service. Back up these files
   at least after you have installed and configured <phrase>SUSE OpenStack Cloud
   Monitoring</phrase> and after each change in the configuration.
  </para>
  <!--taroth 2017-06-08: fix for bsc#1042477-->
  <screen>/etc/influxdb/influxdb.conf
 /etc/kafka/server.properties
 /etc/my.cnf
 /etc/my.cnf.d/client.cnf
 /etc/my.cnf.d/mysql-clients.cnf
 /etc/my.cnf.d/server.cnf
 /etc/monasca/agent/agent.yaml
 /etc/monasca/agent/conf.d/*
 /etc/monasca/agent/supervisor.conf
 /etc/monasca/api-config.conf
 /etc/monasca/log-api-config.conf
 /etc/monasca/log-api-config.ini
 /etc/monasca-log-persister/monasca-log-persister.conf
 /etc/monasca-log-transformer/monasca-log-transformer.conf
 /etc/monasca-log-agent/agent.conf
 /etc/monasca-notification/monasca-notification.yaml
 /etc/monasca-persister/monasca-persister.yaml
 /etc/monasca-thresh/thresh.yaml
 /etc/elasticsearch/elasticsearch.yml
 /etc/elasticsearch/logging.yml
 /etc/kibana/kibana.yml</screen>
  <bridgehead renderas="sect4">Recovery</bridgehead>
  <para>
   If you need to recover the configuration of one or more agents or services,
   the recommended procedure is as follows:
  </para>
  <orderedlist>
   <listitem>
    <para>
     If necessary, uninstall the agents or services, and install them again.
    </para>
   </listitem>
   <listitem>
    <para>
     Stop the agents or services.
    </para>
   </listitem>
   <listitem>
    <para>
     Copy the backup of your configuration files to the correct location
     according to the table above.
    </para>
   </listitem>
   <listitem>
    <para>
     Start the agents or services again.
    </para>
   </listitem>
  </orderedlist>
 </section>
 <section>
  <title>Dashboards</title>
  <para>
   Kibana can persist customized log dashboard designs to the Elasticsearch
   database, and allows you to recall them. For details on saving, loading, and
   sharing log management dashboards, refer to the
   <link xlink:href="https://www.elastic.co/guide/en/kibana/4.5/dashboard.html#saving-dashboards">Kibana documentation</link>.
  </para>
  <para>
   Grafana allows you to export a monitoring dashboard to a JSON file, and to
   re-import it when necessary. For backing up and restoring the exported
   dashboards, use the standard mechanisms of your file system. For details on
   exporting monitoring dashboards, refer to the
   <link xlink:href="http://docs.grafana.org/v1.9/guides/gettingstarted/">Getting
   Started</link> tutorial of Grafana.
  </para>
 </section>
</section>
