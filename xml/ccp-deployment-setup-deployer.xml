<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entity-decl.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec.set-up-deployer">
 <title>Set Up Deployer</title>
  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ccp-set_up_deployer.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ccp-set_up_deployer.png"/>
    </imageobject>
   </mediaobject>
  </informalfigure>
<section xml:id="ccp-create-suse-containerized-openstack-workspace">
  <title>Create Containerized SUSE OpenStack Cloud Workspace</title>
  <para>
    All the deployment artifacts are stored in a
    <xref linkend="term-def-workspace"/>. By default, the workspace is a
    directory located in the user's home directory on the Deployer. Set
    up your workspace with the following steps:
  </para>
  <procedure>
    <step>
      <para>
        Create a directory in your home directory that ends in
        <literal>-workspace</literal>.
      </para>
    </step>
    <step>
      <para>
        Export
        <literal>SOCOK8S_ENVNAME=<replaceable>DIRECTORY_NAME_PREFIX</replaceable></literal>
        to set your workspace.
      </para>
    </step>
    <step>
      <para>
        To change your workspace parent directory, export
        <literal>SOCOK8S_WORKSPACE_BASEDIR</literal> with the base directory
        where your workspace is located.
      </para>
    </step>
  </procedure>
  <screen>mkdir ~/socok8s-workspace
export SOCOK8S_ENVNAME=socok8s
export SOCOK8S_WORKSPACE_BASEDIR=~</screen>
</section>
<section xml:id="ccp-installing-the-suse-containerized-openstack-software">
  <title>Installing the Containerized SUSE OpenStack Cloud software</title>
  <para>
    We recommend two ways of installing the Containerized SUSE OpenStack Cloud
    software.
  </para>
  <orderedlist>
    <listitem>
      <para>
        (Recommended) Install with an ISO image including required dependencies:
      </para>
      <screen>Download <filename>openSUSE-Addon-socok8s-x86_64-Media.iso</filename> from <literal>https://download.opensuse.org/repositories/Cloud:/socok8s/images/iso/</literal>
sudo zypper addrepo --refresh <replaceable>PATH_TO_ISO_IMAGE</replaceable> socok8s-iso
sudo zypper install socok8s (installs to /usr/share/socok8s)</screen>
    </listitem>
    <listitem>
     <para>
      The following software must be manually installed on your Deployer using
      <command>zypper install</command> or <command>pip install</command>:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        ansible >= 2.7.8
       </para>
      </listitem>
      <listitem>
       <para>
        git-core
       </para>
      </listitem>
      <listitem>
       <para>
        jq
       </para>
      </listitem>
      <listitem>
       <para>
        python3-virtualenv
       </para>
      </listitem>
      <listitem>
       <para>
        python3-jmespath
       </para>
      </listitem>
      <listitem>
       <para>
        python3-netaddr
       </para>
      </listitem>
      <listitem>
       <para>
        python3-openstacksdk
       </para>
      </listitem>
      <listitem>
       <para>
        python3-openstackclient
       </para>
      </listitem>
      <listitem>
       <para>
        python3-heatclient
       </para>
      </listitem>
      <listitem>
       <para>
        which
       </para>
      </listitem>
     </itemizedlist>
     <para>
      After the required packages are installed, clone the <link
      xlink:href="https://github.com/SUSE-Cloud/socok8s">socok8s GitHub
      repository</link>. This repository uses submodules, which have additional
      code needed for the playbooks to work. Required dependencies must be
      installed manually. <emphasis role="bold">Intended for
      developers.</emphasis>
  </para>
   <screen>git clone --recursive https://github.com/SUSE-Cloud/socok8s.git</screen>
   <para>
    Fetch or update the tree of the submodules by running:
   </para>
   <screen>git submodule update --init --recursive</screen>
    </listitem>
  </orderedlist>
</section>
<section xml:id="ccp-ssh-key-preparation">
  <title>SSH Key Preparation</title>
  <para>
    Create an SSH key on the Deployer node and add the public key to
    each CaaS Platform worker node.
  </para>
  <procedure>
   <step>
    <para>
     Generate the key with <command>ssh-keygen -t rsa</command>.
    </para>
   </step>
   <step>
    <para>
     Copy the SSH key to each node with the <command>ssh-copy-id</command>
     command, for example, <command>ssh-copy-id root@192.168.122.1</command>.
    </para>
   </step>
   <step>
    <para>
     Test by connecting to the node via SSH and executing a command with
     <command>sudo</command>. Neither operation should require a password.
    </para>
   </step>
  </procedure>
</section>
<section xml:id="ccp-passwordless-sudo">
  <title>Passwordless sudo</title>
  <para>
    If installing as a non-root user, you must give your user
    passwordless sudo on the Deployer.
  </para>
  <screen>sudo visudo</screen>
  <para>
    Add the following.
  </para>
  <screen><replaceable>USERNAME</replaceable> ALL=(ALL) NOPASSWD: ALL</screen>
  <para>
    Add the line above after <literal>#includedir
    /etc/sudoers.d</literal>. Replace <replaceable>USERNAME</replaceable> with
    your username.
  </para>
</section>
<section xml:id="ccp-configure-ansible">
  <title>Configure Ansible</title>
  <section xml:id="use-ara-recommended">
    <title>Use <xref linkend="term-def-ara"/> (recommended)</title>
    <para>
      Ansible Run Analysis (ARA) makes Ansible runs easier to visualize,
      understand, and troubleshoot. To use ARA:
    </para>
    <procedure>
     <step>
      <para>
       Install ARA and its required dependencies: <command>pip install
       ara[server]</command>.
      </para>
     </step>
     <step>
      <para>
       Set the ARA environment variable before running
       <command>run.sh</command>: <literal>export USE_ARA='True'</literal>
      </para>
     </step>
    </procedure>
    <para>
      To set up ARA permanently on the Deployer, create an Ansible
      configuration file loading ARA plugins:
    </para>
    <screen>python3 -m ara.setup.ansible | tee ~/.ansible.cfg</screen>
    <para>
      For more details on the ARA web interface, see <link
      xlink:href="https://ara.readthedocs.io/en/stable/webserver.html">ARA Read
      The Docs</link>.
    </para>
  </section>
  <section>
   <title>Ansible Logging</title>
   <para>
    Enable Ansible logging with the following steps:
   </para>
   <procedure>
    <step>
     <para>
      Create an Ansible configuration file in the <filename>$HOME</filename>
      directory, for example, <filename>.ansible.cfg</filename>. This
      configuration file can be used for other Ansible configurations.
     </para>
    </step>
    <step>
     <para>
      Add your <literal>log_path</literal> to
      <filename>.ansible.cfg</filename>. Use a log path and log filename that
      fit your needs, for example:
     </para>
      <screen>[defaults]
log_path=$HOME/.ansible/ansible.log</screen>
    </step>
   </procedure>
  </section>
  <section xml:id="ccp-enable-pipelining">
    <title>Enable Pipelining (recommended)</title>
    <para>
      You can improve SSH connections by enabling pipelining:
    </para>
    <screen>cat &lt;&lt; EOF &gt;&gt; ~/.ansible.cfg
[ssh_connection]
pipelining = True
EOF</screen>
  </section>
</section>
</section>
