<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entity-decl.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="designing_swift_zones" version="5.1">
 <title>Designing Swift Zones</title>
 <para>
  The concept of Swift zones allows you to control the placement of replicas on
  different groups of servers. When constructing rings and allocating replicas
  to specific disk drives, Swift will, where possible, allocate replicas using
  the following hierarchy so that the greatest amount of resiliency is achieved
  by avoiding single points of failure:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Swift will place each replica on a different disk drive within the same
    server.
   </para>
  </listitem>
  <listitem>
   <para>
    Swift will place each replica on a different server.
   </para>
  </listitem>
  <listitem>
   <para>
    Swift will place each replica in a different Swift zone.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  If you have three servers and a replica count of three, it is easy for Swift
  to place each replica on a different server. If you only have two servers
  though, Swift will place two replicas on one server (different drives on the
  server) and one copy on the other server.
 </para>
 <para>
  With only three servers there is no need to use the Swift zone concept.
  However, if you have more servers than your replica count, the Swift zone
  concept can be used to control the degree of resiliency. The following table
  shows how data is placed and explains what happens under various failure
  scenarios. In all cases, a replica count of three is assumed and that there
  are a total of six servers.
 </para>
 <informaltable colsep="1" rowsep="1">
  <tgroup cols="4">
   <colspec colname="c1" colnum="1"/>
   <colspec colname="c2" colnum="2"/>
   <colspec colname="c3" colnum="3"/>
   <colspec colname="c4" colnum="4"/>
   <thead>
    <row>
     <entry>Number of Swift Zones</entry>
     <entry>Replica Placement</entry>
     <entry>Failure Scenarios</entry>
     <entry>Details</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry morerows="2">
      One (all servers in the same zone)
     </entry>
     <entry morerows="2">
      Replicas are placed on different servers. For any given object, you
      have no control over which servers the replicas are placed on.
     </entry>
     <entry>
      One server fails
     </entry>
     <entry>
      You are guaranteed that there are two other replicas.
     </entry>
    </row>
    <row>
     <entry>Two servers fail</entry>
     <entry>You are guaranteed that there is one remaining replica.</entry>
    </row>
    <row>
     <entry>Three servers fail</entry>
     <entry>
      1/3 of the objects cannot be accessed. 2/3 of the objects have three
      replicas.
     </entry>
    </row>
    <row>
     <entry>Two (three servers in each Swift zone)</entry>
     <entry>
      Half the objects have two replicas in Swift zone 1 with one replica in
      Swift zone The other objects are reversed, with one replica in Swift
      zone 1 and two replicas in Swift zone 2.
     </entry>
     <entry>One Swift zone fails</entry>
     <entry>
      You are guaranteed to have at least one replica. Half the objects have
      two remaining replicas and the other half have a single replica.
     </entry>
    </row>
    <row>
     <entry morerows="1">Three (two servers in each Swift zone)</entry>
     <entry morerows="1">
      Each zone contains a replica. For any given object, there is a replica
      in each Swift zone.
     </entry>
     <entry>One Swift zone fails</entry>
     <entry>You are guaranteed to have two replicas of every object.</entry>
    </row>
    <row>
     <entry>Two Swift zones fail</entry>
     <entry>You are guaranteed to have one replica of every object.</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <para>
  The following sections show examples of how to specify the Swift zones in
  your input model.
 </para>
 <section xml:id="server_groups">
  <title>Using Server Groups to Specify Swift Zones</title>
  <para>
   Swift zones are specified in the ring specifications using the server group
   concept. To define a Swift zone, you specify:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     An id - this is the Swift zone number
    </para>
   </listitem>
   <listitem>
    <para>
     A list of associated server groups
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Server groups are defined in your input model. The example input models
   typically define a number of server groups. You can use these pre-defined
   server groups or create your own.
  </para>
  <para>
   For example, the following three models use the example server groups
   <literal>CLOUD</literal>, <literal>AZ1</literal>, <literal>AZ2</literal> and
   <literal>AZ3</literal>. Each of these examples achieves the same effect –
   creating a single Swift zone.
  </para>
<screen>ring-specifications:
              - region: region1
              swift-zones:
              - id: 1
              server-groups:
              - CLOUD
              rings:
              …</screen>
<screen>ring-specifications:
              - region: region1
              swift-zones:
              - id: 1
              server-groups:
              - AZ1
              - AZ2
              - AZ3
              rings:
              …</screen>
<screen>server-groups:
              - name: ZONE_ONE
              server-groups:
              - AZ1
              - AZ2
              - AZ3
              ring-specifications:
              - region: region1
              swift-zones:
              - id: 1
              server-groups:
              - ZONE_ONE
              rings:
              …</screen>
  <para>
   Alternatively, if you omit the <literal>swift-zones</literal> specification,
   a single Swift zone is used by default for all servers.
  </para>
  <para>
   In the following example, three Swift zones are specified and mapped to the
   same availability zones that Nova uses (assuming you are using one of the
   example input models):
  </para>
<screen>ring-specifications:
      - region: region1
      swift-zones:
      - id: 1
      server-groups:
      - AZ1
      - id: 2
      server-groups:
      - AZ2
      - id: 3
      server-groups:
      - AZ3</screen>
  <para>
   In this example, it shows a datacenter with four availability zones which
   are mapped to two Swift zones. This type of setup may be used if you had two
   buildings where each building has a duplicated network infrastructure:
  </para>
<screen>ring-specifications:
      - region: region1
      swift-zones:
      - id: 1
      server-groups:
      - AZ1
      - AZ2
      - id: 2
      server-groups:
      - AZ3
      - AZ4</screen>
 </section>
 <section xml:id="zones_ring_level">
  <title>Specifying Swift Zones at Ring Level</title>
  <para>
   Usually, you would use the same Swift zone layout for all rings in your
   system. However, it is possible to specify a different layout for a given
   ring. The following example shows that the account, container and object-0
   rings have two zones, but the object-1 ring has a single zone.
  </para>
<screen>ring-specifications:
        - region: region1
        swift-zones:
        - id: 1
        server-groups:
        - AZ1
        - id: 2
        server-groups:
        - AZ2
        rings
        - name: account
        …
        - name: container
        …
        - name: object-0
        …
        - name: object-1
        swift-zones:
        - id: 1
        server-groups:
        - CLOUD
        …</screen>
 </section>
</section>
