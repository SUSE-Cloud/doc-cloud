<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="bura_overview">
 <title>Backup and Restore</title>
 <para>
  Information about how to back up and restore your cloud.
 </para>
 <para>
  Freezer is a Backup and Restore as a Service platform that helps you automate
  the backup and restore process for your data. This backup and restore
  component (Freezer) executes backups and restores as jobs, and executes these
  jobs independently and/or as managed sessions (multiple jobs in multiple
  machines sharing a state).
 </para>
 <para>
  There are a number of things you must do before installing your cloud so that
  you achieve the backup plan you need.
 </para>
 <para>
  First, you should consider <xref linkend="topic_jsc_qps_qt"/> in case you
  lose cloud servers that the Freezer backup and restore service uses by
  default.
 </para>
 <para>
  Second, you can prevent the Freezer backup and restore service from being
  installed completely, or designate which services should be backed up by
  default. <xref
   linkend="topic_i4l_xhn_tt"/>.
 </para>
 <para>
  &kw-hos-phrase; supports backup and restore of control plane services. It
  comes with playbooks and procedures to recover the control plane from various
  disaster scenarios.
 </para>
 <para>
  The following features are supported:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Backup of your file system using a point-in-time snapshot.
   </para>
  </listitem>
  <listitem>
   <para>
    Strong encryption: AES-256-CFB.
   </para>
  </listitem>
  <listitem>
   <para>
    Backup of your MySQL database with LVM snapshot.
   </para>
  </listitem>
  <listitem>
   <para>
    Restoring your data from a specific date automatically to your file system.
   </para>
  </listitem>
  <listitem>
   <para>
    Low storage consumption: the backups are uploaded as a stream.
   </para>
  </listitem>
  <listitem>
   <para>
    Flexible backup policy (both incremental and differential).
   </para>
  </listitem>
  <listitem>
   <para>
    Data archived in GNU Tar format for file-based incremental.
   </para>
  </listitem>
  <listitem>
   <para>
    Multiple compression algorithm support (zlib, bzip2, xz).
   </para>
  </listitem>
  <listitem>
   <para>
    Removal old backup automatically according the provided parameters.
   </para>
  </listitem>
  <listitem>
   <para>
    Multiple storage media support (Swift, local file system, SSH).
   </para>
  </listitem>
  <listitem>
   <para>
    Management of multiple jobs (multiple backups on the same node).
   </para>
  </listitem>
  <listitem>
   <para>
    Synchronization of backup and restore on multiple nodes.
   </para>
  </listitem>
  <listitem>
   <para>
    Execution of scripts/commands before or after a job execution.
   </para>
  </listitem>
 </itemizedlist>
 <section>
  <title>Architecture</title>
  <para>
   The backup and restore service/Freezer uses GNU Tar under the hood to
   execute incremental backup and restore. When a key is provided, it uses Open
   SSL to encrypt data (AES-256-CFB).
  </para>
  <para>
   The architecture consists of the following components:
  </para>
  <informaltable colsep="1" rowsep="1">
   <tgroup cols="2" align="left">
    <colspec colname="c1" colnum="1" colwidth="123pt"/>
    <colspec colname="c2" colnum="2" colwidth="372.75pt"/>
    <thead>
     <row>
      <entry>Component</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>Freezer Scheduler</entry>
      <entry>
       <para>
        A client-side component running on the node from where the data backup
        is executed. It consists of a daemon that retrieves the data from the
        freezer API and executes jobs (that is, backups, restore, admin
        actions, info actions, and pre- and/or post- job scripts) by running
        the Freezer Agent. The metrics and exit codes returned by the Freezer
        Agent are captured and sent to the Freezer API.
       </para>
       <para>
        The scheduler manages the execution and synchronization of multiple
        jobs executed on a single node or multiple nodes. The status of the
        execution of all the nodes is saved through the API.
       </para>
       <para>
        The Freezer scheduler takes care of uploading jobs to the API by
        reading job files on the file system. It also has its own configuration
        file where job sessions or other settings such as the Freezer API
        polling interval can be configured.
       </para>
      </entry>
     </row>
     <row>
      <entry>Freezer Agent </entry>
      <entry>
       <para>
        Multiprocessing Python software that runs on the client side where the
        data backup is executed. It can be executed as a standalone or by the
        Freezer Scheduler. The freezer-agent provides a flexible way to execute
        backup, restore, and perform other actions on a running system.
       </para>
       <para>
        To provide flexibility in terms of data integrity, speed, performance,
        resource usage, and so on, the Freezer Agent offers a wide range of
        options to execute optimized backup according the available resources,
        such as:
       </para>
       <itemizedlist>
        <listitem>
         <para>
          Segments size (the amount of memory used)
         </para>
        </listitem>
        <listitem>
         <para>
          Queues size (optimize backups where I/O, bandwidth, memory, or CPU is
          a constraint)
         </para>
        </listitem>
        <listitem>
         <para>
          I/O affinity and process priority (can be used with real time I/O and
          maximum user-level process priority)
         </para>
        </listitem>
        <listitem>
         <para>
          Bandwidth limitation
         </para>
        </listitem>
        <listitem>
         <para>
          Client-side Encryption (AES-256-CFB)
         </para>
        </listitem>
        <listitem>
         <para>
          Compression (multiple algorithms supported as zlib, bzip2, xz/lzma)
         </para>
        </listitem>
        <listitem>
         <para>
          Parallel upload to pluggable storage media (that is, upload backup to
          Swift and to a remote node by SSH, or upload to two or more
          independent Swift instances with different credentials, and so on)
         </para>
        </listitem>
        <listitem>
         <para>
          Execute file-based incremental (such as tar), block-based incremental
          (such as rsync algorithm), and differential-based backup and restore
         </para>
        </listitem>
        <listitem>
         <para>
          Multi platform: you can run it on &suselinux;, Windows, *BSD, and OSX
         </para>
        </listitem>
        <listitem>
         <para>
          Automatic removal of old backups
         </para>
        </listitem>
       </itemizedlist>
      </entry>
     </row>
     <row>
      <entry>Freezer API </entry>
      <entry>Stores and provides metadata to the <!----> Freezer Scheduler. Also stores session
       information for multi node backup synchronization. Workload data is not stored in the API .
      </entry>
     </row>
     <row>
      <entry>DB Elasticsearch </entry>
      <entry>API uses the backend to store and retrieve metrics metadata sessions information job
       status, and so on.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </section>
 <section xml:id="idg-all-bura-bura_overview-xml-9">
  <title>Architecture of the Backup/Restore Service</title>
  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="media-bura-bura_architecture.png" width="75%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="media-bura-bura_architecture.png"/>
    </imageobject>
   </mediaobject>
  </informalfigure>
  <informaltable colsep="1" rowsep="1">
   <tgroup cols="3">
    <colspec colname="c1" colnum="1" colwidth="1*"/>
    <colspec colname="c2" colnum="2" colwidth="3*"/>
    <colspec colname="c3" colnum="3" colwidth="2*"/>
    <thead>
     <row>
      <entry>Component</entry>
      <entry>Description</entry>
      <entry>Runs on</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>API</entry>
      <entry>API service to add / fetch Freezer jobs</entry>
      <entry>Controller nodes with ElasticSearch</entry>
     </row>
     <row>
      <entry>Scheduler</entry>
      <entry>Daemon that stores and retrieves backup/restore jobs and executes them</entry>
      <entry>Nodes needing backup/restore (controllers, &lcm;)</entry>
     </row>
     <row>
      <entry>Agent</entry>
      <entry>The agent that backs up and restores to and from targets. Invoked from scheduler or
       manually.</entry>
      <entry>Nodes needing backup/restore (controllers, &lcm;)</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </section>
 <xi:include href="bura-supported_services.xml"/>
 <xi:include href="bura-cloud_control_plane_backup.xml"/>
 <xi:include href="bura-change_default_backup_jobs.xml"/>
 <xi:include href="bura-freezer_ui.xml"/>
 <xi:include href="bura-restore_previous_backup.xml"/>
 <xi:include href="bura-freezer_scheduler.xml"/>
 <xi:include href="bura-freezer_agent.xml"/>
 <xi:include href="bura-backup_limitations.xml"/>
 <xi:include href="bura-disable_bura_before_deployment.xml"/>
 <xi:include href="bura-start_stop_freezer_services.xml"/>
 <xi:include href="operations-audit_logs_backup.xml"/>
</chapter>
