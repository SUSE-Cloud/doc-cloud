<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="barbican_40">
 <title>&kw-hos-tm;: Features in the Barbican Key Manager Service</title>
 <para>
  This topic explains the Barbican service in &kw-hos-phrase;.
 </para>
 <section>
  <title>Enhancements</title>
  <para>
   <emphasis role="bold">DAR Policy</emphasis>
  </para>
  <para>
   In &kw-hos-phrase;, DAR policy has been enhanced for Barbican specific
   key-manager:creator role. User with key-manager:creator role on a project
   now also has the privilege to delete encrypted volumes and secrets. Before
   this enhancement, Barbican key-manager:creator role only had privilege to
   create, modify and list the volumes/secrets. For deletion of encrypted
   volume/secrets, use would need key-manager:admin role.
  </para>
 </section>
 <section>
  <title>User, Roles And Service/Endpoint Definitions</title>
  <informaltable>
   <tgroup cols="4">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <colspec colnum="4" colname="col4"/>
    <thead>
     <row>
      <entry>Type</entry>
      <entry>Name or Key-Value Pair</entry>
      <entry>Purpose</entry>
      <entry>Comments</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>Keystone Role</entry>
      <entry><link xlink:href="http://key-managercreator/">key-manager:creator</link>
      </entry>
      <entry>
       <para>
        Barbican specific role which has privilege to
        create/modify/list/<emphasis role="bold">delete</emphasis> keys,
        certificates.Creator role does not allow modifications (update/delete)
        in container's consumer, modifications in transport keys, modification
        in certificate authorities (CA), assignment and management of per
        project CA. User with <emphasis>admin</emphasis> role can do this.
       </para>
      </entry>
      <entry>
       <para>
        This role has exact same privileges as defined for
        '<emphasis>creator</emphasis>' role in upstream barbican.
       </para>
       <para>
        Referred in service policy config file,
        <emphasis>policy.json</emphasis>
       </para>
       <note>
        <para>
         This role now can also delete keys.
        </para>
       </note>
      </entry>
     </row>
     <row>
      <entry>Keystone Role</entry>
      <entry><link xlink:href="http://key-manageradmin/">key-manager:admin</link>
      </entry>
      <entry>Barbican specific role which has administrative privileges</entry>
      <entry>
       <para>
        This role has exact same privileges as defined for
        '<emphasis>admin</emphasis>' role in upstream barbican.
       </para>
       <para>
        Referred in service policy config file,
        <emphasis>policy.json</emphasis>
       </para>
       <note>
        <para>
         This role is not required to delete keys
        </para>
       </note>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </section>
 <section>
  <title>MKEK Configuration</title>
  <orderedlist>
   <listitem>
    <para>
     Initial Master Key Setup.
    </para>
    <orderedlist>
     <listitem>
      <para>
       When Barbican is used with *simple_crypto_plugin* as secret store
       backend, its master key needs to be defined <emphasis role="bold">before
       initial deployment</emphasis>. This backend is used when secrets are
       stored in its database. If you don't specify key before deployment,
       default master key is used (not recommended practice).
      </para>
     </listitem>
     <listitem>
      <para>
       Once master key is set, it must not be modified.
      </para>
     </listitem>
     <listitem>
      <para>
       Earlier if you defined your own encrypted master key, Before you run any
       playbooks remember that you need to export that encryption key in the
       following environment variable:
      </para>
<screen>export HOS_USER_PASSWORD_ENCRYPT_KEY=&lt;encryption key&gt;</screen>
     </listitem>
    </orderedlist>
   </listitem>
   <listitem>
    <para>
     Upgrade.
    </para>
    <orderedlist>
     <listitem>
      <para>
       Check master key:
      </para>
      <orderedlist xml:id="ol_all_vjn_jx">
       <listitem>
        <para>
         If you are upgrading and already have the master key defined from
         previous version or installation,
         check<emphasis>~/helion/hos/ansible/roles/barbican-common/vars/barbican_deploy_config.yml</emphasis>
         for
        </para>
<screen>'barbican_customer_master_key'</screen>
        <para>
         value, if the value does not have a prefix
        </para>
<screen>'@hos@'</screen>
        <para>
         that means it is not encrypted. It is highly recommended to encrypt
         this value.
        </para>
       </listitem>
      </orderedlist>
     </listitem>
     <listitem>
      <para>
       Encrypt the existing key during upgrade:
      </para>
      <orderedlist xml:id="ol_bll_vjn_jx">
       <listitem>
        <para>
         Setup the environment variable
        </para>
<screen>HOS_USER_PASSWORD_ENCRYPT_KEY</screen>
        <para>
         which contain the key used to encrypt barbican master key.
        </para>
       </listitem>
       <listitem>
        <para>
         Before you run any playbooks, remember that you need to export the
         encryption key in the following environment variable, following steps:
        </para>
        <orderedlist xml:id="ol_cll_vjn_jx">
         <listitem>
<screen>export HOS_USER_PASSWORD_ENCRYPT_KEY=&lt;USER_ENCRYPTION_KEY&gt;</screen>
         </listitem>
         <listitem>
<screen>python
*roles/KEYMGR-API/templates/generate_kek &lt;barbican_customer_master_key&gt;</screen>
         </listitem>
         <listitem>
          <para>
           Master key is generated at stdout.
          </para>
         </listitem>
         <listitem>
          <para>
           Set above master key in file
          </para>
<screen>~/helion/hos/ansible/roles/barbican-common/vars/barbican_deploy_config.yml</screen>
          <orderedlist xml:id="ol_dll_vjn_jx">
           <listitem>
            <para>
             Replace existing
            </para>
<screen>barbican_customer_master_key</screen>
            <para>
             value with above generated master key.
            </para>
           </listitem>
           <listitem>
            <para>
             Commit the change in git repository.
            </para>
           </listitem>
           <listitem>
<screen>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost ready-deployment.yml</screen>
           </listitem>
           <listitem>
            <para>
             Once master key is set, continue with cloud deployment.
            </para>
           </listitem>
          </orderedlist>
         </listitem>
        </orderedlist>
       </listitem>
      </orderedlist>
     </listitem>
     <listitem>
      <para>
       It is not recommended to change the master key during the upgrade
       process. Changing master key will result in read error for existing
       secrets as they were encrypted using previous master key.
      </para>
     </listitem>
    </orderedlist>
   </listitem>
  </orderedlist>
 </section>
 <section>
  <title>Features</title>
  <orderedlist xml:id="ol_ybh_rkn_jx">
   <listitem>
    <para>
     Import and install the PKCS11 library debian package:This is a one-time
     setup to install pkcs11 package on barbican nodes.
    </para>
    <orderedlist xml:id="ol_ach_rkn_jx">
     <listitem>
      <para>
       Make sure you are on deployer node.
      </para>
     </listitem>
     <listitem>
      <para>
       If not present, Create the directory
      </para>
<screen>/home/stack/third-party/barbican/pkgs/debian</screen>
     </listitem>
     <listitem>
      <para>
       Populate the directory with the full set of debian packages which has
       HSM specific PKCS11 library.
      </para>
     </listitem>
     <listitem>
      <para>
       Run the 3rd-party import playbook:
      </para>
<screen>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost third-party-import.yml
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts osconfig-run.yml</screen>
     </listitem>
     <listitem>
      <para>
       This will import the above packages to the HLM thirdparty repo, and
       ready for installation, this will ensure that the
       <literal>/etc/apt/source.list.d</literal> entry exists for the
       third-party apt repo. For example you can import hppkcs11
       (hpe_eskm_pkcs11_0.2.2.deb), which is PKCS11 library for HPE ESKM
       (Atalla) HSM.
      </para>
     </listitem>
     <listitem>
      <para>
       Once the library package is imported into third party repository you can
       install the library package by running barbican playbook by passing
       extra ansible variable 'barbican_pkcs11_package_name, if the given
       package is not present on the controller nodes it will install the
       latest version from the 3rd party repository, like
      </para>
<screen>ansible-playbook  -i hosts/verb_hosts barbican-reconfigure.yml --extra-vars "barbican_pkcs11_package_name=hppkcs11"</screen>
     </listitem>
     <listitem>
      <para>
       Or if you want to install specific version of the package, or upgrade or
       downgrade from the one you have on the controller nodes, you can pass
       the version info to the playbook, like
      </para>
<screen>ansible-playbook  -i hosts/verb_hosts barbican-reconfigure.yml --extra-vars "barbican_pkcs11_package_name=hppkcs11=0.2.1"</screen>
     </listitem>
     <listitem>
      <para>
       Above step would install provided package on controller node in its
       default location.
      </para>
     </listitem>
    </orderedlist>
   </listitem>
   <listitem>
    <para>
     To provide or update HSM connection credential for Barbican service:
    </para>
    <orderedlist xml:id="ol_cch_rkn_jx">
     <listitem>
      <para>
       Edit the files
      </para>
<screen>~/helion/hos/ansible/roles/barbican-common/vars/barbican_deploy_config.yml</screen>
     </listitem>
     <listitem>
      <para>
       Change the value <literal>use_pkcs11_crypto_plugin</literal> to
       <literal>True</literal> to use PKCS11 plugin crypto setup. False is used
       to indicate other plugin setup usage.
      </para>
     </listitem>
     <listitem>
      <para>
       Provide details for PKCS11 client connection. Details needed are:
      </para>
      <itemizedlist xml:id="ul_dch_rkn_jx">
       <listitem>
        <para>
         session password
        </para>
       </listitem>
       <listitem>
        <para>
         expected location for vendor specific pkcs11 shared library on
         Barbican nodes. Provide absolute path on the controller node.
        </para>
       </listitem>
       <listitem>
        <para>
         label used for master kek
        </para>
       </listitem>
       <listitem>
        <para>
         label used for hmac key
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
     <listitem>
      <para>
       If PKCS11 provider is HPE ESKM, then the
       <literal>barbican_pkcs11_provider_is_hpe_eskm</literal> flag can be set
       to <literal>True</literal> and playbooks will use default paths for
       library and its certificate location.
      </para>
     </listitem>
     <listitem>
      <para>
       Commit the change in git repository.
      </para>
<screen>cd ~/helion/hos/ansible/</screen>
     </listitem>
     <listitem>
<screen>ansible-playbook -i hosts/localhost
ready-deployment.yml</screen>
     </listitem>
     <listitem>
<screen>cd ~/scratch/ansible/next/hos/ansible</screen>
     </listitem>
     <listitem>
<screen>ansible-playbook -i hosts/verb_hosts
barbican-reconfigure.yml</screen>
     </listitem>
    </orderedlist>
   </listitem>
   <listitem>
    <para>
     HPE Atalla ESKM Specific Setup Only:
    </para>
    <orderedlist xml:id="ol_ech_rkn_jx">
     <listitem>
      <para>
       Please note that PKCS11 provider may have some custom configuration
       steps and those needs to be done manually. This specific step is just
       provided for HPE ESKM PKCS11 connector. In this step, HPE KMIP server
       address is set or updated.
      </para>
     </listitem>
     <listitem>
      <para>
       For HPE PKCS11 connector, there is connection configuration information
       needed by its PKCS11 connector e.g. KMIP server address, token firmware
       version and various flags needed for PKCS11 session. Customer is
       expected to provide KMIP server address.
      </para>
     </listitem>
     <listitem>
      <para>
       Barbican playbook provides following mechanism to generate related
       configuration with customer provided KMIP server address. For any other
       customization, customer is expected to refer HPE PKCS11 documentation
       and make those changes manually on controller nodes hosting Barbican
       service.
      </para>
      <para>
       Edit the files
      </para>
<screen>~/helion/hos/ansible/roles/barbican-common/vars/barbican_deploy_config.yml</screen>
      <para>
       Set the value for <literal>barbican_pkcs11_hpe_kmip_host</literal> and
       <literal>barbican_pkcs11_hpe_kmip_port</literal>
      </para>
      <para>
       Commit the change in git repository.
      </para>
<screen>cd ~/helion/hos/ansible/</screen>
      <para>
       *
      </para>
<screen>ansible-playbook -i hosts/localhost ready-deployment.yml</screen>
      <para>
       *
      </para>
<screen>cd ~/scratch/ansible/next/hos/ansible</screen>
      <para>
       *
      </para>
<screen>ansible-playbook  -i hosts/verb_hosts barbican-reconfigure.yml --extra-vars "barbican_pkcs11_hpe_generate_conf=True"</screen>
     </listitem>
    </orderedlist>
   </listitem>
   <listitem>
    <para>
     To populate or change clients certificate on Barbican nodes:
    </para>
    <orderedlist xml:id="ol_fch_rkn_jx">
     <listitem>
      <para>
       For PKCS11 device, SSL client certificate is needed as generally HSM
       devices require 2-way SSL for security reasons.
      </para>
     </listitem>
     <listitem>
      <para>
       Get needed client certificate, client private key and client root CA
       recognized by HSM device.
      </para>
     </listitem>
     <listitem>
      <para>
       These certificate information is provided to Barbican service via
       reconfigure playbook.
      </para>
     </listitem>
     <listitem>
      <para>
       Look into HSM certificates sample file
      </para>
<screen>barbican_pkcs11_plugin_config_sample.yml</screen>
     </listitem>
     <listitem>
      <para>
       Copy this file to a temporary directory e.g.
      </para>
<screen>/tmp/pkcs11_plugin_certs.yml</screen>
     </listitem>
     <listitem>
      <para>
       Edit the file to provide either client certificates as absolute file
       paths (i.e. 'client_cert_file_path', 'client_key_file_path',
       'client_cacert_file_path') or pasting certificate content directly into
       the file (i.e. in 'client_cert_content', 'client_key_content',
       'client_cacert_content').
      </para>
     </listitem>
     <listitem>
      <para>
       Edit the file
      </para>
<screen>~/helion/hos/ansible/roles/barbican-common/vars/barbican_deploy_config.yml</screen>
      <para>
       for pkcs11 certificate locations.
      </para>
     </listitem>
     <listitem>
      <para>
       Provide expected path for client side certificates on barbican nodes.'
      </para>
<screen>barbican_pkcs11_client_cert_path &lt;client certificate file path&gt;</screen>
     </listitem>
     <listitem>
<screen>barbican_pkcs11_client_key_path &lt;Private key file path created via CSR generation&gt;</screen>
     </listitem>
     <listitem>
<screen>barbican_pkcs11_client_cacert_path &lt;root CA recognized by HSM device and used for CSR signing&gt;</screen>
     </listitem>
     <listitem>
      <para>
       Commit the change in git repository.
      </para>
     </listitem>
     <listitem>
<screen>cd ~/helion/hos/ansible/</screen>
     </listitem>
     <listitem>
<screen>ansible-playbook -i hosts/localhost
ready-deployment.yml</screen>
     </listitem>
     <listitem>
<screen>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts
barbican-reconfigure.yml -e@/tmp/pkcs11_plugin_certs.yml</screen>
     </listitem>
    </orderedlist>
   </listitem>
   <listitem>
    <para>
     Generate labels for master kek and hmac key used for PKCS11 plugin:
    </para>
    <orderedlist>
     <listitem>
      <para>
       This is one-time setup which generates needed mkek and hmac labels. As a
       pre-requisite, Step 2, (+ Step 2b in HPE HSM case) and Step 3 needs to
       be done beforehand.
      </para>
     </listitem>
     <listitem>
<screen>ansible-playbook -i hosts/verb_hosts barbican-reconfigure.yml --extra-vars "barbican_pkcs11_generate_labels=True"</screen>
     </listitem>
    </orderedlist>
   </listitem>
  </orderedlist>
 </section>
 <section>
  <title>Notes</title>
  <para>
   If preferred, actions described in step 1 (except running 3rd-party import
   playbook), 2, 3 and 4 can be executed together. Just make sure that all
   PKCS11 specific variables are configured correctly in
   barbican_deploy_config.yml and single space is present between variables
   defined via 'extra-vars' option ansible-playbook -i hosts/verb_hosts
   barbican-reconfigure.yml \ --extra-vars
   "barbican_pkcs11_package_name=hppkcs11 barbican_pkcs11_generate_labels=True"
   \ -e@/tmp/pkcs11_plugin_certs.yml For HPE ESKM, combined step is as follows
   (with generate conf file option). ansible-playbook -i hosts/verb_hosts
   barbican-reconfigure.yml \ --extra-vars
   "barbican_pkcs11_package_name=hppkcs11 \
   barbican_pkcs11_hpe_generate_conf=True \
   barbican_pkcs11_generate_labels=True" \ -e@/tmp/pkcs11_plugin_certs.yml
   Individual step 1, step 2, step 3 or step 4 are needed when pkc11 library,
   client certificates or HSM connection information needs to be updated. Nova
   Ephemeral Encryption: Ability to encrypt Nova ephemeral disk using Barbican
   as key-manager Nova document (DOCS-3152 - Document the stesp to configure
   nova for having encryptd ephemeral voluems using barbican as a keymanager -
   OPEN ) describes the steps to configure Nova service for encrypted ephemeral
   disk volumes with Barbican.
  </para>
 </section>
</chapter>
