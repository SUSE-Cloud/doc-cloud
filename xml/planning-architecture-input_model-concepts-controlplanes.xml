<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entity-decl.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="concept_controlplanes" version="5.1">
 <title>Control Planes</title>
 <para>
  <emphasis>A control-plane runs one or more <guimenu>services</guimenu>
  distributed across <guimenu>clusters</guimenu> and <guimenu>resource
  groups</guimenu></emphasis>.
 </para>
 <para>
  <emphasis>A control-plane uses servers with a particular
  <guimenu>server-role</guimenu></emphasis>.
 </para>
 <para>
  A <guimenu>control-plane</guimenu> provides the operating environment for a
  set of <guimenu>services</guimenu>; normally consisting of a set of shared
  services (&mariadb;, RabbitMQ, HA Proxy, Apache, etc.), OpenStack control
  services (API, schedulers, etc.) and the <guimenu>resources</guimenu> they
  are managing (compute, storage, etc.).
 </para>
 <para>
  A simple cloud may have a single <guimenu>control-plane</guimenu> which runs
  all of the <guimenu>services</guimenu>. A more complex cloud may have
  multiple <guimenu>control-planes</guimenu> to allow for more than one
  instance of some services.
  <!--(Note that <keyword keyref="kw-hos-phrase"/> only supports a single
  control-plane). -->
  <remark>(Note that support for multiple
  control-planes is a non-core feature in &product; and not covered by
  the examples).</remark> Services that need to consume (use) another service
  (such as Neutron consuming &mariadb;, Nova consuming Neutron) always use the
  service within the same <guimenu>control-plane</guimenu><!--
   before looking in any related <uicontrol>control-planes</uicontrol> -->.
  In addition a control-plane can describe which services can be consumed
  from other control-planes. It is one of the functions of the configuration
  processor to resolve these relationships and make sure that each
  consumer/service is provided with the configuration details to connect to the
  appropriate provider/service.
 </para>
 <para>
  Each <guimenu>control-plane</guimenu> is structured as
  <guimenu>clusters</guimenu> and <guimenu>resources</guimenu>. The
  <guimenu>clusters</guimenu> are typically used to host the OpenStack services
  that manage the cloud such as API servers, database servers, Neutron agents,
  and Swift proxies, while the <guimenu>resources</guimenu> are used to host
  the scale-out OpenStack services such as Nova-Compute or Swift-Object
  services. This is a representation convenience rather than a strict rule, for
  example it is possible to run the Swift-Object service in the management
  cluster in a smaller-scale cloud that is not designed for scale-out object
  serving.
 </para>
 <para>
  A cluster can contain one or more <guimenu>servers</guimenu> and you can have
  one or more <guimenu>clusters</guimenu> depending on the capacity and
  scalability needs of the cloud that you are building. Spreading services
  across multiple <guimenu>clusters</guimenu> provides greater scalability, but
  it requires a greater number of physical servers. A common pattern for a
  large cloud is to run high data volume services such as monitoring and
  logging in a separate cluster. A cloud with a high object storage requirement
  will typically also run the Swift service in its own cluster.
 </para>
 <para>
  Clusters in this context are a mechanism for grouping service components in
  physical servers, but all instances of a component in a
  <guimenu>control-plane</guimenu> work collectively. For example, if HA Proxy
  is configured to run on multiple clusters within the same
  <guimenu>control-plane</guimenu> then all of those instances will work as a
  single instance of the ha-proxy service.
 </para>
 <para>
  Both <guimenu>clusters</guimenu> and <guimenu>resources</guimenu> define the
  type (via a list of <guimenu>server-roles</guimenu>) and number of servers
  (min and max or count) they require.
 </para>
 <para>
  The <guimenu>control-plane</guimenu> can also define a list of failure-zones
  (<guimenu>server-groups</guimenu>) from which to allocate servers.
 </para>
 <xi:include href="planning-architecture-input_model-concepts-controlplanes_regions.xml"/>
</section>
