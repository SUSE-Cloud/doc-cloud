<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entity-decl.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="objectstorage-overview" version="5.1">
 <title>Object Storage using swift Overview</title>
 <section xml:id="about">
  <title>What is the Object Storage (swift) Service?</title>
  <para>
   The &productname; Object Storage using swift service leverages swift which uses
   software-defined storage (SDS) layered on top of industry-standard servers
   using native storage devices. swift presents an object paradigm, using an
   underlying set of disk drives. The disk drives are managed by a data
   structure called a "ring" and you can store, retrieve, and delete objects in
   containers using RESTful APIs.
  </para>
  <para>
   &productname; Object Storage using swift provides a highly-available, resilient,
   and scalable storage pool for unstructured data. It has a highly-durable
   architecture, with no single point of failure. In addition, &productname;
   includes the concept of cloud models, where the user can modify the cloud
   input model to provide the configuration required for their environment.
  </para>
 </section>
 <section xml:id="services">
  <title>Object Storage (swift) Services</title>
  <para>
   A swift system consists of a number of services:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     swift-proxy provides the API for all requests to the swift system.
    </para>
   </listitem>
   <listitem>
    <para>
     Account and container services provide storage management of the accounts
     and containers.
    </para>
   </listitem>
   <listitem>
    <para>
     Object services provide storage management for object storage.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   These services can be co-located in a number of ways. The following general
   pattern exists in the example cloud models distributed in &productname;:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The swift-proxy, account, container, and object services run on the same
     (PACO) node type in the control plane. This is used for smaller clouds or
     where swift is a minor element in a larger cloud. This is the model seen
     in most of the entry-scale models.
    </para>
   </listitem>
   <listitem>
    <para>
     The swift-proxy, account, and container services run on one (PAC) node
     type in a cluster in a control plane and the object services run on
     another (OBJ) node type in a resource pool. This deployment model, known
     as the Entry-Scale swift model, is used in larger clouds or where a larger
     swift system is in use or planned. See <xref linkend="entryscale-swift"/>
     for more details.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The swift storage service can be scaled both vertically (nodes with larger
   or more disks) and horizontally (more swift storage nodes) to handle an
   increased number of simultaneous user connections and provide larger storage
   space.
  </para>
  <para>
   swift is configured through a number of YAML files in the &productname;
   implementation of the OpenStack Object Storage (swift) service. For more
   details on the configuration of the YAML files, see
   <xref linkend="modify-input-model"/>.
  </para>
 </section>
</section>
