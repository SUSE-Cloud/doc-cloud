<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<chapter xml:id="ironic-administrator-guide" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Ironic Administration Guide</title>
        <section xml:id="enabling-drivers">
          <title>Enabling drivers</title>
          <section xml:id="ironic-python-agent-agent">
            <title>Ironic-Python-Agent (agent)</title>
            <para>Ironic-Python-Agent is an agent that handles <emphasis>ironic</emphasis> bare metal
                nodes in various actions such as inspection and deployment of such
                nodes, and runs processes inside of a ramdisk.</para>
            <para>For more information on this, see <xref linkend="ipa"/>.</para>
          </section>
          <section xml:id="pxe-boot-interface">
            <title>PXE Boot Interface</title>
            <section xml:id="configuring-pxe-boot-interface">
              <title>Configuring PXE boot interface</title>
              <section xml:id="enable-persistent-boot-device-for-deploy-clean-operation">
                <title>Enable persistent boot device for deploy/clean operation</title>
                <para>Ironic uses non-persistent boot for cleaning/deploying phases as default,
                in PXE interface. For some drivers, a persistent change is far more
                costly than a non-persistent one, so this can bring performance improvements.</para>
              </section>
              <section xml:id="enable-persistent-boot-device-on-node">
                <title>Enable persistent boot device on node</title>
                <procedure>
                  <step>
                    <para>Set the flag <literal>force_persistent_boot_device</literal> to <literal>True</literal> in the node’s <literal>driver_info</literal>:</para>
                    <screen>$ openstack baremetal node set --driver-info force_persistent_boot_device=True &lt;node&gt;</screen>
                    <note>
                      <para>We recommend to check if the node’s state has not changed as there
                            is no way of locking the node between these commands.</para>
                    </note>
                  </step>
                </procedure>
                <para>Once the flag is present, the next cleaning and deploy steps will be done
                with persistent boot for that node.</para>
              </section>
            </section>
          </section>
          <section xml:id="ipmitool-driver">
            <title>IPMITool driver</title>
            <section>
              <title>IPMITool driver</title>
              <section>
                <title>Overview</title>
                <para>The <link xlink:href="https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface">IPMI</link> (Intelligent Platform Management Interface) drivers manage nodes
                by using IPMI protocol versions 2.0 or 1.5. They use the <link xlink:href="https://sourceforge.net/projects/ipmitool/">IPMItool</link> utility
                which is an open-source command-line interface (CLI) for controlling
                IPMI-enabled devices.</para>
                <para>The following hardware types and classic drivers use IPMItool for power and
                management:</para>
                <itemizedlist>
                  <listitem>
                    <para>hardware types:</para>
                    <itemizedlist>
                      <listitem>
                        <para>
                          <literal>ipmi</literal>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                  <listitem>
                    <para>classic drivers:</para>
                    <itemizedlist>
                      <listitem>
                        <para>
                          <literal>agent_ipmitool</literal>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          <literal>pxe_ipmitool</literal>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          <literal>agent_ipmitool_socat</literal>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          <literal>pxe_ipmitool_socat</literal>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </itemizedlist>
              </section>
              <section xml:id="glossary">
                <title>Glossary</title>
                <itemizedlist>
                  <listitem>
                    <para><link xlink:href="https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface">IPMI</link> - Intelligent Platform Management Interface.</para>
                  </listitem>
                  <listitem>
                    <para>IPMB - Intelligent Platform Management Bus/Bridge.</para>
                  </listitem>
                  <listitem>
                    <para><link xlink:href="https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface#Baseboard_management_controller">BMC</link>  - Baseboard Management Controller.</para>
                  </listitem>
                  <listitem>
                    <para>RMCP - Remote Management Control Protocol.</para>
                  </listitem>
                </itemizedlist>
              </section>
              <section xml:id="enabling-the-ipmitool-driver-s">
                <title>Enabling the IPMItool driver(s)</title>
                <para>See <link xlink:href="https://docs.openstack.org/ironic/pike/install/configure-ipmi.html">Configuring IPMI support</link>
                      for the required dependencies.</para>
                <procedure>
                  <step>
                    <para>The <literal>ipmi</literal> hardware type is enabled by default starting with the Ocata
                        release. To enable it explicitly, add the following to your <literal>ironic.conf</literal>:</para>
                    <screen language="ini">[DEFAULT]
enabled_hardware_types = ipmi</screen>
                  </step>
                  <step>
                    <para>The <literal>pxe_ipmitool</literal> classic driver is enabled by default. To enable one or
                        more of the other IPMI classic drivers, add them to the
                        <literal>enabled_drivers</literal> configuration option in your <literal>ironic.conf</literal>.
                        The following enables <literal>pxe_ipmitool</literal> and <literal>agent_ipmitool</literal> drivers:</para>
                    <screen language="ini">[DEFAULT]
enabled_drivers = pxe_ipmitool,agent_ipmitool</screen>
                  </step>
                  <step>
                    <para>Restart the Ironic conductor service.</para>
                  </step>
                </procedure>
                <para>See <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-drivers.html">Enabling drivers and hardware types</link>
                      for more details.</para>
              </section>
              <section xml:id="registering-a-node-with-the-ipmitool-driver">
                <title>Registering a node with the IPMItool driver</title>
                <para>Nodes configured to use the IPMItool drivers should have the <literal>driver</literal> field
                set to <literal>ipmi</literal> (hardware type) or to the name of one of the classic drivers
                that support IPMItool.</para>
                <para>The following configuration value is required and has to be added to
                the node’s <literal>driver_info</literal> field:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>ipmi_address</literal>: The IP address or hostname of the BMC.</para>
                  </listitem>
                </itemizedlist>
                <para>Other options may be needed to match the configuration of the BMC, the
                following options are optional, but in most cases, it’s considered a
                good practice to have them set:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>ipmi_username</literal>: The username to access the BMC; defaults to <emphasis>NULL</emphasis> user.</para>
                  </listitem>
                  <listitem>
                    <para><literal>ipmi_password</literal>: The password to access the BMC; defaults to <emphasis>NULL</emphasis>.</para>
                  </listitem>
                  <listitem>
                    <para><literal>ipmi_port</literal>: The remote IPMI RMCP port. By default ipmitool
                        uses port <emphasis>623</emphasis>.</para>
                  </listitem>
                </itemizedlist>
                <note>
                  <para>We recommend that you setup a username and password for
                    your BMC.</para>
                </note>
                <para>The <literal>ironic node-create</literal> command can be used to enroll a node with
                an IPMItool-based driver. For example:</para>
                <screen>ironic node-create -d ipmi -i ipmi_address=&lt;address&gt; \
    -i ipmi_username=&lt;username&gt; -i ipmi_password=&lt;password&gt;</screen>
              </section>
              <section>
                <title>Advanced configuration</title>
                <para>When a simple configuration such as providing the <literal>address</literal>,
                <literal>username</literal> and <literal>password</literal> is not enough, the IPMItool driver contains
                many other options that can be used to address special usages.</para>
                <section xml:id="single-double-bridging-functionality">
                  <title>Single and double bridging functionality</title>
                  <note>
                    <para>A version of IPMItool higher or equal to 1.8.12 is required to use
                        the bridging functionality.</para>
                  </note>
                  <para>There are two different bridging functionalities supported by the
                    IPMItool-based drivers: <emphasis>single</emphasis> bridge and <emphasis>dual</emphasis> bridge.</para>
                  <para>The following configuration values need to be added to the node’s
                    <literal>driver_info</literal> field so bridging can be used:</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>ipmi_bridging</literal>: The bridging type default is <emphasis>no</emphasis>, other supported
                            values are <emphasis>single</emphasis> for single bridge or <emphasis>dual</emphasis> for double bridge.</para>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term><literal>ipmi_local_address</literal>: The local IPMB address for bridged requests.</term>
                          <listitem>
                            <para>Required only if <literal>ipmi_bridging</literal> is set to <emphasis>single</emphasis> or <emphasis>dual</emphasis>. This
                                  configuration is optional, if not specified it will be auto discovered
                                  by IPMItool.</para>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <para><literal>ipmi_target_address</literal>: The destination address for bridged
                            requests. Required only if <literal>ipmi_bridging</literal> is set to <emphasis>single</emphasis> or <emphasis>dual</emphasis>.</para>
                    </listitem>
                    <listitem>
                      <para><literal>ipmi_target_channel</literal>: The destination channel for bridged
                            requests. Required only if <literal>ipmi_bridging</literal> is set to <emphasis>single</emphasis> or <emphasis>dual</emphasis>.</para>
                    </listitem>
                  </itemizedlist>
                  <para>Double bridge specific options:</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>ipmi_transit_address</literal>: The transit address for bridged
                            requests. Required only if <literal>ipmi_bridging</literal> is set to <emphasis>dual</emphasis>.</para>
                    </listitem>
                    <listitem>
                      <para><literal>ipmi_transit_channel</literal>: The transit channel for bridged
                            requests. Required only if <literal>ipmi_bridging</literal> is set to <emphasis>dual</emphasis>.</para>
                    </listitem>
                  </itemizedlist>
                  <para>The parameter <literal>ipmi_bridging</literal> specifies the type of bridging
                    required: <emphasis>single</emphasis> or <emphasis>dual</emphasis> to access the bare metal node. If the
                    parameter is not specified, the default value is set to <emphasis>no</emphasis>.</para>
                  <para>The <literal>ironic node-update</literal> command can be used to set the required
                    bridging information to the Ironic node enrolled with the IPMItool
                    driver. For example:</para>
                  <itemizedlist>
                    <listitem>
                      <para>Single Bridging:</para>
                      <screen>ironic node-update add &lt;UUID or name&gt; driver_info/ipmi_local_address=&lt;address&gt; \
    driver_info/ipmi_bridging=single driver_info/ipmi_target_channel=&lt;channel&gt; \
    driver_info/ipmi_target_address=&lt;target address&gt;</screen>
                    </listitem>
                    <listitem>
                      <para>Double Bridging:</para>
                      <screen>ironic node-update add &lt;UUID or name&gt; driver_info/ipmi_local_address=&lt;address&gt; \
    driver_info/ipmi_bridging=dual driver_info/ipmi_transit_channel=&lt;transit channel&gt; \
    driver_info/ipmi_transit_address=&lt;transit address&gt; driver_info/ipmi_target_channel=&lt;target channel&gt; \
    driver_info/ipmi_target_address=&lt;target address&gt;</screen>
                    </listitem>
                  </itemizedlist>
                </section>
                <section xml:id="changing-the-version-of-the-ipmi-protocol">
                  <title>Changing the version of the IPMI protocol</title>
                  <para>The IPMItool-based drivers works with the versions <emphasis>2.0</emphasis> and <emphasis>1.5</emphasis> of the
                    IPMI protocol. By default, the version <emphasis>2.0</emphasis> is used.</para>
                  <para>In order to change the IPMI protocol version in the bare metal node,
                    the following option needs to be set to the node’s <literal>driver_info</literal> field:</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>ipmi_protocol_version</literal>: The version of the IPMI protocol; default
                            is <emphasis>2.0</emphasis>. Supported values are <emphasis>1.5</emphasis> or <emphasis>2.0</emphasis>.</para>
                    </listitem>
                  </itemizedlist>
                  <para>The <literal>ironic node-update</literal> command can be used to set the desired
                    protocol version:</para>
                  <screen>ironic node-update add &lt;UUID or name&gt; driver_info/ipmi_protocol_version=&lt;version&gt;</screen>
                  <warning>
                    <para>Version <emphasis>1.5</emphasis> of the IPMI protocol does not support encryption.
                        Therefore, we recommend that you use version 2.0.</para>
                  </warning>
                </section>
              </section>
            </section>
          </section>
          <section xml:id="drac-driver">
            <title>DRAC driver</title>
            <section xml:id="drac-with-pxe-deploy">
              <title>DRAC with PXE deploy</title>
              <itemizedlist>
                <listitem>
                  <para>Add <literal>pxe_drac</literal> to the list of <literal>enabled_drivers</literal> in
                            <literal>/etc/ironic/ironic.conf</literal>.</para>
                </listitem>
                <listitem>
                  <para>Install the <literal>python-dracclient</literal> package.</para>
                </listitem>
              </itemizedlist>
            </section>
          </section>
          <section>
            <title>SNMP driver</title>
            <section>
              <title>SNMP driver</title>
              <para>The SNMP power driver enables control of power distribution units of the type
            frequently found in data centre racks. PDUs frequently have a management
            ethernet interface and SNMP support enabling control of the power outlets.</para>
              <para>The SNMP power driver works with the PXE driver for network deployment and
            network-configured boot.</para>
              <section xml:id="list-of-supported-devices">
                <title>List of supported devices</title>
                <para>This is a non-exhaustive list of supported devices. Any device not listed in
                this table could possibly work using a similar driver.</para>
                <para>Report any device status.</para>
                <informaltable>
                  <tgroup cols="4">
                    <colspec colname="c1" colwidth="14"/>
                    <colspec colname="c2" colwidth="10"/>
                    <colspec colname="c3" colwidth="10"/>
                    <colspec colname="c4" colwidth="21"/>
                    <thead>
                      <row>
                        <entry>
                          <para>Manufacturer</para>
                        </entry>
                        <entry>
                          <para>Model</para>
                        </entry>
                        <entry>
                          <para>Supported?</para>
                        </entry>
                        <entry>
                          <para>Driver name</para>
                        </entry>
                      </row>
                    </thead>
                    <tbody>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7920</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_masterswitch</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP9606</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_masterswitch</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP9225</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_masterswitchplus</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7155</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7900</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7901</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7902</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7911a</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7921</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7922</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7930</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7931</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7932</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7940</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7941</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7951</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7960</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7990</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP7998</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP8941</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP8953</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP8959</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP8961</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>APC</para>
                        </entry>
                        <entry>
                          <para>AP8965</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>apc_rackpdu</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>Aten</para>
                        </entry>
                        <entry>
                          <para>all?</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>aten</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>CyberPower</para>
                        </entry>
                        <entry>
                          <para>all?</para>
                        </entry>
                        <entry>
                          <para>Untested</para>
                        </entry>
                        <entry>
                          <para>cyberpower</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>EatonPower</para>
                        </entry>
                        <entry>
                          <para>all?</para>
                        </entry>
                        <entry>
                          <para>Untested</para>
                        </entry>
                        <entry>
                          <para>eatonpower</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>Teltronix</para>
                        </entry>
                        <entry>
                          <para>all?</para>
                        </entry>
                        <entry>
                          <para>Yes</para>
                        </entry>
                        <entry>
                          <para>teltronix</para>
                        </entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable>
              </section>
              <section xml:id="software-requirements">
                <title>Software Requirements</title>
                <itemizedlist>
                  <listitem>
                    <para>The PySNMP package must be installed, variously referred to as <literal>pysnmp</literal>
                        or <literal>python-pysnmp</literal></para>
                  </listitem>
                </itemizedlist>
              </section>
              <section xml:id="enabling-the-snmp-power-driver">
                <title>Enabling the SNMP Power Driver</title>
                <procedure>
                  <step>
                    <para>Add <literal>snmp</literal> to the list of <literal>enabled_hardware_types</literal> in <literal>ironic.conf</literal>.
                        Also update <literal>enabled_management_interfaces</literal> and
                        <literal>enabled_power_interfaces</literal> in <literal>ironic.conf</literal> as shown below:</para>
                    <screen language="ini">[DEFAULT]
enabled_hardware_types = snmp
enabled_management_interfaces = fake
enabled_power_interfaces = snmp</screen>
                  </step>
                  <step>
                    <para>Alternatively, if you prefer using the classic driver instead of the
                        <literal>snmp</literal> hardware type, add <literal>pxe_snmp</literal> to the list of <literal>enabled_drivers</literal>
                        in <literal>ironic.conf</literal>:</para>
                    <screen language="ini">[DEFAULT]
enabled_drivers = pxe_snmp</screen>
                  </step>
                  <step>
                    <para>To set the default boot option, update <literal>default_boot_option</literal> in
                        <literal>ironic.conf</literal>:</para>
                    <screen language="ini">[DEFAULT]
default_boot_option = netboot</screen>
                    <note>
                      <para>Currently the default value of <literal>default_boot_option</literal> is <literal>netboot</literal>
                            but it will be changed to <literal>local</literal> in the future. We recommend
                            setting an explicit value for this option.</para>
                    </note>
                    <note>
                      <para>It is important to set <literal>boot_option</literal> to <literal>netboot</literal> as SNMP drivers
                            do not support setting of boot devices. One can also configure a node
                            to boot using <literal>netboot</literal> by setting its <literal>capabilities</literal> and updating
                            Nova flavor as described below:</para>
                      <screen language="console">openstack baremetal node set --property capabilities="boot_option:netboot" &lt;node-uuid&gt;
openstack flavor set --property "capabilities:boot_option"="netboot" ironic-flavor</screen>
                    </note>
                  </step>
                  <step>
                    <para>Restart the Ironic conductor service.</para>
                    <screen language="bash">service ironic-conductor restart</screen>
                  </step>
                </procedure>
              </section>
              <section xml:id="ironic-node-configuration">
                <title>Ironic Node Configuration</title>
                <para>Nodes configured to use the SNMP driver should have the <literal>driver</literal> field
                set to the hardware type <literal>snmp</literal> (preferred) or to the classic driver
                <literal>pxe_snmp</literal>.</para>
                <para>The following property values have to be added to the node’s
                <literal>driver_info</literal> field:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>snmp_driver</literal>: PDU manufacturer driver</para>
                  </listitem>
                  <listitem>
                    <para><literal>snmp_address</literal>: The IPv4 address of the PDU controlling this node.</para>
                  </listitem>
                  <listitem>
                    <para><literal>snmp_port</literal>: Optional - A non-standard UDP port to use for SNMP operations.
                        If not specified, the default port (161) is used.</para>
                  </listitem>
                  <listitem>
                    <para><literal>snmp_outlet</literal>: The power outlet on the PDU (1-based indexing).</para>
                  </listitem>
                  <listitem>
                    <para><literal>snmp_version</literal>: Optional - SNMP protocol version
                        (permitted values <literal>1</literal>, <literal>2c</literal> or <literal>3</literal>). If not specified, SNMPv1
                        is chosen.</para>
                  </listitem>
                  <listitem>
                    <para><literal>snmp_community</literal>: (Required for SNMPv1 and SNMPv2c) SNMP community
                        parameter for reads and writes to the PDU.</para>
                  </listitem>
                  <listitem>
                    <para><literal>snmp_security</literal>: (Required for SNMPv3) SNMPv3 User-based Security Model
                        (USM) user name.</para>
                  </listitem>
                </itemizedlist>
                <para>The following command can be used to enroll a node with the <literal>snmp</literal> driver:</para>
                <screen language="bash">openstack baremetal node create --os-baremetal-api-version=1.31 \
  --driver snmp --driver-info snmp_driver=&lt;pdu_manufacturer&gt; \
  --driver-info snmp_address=&lt;ip_address&gt; \
  --driver-info snmp_outlet=&lt;outlet_index&gt; \
  --driver-info snmp_community=&lt;community_string&gt; \
  --properties capabilities=boot_option:netboot</screen>
              </section>
              <section xml:id="pdu-configuration">
                <title>PDU Configuration</title>
                <para>This version of the SNMP power driver does not support SNMPv3 authentication
                or encryption features. When using SNMPv3, the SNMPv3 agent at the PDU must
                be configured in <literal>noAuthNoPriv</literal> mode. Also, the <literal>snmp_security</literal> parameter
                is used to configure SNMP USM user name to the SNMP manager at the power
                driver. The same USM user name must be configured to the target SNMP agent.</para>
              </section>
            </section>
          </section>
          <section xml:id="ilo-driver">
            <title>iLO driver</title>
            <section>
              <title>iLO drivers</title>
              <section>
                <title>Overview</title>
                <para>iLO drivers enable to take advantage of features of iLO management engine in
                HPE ProLiant servers. iLO drivers are targeted for HPE ProLiant Gen8 and Gen9
                systems which have <link xlink:href="https://www.hpe.com/us/en/servers/integrated-lights-out-ilo.html">iLO 4 management engine</link>. From <emphasis role="bold">Pike</emphasis> release iLO
                drivers start supporting ProLiant Gen10 systems which have
                <link xlink:href="https://www.hpe.com/us/en/servers/integrated-lights-out-ilo.html#innovations">iLO 5 management engine</link>. iLO5 conforms to <link xlink:href="https://www.dmtf.org/standards/redfish">Redfish</link> API and hence
                hardware type <literal>redfish</literal> (see <xref linkend="redfish-driver"/>) is also an option for this kind
                of hardware but it will lack the iLO specific features.</para>
                <para>For more details and for up-to-date information (like tested platforms,
                known issues, etc), check the <link xlink:href="https://wiki.openstack.org/wiki/Ironic/Drivers/iLODrivers">iLO driver wiki page</link>.</para>
                <para>For enabling Gen10 systems and getting detailed information on Gen10 feature
                support in Ironic check this <link xlink:href="https://wiki.openstack.org/wiki/Ironic/Drivers/iLODrivers/master#Enabling_ProLiant_Gen10_systems_in_Ironic">Gen10 wiki section</link>.</para>
                <para>ProLiant hardware is supported by the <literal>ilo</literal> hardware type and the following
                classic drivers:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>iscsi_ilo</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>agent_ilo</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>pxe_ilo</literal>
                    </para>
                  </listitem>
                </itemizedlist>
                <note>
                  <para>All HPE ProLiant servers support reference hardware type <literal>ipmi</literal>
                    (see <xref linkend="ipmitool-driver"/>). HPE ProLiant Gen10 servers also support
                    hardware type <literal>redfish</literal> (see <xref linkend="redfish-driver"/>).</para>
                </note>
                <para>The <literal>iscsi_ilo</literal> and <literal>agent_ilo</literal> drivers provide security enhanced
                PXE-less deployment by using iLO virtual media to boot up the bare metal node.
                These drivers send management info through the management channel and separate
                it from the data channel which is used for deployment.</para>
                <para><literal>iscsi_ilo</literal> and <literal>agent_ilo</literal> drivers use deployment ramdisk.
                The <literal>iscsi_ilo</literal> driver deploys from
                ironic conductor and supports both net-boot and local-boot of instance.
                <literal>agent_ilo</literal> deploys from bare metal node and supports both net-boot
                and local-boot of instance.</para>
                <para><literal>pxe_ilo</literal> driver uses PXE/iSCSI for deployment (just like normal PXE driver)
                and deploys from ironic conductor. Additionally, it supports automatic setting of
                requested boot mode from nova. This driver doesn’t require iLO Advanced license.</para>
                <para>The hardware type <literal>ilo</literal> and iLO-based classic drivers support HPE server
                features like:</para>
                <itemizedlist>
                  <listitem>
                    <para>UEFI secure boot</para>
                  </listitem>
                  <listitem>
                    <para>Certificate based validation of iLO</para>
                  </listitem>
                  <listitem>
                    <para>Hardware based secure disk erase using Smart Storage Administrator (SSA) CLI</para>
                  </listitem>
                  <listitem>
                    <para>Out-of-band discovery of server attributes through hardware inspection</para>
                  </listitem>
                  <listitem>
                    <para>In-band RAID configuration</para>
                  </listitem>
                  <listitem>
                    <para>Firmware configuration and secure firmware update</para>
                  </listitem>
                </itemizedlist>
                <section>
                  <title>Hardware Interfaces</title>
                  <para>The <literal>ilo</literal> hardware type supports following hardware interfaces:</para>
                  <itemizedlist>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>boot</term>
                          <listitem>
                            <para>Supports <literal>ilo-virtual-media</literal> and <literal>ilo-pxe</literal>. The default is
                                        <literal>ilo-virtual-media</literal>. They can be enabled by using the
                                        <literal>[DEFAULT]enabled_boot_interfaces</literal> option in <literal>ironic.conf</literal>
                                        as given below:</para>
                            <screen language="ini">[DEFAULT]
enabled_hardware_types = ilo
enabled_boot_interfaces = ilo-virtual-media,ilo-pxe</screen>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>console</term>
                          <listitem>
                            <para>Supports <literal>ilo</literal> and <literal>no-console</literal>. The default is <literal>ilo</literal>.
                                        They can be enabled by using the <literal>[DEFAULT]enabled_console_interfaces</literal>
                                        option in <literal>ironic.conf</literal> as given below:</para>
                            <screen language="ini">[DEFAULT]
enabled_hardware_types = ilo
enabled_console_interfaces = ilo,no-console</screen>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>inspect</term>
                          <listitem>
                            <para>Supports <literal>ilo</literal> and <literal>inspector</literal>. The default is <literal>ilo</literal>. They
                                        can be enabled by using the <literal>[DEFAULT]enabled_inspect_interfaces</literal> option
                                        in <literal>ironic.conf</literal> as given below:</para>
                            <screen language="ini">[DEFAULT]
enabled_hardware_types = ilo
enabled_inspect_interfaces = ilo,inspector</screen>
                            <note>
                              <para><link xlink:href="https://docs.openstack.org/ironic-inspector/pike/">Ironic Inspector</link>
                                            needs to be configured to use <literal>inspector</literal> as the inspect interface.</para>
                            </note>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>management</term>
                          <listitem>
                            <para>Supports only <literal>ilo</literal>. It can be enabled by using the
                                        <literal>[DEFAULT]enabled_management_interfaces</literal> option in <literal>ironic.conf</literal> as
                                        given below:</para>
                            <screen language="ini">[DEFAULT]
enabled_hardware_types = ilo
enabled_management_interfaces = ilo</screen>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>power</term>
                          <listitem>
                            <para>Supports only <literal>ilo</literal>. It can be enabled by using the
                                        <literal>[DEFAULT]enabled_power_interfaces</literal> option in <literal>ironic.conf</literal> as given
                                        below:</para>
                            <screen language="ini">[DEFAULT]
enabled_hardware_types = ilo
enabled_power_interfaces = ilo</screen>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>raid</term>
                          <listitem>
                            <para>Supports <literal>agent</literal> and <literal>no-raid</literal>. The default is <literal>no-raid</literal>.
                                        They can be enabled by using the <literal>[DEFAULT]enabled_raid_interfaces</literal>
                                        option in <literal>ironic.conf</literal> as given below:</para>
                            <screen language="ini">[DEFAULT]
enabled_hardware_types = ilo
enabled_raid_interfaces = agent,no-raid</screen>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>storage</term>
                          <listitem>
                            <para>Supports <literal>cinder</literal> and <literal>noop</literal>. The default is <literal>noop</literal>.
                                        They can be enabled by using the <literal>[DEFAULT]enabled_storage_interfaces</literal>
                                        option in <literal>ironic.conf</literal> as given below:</para>
                            <screen language="ini">[DEFAULT]
enabled_hardware_types = ilo
enabled_storage_interfaces = cinder,noop</screen>
                            <note>
                              <para>The storage interface <literal>cinder</literal> is supported only when corresponding
                                            boot interface of the <literal>ilo</literal> hardware type based node is <literal>ilo-pxe</literal>.
                                            Refer to <xref linkend="boot-from-volume"/> for configuring
                                            <literal>cinder</literal> as a storage interface.</para>
                            </note>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                  </itemizedlist>
                  <para><literal>ilo</literal> hardware type supports all standard <literal>deploy</literal> and <literal>network</literal>
                    interface implementations, see <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-drivers.html">Enabling drivers and hardware types</link> for details.</para>
                  <para>The following command can be used to enroll a ProLiant node with
                    <literal>ilo</literal> hardware type:</para>
                  <screen language="console">openstack baremetal node create --os-baremetal-api-version=1.31 \
    --driver ilo \
    --deploy-interface direct \
    --raid-interface agent \
    --driver-info ilo_address=&lt;ilo-ip-address&gt; \
    --driver-info ilo_username=&lt;ilo-username&gt; \
    --driver-info ilo_password=&lt;ilo-password&gt; \
    --driver-info ilo_deploy_iso=&lt;glance-uuid-of-deploy-iso&gt;</screen>
                  <para>Refer to <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-drivers.html">Enabling drivers and hardware types</link> for detailed
                    explanation of hardware type.</para>
                  <para>To enable the same feature set as provided by all iLO classic drivers,
                    apply the following configuration:</para>
                  <screen language="ini">[DEFAULT]
enabled_hardware_types = ilo
enabled_boot_interfaces = ilo-virtual-media,ilo-pxe
enabled_power_interfaces = ilo
enabled_console_interfaces = ilo
enabled_raid_interfaces = agent
enabled_management_interfaces = ilo
enabled_inspect_interfaces = ilo</screen>
                  <para>The following commands can be used to enroll a node with the same
                    feature set as one of the classic drivers, but using the <literal>ilo</literal>
                    hardware type:</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>iscsi_ilo</literal>:</para>
                      <screen language="console">openstack baremetal node create --os-baremetal-api-version=1.31 \
    --driver ilo \
    --deploy-interface iscsi \
    --boot-interface ilo-virtual-media \
    --driver-info ilo_address=&lt;ilo-ip-address&gt; \
    --driver-info ilo_username=&lt;ilo-username&gt; \
    --driver-info ilo_password=&lt;ilo-password&gt; \
    --driver-info ilo_deploy_iso=&lt;glance-uuid-of-deploy-iso&gt;</screen>
                    </listitem>
                    <listitem>
                      <para><literal>pxe_ilo</literal>:</para>
                      <screen language="console">openstack baremetal node create --os-baremetal-api-version=1.31 \
    --driver ilo \
    --deploy-interface iscsi \
    --boot-interface ilo-pxe \
    --driver-info ilo_address=&lt;ilo-ip-address&gt; \
    --driver-info ilo_username=&lt;ilo-username&gt; \
    --driver-info ilo_password=&lt;ilo-password&gt; \
    --driver-info deploy_kernel=&lt;glance-uuid-of-pxe-deploy-kernel&gt; \
    --driver-info deploy_ramdisk=&lt;glance-uuid-of-deploy-ramdisk&gt;</screen>
                    </listitem>
                    <listitem>
                      <para><literal>agent_ilo</literal>:</para>
                      <screen language="console">openstack baremetal node create --os-baremetal-api-version=1.31 \
    --driver ilo \
    --deploy-interface direct \
    --boot-interface ilo-virtual-media \
    --driver-info ilo_address=&lt;ilo-ip-address&gt; \
    --driver-info ilo_username=&lt;ilo-username&gt; \
    --driver-info ilo_password=&lt;ilo-password&gt; \
    --driver-info ilo_deploy_iso=&lt;glance-uuid-of-deploy-iso&gt;</screen>
                    </listitem>
                  </itemizedlist>
                </section>
              </section>
              <section>
                <title>Prerequisites</title>
                <itemizedlist>
                  <listitem>
                    <para><link xlink:href="https://pypi.python.org/pypi/proliantutils">proliantutils</link> is a python package
                        which contains a set of modules for managing HPE ProLiant hardware.</para>
                    <para>Install <literal>proliantutils</literal> module on the ironic conductor node. Minimum
                        version required is 2.4.0:</para>
                    <screen>$ pip install "proliantutils&gt;=2.4.0"</screen>
                  </listitem>
                  <listitem>
                    <para>ipmitool command must be present on the service node(s) where
                        <literal>ironic-conductor</literal> is running. On most distros, this is provided as part
                        of the ipmitool package. Refer to <xref linkend="ilo-inspection"/>
                        for more information on recommended version.</para>
                  </listitem>
                </itemizedlist>
              </section>
              <section xml:id="different-configuration-for-ilo-drivers">
                <title>Different Configuration for ilo drivers</title>
                <section xml:id="glance-configuration">
                  <title>Glance Configuration</title>
                  <procedure>
                    <step>
                      <para><link xlink:href="https://docs.openstack.org/glance/latest/configuration/configuring.html#configuring-the-swift-storage-backend">Configure Glance image service with its storage backend as Swift</link>.</para>
                    </step>
                    <step>
                      <para>Set a temp-url key for Glance user in Swift. For example, if you have
                            configured Glance with user <literal>glance-swift</literal> and tenant as <literal>service</literal>,
                            then run the below command:</para>
                      <screen>swift --os-username=service:glance-swift post -m temp-url-key:mysecretkeyforglance</screen>
                    </step>
                    <step>
                      <para>Fill the required parameters in the <literal>[glance]</literal> section   in
                            <literal>/etc/ironic/ironic.conf</literal>. Normally, you would be required to fill in the
                            following details:</para>
                      <screen>[glance]
swift_temp_url_key=mysecretkeyforglance
swift_endpoint_url=https://10.10.1.10:8080
swift_api_version=v1
swift_account=AUTH_51ea2fb400c34c9eb005ca945c0dc9e1
swift_container=glance</screen>
                      <para>The details can be retrieved by running the below command:</para>
                      <screen language="bash">$ swift --os-username=service:glance-swift stat -v | grep -i url

StorageURL:     http://10.10.1.10:8080/v1/AUTH_51ea2fb400c34c9eb005ca945c0dc9e1
Meta Temp-Url-Key: mysecretkeyforglance</screen>
                    </step>
                    <step>
                      <para>Swift must be accessible with the same admin credentials configured in
                            Ironic. For example, if Ironic is configured with the below credentials in
                            <literal>/etc/ironic/ironic.conf</literal>:</para>
                      <screen>[keystone_authtoken]
admin_password = password
admin_user = ironic
admin_tenant_name = service</screen>
                      <para>Ensure <literal>auth_version</literal> in <literal>keystone_authtoken</literal> to 2.</para>
                      <para>Run the following command:</para>
                      <screen language="bash">$ swift --os-username ironic --os-password password --os-tenant-name service --auth-version 2 stat

                     Account: AUTH_22af34365a104e4689c46400297f00cb
                  Containers: 2
                     Objects: 18
                       Bytes: 1728346241
Objects in policy "policy-0": 18
  Bytes in policy "policy-0": 1728346241
           Meta Temp-Url-Key: mysecretkeyforglance
                 X-Timestamp: 1409763763.84427
                  X-Trans-Id: tx51de96a28f27401eb2833-005433924b
                Content-Type: text/plain; charset=utf-8
               Accept-Ranges: bytes</screen>
                    </step>
                    <step>
                      <para>Restart the Ironic conductor service:</para>
                      <screen>$ service ironic-conductor restart</screen>
                    </step>
                  </procedure>
                </section>
                <section xml:id="web-server-configuration-on-conductor">
                  <title>Web server configuration on conductor</title>
                  <itemizedlist>
                    <listitem>
                      <para>The HTTP(S) web server can be configured in many ways. For apache
                            web server on SUSE Linux, refer <link xlink:href="https://doc.opensuse.org/documentation/leap/reference/html/book.opensuse.reference/cha.apache2.html">here</link>.</para>
                    </listitem>
                    <listitem>
                      <para>Following configuration variables need to be set in
                            <literal>/etc/ironic/ironic.conf</literal>:</para>
                      <itemizedlist>
                        <listitem>
                          <para><literal>use_web_server_for_images</literal> in <literal>[ilo]</literal> section:</para>
                          <screen>[ilo]
use_web_server_for_images = True</screen>
                        </listitem>
                        <listitem>
                          <para><literal>http_url</literal> and <literal>http_root</literal> in <literal>[deploy]</literal> section:</para>
                          <screen>[deploy]
# Ironic compute node's http root path. (string value)
http_root=/httpboot

# Ironic compute node's HTTP server URL. Example:
# http://192.1.2.3:8080 (string value)
http_url=http://192.168.0.2:8080</screen>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist>
                  <para><literal>use_web_server_for_images</literal>: If the variable is set to <literal>False</literal>, <literal>iscsi_ilo</literal>
                    and <literal>agent_ilo</literal> uses swift containers to host the intermediate floppy
                    image and the boot ISO. If the variable is set to <literal>True</literal>, these drivers
                    use the local web server for hosting the intermediate files. The default value
                    for <literal>use_web_server_for_images</literal> is <literal>False</literal>.</para>
                  <para><literal>http_url</literal>: The value for this variable is prefixed with the generated
                    intermediate files to generate a URL which is attached in the virtual media.</para>
                  <para><literal>http_root</literal>: It is the directory location to which ironic conductor copies
                    the intermediate floppy image and the boot ISO.</para>
                  <note>
                    <para>HTTPS is strongly recommended over HTTP web server configuration for security
                        enhancement. The <literal>iscsi_ilo</literal> and <literal>agent_ilo</literal> will send the instance’s
                        configdrive over an encrypted channel if web server is HTTPS enabled.</para>
                  </note>
                </section>
              </section>
              <section xml:id="enable-driver">
                <title>Enable driver</title>
             <procedure>
                  <step>
                    <para>Build a deploy ISO (and kernel and ramdisk) image, see
                      <link xlink:href="https://docs.openstack.org/ironic/pike/install/deploy-ramdisk.html#deploy-ramdisk">Building or downloading a deploy ramdisk image</link>.</para>
                  </step>
                  <step>
                    <para>See <xref linkend="glance-configuration"/> for configuring glance image service with its storage
                        backend as <literal>swift</literal>.</para>
                  </step>
                  <step>
                    <para>Upload this image to Glance:</para>
                    <screen>glance image-create --name deploy-ramdisk.iso --disk-format iso --container-format bare &lt; deploy-ramdisk.iso</screen>
                  </step>
                  <step>
                    <para>Add the driver name to the list of <literal>enabled_drivers</literal> in
                        <literal>/etc/ironic/ironic.conf</literal>. For example, for <literal>iscsi_ilo</literal> driver:</para>
                    <screen>enabled_drivers = fake,pxe_ipmitool,iscsi_ilo</screen>
                    <para>Similarly it can be added for <literal>agent_ilo</literal> and <literal>pxe_ilo</literal> drivers.</para>
                  </step>
                  <step>
                    <para>Restart the ironic conductor service:</para>
                    <screen>$ service ironic-conductor restart</screen>
                  </step>
                </procedure>
              </section>
              <section>
                <title>Drivers</title>
                <section xml:id="iscsi-ilo-driver">
                  <title>iscsi_ilo driver</title>
                  <section>
                    <title>Overview</title>
                    <para><literal>iscsi_ilo</literal> driver was introduced as an alternative to <literal>pxe_ipmitool</literal>
                        and <literal>pxe_ipminative</literal> drivers for HPE ProLiant servers. <literal>iscsi_ilo</literal> uses
                        virtual media feature in iLO to boot up the bare metal node instead of using
                        PXE or iPXE.</para>
                  </section>
                  <section xml:id="target-users">
                    <title>Target Users</title>
                    <itemizedlist>
                      <listitem>
                        <para>Users who do not want to use PXE/TFTP protocol in their data centers.</para>
                      </listitem>
                      <listitem>
                        <para>Users who have concerns with PXE protocol’s security issues and want to have a
                                security enhanced PXE-less deployment mechanism.</para>
                        <para>The PXE driver passes management information in clear-text to the
                                bare metal node. However, if swift proxy server and glance have HTTPS
                                endpoints (See <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-https.html#enablehttpsinswift">Enabling HTTPS in Swift</link>,
                                 <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-https.html#enabling-https-in-image-service">Enabling HTTPS in Image service</link>
                                for more information), the <literal>iscsi_ilo</literal> driver provides enhanced security by
                                exchanging management information with swift and glance endpoints over HTTPS.
                                The management information, deploy ramdisk and boot images for the instance
                                will be retrieved over encrypted management network via iLO virtual media.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Tested Platforms</title>
                    <para>This driver should work on HPE ProLiant Gen7 servers with iLO 3, Gen8 and Gen9
                        servers with iLO 4 and Gen10 servers with iLO 5. It has been tested with the
                        following servers:</para>
                    <itemizedlist>
                      <listitem>
                        <para>ProLiant DL380 G7</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL380e Gen8</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL580 Gen8 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL180 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL360 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL380 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant XL450 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL360 Gen10</para>
                      </listitem>
                    </itemizedlist>
                    <para>For more up-to-date information on server platform support info, refer
                        <link xlink:href="https://wiki.openstack.org/wiki/Ironic/Drivers/iLODrivers">iLO driver wiki page</link>.</para>
                  </section>
                  <section xml:id="features">
                    <title>Features</title>
                    <itemizedlist>
                      <listitem>
                        <para>PXE-less deploy with virtual media.</para>
                      </listitem>
                      <listitem>
                        <para>Automatic detection of current boot mode.</para>
                      </listitem>
                      <listitem>
                        <para>Automatic setting of the required boot mode, if UEFI boot mode is requested
                                by the nova flavor’s extra spec.</para>
                      </listitem>
                      <listitem>
                        <para>Supports booting the instance from virtual media (netboot) as well as booting
                                locally from disk. By default, the instance will always boot from virtual
                                media for partition images.</para>
                      </listitem>
                      <listitem>
                        <para>UEFI Boot Support</para>
                      </listitem>
                      <listitem>
                        <para>UEFI Secure Boot Support</para>
                      </listitem>
                      <listitem>
                        <para>Passing management information via secure, encrypted management network
                                (virtual media) if swift proxy server and
				                        glance have HTTPS endpoints. See <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-https.html#enablehttpsinswift">Enabling HTTPS in Swift</link> and
                                <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-https.html#enabling-https-in-image-service">Enabling HTTPS in Image service</link> for more
                                information. User image provisioning is done using iSCSI over data network,
                                so this driver has the benefit of security enhancement with the same
                                performance. It segregates management info from data channel.</para>
                      </listitem>
                      <listitem>
                        <para>Supports both out-of-band and in-band cleaning operations. For more details,
                                see <xref linkend="inbandvsoutofbandcleaning"/>.</para>
                      </listitem>
                      <listitem>
                        <para>Remote Console</para>
                      </listitem>
                      <listitem>
                        <para>HW Sensors</para>
                      </listitem>
                      <listitem>
                        <para>Works well for machines with resource constraints (lesser amount of memory).</para>
                      </listitem>
                      <listitem>
                        <para>Support for out-of-band hardware inspection.</para>
                      </listitem>
                      <listitem>
                        <para>Swiftless deploy for intermediate images</para>
                      </listitem>
                      <listitem>
                        <para>HTTP(S) Based Deploy.</para>
                      </listitem>
                      <listitem>
                        <para>iLO drivers with standalone ironic.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Requirements</title>
                    <itemizedlist>
                      <listitem>
                        <para><emphasis role="bold">iLO 4</emphasis> or <emphasis role="bold">iLO 5 Advanced License</emphasis> needs to be installed on iLO to
                                enable Virtual Media Boot feature.</para>
                      </listitem>
                      <listitem>
                        <para><emphasis role="bold">Swift Object Storage Service</emphasis> - iLO driver uses swift to store temporary
                                FAT images as well as boot ISO images.</para>
                      </listitem>
                      <listitem>
                        <para><emphasis role="bold">Glance Image Service with swift configured as its backend</emphasis> - When using
                                <literal>iscsi_ilo</literal> driver, the image containing the deploy ramdisk is retrieved
                                from swift directly by the iLO.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Deploy Process</title>
                    <para>Refer to <xref linkend="netboot-with-glance-and-swift"/>  and
                        <xref linkend="localboot-with-glance-and-swift-for-partition-images"/> for the deploy process
                        of partition image and <xref linkend="localboot-with-glance-and-swift"/> for the deploy
                        process of whole disk image.</para>
                  </section>
                  <section>
                    <title>Configuring and Enabling the driver</title>
                    <para>Refer to <xref linkend="glance-configuration"/> and <xref linkend="enable-driver"/>.</para>
                  </section>
                  <section xml:id="registering-proliant-node-in-ironic">
                    <title>Registering ProLiant node in ironic</title>
                    <para>Nodes configured for iLO driver should have the <literal>driver</literal> property set to
                        <literal>iscsi_ilo</literal>. The following configuration values are also required in
                        <literal>driver_info</literal>:</para>
                    <itemizedlist>
                      <listitem>
                        <para><literal>ilo_address</literal>: IP address or hostname of the iLO.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ilo_username</literal>: Username for the iLO with administrator privileges.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ilo_password</literal>: Password for the above iLO user.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ilo_deploy_iso</literal>: The glance UUID of the deploy ramdisk ISO image.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ca_file</literal>: Optional - CA certificate file to validate iLO.</para>
                      </listitem>
                      <listitem>
                        <para><literal>client_port</literal>: Optional - Port to be used for iLO operations if you are
                                using a custom port on the iLO. Default port used is 443.</para>
                      </listitem>
                      <listitem>
                        <para><literal>client_timeout</literal>: Optional - Timeout for iLO operations. Default timeout
                                is 60 seconds.</para>
                      </listitem>
                      <listitem>
                        <para><literal>console_port</literal>: Optional - Node’s UDP port for console access. Any unused
                                port on the ironic conductor node may be used.</para>
                      </listitem>
                    </itemizedlist>
                    <note>
                      <para>To update SSL certificates into iLO, you can refer to <link xlink:href="http://h20564.www2.hpe.com/hpsc/doc/public/display?docId=c04530504">HPE Integrated
                                Lights-Out Security Technology Brief</link>.
                            You can use iLO hostname or IP address as a ‘Common Name (CN)’ while
                            generating Certificate Signing Request (CSR). Use the same value as
                            <literal>ilo_address</literal> while enrolling node to Bare Metal service to avoid SSL
                            certificate validation errors related to hostname mismatch.</para>
                    </note>
                    <note>
                      <para>If configuration values for <literal>ca_file</literal>, <literal>client_port</literal> and
                            <literal>client_timeout</literal> are not provided in the <literal>driver_info</literal> of the node,
                            the corresponding config variables defined under <literal>[ilo]</literal> section in
                            <literal>ironic.conf</literal> will be used.</para>
                    </note>
                    <para>For example, you could run a similar command like below to enroll the ProLiant
                        node:</para>
                    <screen>ironic node-create -d iscsi_ilo -i ilo_address=&lt;ilo-ip-address&gt; -i ilo_username=&lt;ilo-username&gt; -i ilo_password=&lt;ilo-password&gt; -i ilo_deploy_iso=&lt;glance-uuid-of-deploy-iso&gt;</screen>
                  </section>
                  <section xml:id="boot-modes">
                    <title>Boot modes</title>
                    <para>Refer to <xref linkend="boot-mode-support"/> for more information.</para>
                  </section>
                  <section xml:id="uefi-secure-boot">
                    <title>UEFI Secure Boot</title>
                    <para>Refer to <xref linkend="ilo-uefi-secure-boot-support"/> for more information.</para>
                  </section>
                  <section>
                    <title>Node cleaning</title>
                    <para>Refer to <xref linkend="ilo-node-cleaning"/> for more information.</para>
                  </section>
                  <section xml:id="swiftless-deploy-for-intermediate-deploy-and-boot-images">
                    <title>Swiftless deploy for intermediate deploy and boot images</title>
                    <para>Refer to <xref linkend="swiftless-deploy-for-intermediate-images"/> for more
                        information.</para>
                  </section>
                  <section xml:id="http-s-based-deploy">
                    <title>HTTP(S) Based Deploy</title>
                    <para>Refer to <xref linkend="http-s-based-deploy-support"/> for more information.</para>
                  </section>
                  <section xml:id="ilo-drivers-with-standalone-ironic">
                    <title>iLO drivers with standalone ironic</title>
                    <para>Refer to <xref linkend="support-for-ilo-drivers-with-standalone-ironic"/> for
                        more information.</para>
                  </section>
                  <section>
                    <title>RAID Configuration</title>
                    <para>Refer to <xref linkend="raid-support"/> for more information.</para>
                  </section>
                </section>
                <section xml:id="agent-ilo-driver">
                  <title>agent_ilo driver</title>
                  <section>
                    <title>Overview</title>
                    <para><literal>agent_ilo</literal> driver was introduced as an alternative to <literal>agent_ipmitool</literal>
                        and <literal>agent_ipminative</literal> drivers for HPE ProLiant servers. <literal>agent_ilo</literal> driver
                        uses virtual media feature in HPE ProLiant bare metal servers to boot up the
                        Ironic Python Agent (IPA) on the bare metal node instead of using PXE. For
                        more information on IPA, refer
                        <link xlink:href="https://wiki.openstack.org/wiki/Ironic-python-agent"/>.</para>
                  </section>
                  <section>
                    <title>Target Users</title>
                    <itemizedlist>
                      <listitem>
                        <para>Users who do not want to use PXE/TFTP protocol on their data centres.</para>
                      </listitem>
                      <listitem>
                        <para>Users who have concerns on PXE based agent driver’s security and
                                want to have a security enhanced PXE-less deployment mechanism.</para>
                        <para>The PXE based agent drivers pass management information in clear-text to
                                the bare metal node. However, if swift proxy server and glance have HTTPS
                                endpoints. See <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-https.html#enablehttpsinswift">Enabling HTTPS in Swift</link>,
                                <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-https.html#enablehttpsinglance">Enabling HTTPS in Image service</link> for more
                                information. The <literal>agent_ilo</literal> driver provides enhanced security by
                                exchanging authtoken and management information with swift and glance
                                endpoints over HTTPS. The management information and deploy ramdisk will be
                                retrieved over encrypted management network via iLO.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Tested Platforms</title>
                    <para>This driver should work on HPE ProLiant Gen7 servers with iLO 3, Gen8 and Gen9
                        servers with iLO 4 and Gen10 servers with iLO 5. It has been tested with the
                        following servers:</para>
                    <itemizedlist>
                      <listitem>
                        <para>ProLiant DL380 G7</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL380e Gen8</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL580e Gen8</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL360 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL380 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL180 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant XL450 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL360 Gen10</para>
                      </listitem>
                    </itemizedlist>
                    <para>For more up-to-date information, check the
                        <link xlink:href="https://wiki.openstack.org/wiki/Ironic/Drivers/iLODrivers">iLO driver wiki page</link>.</para>
                  </section>
                  <section>
                    <title>Features</title>
                    <itemizedlist>
                      <listitem>
                        <para>PXE-less deploy with virtual media using Ironic Python Agent(IPA).</para>
                      </listitem>
                      <listitem>
                        <para>Support for out-of-band cleaning operations.</para>
                      </listitem>
                      <listitem>
                        <para>Remote Console</para>
                      </listitem>
                      <listitem>
                        <para>HW Sensors</para>
                      </listitem>
                      <listitem>
                        <para>IPA runs on the bare metal node and pulls the image directly from swift.</para>
                      </listitem>
                      <listitem>
                        <para>Supports booting the instance from virtual media (netboot) as well as booting
                                locally from disk. By default, the instance will always boot from virtual
                                media for partition images.</para>
                      </listitem>
                      <listitem>
                        <para>Segregates management info from data channel.</para>
                      </listitem>
                      <listitem>
                        <para>UEFI Boot Support</para>
                      </listitem>
                      <listitem>
                        <para>UEFI Secure Boot Support</para>
                      </listitem>
                      <listitem>
                        <para>Support to use default in-band cleaning operations supported by
                                Ironic Python Agent. For more details, see <xref linkend="inbandvsoutofbandcleaning"/>.</para>
                      </listitem>
                      <listitem>
                        <para>Support for out-of-band hardware inspection.</para>
                      </listitem>
                      <listitem>
                        <para>Swiftless deploy for intermediate images.</para>
                      </listitem>
                      <listitem>
                        <para>HTTP(S) Based Deploy.</para>
                      </listitem>
                      <listitem>
                        <para>iLO drivers with standalone ironic.</para>
                      </listitem>
                      <listitem>
                        <para>Supports tenant network isolation for node instances provisioned for
                                vlan type networks.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Requirements</title>
                    <itemizedlist>
                      <listitem>
                        <para><emphasis role="bold">iLO 4</emphasis> or <emphasis role="bold">iLO 5 Advanced License</emphasis> needs to be installed on iLO to
                                enable Virtual Media Boot feature.</para>
                      </listitem>
                      <listitem>
                        <para><emphasis role="bold">Swift Object Storage Service</emphasis> - iLO driver uses swift to store temporary
                                FAT images as well as boot ISO images.</para>
                      </listitem>
                      <listitem>
                        <para><emphasis role="bold">Glance Image Service with swift configured as its backend</emphasis> - When using
                                <literal>agent_ilo</literal> driver, the image containing the agent is retrieved from
                                swift directly by the iLO.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Deploy Process</title>
                    <para>Refer to <xref linkend="netboot-with-glance-and-swift"/>  and
                        <xref linkend="localboot-with-glance-and-swift-for-partition-images"/> for the deploy process
                        of partition image and <xref linkend="localboot-with-glance-and-swift"/> for the deploy
                        process of whole disk image.</para>
                  </section>
                  <section>
                    <title>Configuring and Enabling the driver</title>
                    <para>Refer to <xref linkend="glance-configuration"/> and <xref linkend="enable-driver"/>.</para>
                  </section>
                  <section>
                    <title>Registering ProLiant node in ironic</title>
                    <para>Nodes configured for iLO driver should have the <literal>driver</literal> property set to
                        <literal>agent_ilo</literal>. The following configuration values are also required in
                        <literal>driver_info</literal>:</para>
                    <itemizedlist>
                      <listitem>
                        <para><literal>ilo_address</literal>: IP address or hostname of the iLO.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ilo_username</literal>: Username for the iLO with administrator privileges.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ilo_password</literal>: Password for the above iLO user.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ilo_deploy_iso</literal>: The glance UUID of the deploy ramdisk ISO image.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ca_file</literal>: (optional) CA certificate file to validate iLO.</para>
                      </listitem>
                      <listitem>
                        <para><literal>client_port</literal>: (optional) Port to be used for iLO operations if you are
                                using a custom port on the iLO. Default port used is 443.</para>
                      </listitem>
                      <listitem>
                        <para><literal>client_timeout</literal>: (optional) Timeout for iLO operations. Default timeout
                                is 60 seconds.</para>
                      </listitem>
                      <listitem>
                        <para><literal>console_port</literal>: (optional) Node’s UDP port for console access. Any unused
                                port on the ironic conductor node may be used.</para>
                      </listitem>
                    </itemizedlist>
                    <note>
                      <para>To update SSL certificates into iLO, you can refer to <link xlink:href="http://h20564.www2.hpe.com/hpsc/doc/public/display?docId=c04530504">HPE Integrated
                                Lights-Out Security Technology Brief</link>.
                            You can use iLO hostname or IP address as a ‘Common Name (CN)’ while
                            generating Certificate Signing Request (CSR). Use the same value as
                            <literal>ilo_address</literal> while enrolling node to Bare Metal service to avoid SSL
                            certificate validation errors related to hostname mismatch.</para>
                    </note>
                    <note>
                      <para>If configuration values for <literal>ca_file</literal>, <literal>client_port</literal> and
                            <literal>client_timeout</literal> are not provided in the <literal>driver_info</literal> of the node,
                            the corresponding config variables defined under <literal>[ilo]</literal> section in
                            ironic.conf will be used.</para>
                    </note>
                    <para>For example, you could run a similar command like below to enroll the ProLiant
                        node:</para>
                    <screen>ironic node-create -d agent_ilo -i ilo_address=&lt;ilo-ip-address&gt; -i ilo_username=&lt;ilo-username&gt; -i ilo_password=&lt;ilo-password&gt; -i ilo_deploy_iso=&lt;glance-uuid-of-deploy-iso&gt;</screen>
                  </section>
                  <section>
                    <title>Boot modes</title>
                    <para>Refer to <xref linkend="boot-mode-support"/> for more information.</para>
                  </section>
                  <section>
                    <title>UEFI Secure Boot</title>
                    <para>Refer to <xref linkend="ilo-uefi-secure-boot-support"/> for more information.</para>
                  </section>
                  <section>
                    <title>Node cleaning</title>
                    <para>Refer to <xref linkend="ilo-node-cleaning"/> for more information.</para>
                  </section>
                  <section>
                    <title>Swiftless deploy for intermediate deploy and boot images</title>
                    <para>Refer to <xref linkend="swiftless-deploy-for-intermediate-images"/> for more
                        information.</para>
                  </section>
                  <section>
                    <title>HTTP(S) Based Deploy</title>
                    <para>Refer to <xref linkend="http-s-based-deploy-support"/> for more information.</para>
                  </section>
                  <section>
                    <title>iLO drivers with standalone ironic</title>
                    <para>Refer to <xref linkend="support-for-ilo-drivers-with-standalone-ironic"/> for
                        more information.</para>
                  </section>
                  <section>
                    <title>RAID Configuration</title>
                    <para>Refer to <xref linkend="raid-support"/> for more information.</para>
                  </section>
                </section>
                <section xml:id="pxe-ilo-driver">
                  <title>pxe_ilo driver</title>
                  <section>
                    <title>Overview</title>
                    <para><literal>pxe_ilo</literal> driver uses PXE/iSCSI (just like <literal>pxe_ipmitool</literal> driver) to
                        deploy the image and uses iLO to do power and management operations on the
                        bare metal node(instead of using IPMI).</para>
                  </section>
                  <section>
                    <title>Target Users</title>
                    <itemizedlist>
                      <listitem>
                        <para>Users who want to use PXE/iSCSI for deployment in their environment or who
                                don’t have Advanced License in their iLO.</para>
                      </listitem>
                      <listitem>
                        <para>Users who don’t want to configure boot mode manually on the bare metal node.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Tested Platforms</title>
                    <para>This driver should work on HPE ProLiant Gen7 servers with iLO 3, Gen8 and Gen9
                        servers with iLO 4 and Gen10 servers with iLO 5. It has been tested with the
                        following servers:</para>
                    <itemizedlist>
                      <listitem>
                        <para>ProLiant DL380 G7</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL380e Gen8</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL380e Gen8</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL580 Gen8 (BIOS/UEFI)</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL360 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL380 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant XL450 Gen9 UEFI</para>
                      </listitem>
                      <listitem>
                        <para>ProLiant DL360 Gen10</para>
                      </listitem>
                    </itemizedlist>
                    <para>For more up-to-date information, check the
                        <link xlink:href="https://wiki.openstack.org/wiki/Ironic/Drivers/iLODrivers">iLO driver wiki page</link>.</para>
                  </section>
                  <section>
                    <title>Features</title>
                    <itemizedlist>
                      <listitem>
                        <para>Automatic detection of current boot mode.</para>
                      </listitem>
                      <listitem>
                        <para>Automatic setting of the required boot mode, if UEFI boot mode is requested
                                by the nova flavor’s extra spec.</para>
                      </listitem>
                      <listitem>
                        <para>Supports both out-of-band and in-band cleaning operations. For more details,
                                see <xref linkend="inbandvsoutofbandcleaning"/>.</para>
                      </listitem>
                      <listitem>
                        <para>Support for out-of-band hardware inspection.</para>
                      </listitem>
                      <listitem>
                        <para>Supports UEFI Boot mode</para>
                      </listitem>
                      <listitem>
                        <para>Supports UEFI Secure Boot</para>
                      </listitem>
                      <listitem>
                        <para>HTTP(S) Based Deploy.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Requirements</title>
                    <para>None.</para>
                  </section>
                  <section>
                    <title>Configuring and Enabling the driver</title>
                    <procedure>
                      <step>
                        <para>Build a deploy image, see <link xlink:href="https://docs.openstack.org/ironic/pike/install/deploy-ramdisk.html#deploy-ramdisk">Building or downloading a deploy ramdisk image</link>.</para>
                      </step>
                      <step>
                        <para>Upload this image to glance:</para>
                        <screen>glance image-create --name deploy-ramdisk.kernel --disk-format aki --container-format aki &lt; deploy-ramdisk.kernel
glance image-create --name deploy-ramdisk.initramfs --disk-format ari --container-format ari &lt; deploy-ramdisk.initramfs</screen>
                      </step>
                      <step>
                        <para>Add <literal>pxe_ilo</literal> to the list of <literal>enabled_drivers</literal> in
                                <literal>/etc/ironic/ironic.conf</literal>. For example::</para>
                        <screen>enabled_drivers = fake,pxe_ipmitool,pxe_ilo</screen>
                      </step>
                      <step>
                        <para>Restart the ironic conductor service:</para>
                        <screen>service ironic-conductor restart</screen>
                      </step>
                    </procedure>
                  </section>
                  <section>
                    <title>Registering ProLiant node in ironic</title>
                    <para>Nodes configured for iLO driver should have the <literal>driver</literal> property set to
                        <literal>pxe_ilo</literal>. The following configuration values are also required in
                        <literal>driver_info</literal>:</para>
                    <itemizedlist>
                      <listitem>
                        <para><literal>ilo_address</literal>: IP address or hostname of the iLO.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ilo_username</literal>: Username for the iLO with administrator privileges.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ilo_password</literal>: Password for the above iLO user.</para>
                      </listitem>
                      <listitem>
                        <para><literal>deploy_kernel</literal>: The glance UUID of the deployment kernel.</para>
                      </listitem>
                      <listitem>
                        <para><literal>deploy_ramdisk</literal>: The glance UUID of the deployment ramdisk.</para>
                      </listitem>
                      <listitem>
                        <para><literal>ca_file</literal>: (optional) CA certificate file to validate iLO.</para>
                      </listitem>
                      <listitem>
                        <para><literal>client_port</literal>: (optional) Port to be used for iLO operations if you are
                                using a custom port on the iLO. Default port used is 443.</para>
                      </listitem>
                      <listitem>
                        <para><literal>client_timeout</literal>: (optional) Timeout for iLO operations. Default timeout
                                is 60 seconds.</para>
                      </listitem>
                      <listitem>
                        <para><literal>console_port</literal>: (optional) Node’s UDP port for console access. Any unused
                                port on the ironic conductor node may be used.</para>
                      </listitem>
                    </itemizedlist>
                    <note>
                      <para>To update SSL certificates into iLO, you can refer to <link xlink:href="http://h20564.www2.hpe.com/hpsc/doc/public/display?docId=c04530504">HPE Integrated
                                Lights-Out Security Technology Brief</link>.
                            You can use iLO hostname or IP address as a ‘Common Name (CN)’ while
                            generating Certificate Signing Request (CSR). Use the same value as
                            <literal>ilo_address</literal> while enrolling node to Bare Metal service to avoid SSL
                            certificate validation errors related to hostname mismatch.</para>
                    </note>
                    <note>
                      <para>If configuration values for <literal>ca_file</literal>, <literal>client_port</literal> and
                            <literal>client_timeout</literal> are not provided in the <literal>driver_info</literal> of the node,
                            the corresponding config variables defined under <literal>[ilo]</literal> section in
                            ironic.conf will be used.</para>
                    </note>
                    <para>For example, you could run a similar command like below to enroll the ProLiant
                        node:</para>
                    <screen>ironic node-create -d pxe_ilo -i ilo_address=&lt;ilo-ip-address&gt; -i ilo_username=&lt;ilo-username&gt; -i ilo_password=&lt;ilo-password&gt; -i deploy_kernel=&lt;glance-uuid-of-pxe-deploy-kernel&gt; -i deploy_ramdisk=&lt;glance-uuid-of-deploy-ramdisk&gt;</screen>
                  </section>
                  <section>
                    <title>Boot modes</title>
                    <para>Refer to <xref linkend="boot-mode-support"/> for more information.</para>
                  </section>
                  <section>
                    <title>UEFI Secure Boot</title>
                    <para>Refer to <xref linkend="ilo-uefi-secure-boot-support"/> for more information.></para>
                  </section>
                  <section>
                    <title>Node Cleaning</title>
                    <para>Refer to <xref linkend="ilo-node-cleaning"/> for more information.</para>
                  </section>
                  <section>
                    <title>HTTP(S) Based Deploy</title>
                    <para>Refer to <xref linkend="http-s-based-deploy-support"/> for more information.</para>
                  </section>
                  <section>
                    <title>iLO drivers with standalone ironic</title>
                    <para>Refer to <xref linkend="support-for-ilo-drivers-with-standalone-ironic"/> for more information.</para>
                  </section>
                  <section>
                    <title>RAID Configuration</title>
                    <para>Refer to <xref linkend="raid-support"/> for more information.</para>
                  </section>
                </section>
              </section>
              <section>
                <title>Functionalities across drivers</title>
                <section xml:id="boot-mode-support">
                  <title>Boot mode support</title>
                  <para>The hardware type <literal>ilo</literal> and iLO-based classic drivers support automatic
                    detection and setting of boot mode (Legacy BIOS or UEFI).</para>
                  <itemizedlist>
                    <listitem>
                      <para>When boot mode capability is not configured:</para>
                      <itemizedlist>
                        <listitem>
                          <para>If config variable <literal>default_boot_mode</literal> in <literal>[ilo]</literal> section of
                                    ironic configuration file is set to either <literal>bios</literal> or <literal>uefi</literal>, then iLO
                                    drivers use that boot mode for provisioning the baremetal ProLiant
                                    servers.</para>
                        </listitem>
                        <listitem>
                          <para>If the pending boot mode is set on the node then iLO drivers use that boot
                                    mode for provisioning the baremetal ProLiant servers.</para>
                        </listitem>
                        <listitem>
                          <para>If the pending boot mode is not set on the node then iLO drivers use <literal>uefi</literal>
                                    boot mode for UEFI capable servers and <literal>bios</literal> when UEFI is not supported.</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                    <listitem>
                      <para>When boot mode capability is configured, the driver sets the pending boot
                            mode to the configured value.</para>
                    </listitem>
                    <listitem>
                      <para>Only one boot mode (either <literal>uefi</literal> or <literal>bios</literal>) can be configured for
                            the node.</para>
                    </listitem>
                    <listitem>
                      <para>If the operator wants a node to boot always in <literal>uefi</literal> mode or <literal>bios</literal>
                            mode, then they may use <literal>capabilities</literal> parameter within <literal>properties</literal>
                            field of an ironic node.</para>
                      <para>To configure a node in <literal>uefi</literal> mode, then set <literal>capabilities</literal> as below:</para>
                      <screen>ironic node-update &lt;node-uuid&gt; add properties/capabilities='boot_mode:uefi'</screen>
                      <para>Nodes having <literal>boot_mode</literal> set to <literal>uefi</literal> may be requested by adding an
                            <literal>extra_spec</literal> to the nova flavor:</para>
                      <screen>nova flavor-key ironic-test-3 set capabilities:boot_mode="uefi"
nova boot --flavor ironic-test-3 --image test-image instance-1</screen>
                      <para>If <literal>capabilities</literal> is used in <literal>extra_spec</literal> as above, nova scheduler
                            (<literal>ComputeCapabilitiesFilter</literal>) will match only ironic nodes which have
                            the <literal>boot_mode</literal> set appropriately in <literal>properties/capabilities</literal>. It will
                            filter out rest of the nodes.</para>
                      <para>The above facility for matching in nova can be used in heterogeneous
                            environments where there is a mix of <literal>uefi</literal> and <literal>bios</literal> machines, and
                            operator wants to provide a choice to the user regarding boot modes. If the
                            flavor doesn’t contain <literal>boot_mode</literal> then nova scheduler will not consider
                            boot mode as a placement criteria, hence user may get either a BIOS or UEFI
                            machine that matches with user specified flavors.</para>
                    </listitem>
                  </itemizedlist>
                  <para>The automatic boot ISO creation for UEFI boot mode has been enabled in Kilo.
                    The manual creation of boot ISO for UEFI boot mode is also possible, but note that it is not officially supported.
                    For the latter, the boot ISO for the deploy image needs to be built
                    separately and the deploy image’s <literal>boot_iso</literal> property in glance should
                    contain the glance UUID of the boot ISO. For building boot ISO, add the <literal>iso</literal>
                    element to the <link xlink:href="https://pypi.python.org/pypi/diskimage-builder">diskimage-builder</link>
                    command to build the image. For example:</para>
                   <screen>disk-image-create ubuntu baremetal iso</screen>
                </section>
                <section xml:id="ilo-uefi-secure-boot-support">
                  <title>UEFI Secure Boot Support</title>
                  <para>The hardware type <literal>ilo</literal> and iLO-based classic drivers support secure boot
                    deploy.</para>
                  <para>The UEFI secure boot can be configured in ironic by adding
                    <literal>secure_boot</literal> parameter in the <literal>capabilities</literal> parameter  within
                    <literal>properties</literal> field of an ironic node.</para>
                  <para><literal>secure_boot</literal> is a boolean parameter and takes value as <literal>true</literal> or
                    <literal>false</literal>.</para>
                  <para>To enable <literal>secure_boot</literal> on a node add it to <literal>capabilities</literal> as below:</para>
                  <screen>ironic node-update &lt;node-uuid&gt; add properties/capabilities='secure_boot:true'</screen>
                  <para>Alternatively see <xref linkend="ilo-inspection"/> to know how to
                    automatically populate the secure boot capability.</para>
                  <para>Nodes having <literal>secure_boot</literal> set to <literal>true</literal> may be requested by adding an
                    <literal>extra_spec</literal> to the nova flavor:</para>
                  <screen>nova flavor-key ironic-test-3 set capabilities:secure_boot="true"
nova boot --flavor ironic-test-3 --image test-image instance-1</screen>
                  <para>If <literal>capabilities</literal> is used in <literal>extra_spec</literal> as above, nova scheduler
                    (<literal>ComputeCapabilitiesFilter</literal>) will match only ironic nodes which have
                    the <literal>secure_boot</literal> set appropriately in <literal>properties/capabilities</literal>. It will
                    filter out rest of the nodes.</para>
                  <para>The above facility for matching in nova can be used in heterogeneous
                    environments where there is a mix of machines supporting and not supporting
                    UEFI secure boot, and operator wants to provide a choice to the user
                    regarding secure boot. If the flavor doesn’t contain <literal>secure_boot</literal> then
                    nova scheduler will not consider secure boot mode as a placement criteria,
                    hence user may get a secure boot capable machine that matches with user
                    specified flavors but deployment would not use its secure boot capability.
                    Secure boot deploy would happen only when it is explicitly specified through
                    flavor.</para>
                  <para>You may use element <literal>ubuntu-signed</literal> or <literal>fedora</literal> to build signed deploy iso and
                    user images with <link xlink:href="https://pypi.python.org/pypi/diskimage-builder">diskimage-builder</link>, but note that custom images are not officially supported.
                    Refer to <link xlink:href="https://docs.openstack.org/ironic/pike/install/deploy-ramdisk.html#deploy-ramdisk">Building or downloading a deploy ramdisk image</link>
                    for more information on building deploy ramdisk.</para>
                   <para>The below command creates files named <literal>cloud-image-boot.iso</literal>, <literal>cloud-image.initrd</literal>,
                     <literal>cloud-image.vmlinuz</literal> and <literal>cloud-image.qcow2</literal> in the current working directory:</para>
                   <screen>cd &lt;path-to-diskimage-builder&gt;
./bin/disk-image-create -o cloud-image ubuntu-signed baremetal iso</screen>
                  <note>
                    <para>In UEFI secure boot, digitally signed bootloader should be able to validate
                        digital signatures of kernel during boot process. This requires that the
                        bootloader contains the digital signatures of the kernel.
                        For <literal>iscsi_ilo</literal> driver, we recommend that <literal>boot_iso</literal> property for
                        user image contains the glance UUID of the boot ISO.
                        If <literal>boot_iso</literal> property is not updated in glance for the user image, it
                        would create the <literal>boot_iso</literal> using bootloader from the deploy iso. This
                        <literal>boot_iso</literal> will be able to boot the user image in UEFI secure boot
                        environment only if the bootloader is signed and can validate digital
                        signatures of user image kernel.</para>
                  </note>
                  <para>Ensure the public key of the signed image is loaded into bare metal to deploy
                    signed images.
                    For HPE ProLiant Gen9 servers, one can enroll public key using iLO System
                    Utilities UI. Refer to section <literal>Accessing Secure Boot options</literal> in
                    <link xlink:href="http://www.hp.com/ctg/Manual/c04398276.pdf">HP UEFI System Utilities User Guide</link>.
                    One can also refer to white paper on <link xlink:href="http://h20195.www2.hp.com/V2/getpdf.aspx/4AA5-4496ENW.pdf">Secure Boot for Linux on HP ProLiant
                        servers</link> for additional details.</para>
                  <para>For more up-to-date information, refer
                    <link xlink:href="https://wiki.openstack.org/wiki/Ironic/Drivers/iLODrivers">iLO driver wiki page</link></para>
                </section>
                <section xml:id="ilo-node-cleaning">
                  <title>ilo Node Cleaning Support</title>
                  <para>The hardware type <literal>ilo</literal> and iLO-based classic drivers support node cleaning.</para>
                  <para>For more information on node cleaning, see <xref linkend="node-cleaning"/>.</para>
                  <section>
                    <title>Supported <emphasis role="bold">Automated</emphasis> Cleaning Operations</title>
                    <itemizedlist>
                      <listitem>
                        <para>The automated cleaning operations supported are:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>reset_bios_to_default</literal>:
                                        Resets system ROM settings to default. By default, enabled with priority
                                        10. This clean step is supported only on Gen9 and above servers.</para>
                          </listitem>
                          <listitem>
                            <para><literal>reset_secure_boot_keys_to_default</literal>:
                                        Resets secure boot keys to manufacturer’s defaults. This step is supported
                                        only on Gen9 and above servers. By default, enabled with priority 20.</para>
                          </listitem>
                          <listitem>
                            <para><literal>reset_ilo_credential</literal>:
                                        Resets the iLO password, if <literal>ilo_change_password</literal> is specified as part of
                                        node’s driver_info. By default, enabled with priority 30.</para>
                          </listitem>
                          <listitem>
                            <para><literal>clear_secure_boot_keys</literal>:
                                        Clears all secure boot keys. This step is supported only on Gen9 and above
                                        servers. By default, this step is disabled.</para>
                          </listitem>
                          <listitem>
                            <para><literal>reset_ilo</literal>:
                                        Resets the iLO. By default, this step is disabled.</para>
                          </listitem>
                          <listitem>
                            <para><literal>erase_devices</literal>:
                                        An inband clean step that performs disk erase on all the disks including
                                        the disks visible to OS as well as the raw disks visible to Smart
                                        Storage Administrator (SSA). This step supports erasing of the raw disks
                                        visible to SSA in Proliant servers only with the ramdisk. By default, this step is disabled.
                                        See <xref linkend="disk-erase-support"/> for more details.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>For in-band cleaning operations supported by <literal>agent_ilo</literal> driver, see
                                <xref linkend="inbandvsoutofbandcleaning"/>.</para>
                      </listitem>
                      <listitem>
                        <para>All the automated cleaning steps have an explicit configuration option for
                                priority. In order to disable or change the priority of the automated clean
                                steps, respective configuration option for priority should be updated in
                                ironic.conf.</para>
                      </listitem>
                      <listitem>
                        <para>Updating clean step priority to 0 disables that particular clean step
                                and will not run during automated cleaning.</para>
                      </listitem>
                      <listitem>
                        <para>Configuration Options for the automated clean steps are listed under
                                <literal>[ilo]</literal> and <literal>[deploy]</literal> section in ironic.conf</para>
                        <screen>[ilo]
clean_priority_reset_ilo=0
clean_priority_reset_bios_to_default=10
clean_priority_reset_secure_boot_keys_to_default=20
clean_priority_clear_secure_boot_keys=0
clean_priority_reset_ilo_credential=30

[deploy]
erase_devices_priority=0</screen>
                      </listitem>
                    </itemizedlist>
                    <para>For more information on node automated cleaning, see <xref linkend="automated-cleaning"/></para>
                  </section>
                  <section xml:id="supported-manual-cleaning-operations">
                    <title>Supported <emphasis role="bold">Manual</emphasis> Cleaning Operations</title>
                    <itemizedlist>
                      <listitem>
                        <para>The manual cleaning operations supported are:</para>
                        <variablelist>
                          <varlistentry>
                            <term><literal>activate_license</literal>:</term>
                            <listitem>
                              <para>Activates the iLO Advanced license. This is an out-of-band manual cleaning
                                            step associated with the <literal>management</literal> interface. See
                                            <xref linkend="activating-ilo-advanced-license-as-manual-clean-step"/> for user guidance
                                            on usage. This operation cannot be performed using virtual
                                            media based drivers like <literal>iscsi_ilo</literal> and <literal>agent_ilo</literal> as they need this
                                            type of advanced license already active to use virtual media to boot into
                                            to start cleaning operation. Virtual media is an advanced feature. If an
                                            advanced license is already active and the user wants to overwrite the
                                            current license key, for example in case of a multi-server activation key
                                            delivered with a flexible-quantity kit or after completing an Activation
                                            Key Agreement (AKA), then these drivers can still be used for executing
                                            this cleaning step.</para>
                            </listitem>
                          </varlistentry>
                          <varlistentry>
                            <term><literal>update_firmware</literal>:</term>
                            <listitem>
                              <para>Updates the firmware of the devices. Also an out-of-band step associated
                                            with the <literal>management</literal> interface. See
                                            <xref linkend="initiating-firmware-update-as-manual-clean-step"/> for user guidance on
                                            usage. The supported devices for firmware update are: <literal>ilo</literal>, <literal>cpld</literal>,
                                            <literal>power_pic</literal>, <literal>bios</literal> and <literal>chassis</literal>. Refer to below table for
                                            the commonly used descriptions.</para>
                              <informaltable>
                                <tgroup cols="2">
                                  <colspec colname="c1" colwidth="30"/>
                                  <colspec colname="c2" colwidth="80"/>
                                  <thead>
                                    <row>
                                      <entry>
                                        <para>Device</para>
                                      </entry>
                                      <entry>
                                        <para>Description</para>
                                      </entry>
                                    </row>
                                  </thead>
                                  <tbody>
                                    <row>
                                      <entry>
                                        <para>
                                          <literal>ilo</literal>
                                        </para>
                                      </entry>
                                      <entry>
                                        <para>BMC for HPE ProLiant servers</para>
                                      </entry>
                                    </row>
                                    <row>
                                      <entry>
                                        <para>
                                          <literal>cpld</literal>
                                        </para>
                                      </entry>
                                      <entry>
                                        <para>System programmable logic device</para>
                                      </entry>
                                    </row>
                                    <row>
                                      <entry>
                                        <para>
                                          <literal>power_pic</literal>
                                        </para>
                                      </entry>
                                      <entry>
                                        <para>Power management controller</para>
                                      </entry>
                                    </row>
                                    <row>
                                      <entry>
                                        <para>
                                          <literal>bios</literal>
                                        </para>
                                      </entry>
                                      <entry>
                                        <para>HPE ProLiant System ROM</para>
                                      </entry>
                                    </row>
                                    <row>
                                      <entry>
                                        <para>
                                          <literal>chassis</literal>
                                        </para>
                                      </entry>
                                      <entry>
                                        <para>System chassis device</para>
                                      </entry>
                                    </row>
                                  </tbody>
                                </tgroup>
                              </informaltable>
                              <para>Some devices firmware cannot be updated via this method, such as: storage
                                            controllers, host bus adapters, disk drive firmware, network interfaces
                                            and Onboard Administrator (OA).</para>
                            </listitem>
                          </varlistentry>
                        </variablelist>
                      </listitem>
                      <listitem>
                        <para>iLO with firmware version 1.5 is minimally required to support all the
                                operations.</para>
                      </listitem>
                    </itemizedlist>
                    <para>For more information on node manual cleaning, see <xref linkend="manual-cleaning"/>.</para>
                  </section>
                </section>
                <section xml:id="ilo-inspection">
                  <title>Hardware Inspection Support</title>
                  <para>The hardware type <literal>ilo</literal> and iLO-based classic drivers support hardware
                    inspection.</para>
                  <note>
                    <itemizedlist>
                      <listitem>
                        <para>The disk size is returned by RIBCL/RIS only when RAID is preconfigured
                                on the storage. If the storage is Direct Attached Storage, then
                                RIBCL/RIS fails to get the disk size.</para>
                      </listitem>
                      <listitem>
                        <para>The SNMPv3 inspection gets disk size for all types of storages.
                                If RIBCL/RIS is unable to get disk size and SNMPv3 inspection is
                                requested, the proliantutils does SNMPv3 inspection to get the
                                disk size. If proliantutils is unable to get the disk size, it raises
                                an error. This feature is available in proliantutils release
                                version &gt;= 2.2.0.</para>
                      </listitem>
                      <listitem>
                        <para>The iLO must be updated with SNMPv3 authentication details.
                                Refer to the section <literal>SNMPv3 Authentication</literal> in <link xlink:href="http://h20566.www2.hpe.com/hpsc/doc/public/display?docId=c03334051">HPE iLO4 User Guide</link>
                                for setting up authentication details on iLO.
                                The  following parameters are mandatory to be given in <literal>driver_info</literal>
                                for SNMPv3 inspection:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>snmp_auth_user</literal>: The SNMPv3 user.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_auth_prot_password</literal>: The auth protocol pass phrase.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_auth_priv_password</literal>: The privacy protocol pass phrase.</para>
                          </listitem>
                        </itemizedlist>
                        <para>The  following parameters are optional for SNMPv3 inspection:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>snmp_auth_protocol</literal>: The Auth Protocol. The valid values
                                        are “MD5” and “SHA”. The iLO default value is “MD5”.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_auth_priv_protocol</literal>: The Privacy protocol. The valid
                                        values are “AES” and “DES”. The iLO default value is “DES”.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                    </itemizedlist>
                  </note>
                  <para>The inspection process discovers the following essential properties
                    (properties required for scheduling deployment):</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>memory_mb</literal>: Memory size</para>
                    </listitem>
                    <listitem>
                      <para><literal>cpus</literal>: Number of CPUs</para>
                    </listitem>
                    <listitem>
                      <para><literal>cpu_arch</literal>: CPU architecture</para>
                    </listitem>
                    <listitem>
                      <para><literal>local_gb</literal>: Disk size</para>
                    </listitem>
                  </itemizedlist>
                  <para>Inspection can also discover the following extra capabilities for iLO drivers:</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>ilo_firmware_version</literal>: iLO firmware version</para>
                    </listitem>
                    <listitem>
                      <para><literal>rom_firmware_version</literal>: ROM firmware version</para>
                    </listitem>
                    <listitem>
                      <para><literal>secure_boot</literal>: secure boot is supported or not. The possible values are
                            <literal>true</literal> or <literal>false</literal>. The value is returned as <literal>true</literal>
                            if secure boot is supported by the server.</para>
                    </listitem>
                    <listitem>
                      <para><literal>server_model</literal>: Server model</para>
                    </listitem>
                    <listitem>
                      <para><literal>pci_gpu_devices</literal>: Number of GPU devices connected to the bare metal.</para>
                    </listitem>
                    <listitem>
                      <para><literal>nic_capacity</literal>: The max speed of the embedded NIC adapter.</para>
                    </listitem>
                    <listitem>
                      <para><literal>sriov_enabled</literal>: True, if server has the SRIOV supporting NIC.</para>
                    </listitem>
                    <listitem>
                      <para><literal>has_rotational</literal>: True, if server has HDD disk.</para>
                    </listitem>
                    <listitem>
                      <para><literal>has_ssd</literal>: True, if server has SSD disk.</para>
                    </listitem>
                    <listitem>
                      <para><literal>has_nvme_ssd</literal>: True, if server has NVME SSD disk.</para>
                    </listitem>
                    <listitem>
                      <para><literal>cpu_vt</literal>: True, if server supports cpu virtualization.</para>
                    </listitem>
                    <listitem>
                      <para><literal>hardware_supports_raid</literal>: True, if RAID can be configured on the server using
                            RAID controller.</para>
                    </listitem>
                    <listitem>
                      <para><literal>nvdimm_n</literal>: True, if server has <literal>NVDIMM_N</literal> type of persistent memory.</para>
                    </listitem>
                    <listitem>
                      <para><literal>persistent_memory</literal>: True, if server has persistent memory.</para>
                    </listitem>
                    <listitem>
                      <para><literal>logical_nvdimm_n</literal>: True, if server has logical <literal>NVDIMM_N</literal> configured.</para>
                    </listitem>
                    <listitem>
                      <para><literal>rotational_drive_&lt;speed&gt;_rpm</literal>: The capabilities
                            <literal>rotational_drive_4800_rpm</literal>, <literal>rotational_drive_5400_rpm</literal>,
                            <literal>rotational_drive_7200_rpm</literal>, <literal>rotational_drive_10000_rpm</literal> and
                            <literal>rotational_drive_15000_rpm</literal> are set to true if the server has HDD
                            drives with speed of 4800, 5400, 7200, 10000 and 15000 rpm respectively.</para>
                    </listitem>
                    <listitem>
                      <para><literal>logical_raid_level_&lt;raid_level&gt;</literal>: The capabilities
                            <literal>logical_raid_level_0</literal>, <literal>logical_raid_level_1</literal>, <literal>logical_raid_level_2</literal>,
                            <literal>logical_raid_level_5</literal>, <literal>logical_raid_level_6</literal>, <literal>logical_raid_level_10</literal>,
                            <literal>logical_raid_level_50</literal> and <literal>logical_raid_level_60</literal> are set to true if any
                            of the raid levels among 0, 1, 2, 5, 6, 10, 50 and 60 are configured on
                            the system.</para>
                      <note>
                        <itemizedlist>
                          <listitem>
                            <para>The capability <literal>nic_capacity</literal> can only be discovered if ipmitool
                                        version &gt;= 1.8.15 is used on the conductor. The latest version can be
                                        downloaded from <link xlink:href="http://sourceforge.net/projects/ipmitool/">here</link>.</para>
                          </listitem>
                          <listitem>
                            <para>The iLO firmware version needs to be 2.10 or above for <literal>nic_capacity</literal> to be
                                        discovered.</para>
                          </listitem>
                        </itemizedlist>
                      </note>
                    </listitem>
                  </itemizedlist>
                  <para>The operator can specify these capabilities in nova flavor for node to be selected
                    for scheduling:</para>
                  <screen>nova flavor-key my-baremetal-flavor set capabilities:server_model="&lt;in&gt; Gen8"

nova flavor-key my-baremetal-flavor set capabilities:nic_capacity="10Gb"

nova flavor-key my-baremetal-flavor set capabilities:ilo_firmware_version="&lt;in&gt; 2.10"

nova flavor-key my-baremetal-flavor set capabilities:has_ssd="true"</screen>
                  <para>See <xref linkend="capabilities-discovery"/> for more details and examples.</para>
                </section>
                <section xml:id="swiftless-deploy-for-intermediate-images">
                  <title>Swiftless deploy for intermediate images</title>
                  <para>The hardware type <literal>ilo</literal> with <literal>ilo-virtual-media</literal> as boot interface and
                    virtual media based classical drivers (<literal>iscsi_ilo</literal> and <literal>agent_ilo</literal>)
                    can deploy and boot the server with and without <literal>swift</literal> being used for
                    hosting the intermediate temporary floppy image (holding metadata for
                    deploy kernel and ramdisk) and the boot ISO. A local HTTP(S) web server on
                    each conductor node needs to be configured.
                    Refer to <xref linkend="web-server-configuration-on-conductor"/> for more information.
                    The HTTPS web server needs to be enabled (instead of HTTP web server) in order
                    to send management information and images in encrypted channel over HTTPS.</para>
                  <note>
                    <para>This feature assumes that the user inputs are on Glance which uses swift
                        as backend. If swift dependency has to be eliminated, refer to
                        <xref linkend="http-s-based-deploy-support"/> also.</para>
                  </note>
                  <section>
                    <title>Deploy Process</title>
                    <para>Refer to <xref linkend="netboot-in-swiftless-deploy-for-intermediate-images"/> for
                        partition image support and <xref linkend="localboot-in-swiftless-deploy-for-intermediate-images"/>
                        for whole disk image support.</para>
                  </section>
                </section>
                <section xml:id="http-s-based-deploy-support">
                  <title>HTTP(S) Based Deploy Support</title>
                  <para>The user input for the images given in <literal>driver_info</literal> like <literal>ilo_deploy_iso</literal>,
                    <literal>deploy_kernel</literal> and <literal>deploy_ramdisk</literal> and in <literal>instance_info</literal> like
                    <literal>image_source</literal>, <literal>kernel</literal>, <literal>ramdisk</literal> and <literal>ilo_boot_iso</literal> may also be given as
                    HTTP(S) URLs.</para>
                  <para>The HTTP(S) web server can be configured in many ways. For the Apache
                    web server on SUSE Linux, refer <link xlink:href="https://doc.opensuse.org/documentation/leap/reference/html/book.opensuse.reference/cha.apache2.html">here</link>.
                    The web server may reside on a different system than the conductor nodes, but its URL
                    must be reachable by the conductor and the bare metal nodes.</para>
                  <section>
                    <title>Deploy Process</title>
                    <para>Refer to <xref linkend="netboot-with-http-s-based-deploy"/> for partition image boot
                        and <xref linkend="localboot-with-http-s-based-deploy"/> for whole disk image boot.</para>
                  </section>
                </section>
                <section xml:id="support-for-ilo-drivers-with-standalone-ironic">
                  <title>Support for iLO drivers with Standalone Ironic</title>
                  <para>It is possible to use ironic as standalone services without other
                    OpenStack services. The <literal>ilo</literal> hardware type and the iLO-based classic
                    drivers can be used in standalone ironic. This feature is referred to as
                    <literal>iLO drivers with standalone ironic</literal> in this document.</para>
                  <section>
                    <title>Configuration</title>
                    <para>The HTTP(S) web server needs to be configured as described in <xref linkend="http-s-based-deploy-support"/>
                        and <xref linkend="web-server-configuration-on-conductor"/> needs to be configured for hosting
                        intermediate images on conductor as described in
                        <xref linkend="swiftless-deploy-for-intermediate-images"/>.</para>
                  </section>
                  <section>
                    <title>Deploy Process</title>
                    <para><literal>iscsi_ilo</literal> and <literal>agent_ilo</literal> supports both netboot and localboot. Refer
                        to <xref linkend="netboot-in-standalone-ironic"/> and <xref linkend="localboot-in-standalone-ironic"/>
                        for details of deploy process for netboot and localboot respectively.
                        For <literal>pxe_ilo</literal>, the deploy process is same as native <literal>pxe_ipmitool</literal> driver.</para>
                  </section>
                </section>
              </section>
              <section>
               <title>Deploy Process</title>
                <section xml:id="netboot-with-glance-and-swift">
                  <title>Netboot with glance and swift</title>
			<para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/admin/drivers/ilo.html#netboot-with-glance-and-swift">Netboot with glance and swift</link>
				diagram in the Ironic Administration Guide.</para>
                </section>
                <section xml:id="localboot-with-glance-and-swift-for-partition-images">
                  <title>Localboot with glance and swift for partition images</title>
			<para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/admin/drivers/ilo.html#localboot-with-glance-and-swift-for-partition-images">Localboot with glance and swift</link>
				diagram in the Ironic Administration Guide.</para>
                </section>
                <section xml:id="localboot-with-glance-and-swift">
                  <title>Localboot with glance and swift</title>
			<para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/admin/drivers/ilo.html#localboot-with-glance-and-swift">Localboot with glance and swift for partition images</link>
				diagram in the Ironic Administration Guide.</para>
                </section>
                <section xml:id="netboot-in-swiftless-deploy-for-intermediate-images">
                  <title>Netboot in swiftless deploy for intermediate images</title>
			<para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/admin/drivers/ilo.html#netboot-in-swiftless-deploy-for-intermediate-images">Netboot in swiftless deploy for intermediate images</link>
				diagram in the Ironic Administration Guide.</para>
                </section>
                <section xml:id="localboot-in-swiftless-deploy-for-intermediate-images">
                  <title>Localboot in swiftless deploy for intermediate images</title>
			<para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/admin/drivers/ilo.html#localboot-in-swiftless-deploy-for-intermediate-images">Localboot in swiftless deploy for intermediate images</link>
				diagram in the Ironic Administration Guide.</para>
                </section>
                <section xml:id="netboot-with-http-s-based-deploy">
                  <title>Netboot with HTTP(S) based deploy</title>
			<para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/admin/drivers/ilo.html#netboot-with-http-s-based-deploy">Netboot with HTTP(S) based deploy</link>
				diagram in the Ironic Administration Guide.</para>
                </section>
                <section xml:id="localboot-with-http-s-based-deploy">
                  <title>Localboot with HTTP(S) based deploy</title>
			<para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/admin/drivers/ilo.html#localboot-with-http-s-based-deploy">Localboot with HTTP(S) based deploy</link>
				diagram in the Ironic Administration Guide.</para>
                </section>
                <section xml:id="netboot-in-standalone-ironic">
                  <title>Netboot in standalone ironic</title>
			<para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/admin/drivers/ilo.html#netboot-in-standalone-ironic">Netboot in standalone ironic</link>
				diagram in the Ironic Administration Guide.</para>
                </section>
                <section xml:id="localboot-in-standalone-ironic">
                  <title>Localboot in standalone ironic</title>
			<para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/admin/drivers/ilo.html#localboot-in-standalone-ironic">Localboot in standalone ironic</link>
				diagram in the Ironic Administration Guide.</para>
                </section>
                <section xml:id="activating-ilo-advanced-license-as-manual-clean-step">
                  <title>Activating iLO Advanced license as manual clean step</title>
                  <para>iLO drivers can activate the iLO Advanced license key as a manual cleaning
                    step. Any manual cleaning step can only be initiated when a node is in the
                    <literal>manageable</literal> state. Once the manual cleaning is finished, the node will be
                    put in the <literal>manageable</literal> state again. User can follow steps from
                    <xref linkend="manual-cleaning"/> to initiate manual cleaning operation on a node.</para>
                  <para>An example of a manual clean step with <literal>activate_license</literal> as the only clean
                    step could be:</para>
                  <screen>"clean_steps": [{
    "interface": "management",
    "step": "activate_license",
    "args": {
        "ilo_license_key": "ABC12-XXXXX-XXXXX-XXXXX-YZ345"
    }
}]</screen>
                  <para>The different attributes of <literal>activate_license</literal> clean step are as follows:</para>
                  <informaltable>
                    <tgroup cols="2">
                      <colspec colname="c1" colwidth="30"/>
                      <colspec colname="c2" colwidth="120"/>
                      <thead>
                        <row>
                          <entry>
                            <para>Attribute</para>
                          </entry>
                          <entry>
                            <para>Description</para>
                          </entry>
                        </row>
                      </thead>
                      <tbody>
                        <row>
                          <entry>
                            <para>
                              <literal>interface</literal>
                            </para>
                          </entry>
                          <entry>
                            <para>Interface of clean step, here <literal>management</literal></para>
                          </entry>
                        </row>
                        <row>
                          <entry>
                            <para>
                              <literal>step</literal>
                            </para>
                          </entry>
                          <entry>
                            <para>Name of clean step, here <literal>activate_license</literal></para>
                          </entry>
                        </row>
                        <row>
                          <entry>
                            <para>
                              <literal>args</literal>
                            </para>
                          </entry>
                          <entry>
                            <para>Keyword-argument entry (&lt;name&gt;: &lt;value&gt;) being passed to clean step</para>
                          </entry>
                        </row>
                        <row>
                          <entry>
                            <para>
                              <literal>args.ilo_license_key</literal>
                            </para>
                          </entry>
                          <entry>
                            <para>iLO Advanced license key to activate enterprise features. This is mandatory.</para>
                          </entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable>
                </section>
                <section xml:id="initiating-firmware-update-as-manual-clean-step">
                  <title>Initiating firmware update as manual clean step</title>
                  <para>iLO drivers can invoke secure firmware update as a manual cleaning step. Any
                    manual cleaning step can only be initiated when a node is in the <literal>manageable</literal>
                    state. Once the manual cleaning is finished, the node will be put in the
                    <literal>manageable</literal> state again. A user can follow steps from <xref linkend="manual-cleaning"/>
                    to initiate manual cleaning operation on a node.</para>
                  <para>The different attributes of <literal>update_firmware</literal> clean step are as follows:</para>
                  <informaltable>
                    <tgroup cols="2">
                      <colspec colname="c1" colwidth="30"/>
                      <colspec colname="c2" colwidth="120"/>
                      <thead>
                        <row>
                          <entry>
                            <para>Attribute</para>
                          </entry>
                          <entry>
                            <para>Description</para>
                          </entry>
                        </row>
                      </thead>
                      <tbody>
                        <row>
                          <entry>
                            <para>
                              <literal>interface</literal>
                            </para>
                          </entry>
                          <entry>
                            <para>Interface of clean step, here <literal>management</literal></para>
                          </entry>
                        </row>
                        <row>
                          <entry>
                            <para>
                              <literal>step</literal>
                            </para>
                          </entry>
                          <entry>
                            <para>Name of clean step, here <literal>update_firmware</literal></para>
                          </entry>
                        </row>
                        <row>
                          <entry>
                            <para>
                              <literal>args</literal>
                            </para>
                          </entry>
                          <entry>
                            <para>Keyword-argument entry (&lt;name&gt;: &lt;value&gt;) being passed to clean step</para>
                          </entry>
                        </row>
                        <row>
                          <entry>
                            <para>
                              <literal>args.firmware_update_mode</literal>
                            </para>
                          </entry>
                          <entry>
                            <para>Mode (or mechanism) of out-of-band firmware update. Supported value is <literal>ilo</literal>. This is mandatory.</para>
                          </entry>
                        </row>
                        <row>
                          <entry>
                            <para>
                              <literal>args.firmware_images</literal>
                            </para>
                          </entry>
                          <entry>
                            <para>Ordered list of dictionaries of images to be flashed. This is mandatory.</para>
                          </entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable>
                  <para>Each firmware image block is represented by a dictionary (JSON), in the form:</para>
                  <screen>{
  "url": "&lt;url of firmware image file&gt;",
  "checksum": "&lt;md5 checksum of firmware image file to verify the image&gt;",
  "component": "&lt;device on which firmware image will be flashed&gt;"
}</screen>
                  <para>All the fields in the firmware image block are mandatory.</para>
                  <itemizedlist>
                    <listitem>
                      <para>The different types of firmware url schemes supported are:
                            <literal>file</literal>, <literal>http</literal>, <literal>https</literal> and <literal>swift</literal>.</para>
                      <note>
                        <para>This feature assumes that while using <literal>file</literal> url scheme the file path is
                                on the conductor controlling the node.</para>
                      </note>
                      <note>
                        <para>The <literal>swift</literal> url scheme assumes the swift account of the <literal>service</literal>
                                project. The <literal>service</literal> project (tenant) is a special project created in
                                the Keystone system designed for the use of the core OpenStack services.
                                When Ironic makes use of Swift for storage purpose, the account is generally
                                <literal>service</literal> and the container is generally <literal>ironic</literal> and <literal>ilo</literal> drivers
                                use a container named <literal>ironic_ilo_container</literal> for their own purpose.</para>
                      </note>
                      <note>
                        <para>While using firmware files with a <literal>.rpm</literal> extension, make sure the commands
                                <literal>rpm2cpio</literal> and <literal>cpio</literal> are present on the conductor, as they are utilized
                                to extract the firmware image from the package.</para>
                      </note>
                    </listitem>
                    <listitem>
                      <para>The firmware components that can be updated are:
                            <literal>ilo</literal>, <literal>cpld</literal>, <literal>power_pic</literal>, <literal>bios</literal> and <literal>chassis</literal>.</para>
                    </listitem>
                    <listitem>
                      <para>The firmware images are updated in the order given by the operator. If
                            there is any error during processing of any of the given firmware images
                            provided in the list, none of the firmware updates will occur. The processing
                            error could happen during image download, image checksum verification or
                            image extraction. The logic is to process each of the firmware files and
                            update them on the devices only if all the files are processed successfully.
                            If, during the update (uploading and flashing) process, an update fails, then
                            the remaining updates, if any, in the list will be aborted. But it is
                            recommended to triage and fix the failure and re-attempt the manual clean
                            step <literal>update_firmware</literal> for the aborted <literal>firmware_images</literal>.</para>
                      <para>The devices for which the firmwares have been updated successfully would
                            start functioning using their newly updated firmware.</para>
                    </listitem>
                    <listitem>
                      <para>As a troubleshooting guidance on the complete process, check Ironic conductor
                            logs carefully to see if there are any firmware processing or update related
                            errors which may help in root causing or gain an understanding of where
                            things were left off or where things failed. You can then fix or work around
                            and then try again. A common cause of update failure is HPE Secure Digital
                            Signature check failure for the firmware image file.</para>
                    </listitem>
                    <listitem>
                      <para>To compute <literal>md5</literal> checksum for your image file, you can use the following
                            command:</para>
                      <screen>$ md5sum image.rpm
66cdb090c80b71daa21a67f06ecd3f33  image.rpm</screen>
                    </listitem>
                  </itemizedlist>
                </section>
                <section xml:id="raid-support">
                  <title>RAID Support</title>
                  <para>The inband RAID functionality is supported by iLO drivers. See <xref linkend="raid-configuration"/>
                    for more information. Bare Metal service update node with following information after successful
                    configuration of RAID:</para>
                  <itemizedlist>
                    <listitem>
                      <para>Node <literal>properties/local_gb</literal> is set to the size of root volume.</para>
                    </listitem>
                    <listitem>
                      <para>Node <literal>properties/root_device</literal> is filled with <literal>wwn</literal> details of root
                            volume. It is used by iLO drivers as root device hint during provisioning.</para>
                    </listitem>
                    <listitem>
                      <para>The value of raid level of root volume is added as <literal>raid_level</literal> capability
                            to the node’s <literal>capabilities</literal> parameter within <literal>properties</literal> field. The
                            operator can specify the <literal>raid_level</literal> capability in nova flavor for node
                            to be selected for scheduling:</para>
                      <screen>nova flavor-key ironic-test set capabilities:raid_level="1+0"
nova boot --flavor ironic-test --image test-image instance-1</screen>
                    </listitem>
                  </itemizedlist>
                </section>
                <section xml:id="disk-erase-support">
                  <title>Disk Erase Support</title>
                  <para><literal>erase_devices</literal> is an inband clean step supported by iLO drives. It
                    performs erase on all the disks including the disks visible to OS as
                    well as the raw disks visible to the Smart Storage Administrator (SSA).</para>
                  <para>This inband clean step requires <literal>ssacli</literal> utility starting from version
                    <literal>2.60-19.0</literal> to perform the erase on physical disks. See the
                    <link xlink:href="http://h20566.www2.hpe.com/hpsc/doc/public/display?docId=c03909334">ssacli documentation</link> for more information on ssacli utility and different
                    erase methods supported by SSA.</para>
                  <para>The disk erasure via <literal>shred</literal> is used to erase disks visible to the OS
                    and its implementation is available in Ironic Python Agent. The raw disks
                    connected to the Smart Storage Controller are erased using Sanitize erase
                    which is a ssacli supported erase method. If Sanitize erase is not supported
                    on the Smart Storage Controller the disks are erased using One-pass
                    erase (overwrite with zeros).</para>
                  <para>This clean step is supported when the agent ramdisk contains the
                    <literal>Proliant Hardware Manager</literal> from the proliantutils version 2.3.0 or higher.
                    This clean step is performed as part of automated cleaning and it is disabled
                    by default. See <xref linkend="inbandvsoutofbandcleaning"/> for more information on
                    enabling or disabling a clean step.</para>
                  <para>To create an agent ramdisk with <literal>Proliant Hardware Manager</literal> with disk erase support, use the
                  <literal>proliant-tools</literal> element in DIB:</para>
                <screen>disk-image-create -o proliant-agent-ramdisk ironic-agent fedora proliant-tools</screen>
                <para>See the <link xlink:href="https://docs.openstack.org/diskimage-builder/latest/elements/proliant-tools/README.html">proliant-tools</link> for more information on creating agent ramdisk with
                  <literal>proliant-tools</literal> element in DIB.</para>
                </section>
              </section>
            </section>
          </section>
          <section xml:id="irmc-driver">
            <title>iRMC driver</title>
            <section>
              <title>iRMC drivers</title>
              <section>
                <title>Overview</title>
                <para>The iRMC driver enables control FUJITSU PRIMERGY via ServerView
                Common Command Interface (SCCI).</para>
                <para>Support for FUJITSU PRIMERGY servers consists of the <literal>irmc</literal> hardware
                type, along with three classic drivers that were instituted before the
                implementation of the functionality enabling the hardware type.</para>
                <para>The classic drivers are:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>pxe_irmc</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>iscsi_irmc</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>agent_irmc</literal>
                    </para>
                  </listitem>
                </itemizedlist>
              </section>
              <section>
                <title>Prerequisites</title>
                <itemizedlist>
                  <listitem>
                    <para>Install <link xlink:href="https://pypi.python.org/pypi/python-scciclient">python-scciclient</link>
                        and <link xlink:href="https://pypi.python.org/pypi/pysnmp">pysnmp</link> packages:</para>
                    <screen>$ pip install "python-scciclient&gt;=0.5.0" pysnmp</screen>
                  </listitem>
                </itemizedlist>
              </section>
              <section xml:id="hardware-type">
                <title>Hardware Type</title>
                <para>The <literal>irmc</literal> hardware type is introduced to support the new Ironic driver
                model. We recommend to use <literal>irmc</literal> hardware type for FUJITSU PRIMERGY
                hardware instead of the classic drivers.</para>
                <para>For how to enable <literal>irmc</literal> hardware type, see
                <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-drivers.html#enable-hardware-types">Enabling hardware types</link>.</para>
                <section>
                  <title>Hardware interfaces</title>
                  <para>The <literal>irmc</literal> hardware type overrides the selection of the following
                    hardware interfaces:</para>
                  <itemizedlist>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>boot</term>
                          <listitem>
                            <para>Supports <literal>irmc-virtual-media</literal>, <literal>irmc-pxe</literal>, and <literal>pxe</literal>.
                                        The default is <literal>irmc-virtual-media</literal>.</para>
                            <warning>
                              <para>We deprecated the <literal>pxe</literal> boot interface when used with <literal>irmc</literal>
                                            hardware type. Support for this interface will be removed in the
                                            future. Instead, use <literal>irmc-pxe</literal>. <literal>irmc-pxe</literal> boot interface
                                            was introduced in Pike and is used in the <literal>pxe_irmc</literal> classic
                                            driver.</para>
                            </warning>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>console</term>
                          <listitem>
                            <para>Supports <literal>ipmitool-socat</literal>, <literal>ipmitool-shellinabox</literal>, and <literal>no-console</literal>.
                                        The default is <literal>ipmitool-socat</literal>.</para>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>inspect</term>
                          <listitem>
                            <para>Supports <literal>irmc</literal>, <literal>inspector</literal>, and <literal>no-inspect</literal>.
                                        The default is <literal>irmc</literal>.</para>
                            <note>
                              <para><link xlink:href="https://docs.openstack.org/ironic-inspector/latest/">Ironic Inspector</link>
                                            needs to be present and configured to use <literal>inspector</literal> as the
                                            inspect interface.</para>
                            </note>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>management</term>
                          <listitem>
                            <para>Supports only <literal>irmc</literal>.</para>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term>power</term>
                          <listitem>
                            <para>Supports only <literal>irmc</literal>.</para>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                  </itemizedlist>
                  <para>For other hardware interfaces, <literal>irmc</literal> hardware type supports the
                    Bare Metal reference interfaces. For more details about the hardware
                    interfaces and how to enable the desired ones, see
                    <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-drivers.html#enable-hardware-types">Enabling hardware types</link></para>
                  <para>Here is a complete configuration example with most of the supported hardware
                    interfaces enabled for <literal>irmc</literal> hardware type.</para>
                  <screen language="ini">[DEFAULT]
enabled_hardware_types = irmc
enabled_boot_interfaces = irmc-virtual-media,irmc-pxe
enabled_console_interfaces = ipmitool-socat,ipmitool-shellinabox,no-console
enabled_deploy_interfaces = iscsi,direct
enabled_inspect_interfaces = irmc,inspector,no-inspect
enabled_management_interfaces = irmc
enabled_network_interfaces = flat,neutron
enabled_power_interfaces = irmc
enabled_raid_interfaces = no-raid
enabled_storage_interfaces = noop,cinder
enabled_vendor_interfaces = no-vendor,ipmitool</screen>
                  <para>Here is a command example to enroll a node with <literal>irmc</literal> hardware type.</para>
                  <screen language="console">openstack baremetal node create --os-baremetal-api-version=1.31 \
   --driver irmc \
   --boot-interface irmc-pxe \
   --deploy-interface direct \
   --inspect-interface irmc</screen>
                  <section xml:id="upgrading-to-irmc-hardware-type">
                    <title>Upgrading to <literal>irmc</literal> hardware type</title>
                    <para>When upgrading from a classic driver to the <literal>irmc</literal> hardware type,
                        make sure you specify the hardware interfaces that are used by the
                        classic driver. <xref linkend="upgrade-hardware-types"/> has more
                        information, including the hardware interfaces corresponding to
                        the classic drivers.</para>
                  </section>
                </section>
              </section>
              <section>
                <title>Classic Drivers</title>
                <section xml:id="pxe-irmc-driver">
                  <title>pxe_irmc driver</title>
                  <para>This driver enables PXE deploy and power control via ServerView Common
                    Command Interface (SCCI).</para>
                  <section xml:id="enabling-the-driver">
                    <title>Enabling the driver</title>
                    <itemizedlist>
                      <listitem>
                        <para>Add <literal>pxe_irmc</literal> to the list of <literal>enabled_drivers</literal> in <literal>[DEFAULT]</literal>
                                section of <literal>/etc/ironic/ironic.conf</literal>.</para>
                      </listitem>
                      <listitem>
                        <para>Ironic Conductor must be restarted for the new driver to be loaded.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Node configuration</title>
                    <itemizedlist>
                      <listitem>
                        <para>Each node is configured for iRMC with PXE deploy by setting the
                                following ironic node object’s properties:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>driver</literal> property to be <literal>pxe_irmc</literal></para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_address</literal> property to be <literal>IP address</literal> or
                                        <literal>hostname</literal> of the iRMC.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_username</literal> property to be <literal>username</literal> for
                                        the iRMC with administrator privileges.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_password</literal> property to be <literal>password</literal> for
                                        irmc_username.</para>
                          </listitem>
                          <listitem>
                            <para><literal>properties/capabilities</literal> property to be <literal>boot_mode:uefi</literal> if
                                        UEFI boot is required.</para>
                          </listitem>
                          <listitem>
                            <para><literal>properties/capabilities</literal> property to be <literal>boot_mode:uefi,secure_boot:true</literal> if
                                        UEFI Secure Boot is required.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>All of nodes are configured by setting the following configuration
                                options in <literal>[irmc]</literal> section of <literal>/etc/ironic/ironic.conf</literal>:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>port</literal>: Port to be used for iRMC operations; either 80
                                        or 443. The default value is 443. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>auth_method</literal>: Authentication method for iRMC operations;
                                        either <literal>basic</literal> or <literal>digest</literal>. The default value is <literal>basic</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>client_timeout</literal>: Timeout (in seconds) for iRMC
                                        operations. The default value is 60. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>sensor_method</literal>: Sensor data retrieval method; either
                                        <literal>ipmitool</literal> or <literal>scci</literal>. The default value is <literal>ipmitool</literal>. Optional.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>The following options are only required for inspection:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>snmp_version</literal>: SNMP protocol version; either <literal>v1</literal>, <literal>v2c</literal> or
                                        <literal>v3</literal>. The default value is <literal>v2c</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_port</literal>: SNMP port. The default value is <literal>161</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_community</literal>: SNMP community required for versions <literal>v1</literal>
                                        and <literal>v2c</literal>. The default value is <literal>public</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_security</literal>: SNMP security name required for version <literal>v3</literal>.
                                        Optional.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>Each node can be further configured by setting the following Ironic
                                node object’s properties which override the parameter values in
                                <literal>[irmc]</literal> section of <literal>/etc/ironic/ironic.conf</literal>:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>driver_info/irmc_port</literal> property overrides <literal>port</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_auth_method</literal> property overrides <literal>auth_method</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_client_timeout</literal> property overrides <literal>client_timeout</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_sensor_method</literal> property overrides <literal>sensor_method</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_version</literal> property overrides <literal>snmp_version</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_port</literal> property overrides <literal>snmp_port</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_community</literal> property overrides <literal>snmp_community</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_security</literal> property overrides <literal>snmp_security</literal>.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                    </itemizedlist>
                  </section>
                </section>
                <section xml:id="iscsi-irmc-driver">
                  <title>iscsi_irmc driver</title>
                  <para>This driver enables Virtual Media deploy with image build from
                    Diskimage Builder and power control via ServerView Common Command
                    Interface (SCCI).</para>
                  <section>
                    <title>Enabling the driver</title>
                    <itemizedlist>
                      <listitem>
                        <para>Add <literal>iscsi_irmc</literal> to the list of <literal>enabled_drivers</literal> in
                                <literal>[DEFAULT]</literal> section of <literal>/etc/ironic/ironic.conf</literal>.</para>
                      </listitem>
                      <listitem>
                        <para>Ironic Conductor must be restarted for the new driver to be loaded.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Node configuration</title>
                    <itemizedlist>
                      <listitem>
                        <para>Each node is configured for iRMC with PXE deploy by setting the
                                followings ironic node object’s properties:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>driver</literal> property to be <literal>iscsi_irmc</literal></para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_address</literal> property to be <literal>IP address</literal> or
                                        <literal>hostname</literal> of the iRMC.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_username</literal> property to be <literal>username</literal> for
                                        the iRMC with administrator privileges.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_password</literal> property to be <literal>password</literal> for
                                        irmc_username.</para>
                          </listitem>
                          <listitem>
                            <para><literal>properties/capabilities</literal> property to be <literal>boot_mode:uefi</literal> if
                                        UEFI boot is required.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_deploy_iso</literal> property to be either <literal>deploy iso
file name</literal>, <literal>Glance UUID</literal>, <literal>Glance URL</literal> or <literal>Image Service
URL</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>instance info/irmc_boot_iso</literal> property to be either <literal>boot iso
file name</literal>, <literal>Glance UUID</literal>, <literal>Glance URL</literal> or <literal>Image Service
URL</literal>. This is optional property for <literal>netboot</literal>.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>All of nodes are configured by setting the following configuration
                                options in <literal>[irmc]</literal> section of <literal>/etc/ironic/ironic.conf</literal>:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>port</literal>: Port to be used for iRMC operations, either <literal>80</literal>
                                        or <literal>443</literal>. The default value is <literal>443</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>auth_method</literal>: Authentication method for iRMC operations;
                                        either <literal>basic</literal> or <literal>digest</literal>. The default value is <literal>basic</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>client_timeout</literal>: Timeout (in seconds) for iRMC
                                        operations. The default value is 60. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>sensor_method</literal>: Sensor data retrieval method; either
                                        <literal>ipmitool</literal> or <literal>scci</literal>. The default value is <literal>ipmitool</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_share_root</literal>: Ironic conductor node’s <literal>NFS</literal> or
                                        <literal>CIFS</literal> root path. The default value is <literal>/remote_image_share_root</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_server</literal>: IP of remote image server.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_share_type</literal>: Share type of virtual media, either
                                        <literal>NFS</literal> or <literal>CIFS</literal>. The default is <literal>CIFS</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_share_name</literal>: share name of <literal>remote_image_server</literal>.
                                        The default value is <literal>share</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_user_name</literal>: User name of <literal>remote_image_server</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_user_password</literal>: Password of <literal>remote_image_user_name</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_user_domain</literal>: Domain name of <literal>remote_image_user_name</literal>.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>The following options are only required for inspection:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>snmp_version</literal>: SNMP protocol version; either <literal>v1</literal>, <literal>v2c</literal> or
                                        <literal>v3</literal>. The default value is <literal>v2c</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_port</literal>: SNMP port. The default value is <literal>161</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_community</literal>: SNMP community required for versions <literal>v1</literal>
                                        and <literal>v2c</literal>. The default value is <literal>public</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_security</literal>: SNMP security name required for version <literal>v3</literal>.
                                        Optional.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>Each node can be further configured by setting the following Ironic
                                node object’s properties which override the parameter values in
                                <literal>[irmc]</literal> section of <literal>/etc/ironic/ironic.conf</literal>:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>driver_info/irmc_port</literal> property overrides <literal>port</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_auth_method</literal> property overrides <literal>auth_method</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_client_timeout</literal> property overrides <literal>client_timeout</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_sensor_method</literal> property overrides <literal>sensor_method</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_version</literal> property overrides <literal>snmp_version</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_port</literal> property overrides <literal>snmp_port</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_community</literal> property overrides <literal>snmp_community</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_security</literal> property overrides <literal>snmp_security</literal>.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                    </itemizedlist>
                  </section>
                </section>
                <section xml:id="agent-irmc-driver">
                  <title>agent_irmc driver</title>
                  <para>This driver enables Virtual Media deploy with IPA (Ironic Python
                    Agent) and power control via ServerView Common Command Interface
                    (SCCI).</para>
                  <section>
                    <title>Enabling the driver</title>
                    <itemizedlist>
                      <listitem>
                        <para>Add <literal>agent_irmc</literal> to the list of <literal>enabled_drivers</literal> in
                                <literal>[DEFAULT]</literal> section of <literal>/etc/ironic/ironic.conf</literal>.</para>
                      </listitem>
                      <listitem>
                        <para>Ironic Conductor must be restarted for the new driver to be loaded.</para>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section>
                    <title>Node configuration</title>
                    <itemizedlist>
                      <listitem>
                        <para>Each node is configured for iRMC with PXE deploy by setting the
                                followings ironic node object’s properties:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>driver</literal> property to be <literal>agent_irmc</literal></para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_address</literal> property to be <literal>IP address</literal> or
                                        <literal>hostname</literal> of the iRMC.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_username</literal> property to be <literal>username</literal> for
                                        the iRMC with administrator privileges.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_password</literal> property to be <literal>password</literal> for
                                        irmc_username.</para>
                          </listitem>
                          <listitem>
                            <para><literal>properties/capabilities</literal> property to be <literal>boot_mode:uefi</literal> if
                                        UEFI boot is required.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_deploy_iso</literal> property to be either <literal>deploy iso
file name</literal>, <literal>Glance UUID</literal>, <literal>Glance URL</literal> or <literal>Image Service
URL</literal>.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>All of nodes are configured by setting the following configuration
                                options in <literal>[irmc]</literal> section of <literal>/etc/ironic/ironic.conf</literal>:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>port</literal>: Port to be used for iRMC operations; either 80
                                        or 443. The default value is 443. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>auth_method</literal>: Authentication method for iRMC operations;
                                        either <literal>basic</literal> or <literal>digest</literal>. The default value is <literal>basic</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>client_timeout</literal>: Timeout (in seconds) for iRMC
                                        operations. The default value is 60. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>sensor_method</literal>: Sensor data retrieval method; either
                                        <literal>ipmitool</literal> or <literal>scci</literal>. The default value is <literal>ipmitool</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_share_root</literal>: Ironic conductor node’s <literal>NFS</literal> or
                                        <literal>CIFS</literal> root path. The default value is <literal>/remote_image_share_root</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_server</literal>: IP of remote image server.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_share_type</literal>: Share type of virtual media, either
                                        <literal>NFS</literal> or <literal>CIFS</literal>. The default is <literal>CIFS</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_share_name</literal>: share name of <literal>remote_image_server</literal>.
                                        The default value is <literal>share</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_user_name</literal>: User name of <literal>remote_image_server</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_user_password</literal>: Password of <literal>remote_image_user_name</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>remote_image_user_domain</literal>: Domain name of <literal>remote_image_user_name</literal>.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>The following options are only required for inspection:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>snmp_version</literal>: SNMP protocol version; either <literal>v1</literal>, <literal>v2c</literal> or
                                        <literal>v3</literal>. The default value is <literal>v2c</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_port</literal>: SNMP port. The default value is <literal>161</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_community</literal>: SNMP community required for versions <literal>v1</literal>
                                        and <literal>v2c</literal>. The default value is <literal>public</literal>. Optional.</para>
                          </listitem>
                          <listitem>
                            <para><literal>snmp_security</literal>: SNMP security name required for version <literal>v3</literal>.
                                        Optional.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>Each node can be further configured by setting the following ironic
                                node object’s properties which override the parameter values in
                                <literal>[irmc]</literal> section of <literal>/etc/ironic/ironic.conf</literal>:</para>
                        <itemizedlist>
                          <listitem>
                            <para><literal>driver_info/irmc_port</literal> property overrides <literal>port</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_auth_method</literal> property overrides <literal>auth_method</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_client_timeout</literal> property overrides <literal>client_timeout</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_sensor_method</literal> property overrides <literal>sensor_method</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_version</literal> property overrides <literal>snmp_version</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_port</literal> property overrides <literal>snmp_port</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_community</literal> property overrides <literal>snmp_community</literal>.</para>
                          </listitem>
                          <listitem>
                            <para><literal>driver_info/irmc_snmp_security</literal> property overrides <literal>snmp_security</literal>.</para>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                    </itemizedlist>
                  </section>
                </section>
              </section>
              <section>
                <title>Functionalities across drivers</title>
                <section xml:id="irmc-node-cleaning">
                  <title>irmc Node Cleaning Support</title>
                  <para>The <literal>irmc</literal> hardware type and the following iRMC classic drivers support
                    node cleaning:</para>
                  <itemizedlist>
                    <listitem>
                      <para>
                        <literal>pxe_irmc</literal>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <literal>iscsi_irmc</literal>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <literal>agent_irmc</literal>
                      </para>
                    </listitem>
                  </itemizedlist>
                  <para>For more information on node cleaning, see <xref linkend="node-cleaning"/>.</para>
                  <section>
                    <title>Supported <emphasis role="bold">Automated</emphasis> Cleaning Operations</title>
                    <para>The automated cleaning operations supported are:</para>
                    <itemizedlist>
                      <listitem>
                        <para><literal>restore_irmc_bios_config</literal>:
                                Restores BIOS settings on a baremetal node from backup data. If this
                                clean step is enabled, the BIOS settings of a baremetal node will be
                                backed up automatically before the deployment. By default, this clean
                                step is disabled with priority <literal>0</literal>. Set its priority to a positive
                                integer to enable it. The recommended value is <literal>10</literal>.</para>
                        <warning>
                          <para><literal>pxe</literal> boot interface, when used with <literal>irmc</literal> hardware type, does
                                    not support this clean step. If uses <literal>irmc</literal> hardware type, it is
                                    required to select <literal>irmc-pxe</literal> or <literal>irmc-virtual-media</literal> as the
                                    boot interface in order to make this clean step work.</para>
                        </warning>
                      </listitem>
                    </itemizedlist>
                    <para>Configuration options for the automated cleaning steps are listed under
                        <literal>[irmc]</literal> section in ironic.conf</para>
                    <screen>clean_priority_restore_irmc_bios_config = 0</screen>
                    <para>For more information on node automated cleaning, see <xref linkend="automated-cleaning"/>.</para>
                  </section>
                </section>
                <section xml:id="boot-from-remote-volume">
                  <title>Boot from Remote Volume</title>
                  <para>The iRMC driver supports the generic iPXE based remote volume booting when
                    you use <literal>pxe_irmc</literal> classic driver or the following boot interfaces with
                    the <literal>irmc</literal> hardware type.</para>
                  <itemizedlist>
                    <listitem>
                      <para>
                        <literal>irmc-pxe</literal>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <literal>pxe</literal>
                      </para>
                    </listitem>
                  </itemizedlist>
                  <para>The iRMC driver also supports a remote volume booting without iPXE. How to use this iRMC
                    specific remote volume booting is described here.</para>
                  <para>The <literal>irmc-virtual-media</literal> boot interface supports this feature for the
                    <literal>irmc</literal> hardware type. This feature is also supported with following classic
                    drivers:</para>
                  <itemizedlist>
                    <listitem>
                      <para>
                        <literal>iscsi_irmc</literal>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <literal>agent_irmc</literal>
                      </para>
                    </listitem>
                  </itemizedlist>
                  <para>This feature configures a node to boot from a remote volume by using API of
                    iRMC. It supports iSCSI and FibreChannel.</para>
                  <section>
                    <title>Configuration</title>
                    <para>In addition to configuration for generic drivers for the remote volume boot,
                        the drivers require the following configuration.</para>
                    <itemizedlist>
                      <listitem>
                        <para>It is necessary to set physical port IDs to network ports and volume
                                connectors. All cards including those not used for volume boot should be
                                registered.</para>
                        <itemizedlist>
                          <listitem>
                            <para>A physical ID format is: <literal>&lt;Card Type&gt;&lt;Slot No&gt;-&lt;Port No&gt;</literal> where:</para>
                            <itemizedlist>
                              <listitem>
                                <para><literal>&lt;Card Type&gt;</literal>: could be a <literal>LAN</literal>, <literal>FC</literal> or <literal>CNA</literal></para>
                              </listitem>
                              <listitem>
                                <para><literal>&lt;Slot No&gt;</literal>: 0 indicates onboard slot. Use 1 to 9 for add-on slots.</para>
                              </listitem>
                              <listitem>
                                <para><literal>&lt;Port No&gt;</literal>: A port number. It starts from 1.</para>
                              </listitem>
                            </itemizedlist>
                          </listitem>
                          <listitem>
                            <para>Set the IDs to <literal>driver_info/irmc_pci_physical_ids</literal> of a node. This
                                        parameter is a dictionary of pair of UUID of a resource (Port or Volume
                                        connector) and a physical ID. This parameter can be set with the following
                                        command:</para>
                            <screen>openstack baremetal node set $NODE_UUID --driver-info irmc_pci_physical_ids={} \
--driver-info irmc_pci_physical_ids/$PORT_UUID=LAN0-1 \
--driver-info irmc_pci_physical_ids/$VOLUME_CONNECTOR_UUID=CNA1-1</screen>
                          </listitem>
                        </itemizedlist>
                      </listitem>
                      <listitem>
                        <para>For iSCSI boot, volume connectors with both type <literal>iqn</literal> and <literal>ip</literal> are
                                required. The configuration with DHCP is not supported yet.</para>
                      </listitem>
                      <listitem>
                        <para>For iSCSI, the size of the storage network is needed. This value should be
                                set to <literal>driver_info/irmc_storage_network_size</literal> of a node as an integer.
                                For example, if your storage network is 10.2.0.0/22, use the following
                                command:</para>
                        <screen>openstack baremetal node set $NODE_UUID --driver-info irmc_storage_network_size=22</screen>
                      </listitem>
                    </itemizedlist>
                  </section>
                  <section xml:id="supported-hardware">
                    <title>Supported hardware</title>
                    <para>The drivers support the PCI controllers, Fibrechannel Cards, Converged Network
                        Adapters supported by
                        <link xlink:href="http://www.fujitsu.com/fts/products/computing/servers/primergy/management/primergy-blade-server-io-virtualization.html">Fujitsu ServerView Virtual-IO Manager</link>.</para>
                  </section>
                </section>
              </section>
              <section xml:id="supported-platforms">
                <title>Supported platforms</title>
                <para>This driver supports FUJITSU PRIMERGY BX S4 or RX S8 servers and above.</para>
                <itemizedlist>
                  <listitem>
                    <para>PRIMERGY BX920 S4</para>
                  </listitem>
                  <listitem>
                    <para>PRIMERGY BX924 S4</para>
                  </listitem>
                  <listitem>
                    <para>PRIMERGY RX300 S8</para>
                  </listitem>
                </itemizedlist>
                <para>Soft Reboot (Graceful Reset) and Soft Power Off (Graceful Power Off)
                are only available if <link xlink:href="http://manuals.ts.fujitsu.com/index.php?id=5406-5873-5925-5945-16159">ServerView agents</link>
                are installed. See <link xlink:href="http://manuals.ts.fujitsu.com/index.php?id=5406-5873-5925-5988">iRMC S4 Manual</link>
                for more details.</para>
              </section>
            </section>
          </section>
          <section xml:id="cisco-ucs-driver">
            <title>Cisco UCS driver</title>
            <section xml:id="ucs">
              <title>UCS drivers</title>
              <section>
                <title>Overview</title>
                <para>The UCS driver is targeted for UCS Manager managed Cisco UCS B/C series
                servers. The <literal>pxe_ucs</literal>, <literal>agent_ucs</literal> drivers enables you to take advantage of
                UCS Manager by using the python SDK.</para>
                <para><literal>pxe_ucs</literal> driver uses PXE/iSCSI (just like <literal>pxe_ipmitool</literal> driver) to
                deploy the image and uses UCS to do all management operations on the
                baremetal node (instead of using IPMI).</para>
                <para><literal>agent_ucs</literal> driver uses IPA ramdisk (just like <literal>agent_ipmitool</literal> and
                <literal>agent_ipminative</literal> drivers) to deploy the image and uses UCS to do all
                management operations on the baremetal node (instead of using IPMI).</para>
                <para>The UCS drivers can use the Ironic Inspector service for in-band inspection of
                equipment. For more information see the <link xlink:href="http://docs.openstack.org/ironic-inspector/latest">Ironic Inspector documentation</link>.</para>
              </section>
              <section>
                <title>Prerequisites</title>
                <itemizedlist>
                  <listitem>
                    <para><literal>UcsSdk</literal> is a python package version of XML API sdk available to
                        manage Cisco UCS Managed B/C-series servers.</para>
                    <para>Install <literal>UcsSdk</literal> module on the Ironic conductor node.
                        Required version is 0.8.2.2:</para>
                    <screen>$ pip install "UcsSdk==0.8.2.2"</screen>
                  </listitem>
                </itemizedlist>
                <section>
                  <title>Tested Platforms</title>
                  <para>This driver works on Cisco UCS Manager Managed B/C-series servers.
                    It has been tested with the following servers:</para>
                  <para>UCS Manager version: 2.2(1b), 2.2(3d).</para>
                  <itemizedlist>
                    <listitem>
                      <para>UCS B22M, B200M3</para>
                    </listitem>
                    <listitem>
                      <para>UCS C220M3.</para>
                    </listitem>
                  </itemizedlist>
                  <para>All the Cisco UCS B/C-series servers managed by UCSM 2.1 or later are supported
                    by this driver.</para>
                </section>
                <section>
                  <title>Configuring and Enabling the driver</title>
                  <procedure>
                    <step>
                      <para>Add <literal>pxe_ucs</literal> and/or <literal>agent_ucs</literal> to the list of <literal>enabled_drivers</literal> in
                            <literal>/etc/ironic/ironic.conf</literal>. For example:</para>
                      <screen>enabled_drivers = pxe_ipmitool,pxe_ucs,agent_ucs</screen>
                    </step>
                    <step>
                      <para>Restart the Ironic conductor service:</para>
                      <screen>service ironic-conductor restart</screen>
                    </step>
                  </procedure>
                </section>
                <section xml:id="registering-ucs-node-in-ironic">
                  <title>Registering UCS node in Ironic</title>
                  <para>Nodes configured for UCS driver should have the <literal>driver</literal> property set to
                    <literal>pxe_ucs/agent_ucs</literal>. The following configuration values are also required in
                    <literal>driver_info</literal>:</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>ucs_address</literal>: IP address or hostname of the UCS Manager</para>
                    </listitem>
                    <listitem>
                      <variablelist>
                        <varlistentry>
                          <term><literal>ucs_username</literal>: UCS Manager login user name with administrator or</term>
                          <listitem>
                            <para>server_profile privileges.</para>
                          </listitem>
                        </varlistentry>
                      </variablelist>
                    </listitem>
                    <listitem>
                      <para><literal>ucs_password</literal>: UCS Manager login password for the above UCS Manager user.</para>
                    </listitem>
                    <listitem>
                      <para><literal>deploy_kernel</literal>: The Glance UUID of the deployment kernel.</para>
                    </listitem>
                    <listitem>
                      <para><literal>deploy_ramdisk</literal>: The Glance UUID of the deployment ramdisk.</para>
                    </listitem>
                    <listitem>
                      <para><literal>ucs_service_profile</literal>: Distinguished name(DN) of service_profile being enrolled.</para>
                    </listitem>
                  </itemizedlist>
                  <para>The following sequence of commands can be used to enroll a UCS node.</para>
                  <para>Create Node:</para>
                  <screen>ironic node-create -d &lt;pxe_ucs/agent_ucs&gt; -i ucs_address=&lt;UCS Manager hostname/ip-address&gt; -i ucs_username=&lt;ucsm_username&gt; -i ucs_password=&lt;ucsm_password&gt; -i ucs_service_profile=&lt;service_profile_dn_being_enrolled&gt; -i deploy_kernel=&lt;glance_uuid_of_deploy_kernel&gt; -i deploy_ramdisk=&lt;glance_uuid_of_deploy_ramdisk&gt; -p cpus=&lt;number_of_cpus&gt; -p memory_mb=&lt;memory_size_in_MB&gt; -p local_gb=&lt;local_disk_size_in_GB&gt; -p cpu_arch=&lt;cpu_arch&gt;</screen>
                  <para>The above command <command>ironic node-create</command> returns the UUID of the node, which is the value of <literal>$NODE</literal> in the following command.</para>
                  <para>Associate port with the node created:</para>
                  <screen>ironic port-create -n $NODE -a &lt;MAC_address_of_Ucs_server's_NIC&gt;</screen>
                </section>
              </section>
            </section>
          </section>
          <section xml:id="cimc-driver">
            <title>CIMC driver</title>
            <section>
              <title>CIMC drivers</title>
              <section>
                <title>Overview</title>
                <para>The CIMC drivers are targeted for standalone Cisco UCS C series servers.
                These drivers enable you to take advantage of CIMC by using the
                python SDK.</para>
                <para><literal>pxe_iscsi_cimc</literal> driver uses PXE boot + iSCSI deploy (just like <literal>pxe_ipmitool</literal>
                driver) to deploy the image and uses CIMC to do all management operations on
                the baremetal node (instead of using IPMI).</para>
                <para><literal>pxe_agent_cimc</literal> driver uses PXE boot + Agent deploy (just like <literal>agent_ipmitool</literal>
                and <literal>agent_ipminative</literal> drivers) to deploy the image and uses CIMC to do all
                management operations on the baremetal node (instead of using IPMI). Unlike with
                iSCSI deploy in Agent deploy, the ramdisk is responsible for writing the image to
                the disk, instead of the conductor.</para>
                <para>The CIMC drivers can use the Ironic Inspector service for in-band inspection of
                equipment. For more information see the <link xlink:href="https://docs.openstack.org/ironic-inspector/latest">Ironic Inspector documentation</link>.</para>
              </section>
              <section>
                <title>Prerequisites</title>
                <itemizedlist>
                  <listitem>
                    <para><literal>ImcSdk</literal> is a python SDK for the CIMC HTTP/HTTPS XML API used to control
                        CIMC.</para>
                  </listitem>
                </itemizedlist>
                <section xml:id="install-the-imcsdk-module">
                  <title>Install the <literal>ImcSdk</literal> module</title>
                  <note>
                    <para>Install the <literal>ImcSdk</literal> module on the Ironic conductor node. Required version is
                        0.7.2.</para>
                  </note>
                  <procedure>
                    <step>
                      <para>Install it:</para>
                      <screen>$ pip install "ImcSdk&gt;=0.7.2"</screen>
                    </step>
                  </procedure>
                </section>
                <section>
                  <title>Tested Platforms</title>
                  <para>This driver works with UCS C-Series servers and has been tested with:</para>
                  <itemizedlist>
                    <listitem>
                      <para>UCS C240M3S</para>
                    </listitem>
                  </itemizedlist>
                </section>
                <section>
                  <title>Configuring and Enabling the driver</title>
                  <procedure>
                    <step>
                      <para>Add <literal>pxe_iscsi_cimc</literal> and/or <literal>pxe_agent_cimc</literal> to the list of <literal>enabled_drivers</literal> in
                            <literal>/etc/ironic/ironic.conf</literal>. For example:</para>
                      <screen>enabled_drivers = pxe_ipmitool,pxe_iscsi_cimc,pxe_agent_cimc</screen>
                    </step>
                    <step>
                      <para>Restart the Ironic conductor service:</para>
                      <screen>$ sudo systemctl restart openstack-ironic-conductor</screen>
                    </step>
                  </procedure>
                </section>
                <section xml:id="registering-cimc-managed-ucs-node-in-ironic">
                  <title>Registering CIMC Managed UCS node in Ironic</title>
                  <para>Nodes configured for CIMC driver should have the <literal>driver</literal> property set to
                    <literal>pxe_iscsi_cimc</literal> or <literal>pxe_agent_cimc</literal>. The following configuration values are
                    also required in <literal>driver_info</literal>:</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>cimc_address</literal>: IP address or hostname for CIMC.</para>
                    </listitem>
                    <listitem>
                      <para><literal>cimc_username</literal>: CIMC login user nam.</para>
                    </listitem>
                    <listitem>
                      <para><literal>cimc_password</literal>: CIMC login password for the above CIMC user.</para>
                    </listitem>
                    <listitem>
                      <para><literal>deploy_kernel</literal>: Identifier for the deployment kernel e.g. a Glance UUID.</para>
                    </listitem>
                    <listitem>
                      <para><literal>deploy_ramdisk</literal>: Identifier for the deployment ramdisk e.g. a Glance UUID.</para>
                    </listitem>
                  </itemizedlist>
                  <para>The following sequence of commands can be used to enroll a UCS Standalone node.</para>
                  <para>Create Node:</para>
                  <screen>ironic node-create -d &lt;pxe_iscsi_cimc OR pxe_agent_cimc&gt; -i cimc_address=&lt;CIMC hostname OR ip-address&gt; -i cimc_username=&lt;cimc_username&gt; -i cimc_password=&lt;cimc_password&gt; -i deploy_kernel=&lt;glance_uuid_of_deploy_kernel&gt; -i deploy_ramdisk=&lt;glance_uuid_of_deploy_ramdisk&gt; -p cpus=&lt;number_of_cpus&gt; -p memory_mb=&lt;memory_size_in_MB&gt; -p local_gb=&lt;local_disk_size_in_GB&gt; -p cpu_arch=&lt;cpu_arch&gt;</screen>
                  <para>The above command ‘ironic node-create’ will return UUID of the node, which is the value of $NODE in the following command.</para>
                  <para>Associate port with the node created:</para>
                  <screen>ironic port-create -n $NODE -a &lt;MAC_address_of_Ucs_server's_NIC&gt;</screen>
                  <para>For more information about enrolling nodes see <link xlink:href="https://docs.openstack.org/ironic/pike/install/enrollment.html#enrollment">Enrollment</link>
                        in the install guide.</para>
                </section>
              </section>
            </section>
          </section>
          <section xml:id="oneview-driver">
            <title>OneView driver</title>
            <section>
              <title>OneView drivers</title>
              <section>
                <title>Overview</title>
                <para>HP OneView  is a single integrated platform, packaged as an appliance that
                implements a software-defined approach to managing physical infrastructure.
                The appliance supports scenarios such as deploying bare metal servers, for
                instance. In this context, the <literal>HP OneView driver</literal> for ironic enables the
                users of OneView to use ironic as a bare metal provider to their managed
                physical hardware.</para>
                <para>HPE OneView hardware is supported by the <literal>oneview</literal> hardware type and the
                following classic drivers:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>iscsi_pxe_oneview</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>agent_pxe_oneview</literal>
                    </para>
                  </listitem>
                </itemizedlist>
              </section>
              <section>
                <title>Classic Drivers</title>
                <para>The <literal>iscsi_pxe_oneview</literal> and <literal>agent_pxe_oneview</literal> drivers implement the
                core interfaces of an ironic Driver , and use the <literal>python-oneviewclient</literal> to provide communication
                between ironic and OneView through OneView’s REST API.</para>
                <note>
                  <para>Classic drivers will be deprecated in favor of Hardware Types.</para>
                </note>
                <para>To provide a bare metal instance there are four components involved in the
                process:</para>
                <itemizedlist>
                  <listitem>
                    <para>The ironic service</para>
                  </listitem>
                  <listitem>
                    <para>The ironic-inspector service (if using hardware inspection)</para>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term>The ironic driver for OneView, which can be:</term>
                        <listitem>
                          <itemizedlist>
                            <listitem>
                              <para><literal>iscsi_pxe_oneview</literal> or</para>
                            </listitem>
                            <listitem>
                              <para>
                                <literal>agent_pxe_oneview</literal>
                              </para>
                            </listitem>
                          </itemizedlist>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                  <listitem>
                    <para>The python-oneviewclient library</para>
                  </listitem>
                  <listitem>
                    <para>The OneView appliance</para>
                  </listitem>
                </itemizedlist>
                <para>The role of ironic is to serve as a bare metal provider to OneView’s managed
                physical hardware and to provide communication with other necessary OpenStack
                services such as Nova and Glance. When ironic receives a boot request, it
                works together with the ironic OneView driver to access a machine in OneView,
                the <literal>python-oneviewclient</literal> being responsible for the communication with the
                OneView appliance.</para>
                <para>From the Newton release on, OneView drivers enables a new feature called
                <emphasis role="bold">dynamic allocation</emphasis> of nodes. In this model, the driver allocates
                resources in OneView only at boot time, allowing idle resources in ironic
                to be used by OneView users, enabling actual resource sharing among ironic
                and OneView users.</para>
                <para>Since OneView can claim nodes in <literal>available</literal> state at any time, a set of
                tasks runs periodically to detect nodes in use by OneView. A node in use by
                OneView is placed in <literal>manageable</literal> state and has maintenance mode set. Once
                the node is no longer in use, these tasks will make place them back in
                <literal>available</literal> state and clear maintenance mode.</para>
              </section>
              <section>
                <title>Prerequisites</title>
                <para>The following requirements apply for both <literal>iscsi_pxe_oneview</literal> and
                <literal>agent_pxe_oneview</literal> drivers:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>OneView appliance</literal> is the HP physical infrastructure manager to be
                        integrated with the OneView drivers.</para>
                    <para>Minimum version supported is 2.0.</para>
                  </listitem>
                  <listitem>
                    <para><literal>python-oneviewclient</literal> is a python package containing a client to manage
                        the communication between ironic and OneView.</para>
                    <para>Install the <literal>python-oneviewclient</literal> module to enable the communication.
                        Minimum version required is 2.4.0 but it is recommended to install the most
                        up-to-date version:</para>
                    <screen>$ pip install "python-oneviewclient&lt;3.0.0,&gt;=2.4.0"</screen>
                  </listitem>
                  <listitem>
                    <para><literal>ironic-inspector</literal> if using hardware inspection.</para>
                  </listitem>
                </itemizedlist>
              </section>
              <section>
                <title>Tested platforms</title>
                <itemizedlist>
                  <listitem>
                    <para>The OneView appliance used for testing was the OneView 2.0.</para>
                  </listitem>
                  <listitem>
                    <para>The Enclosure used for testing was the <literal>BladeSystem c7000 Enclosure G2</literal>.</para>
                  </listitem>
                  <listitem>
                    <para>The drivers should work on HP Proliant Gen8 and Gen9 Servers supported by
                        OneView 2.0 and above, or any hardware whose network can be managed by
                        OneView’s ServerProfile. It has been tested with the following servers:</para>
                    <itemizedlist>
                      <listitem>
                        <para>Proliant BL460c Gen8</para>
                      </listitem>
                      <listitem>
                        <para>Proliant BL460c Gen9</para>
                      </listitem>
                      <listitem>
                        <para>Proliant BL465c Gen8</para>
                      </listitem>
                      <listitem>
                        <para>Proliant DL360 Gen9 (starting with python-oneviewclient 2.1.0)</para>
                      </listitem>
                    </itemizedlist>
                    <para>Notice that for the driver to work correctly with Gen8 and Gen9 DL servers
                        in general, the hardware also needs to run version 4.2.3 of iLO, with
                        Redfish enabled.</para>
                  </listitem>
                </itemizedlist>
              </section>
              <section>
                <title>Hardware Interfaces</title>
                <para>The <literal>oneview</literal> hardware type supports the following hardware interfaces:</para>
                <itemizedlist>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term>boot</term>
                        <listitem>
                          <para>Supports only <literal>pxe</literal>. It can be enabled by using the
                                    <literal>[DEFAULT]enabled_boot_interfaces</literal> option in <literal>ironic.conf</literal>
                                    as given below:</para>
                          <screen language="ini">[DEFAULT]
enabled_hardware_types = oneview
enabled_boot_interfaces = pxe</screen>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term>console</term>
                        <listitem>
                          <para>Supports only <literal>no-console</literal>. It can be enabled by using the
                                    <literal>[DEFAULT]enabled_console_interfaces</literal>
                                    option in <literal>ironic.conf</literal> as given below:</para>
                          <screen language="ini">[DEFAULT]
enabled_hardware_types = oneview
enabled_console_interfaces = no-console</screen>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term>deploy</term>
                        <listitem>
                          <para>Supports <literal>oneview-direct</literal> and <literal>oneview-iscsi</literal>. The default is
                                    <literal>oneview-iscsi</literal>. They can be enabled by using the
                                    <literal>[DEFAULT]enabled_deploy_interfaces</literal> option in <literal>ironic.conf</literal>
                                    as given below:</para>
                          <screen language="ini">[DEFAULT]
enabled_hardware_types = oneview
enabled_deploy_interfaces = oneview-iscsi,oneview-direct</screen>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term>inspect</term>
                        <listitem>
                          <para>Supports <literal>oneview</literal> and <literal>no-inspect</literal>. The default is <literal>oneview</literal>.
                                    They can be enabled by using the <literal>[DEFAULT]enabled_inspect_interfaces</literal>
                                    option in <literal>ironic.conf</literal> as given below:</para>
                          <screen language="ini">[DEFAULT]
enabled_hardware_types = oneview
enabled_inspect_interfaces = oneview,no-inspect</screen>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term>management</term>
                        <listitem>
                          <para>Supports only <literal>oneview</literal>. It can be enabled by using the
                                    <literal>[DEFAULT]enabled_management_interfaces</literal> option in <literal>ironic.conf</literal> as
                                    given below:</para>
                          <screen language="ini">[DEFAULT]
enabled_hardware_types = oneview
enabled_management_interfaces = oneview</screen>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term>power</term>
                        <listitem>
                          <para>Supports only <literal>oneview</literal>. It can be enabled by using the
                                    <literal>[DEFAULT]enabled_power_interfaces</literal> option in <literal>ironic.conf</literal> as given
                                    below:</para>
                          <screen language="ini">[DEFAULT]
enabled_hardware_types = oneview
enabled_power_interfaces = oneview</screen>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                </itemizedlist>
                <para>The <literal>oneview</literal> hardware type also supports the standard <emphasis>network</emphasis> and
                <emphasis>storage</emphasis> interfaces.</para>
                <para>To enable the same feature set as provided by all oneview classic drivers,
                apply the following configuration:</para>
                <screen language="ini">[DEFAULT]
enabled_hardware_types = oneview
enabled_deploy_interfaces = oneview-direct,oneview-iscsi
enabled_inspect_interfaces = oneview
enabled_power_interfaces = oneview
enabled_management_interfaces = oneview</screen>
                <para>The following commands can be used to enroll a node with the same
                feature set as one of the classic drivers, but using the <literal>oneview</literal>
                hardware type:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>oneview-direct</literal>:</para>
                    <screen language="console">openstack baremetal node create --os-baremetal-api-version=1.31 \
    --driver oneview \
    --deploy-interface oneview-direct</screen>
                  </listitem>
                  <listitem>
                    <para><literal>oneview-iscsi</literal>:</para>
                    <screen language="console">openstack baremetal node create --os-baremetal-api-version=1.31 \
   --driver oneview \
   --deploy-interface oneview-iscsi</screen>
                  </listitem>
                </itemizedlist>
              </section>
              <section>
                <title>Drivers</title>
                <section xml:id="iscsi-pxe-oneview-driver">
                  <title>iscsi_pxe_oneview driver</title>
                  <section>
                    <title>Overview</title>
                    <para><literal>iscsi_pxe_oneview</literal> driver uses PXEBoot for boot and ISCSIDeploy for deploy.</para>
                  </section>
                  <section>
                    <title>Configuring and enabling the driver</title>
                    <procedure>
                      <step>
                        <para>Add <literal>iscsi_pxe_oneview</literal> to the list of <literal>enabled_drivers</literal> in your
                                <literal>ironic.conf</literal> file. For example:</para>
                        <screen>enabled_drivers = iscsi_pxe_oneview</screen>
                      </step>
                      <step>
                        <para>Update the <literal>[oneview]</literal> section of your <literal>ironic.conf</literal> file with your
                                OneView credentials and CA certificate files information.</para>
                      </step>
                    </procedure>
                    <note>
                      <para>An operator can set the <literal>periodic_check_interval</literal> option in the <literal>[oneview]</literal>
                            section to set the interval between running the periodic check. The default
                            value is 300 seconds (5 minutes). A lower value will reduce the likelihood
                            of races between Ironic and OneView at the cost of being more resource
                            intensive.</para>
                    </note>
                    <procedure>
                      <step>
                        <para>Restart the ironic conductor service:</para>
                        <screen>$ sudo systemctl ironic-conductor restart</screen>
                      </step>
                    </procedure>
                    <para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/install/index.html">Bare Metal Service Installation Guide</link>
                          for more information.</para>
                  </section>
                  <section>
                    <title>Deploy process</title>
                    <para>Here is an overview of the deploy process for this driver:</para>
                    <procedure>
                      <step>
                        <para>Admin configures the Proliant baremetal node to use <literal>iscsi_pxe_oneview</literal>
                                driver.</para>
                      </step>
                      <step>
                        <para>ironic gets a request to deploy a Glance image on the baremetal node.</para>
                      </step>
                      <step>
                        <para>Driver sets the boot device to PXE.</para>
                      </step>
                      <step>
                        <para>Driver powers on the baremetal node.</para>
                      </step>
                      <step>
                        <para>ironic downloads the deploy and user images from a TFTP server.</para>
                      </step>
                      <step>
                        <para>Driver reboots the baremetal node.</para>
                      </step>
                      <step>
                        <para>User image is now deployed.</para>
                      </step>
                      <step>
                        <para>Driver powers off the machine.</para>
                      </step>
                      <step>
                        <para>Driver sets boot device to Disk.</para>
                      </step>
                      <step>
                        <para>Driver powers on the machine.</para>
                      </step>
                      <step>
                        <para>Baremetal node is active and ready to be used.</para>
                      </step>
                    </procedure>
                  </section>
                </section>
                <section xml:id="agent-pxe-oneview-driver">
                  <title>agent_pxe_oneview driver</title>
                  <section>
                    <title>Overview</title>
                    <para><literal>agent_pxe_oneview</literal> driver uses PXEBoot for boot and AgentDeploy for deploy.</para>
                  </section>
                  <section>
                    <title>Configuring and enabling the driver</title>
                    <procedure>
                      <step>
                        <para>Add <literal>agent_pxe_oneview</literal> to the list of <literal>enabled_drivers</literal> in your
                                <literal>ironic.conf</literal>. For example:</para>
                        <screen>enabled_drivers = fake,pxe_ipmitool,agent_pxe_oneview</screen>
                      </step>
                      <step>
                        <para>Update the [oneview] section of your <literal>ironic.conf</literal> file with your
                                OneView credentials and CA certificate files information.</para>
                      </step>
                    </procedure>
                    <note>
                      <para>An operator can set the <literal>periodic_check_interval</literal> option in the <literal>[oneview]</literal>
                            section to set the interval between running the periodic check. The default
                            value is 300 seconds (5 minutes). A lower value will reduce the likelihood
                            of races between ironic and OneView at the cost of being more resource
                            intensive.</para>
                    </note>
                    <procedure>
                      <step>
                        <para>Restart the ironic conductor service:</para>
                        <screen>$ systemctl ironic-conductor restart</screen>
                      </step>
                    </procedure>
                    <para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/install/index.html">Bare Metal Service Installation Guide</link>
                          for more information.</para>
                  </section>
                  <section>
                    <title>Deploy process</title>
                    <para>Here is an overview of the deploy process for this driver:</para>
                    <procedure>
                      <step>
                        <para>Admin configures the Proliant baremetal node to use <literal>agent_pxe_oneview</literal>
                                driver.</para>
                      </step>
                      <step>
                        <para>Ironic gets a request to deploy a Glance image on the baremetal node.</para>
                      </step>
                      <step>
                        <para>Driver sets the boot device to PXE.</para>
                      </step>
                      <step>
                        <para>Driver powers on the baremetal node.</para>
                      </step>
                      <step>
                        <para>Node downloads the agent deploy images.</para>
                      </step>
                      <step>
                        <para>Agent downloads the user images and writes it to disk.</para>
                      </step>
                      <step>
                        <para>Driver reboots the baremetal node.</para>
                      </step>
                      <step>
                        <para>User image is now deployed.</para>
                      </step>
                      <step>
                        <para>Driver powers off the machine.</para>
                      </step>
                      <step>
                        <para>Driver sets boot device to Disk.</para>
                      </step>
                      <step>
                        <para>Driver powers on the machine.</para>
                      </step>
                      <step>
                        <para>Baremetal node is active and ready to be used.</para>
                      </step>
                    </procedure>
                  </section>
                </section>
              </section>
              <section>
                <title>Hardware inspection</title>
                <para>OneView drivers for ironic have the ability to do hardware inspection.
                Hardware inspection is the process of discovering hardware properties like
                memory size, CPU cores, processor architecture and disk size, of a given
                hardware. OneView drivers do in-band inspection, that involves booting a
                ramdisk on the hardware and fetching information directly from it. For that,
                your cloud controller needs to have the <literal>ironic-inspector</literal> component
                 running and properly enabled in ironic’s configuration file.</para>
                <para>See <link xlink:href="https://docs.openstack.org/ironic-inspector/latest/install/index.html">ironic-inspector install</link>
                for more information on how to install and configure <literal>ironic-inspector</literal>.</para>
              </section>
              <section xml:id="registering-a-oneview-node-in-ironic">
                <title>Registering a OneView node in ironic</title>
                <para>Nodes configured to use any of the OneView drivers should have the <literal>driver</literal>
                property set to <literal>iscsi_pxe_oneview</literal> or <literal>agent_pxe_oneview</literal>. Considering
                our context, a node is the representation of a <literal>Server Hardware</literal> in OneView,
                and should be consistent with all its properties and related components, such
                as <literal>Server Hardware Type</literal>, <literal>Server Profile Template</literal>, <literal>Enclosure Group</literal>,
                etc. In this case, to be enrolled, the node must have the following parameters:</para>
                <itemizedlist>
                  <listitem>
                    <para>In <literal>driver_info</literal></para>
                    <itemizedlist>
                      <listitem>
                        <para><literal>server_hardware_uri</literal>: URI of the <literal>Server Hardware</literal> on OneView.</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                  <listitem>
                    <para>In <literal>properties/capabilities</literal></para>
                    <itemizedlist>
                      <listitem>
                        <para><literal>server_hardware_type_uri</literal>: URI of the <literal>Server Hardware Type</literal> of the
                                <literal>Server Hardware</literal>.</para>
                      </listitem>
                      <listitem>
                        <para><literal>server_profile_template_uri</literal>: URI of the <literal>Server Profile Template</literal> used
                                to create the <literal>Server Profile</literal> of the <literal>Server Hardware</literal>.</para>
                      </listitem>
                      <listitem>
                        <para><literal>enclosure_group_uri</literal> (optional): URI of the <literal>Enclosure Group</literal> of the
                                <literal>Server Hardware</literal>.</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </itemizedlist>
                <para>To enroll a node with any of the OneView drivers, do:</para>
                <screen>$ ironic node-create -d $DRIVER_NAME</screen>
                <para>To update the <literal>driver_info</literal> field of a newly enrolled OneView node, do:</para>
                <screen>$ ironic node-update $NODE_UUID add \
  driver_info/server_hardware_uri=$SH_URI</screen>
                <para>To update the <literal>properties/capabilities</literal> namespace of a newly enrolled
                OneView node, do:</para>
                <screen>$ ironic node-update $NODE_UUID add \
  properties/capabilities=server_hardware_type_uri:$SHT_URI,enclosure_group_uri:$EG_URI,server_profile_template_uri=$SPT_URI</screen>
                <para>In order to deploy, ironic will create and apply, at boot time, a <literal>Server
Profile</literal> based on the <literal>Server Profile Template</literal> specified on the node to the
                <literal>Server Hardware</literal> it represents on OneView. The URI of such <literal>Server Profile</literal>
                will be stored in <literal>driver_info.applied_server_profile_uri</literal> field while the
                Server is allocated to ironic.</para>
                <para>The <literal>Server Profile Templates</literal> and, therefore, the <literal>Server Profiles</literal> derived
                from them MUST comply with the following requirements:</para>
                <itemizedlist>
                  <listitem>
                    <para>The option <literal>MAC Address</literal> in the <literal>Advanced</literal> section of
                        <literal>Server Profile</literal>/<literal>Server Profile Template</literal> should be set to <literal>Physical</literal>
                        option;</para>
                  </listitem>
                  <listitem>
                    <para>Their first <literal>Connection</literal> interface should be:</para>
                    <itemizedlist>
                      <listitem>
                        <para>Connected to ironic’s provisioning network and;</para>
                      </listitem>
                      <listitem>
                        <para>The <literal>Boot</literal> option should be set to primary.</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </itemizedlist>
                <para>Node ports should be created considering the <emphasis role="bold">MAC address of the first
                    Interface</emphasis> of the given <literal>Server Hardware</literal>.</para>
                <para>To tell ironic which NIC should be connected to the provisioning network, do:</para>
                <screen>$ ironic port-create -n $NODE_UUID -a $MAC_ADDRESS</screen>
                <para>For more information on the enrollment process of an ironic node, see
                <link xlink:href="https://docs.openstack.org/ironic/pike/install/enrollment.html#enrollment">Enrollment</link>.</para>
                <para>For more information on the definitions of <literal>Server Hardware</literal>, <literal>Server
Profile</literal>, <literal>Server Profile Template</literal> and other OneView entities, refer to
                 or browse Help in your OneView appliance menu.</para>
                <note>
                  <para>Ironic manages OneView machines either when they have
                    a Server Profile applied by the driver or when they don’t have any Server
                    Profile. Trying to change the power state of the machine in OneView without
                    first assigning a Server Profile will lead to allowing Ironic to revert the
                    power state change. Ironic will NOT change the power state of machines
                    which the Server Profile was applied by another OneView user.</para>
                </note>
              </section>
              <section xml:id="rd-party-tools">
                <title>3rd Party Tools</title>
                <para>In order to ease user manual tasks, which are often time-consuming, we provide
                useful tools that work nicely with the OneView drivers.</para>
                <section xml:id="ironic-oneview-cli">
                  <title>ironic-oneview-cli</title>
                  <para>The <literal>ironic-oneView</literal> CLI is a command line interface for management tasks
                    involving OneView nodes. Its features include a facility to create of ironic
                    nodes with all required parameters for OneView nodes, creation of Nova flavors
                    for OneView nodes.</para>
                  <para>For more details on how Ironic-OneView CLI works and how to set it up, see
                    <link xlink:href="https://pypi.python.org/pypi/ironic-oneview-cli/">ironic-oneview-cli</link>.</para>
                </section>
                <section xml:id="ironic-oneviewd">
                  <title>ironic-oneviewd</title>
                  <para>The <literal>ironic-oneviewd</literal> daemon monitors the ironic inventory of resources and
                    provides facilities to operators managing OneView driver deployments.</para>
                  <para>For more details on how Ironic-OneViewd works and how to set it up, see .</para>
                </section>
              </section>
            </section>
          </section>
          <section xml:id="redfish-driver">
            <title>Redfish driver</title>
            <section>
              <title>Redfish driver</title>
              <section>
                <title>Overview</title>
                <para>The <literal>redfish</literal> driver enables managing servers compliant with the
                <link xlink:href="http://redfish.dmtf.org/">Redfish</link> protocol.</para>
              </section>
              <section>
                <title>Prerequisites</title>
                <itemizedlist>
                  <listitem>
                    <para>The <link xlink:href="https://git.openstack.org/cgit/openstack/sushy">Sushy</link> library should be installed on the ironic conductor node(s).</para>
                    <para>For example, it can be installed with <literal>pip</literal>:</para>
                    <screen>sudo pip install sushy</screen>
                  </listitem>
                </itemizedlist>
              </section>
              <section xml:id="enabling-the-redfish-driver">
                <title>Enabling the Redfish driver</title>
                <procedure>
                  <step>
                    <para>Add <literal>redfish</literal> to the list of <literal>enabled_hardware_types</literal>,
                        <literal>enabled_power_interfaces</literal> and <literal>enabled_management_interfaces</literal>
                        in <literal>/etc/ironic/ironic.conf</literal>. For example:</para>
                    <screen>[DEFAULT]
...
enabled_hardware_types = ipmi,redfish
enabled_power_interfaces = ipmitool,redfish
enabled_management_interfaces = ipmitool,redfish</screen>
                  </step>
                  <step>
                    <para>Restart the ironic conductor service:</para>
                    <screen>sudo service ironic-conductor restart

# Or, for RDO:
sudo systemctl restart openstack-ironic-conductor</screen>
                  </step>
                </procedure>
              </section>
              <section xml:id="registering-a-node-with-the-redfish-driver">
                <title>Registering a node with the Redfish driver</title>
                <para>Nodes configured to use the driver should have the <literal>driver</literal> property
                set to <literal>redfish</literal>.</para>
                <para>The following properties are specified in the node’s <literal>driver_info</literal>
                field:</para>
                <itemizedlist>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term><literal>redfish_address</literal>: The URL address to the Redfish controller. It must</term>
                        <listitem>
                          <para>include the authority portion of the URL, and can
                                    optionally include the scheme. If the scheme is
                                    missing, https is assumed.
                                    For example: <link xlink:href="https://mgmt.vendor.com"/>. This is required.</para>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term><literal>redfish_system_id</literal>: The canonical path to the system resource that</term>
                        <listitem>
                          <para>the driver will interact with. It should include
                                    the root service, version and the unique
                                    resource path to the System. For example:
                                  <literal>/redfish/v1/Systems/1</literal>. This is required.</para>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term><literal>redfish_username</literal>: User account with admin/server-profile access</term>
                        <listitem>
                          <para>privilege. Although not required, it is highly
                                    recommended.</para>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term><literal>redfish_password</literal>: User account password. Although not required, it is</term>
                        <listitem>
                          <para>highly recommended.</para>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                  <listitem>
                    <variablelist>
                      <varlistentry>
                        <term><literal>redfish_verify_ca</literal>: If redfish_address has the <emphasis role="bold">https</emphasis> scheme, the</term>
                        <listitem>
                          <para>driver will use a secure (<link xlink:href="https://en.wikipedia.org/wiki/Transport_Layer_Security">TLS</link>) connection when
                                    talking to the Redfish controller. By default
                                    (if this is not set or set to True), the driver
                                    will try to verify the host certificates. This
                                    can be set to the path of a certificate file or
                                    directory with trusted certificates that the
                                    driver will use for verification. To disable
                                    verifying <link xlink:href="https://en.wikipedia.org/wiki/Transport_Layer_Security">TLS</link>, set this to False. This is optional.</para>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                  </listitem>
                </itemizedlist>
                <para>The <literal>openstack baremetal node create</literal> command can be used to enroll
                a node with the <literal>redfish</literal> driver. For example:</para>
                <screen language="bash">openstack baremetal node create --driver redfish --driver-info \
  redfish_address=https://example.com --driver-info \
  redfish_system_id=/redfish/v1/Systems/CX34R87 --driver-info \
  redfish_username=admin --driver-info redfish_password=password</screen>
                <para>For more information about enrolling nodes see <link xlink:href="https://docs.openstack.org/ironic/pike/install/enrollment.html#enrollment">Enrollment</link>
                in the install guide.</para>
              </section>
            </section>
          </section>
          <section xml:id="unsupported-drivers">
            <title>Unsupported drivers</title>
            <para>The following drivers were declared as unsupported in ironic Newton release
                and as of Ocata release they are removed form ironic:</para>
            <itemizedlist>
              <listitem>
                <para>AMT driver - available as part of <link xlink:href="http://ironic-staging-drivers.readthedocs.io">ironic-staging-drivers</link></para>
              </listitem>
              <listitem>
                <para>iBoot driver - available as part of <link xlink:href="http://ironic-staging-drivers.readthedocs.io">ironic-staging-drivers</link></para>
              </listitem>
              <listitem>
                <para>Wake-On-Lan driver - available as part of <link xlink:href="http://ironic-staging-drivers.readthedocs.io">ironic-staging-drivers</link></para>
              </listitem>
              <listitem>
                <para>Virtualbox drivers</para>
              </listitem>
              <listitem>
                <para>SeaMicro drivers</para>
              </listitem>
              <listitem>
                <para>MSFT OCS drivers</para>
              </listitem>
            </itemizedlist>
          </section>
        </section>
        <section xml:id="ipa">
          <title>Ironic Python Agent</title>
          <section>
            <title>Overview</title>
            <para><emphasis>Ironic Python Agent</emphasis> (also often called <emphasis>IPA</emphasis> or just <emphasis>agent</emphasis>) is a
                Python-based agent which handles <emphasis>ironic</emphasis> bare metal nodes in a
                variety of actions such as inspect, configure, clean and deploy images.
                IPA is distributed over nodes and runs, inside of a ramdisk, the
                process of booting this ramdisk on the node.</para>
            <para>For more information see the <link xlink:href="https://docs.openstack.org/ironic-python-agent/latest">ironic-python-agent documentation</link>.</para>
          </section>
          <section>
            <title>Drivers</title>
            <para>Starting with the Kilo release all drivers (except for fake ones) are using
                IPA for deployment. There are two types of them, which can be distinguished
                by prefix:</para>
            <itemizedlist>
              <listitem>
                <para>For drivers with <literal>pxe_</literal> or <literal>iscsi_</literal> prefix IPA exposes the root hard
                        drive as an iSCSI share and calls back to the ironic conductor. The
                        conductor mounts the share and copies an image there. It then signals back
                        to IPA for post-installation actions like setting up a bootloader for local
                        boot support.</para>
              </listitem>
              <listitem>
                <para>For drivers with <literal>agent_</literal> prefix the conductor prepares a swift temporary
                        URL for an image. IPA then handles the whole deployment process:
                        downloading an image from swift, putting it on the machine and doing any
                        post-deploy actions.</para>
              </listitem>
            </itemizedlist>
            <para>Which one to choose depends on your environment. iSCSI-based drivers put
                higher load on conductors, agent-based drivers currently require the whole
                image to fit in the node’s memory.</para>
            <section>
              <title>Requirements</title>
              <para>Using IPA requires it to be present and configured on the
	      deploy ramdisk, see <link xlink:href="https://docs.openstack.org/ironic/pike/install/deploy-ramdisk.html#deploy-ramdisk">Building or downloading a deploy ramdisk image</link>.</para>
            </section>
          </section>
          <section xml:id="using-proxies-for-image-download-in-agent-drivers">
            <title>Using proxies for image download in agent drivers</title>
            <section>
              <title>Overview</title>
              <para>IPA supports using proxies while downloading the user image. For example, this
                    could be used to speed up download by using caching proxy.</para>
            </section>
            <section xml:id="steps-to-enable-proxies">
              <title>Steps to enable proxies</title>
              <procedure>
                <step>
                  <para>Configure the proxy server of your choice (for example
                            <link xlink:href="http://www.squid-cache.org/Doc/">Squid</link>,
                            <link xlink:href="https://docs.trafficserver.apache.org/en/latest/index.html">Apache Traffic Server</link>).
                            This will probably require you to configure the proxy server to cache the
                            content even if the requested URL contains a query, and to raise the maximum
                            cached file size as images can be pretty big. If you have HTTPS enabled in
                            swift (see <link xlink:href="https://docs.openstack.org/swift/latest/deployment_guide.html">swift deployment guide</link>),
                            it is possible to configure the proxy server to talk to swift via HTTPS
                            to download the image, store it in the cache unencrypted and return it to
                            the node via HTTPS again. Because the image will be stored unencrypted in
                            the cache,  we recommend this approach for images that do not contain
                            sensitive information. Refer to your proxy server’s documentation to
                            complete this step.</para>
                </step>
                <step>
                  <para>Set <literal>[glance]swift_temp_url_cache_enabled</literal> in the ironic conductor config
                            file to <literal>True</literal>. The conductor will reuse the cached swift temporary URLs
                            instead of generating new ones each time an image is requested, so that the
                            proxy server does not create new cache entries for the same image, based on
                            the query part of the URL (as it contains some query parameters that change
                            each time it is regenerated).</para>
                </step>
                <step>
                  <para>Set <literal>[glance]swift_temp_url_expected_download_start_delay</literal> option in the
                            ironic conductor config file to the value appropriate for your hardware.
                            This is the delay (in seconds) from the time of the deploy request (when
                            the swift temporary URL is generated) to when the URL is used for the image
                            download. You can think of it as roughly the time needed for IPA ramdisk to
                            startup and begin download. This value is used to check if the swift
                            temporary URL duration is large enough to let the image download begin. Also
                            if temporary URL caching is enabled, this will determine if a cached entry
                            will still be valid when the download starts. It is used only if
                            <literal>[glance]swift_temp_url_cache_enabled</literal> is <literal>True</literal>.</para>
                </step>
                <step>
                  <para>Increase <literal>[glance]swift_temp_url_duration</literal> option in the ironic conductor
                            config file, as only non-expired links to images will be returned from the
                            swift temporary URLs cache. This means that if
                            <literal>swift_temp_url_duration=1200</literal> then after 20 minutes a new image will be
                            cached by the proxy server as the query in its URL will change. The value of
                            this option must be greater than or equal to
                            <literal>[glance]swift_temp_url_expected_download_start_delay</literal>.</para>
                </step>
                <step>
                  <para>Add one or more of <literal>image_http_proxy</literal>, <literal>image_https_proxy</literal>,
                            <literal>image_no_proxy</literal> to driver_info properties in each node that will use the
                            proxy. Refer to <literal>ironic driver-properties</literal> output of the
                            <literal>agent_*</literal> driver you’re using for descriptions of these properties.</para>
                </step>
              </procedure>
            </section>
          </section>
          <section>
            <title>Advanced configuration</title>
            <section xml:id="out-of-band-vs-in-band-power-off-on-deploy">
              <title>Out-of-band versus in-band power-off on deploy</title>
              <para>After deploying an image onto the node’s hard disk, Ironic will reboot
                    the machine into the new image. By default this power action happens
                    <literal>in-band</literal>, meaning that the ironic-conductor will instruct the IPA
                    ramdisk to power itself off.</para>
              <para>Some hardware may have a problem with the default approach and
                    would require Ironic to talk directly to the management controller
                    to switch the power off and on again. In order to tell Ironic to do
                    that, you have to update the node’s <literal>driver_info</literal> field and set the
                    <literal>deploy_forces_oob_reboot</literal> parameter with the value of <emphasis role="bold">True</emphasis>. For
                    example, the below command sets this configuration in a specific node:</para>
              <screen>ironic node-update &lt;UUID or name&gt; add driver_info/deploy_forces_oob_reboot=True</screen>
            </section>
          </section>
        </section>
        <section xml:id="inspection">
          <title>Hardware Inspection</title>
          <section>
            <title>Overview</title>
            <para>Inspection allows Bare Metal service to discover required node properties
                once required <literal>driver_info</literal> fields (for example, IPMI credentials) are set
                by an operator. Inspection will also create the Bare Metal service ports for the
                discovered ethernet MACs. Operators will have to manually delete the Bare Metal
                service ports for which physical media is not connected. This is required due
                to the <link xlink:href="https://bugs.launchpad.net/ironic/+bug/1405131">bug 1405131</link>.</para>
            <para>There are two kinds of inspection supported by Bare Metal service:</para>
            <procedure>
              <step>
                <para>Out-of-band inspection is currently implemented by iLO drivers, listed at <xref linkend="ilo-driver"/>.</para>
              </step>
              <step>
                <para><xref linkend="in-band-inspection"/> by utilizing the <link xlink:href="https://pypi.org/project/ironic-inspector/">ironic-inspector</link>
                      project.</para>
              </step>
            </procedure>
            <para>Inspection can be initiated using node-set-provision-state.
                The node should be in MANAGEABLE state before inspection is initiated.</para>
            <itemizedlist>
              <listitem>
                <para>Move node to manageable state:</para>
                <screen>ironic node-set-provision-state &lt;node_UUID&gt; manage</screen>
              </listitem>
              <listitem>
                <para>Initiate inspection:</para>
                <screen>ironic node-set-provision-state &lt;node_UUID&gt; inspect</screen>
              </listitem>
            </itemizedlist>
            <note>
              <para>The above commands require the <link xlink:href="https://pypi.python.org/pypi/python-ironicclient">python-ironicclient</link> to be version 0.5.0 or greater.</para>
            </note>
          </section>
          <section xml:id="capabilities-discovery">
            <title>Capabilities discovery</title>
            <para>This is an incomplete list of capabilities we want to discover during
                inspection. The exact support is driver-specific though, the most complete
                list is provided by the iLO <xref linkend="ilo-inspection"/>.</para>
            <variablelist>
              <varlistentry>
                <term><literal>secure_boot</literal> (<literal>true</literal> or <literal>false</literal>)</term>
                <listitem>
                  <para>whether secure boot is supported for the node</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>boot_mode</literal> (<literal>bios</literal> or <literal>uefi</literal>)</term>
                <listitem>
                  <para>the boot mode the node is using</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>cpu_vt</literal> (<literal>true</literal> or <literal>false</literal>)</term>
                <listitem>
                  <para>whether the CPU virtualization is enabled</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>cpu_aes</literal> (<literal>true</literal> or <literal>false</literal>)</term>
                <listitem>
                  <para>whether the AES CPU extensions are enabled</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>max_raid_level</literal> (integer, 0-10)</term>
                <listitem>
                  <para>maximum RAID level supported by the node</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>pci_gpu_devices</literal> (non-negative integer)</term>
                <listitem>
                  <para>number of GPU devices on the node</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>The operator can specify these capabilities in nova flavor for node to be selected
                for scheduling:</para>
            <screen>nova flavor-key my-baremetal-flavor set capabilities:pci_gpu_devices="&gt; 0"

nova flavor-key my-baremetal-flavor set capabilities:secure_boot="true"</screen>
            <para>See a specific driver page for the exact list of capabilities this
                driver can discover.</para>
          </section>
          <section xml:id="in-band-inspection">
            <title>In-band inspection</title>
            <para>In-band inspection involves booting a ramdisk on the target node and fetching
                information directly from it. This process is more fragile and time-consuming
                than the out-of-band inspection, but it is not vendor-specific and works
                across a wide range of hardware. In-band inspection is using the
                <link xlink:href="https://pypi.python.org/pypi/ironic-inspector">ironic-inspector</link> project.</para>
            <para>Currently it is supported by the following generic drivers:</para>
            <screen>pxe_ipmitool
pxe_ipminative
agent_ipmitool
agent_ipminative
fake_inspector</screen>
            <para>It is also the default inspection approach for the following vendor drivers:</para>
            <screen>pxe_drac
pxe_ucs
pxe_cimc
agent_ucs
agent_cimc</screen>
            <para>This feature needs to be explicitly enabled in the ironic configuration file
                by setting <literal>enabled = True</literal> in <literal>[inspector]</literal> section.
                You must additionally install <link xlink:href="https://pypi.python.org/pypi/python-ironic-inspector-client">python-ironic-inspector-client</link> to use
                this functionality.
                You must set <literal>service_url</literal> if the ironic-inspector service is
                being run on a separate host from the ironic-conductor service, or is using
                non-standard port.</para>
            <para>In order to ensure that ports in Bare Metal service are synchronized with
                NIC ports on the node, the following settings in the ironic-inspector
                configuration file must be set:</para>
            <screen>[processing]
add_ports = all
keep_ports = present</screen>
            <note>
              <para>During Kilo cycle we used an older version of Inspector called
                    <link xlink:href="https://pypi.python.org/pypi/ironic-discoverd">ironic-discoverd</link>. Inspector is expected to be a mostly drop-in
                    replacement, and the same client library should be used to connect to both.</para>
              <para>For Kilo, install <link xlink:href="https://pypi.python.org/pypi/ironic-discoverd">ironic-discoverd</link> of version 1.1.0 or higher
                    instead of python-ironic-inspector-client and use <literal>[discoverd]</literal> option
                    group in both Bare Metal service and ironic-discoverd configuration
                    files instead of ones provided above.</para>
            </note>
          </section>
        </section>
        <section xml:id="node-cleaning">
          <title>Node cleaning</title>
          <section>
            <title>Overview</title>
            <para>Ironic provides two modes for node cleaning: <literal>automated</literal> and <literal>manual</literal>.</para>
            <para><literal>Automated cleaning</literal> is automatically performed before the first
                workload has been assigned to a node and when hardware is recycled from
                one workload to another.</para>
            <para><literal>Manual cleaning</literal> must be invoked by the operator.</para>
          </section>
          <section xml:id="automated-cleaning">
            <title>Automated cleaning</title>
            <para>When hardware is recycled from one workload to another, Ironic performs
                automated cleaning on the node to ensure it’s ready for another workload. This
                ensures the tenant will get a consistent bare metal node deployed every time.</para>
            <para>Ironic implements automated cleaning by collecting a list of cleaning steps
                to perform on a node from the Power, Deploy, Management, and RAID interfaces
                of the driver assigned to the node. These steps are then ordered by priority
                and executed on the node when the node is moved
                to <literal>cleaning</literal> state, if automated cleaning is enabled.</para>
            <para>With automated cleaning, nodes move to <literal>cleaning</literal> state when moving from
                <literal>active</literal> -&gt; <literal>available</literal> state (when the hardware is recycled from one
                workload to another). Nodes also traverse cleaning when going from
                <literal>manageable</literal> -&gt; <literal>available</literal> state (before the first workload is
                assigned to the nodes). For a full understanding of all state transitions
                into cleaning, see <link xlink:href="https://docs.openstack.org/ironic/pike/contributor/states.html#states">states</link>.</para>
            <para>Ironic added support for automated cleaning in the Kilo release.</para>
            <section xml:id="enabling-cleaning">
              <title>Enabling automated cleaning</title>
              <para>To enable automated cleaning, ensure that your <literal>ironic.conf</literal> is set as follows.
                    (Prior to Mitaka, this option was named <literal>clean_nodes</literal>.):</para>
              <screen>[conductor]
automated_clean=true</screen>
              <para>This will enable the default set of cleaning steps, based on your hardware and
                    ironic drivers. If you’re using an <literal>agent_*</literal> driver, this includes, by default,
                    erasing all of the previous tenant’s data.</para>
              <para>You may also need to configure a <xref linkend="cleaning-network"/>.</para>
            </section>
            <section xml:id="cleaning-steps">
              <title>Cleaning steps</title>
              <para>Cleaning steps used for automated cleaning are ordered from higher to lower
                    priority, where a larger integer is a higher priority. In case of a conflict
                    between priorities across drivers, the following resolution order is used:
                    Power, Management, Deploy, and RAID interfaces.</para>
              <para>You can skip a cleaning step by setting the priority for that cleaning step
                    to zero or ‘None’.</para>
              <para>You can reorder the cleaning steps by modifying the integer priorities of the
                    cleaning steps.</para>
              <para>See <xref linkend="how-do-i-change-the-priority-of-a-cleaning-step"/> for more information.</para>
            </section>
          </section>
          <section xml:id="manual-cleaning">
            <title>Manual cleaning</title>
            <para><literal>Manual cleaning</literal> is typically used to handle long running, manual, or
                destructive tasks that an operator wishes to perform either before the first
                workload has been assigned to a node or between workloads. When initiating a
                manual clean, the operator specifies the cleaning steps to be performed.
                Manual cleaning can only be performed when a node is in the <literal>manageable</literal>
                state. Once the manual cleaning is finished, the node will be put in the
                <literal>manageable</literal> state again.</para>
            <para>Ironic added support for manual cleaning in the 4.4 (Mitaka series)
                release.</para>
            <section xml:id="setup">
              <title>Setup</title>
              <para>In order for manual cleaning to work, you may need to configure a
                    <xref linkend="cleaning-network"/>.</para>
            </section>
            <section xml:id="starting-manual-cleaning-via-api">
              <title>Starting manual cleaning via API</title>
              <para>Manual cleaning can only be performed when a node is in the <literal>manageable</literal>
                    state. The REST API request to initiate it is available in API version 1.15 and
                    higher:</para>
              <screen>PUT /v1/nodes/&lt;node_ident&gt;/states/provision</screen>
              <para>(Additional information is available <link xlink:href="https://developer.openstack.org/api-ref/baremetal/index.html?expanded=change-node-provision-state-detail#change-node-provision-state">here</link>.)</para>
              <para>This API will allow operators to put a node directly into <literal>cleaning</literal>
                    provision state from <literal>manageable</literal> state via ‘target’: ‘clean’.
                    The PUT will also require the argument <literal>clean_steps</literal> to be specified. This
                    is an ordered list of cleaning steps. A cleaning step is represented by a
                    dictionary (JSON), in the form:</para>
              <screen>{
    "interface": "&lt;interface&gt;",
    "step": "&lt;name of cleaning step&gt;",
    "args": {"&lt;arg1&gt;": "&lt;value1&gt;", ..., "&lt;argn&gt;": &lt;valuen&gt;}
}</screen>
              <para>The ‘interface’ and ‘step’ keys are required for all steps. If a cleaning step
                    method takes keyword arguments, the ‘args’ key may be specified. It
                    is a dictionary of keyword variable arguments, with each keyword-argument entry
                    being &lt;name&gt;: &lt;value&gt;.</para>
              <para>If any step is missing a required keyword argument, manual cleaning will not be
                    performed and the node will be put in <literal>clean failed</literal> provision state with an
                    appropriate error message.</para>
              <para>If, during the cleaning process, a cleaning step determines that it has
                    incorrect keyword arguments, all earlier steps will be performed and then the
                    node will be put in <literal>clean failed</literal> provision state with an appropriate error
                    message.</para>
              <para>An example of the request body for this API:</para>
              <screen>{
  "target":"clean",
  "clean_steps": [{
    "interface": "raid",
    "step": "create_configuration",
    "args": {"create_nonroot_volumes": false}
  },
  {
    "interface": "deploy",
    "step": "erase_devices"
  }]
}</screen>
              <para>In the above example, the driver’s RAID interface would configure hardware
                    RAID without non-root volumes, and then all devices would be erased
                    (in that order).</para>
            </section>
            <section xml:id="starting-manual-cleaning-via-ironic-cli">
              <title>Starting manual cleaning via <literal>ironic</literal> CLI</title>
              <para>Manual cleaning is supported in the <literal>ironic node-set-provision-state</literal>
                    command, starting with python-ironicclient 1.2.</para>
              <para>The target and verb is ‘clean’ and the argument ‘clean-steps’ must be specified.
                    Its value is one of:</para>
              <itemizedlist>
                <listitem>
                  <para>a JSON string</para>
                </listitem>
                <listitem>
                  <para>path to a JSON file whose contents are passed to the API</para>
                </listitem>
                <listitem>
                  <para>‘-‘, to read from stdin. This allows piping in the clean steps.
                            Using ‘-‘ to signify stdin is common in Unix utilities.</para>
                </listitem>
              </itemizedlist>
              <para>Keep in mind that manual cleaning is only supported in API version 1.15 and
                    higher.</para>
              <para>Examples of doing this with a JSON string:</para>
              <screen>ironic --ironic-api-version 1.15 node-set-provision-state &lt;node&gt; \
clean --clean-steps '[{"interface": "deploy", "step": "erase_devices_metadata"}]'
<link xlink:href="https://pypi.python.org/pypi/ironic-discoverd">ironic-discoverd</link>
ironic --ironic-api-version 1.15 node-set-provision-state &lt;node&gt; \
clean --clean-steps '[{"interface": "deploy", "step": "erase_devices"}]'</screen>
              <para>Or with a file:</para>
              <screen>ironic --ironic-api-version 1.15 node-set-provision-state &lt;node&gt; \
clean --clean-steps my-clean-steps.txt</screen>
              <para>Or with stdin:</para>
              <screen>cat my-clean-steps.txt | ironic --ironic-api-version 1.15 &lt;node&gt; \
node-set-provision-state clean --clean-steps -</screen>
            </section>
          </section>
          <section xml:id="cleaning-network">
            <title>Cleaning Network</title>
            <para>If you are using the Neutron DHCP provider (the default) you will also need to
                ensure you have configured a cleaning network. This network will be used to
                boot the ramdisk for in-band cleaning. You can use the same network as your
                tenant network. For steps to set up the cleaning network, see
                <link xlink:href="https://docs.openstack.org/ironic/pike/install/configure-cleaning.html#configure-cleaning">Configure the Bare Metal service for cleaning</link>.</para>
          </section>
          <section xml:id="inbandvsoutofbandcleaning">
            <title>In-band vs out-of-band</title>
            <para>Ironic uses two main methods to perform actions on a node: in-band and2
                out-of-band. Ironic supports using both methods to clean a node.</para>
            <section xml:id="in-band">
              <title>In-band</title>
              <para>In-band steps are performed by ironic making API calls to a ramdisk running
                    on the node using a Deploy driver. Currently, all the drivers using
                    ironic-python-agent ramdisk support in-band cleaning. By default,
                    ironic-python-agent ships with a minimal cleaning configuration, only erasing
                    disks. However, with this ramdisk, you can add your own cleaning steps and/or
                    override default cleaning steps with a custom Hardware Manager.</para>
            </section>
            <section xml:id="out-of-band">
              <title>Out-of-band</title>
              <para>Out-of-band are actions performed by your management controller, such as IPMI,
                    iLO, or DRAC. Out-of-band steps will be performed by ironic using a Power or
                    Management driver. Which steps are performed depends on the driver and hardware.</para>
              <para>For Out-of-Band cleaning operations supported by iLO drivers, refer to
                    <xref linkend="ilo-node-cleaning"/>.</para>
            </section>
          </section>
          <section xml:id="faq">
            <title>FAQ</title>
            <section xml:id="how-are-cleaning-steps-ordered">
              <title>How are cleaning steps ordered?</title>
              <para>For automated cleaning, cleaning steps are ordered by integer priority, where
                    a larger integer is a higher priority. In case of a conflict between priorities
                    across drivers, the following resolution order is used: Power, Management,
                    Deploy, and RAID interfaces.</para>
              <para>For manual cleaning, the cleaning steps should be specified in the desired
                    order.</para>
            </section>
            <section xml:id="how-do-i-skip-a-cleaning-step">
              <title>How do I skip a cleaning step?</title>
              <para>For automated cleaning, cleaning steps with a priority of 0 or None are skipped.</para>
            </section>
            <section xml:id="how-do-i-change-the-priority-of-a-cleaning-step">
              <title>How do I change the priority of a cleaning step?</title>
              <para>For manual cleaning, specify the cleaning steps in the desired order.</para>
              <para>For automated cleaning, it depends on whether the cleaning steps are
                    out-of-band or in-band.</para>
              <para>Most out-of-band cleaning steps have an explicit configuration option for
                    priority.</para>
              <para>Changing the priority of an in-band (ironic-python-agent) cleaning step
                    requires use of a custom HardwareManager. The only exception is
                    <literal>erase_devices</literal>, which can have its priority set in <literal>ironic.conf</literal>. For instance,
                    to disable <literal>erase_devices</literal>, you’d set the following configuration option:</para>
              <screen>[deploy]
erase_devices_priority=0</screen>
              <para>To enable or disable the in-band disk erase using <literal>agent_ilo</literal> driver, use the
                    following configuration option:</para>
              <screen>[ilo]
clean_priority_erase_devices=0</screen>
              <para>The generic hardware manager first tries to perform ATA disk erase by using
                    <literal>hdparm</literal> utility. If ATA disk erase is not supported, it performs software
                    based disk erase using <literal>shred</literal> utility. By default, the number of iterations
                    performed by <literal>shred</literal> for software based disk erase is 1. To configure
                    the number of iterations, use the following configuration option:</para>
              <screen>[deploy]
erase_devices_iterations=1</screen>
            </section>
            <section xml:id="what-cleaning-step-is-running">
              <title>What cleaning step is running?</title>
              <para>To check what cleaning step the node is performing or attempted to perform and
                    failed, either query the node endpoint for the node or run <literal>ironic node-show
$node_ident</literal> and look in the <literal>driver_internal_info</literal> field. The <literal>clean_steps</literal>
                    field will contain a list of all remaining steps with their priorities, and the
                    first one listed is the step currently in progress or that the node failed
                    before going into <literal>clean failed</literal> state.</para>
            </section>
            <section xml:id="should-i-disable-automated-cleaning">
              <title>Should I disable automated cleaning?</title>
              <para>Automated cleaning is recommended for Ironic deployments, however, there are
                    some tradeoffs to having it enabled. For instance, Ironic cannot deploy a new
                    instance to a node that is currently cleaning, and cleaning can be a time
                    consuming process. To mitigate this, we suggest using disks with support for
                    cryptographic ATA Security Erase, as typically the <literal>erase_devices</literal> step in the
                    deploy driver takes the longest time to complete of all cleaning steps.</para>
            </section>
            <section xml:id="why-can-t-i-power-on-off-a-node-while-it-s-cleaning">
              <title>Why can’t I power on/off a node while it’s cleaning?</title>
              <para>During cleaning, nodes may be performing actions that shouldn’t be
                    interrupted, such as BIOS or Firmware updates. As a result, operators are
                    forbidden from changing power state via the ironic API while a node is
                    cleaning.</para>
            </section>
          </section>
          <section>
            <title>Troubleshooting</title>
            <para>If cleaning fails on a node, the node will be put into <literal>clean failed</literal> state
                and placed in maintenance mode, to prevent ironic from taking actions on the
                node.</para>
            <para>Nodes in <literal>clean failed</literal> will not be powered off, as the node might be in a
                state such that powering it off could damage the node or remove useful
                information about the nature of the cleaning failure.</para>
            <para>A <literal>clean failed</literal> node can be moved to <literal>manageable</literal> state, where it cannot
                be scheduled by nova and you can safely attempt to fix the node. To move a node
                from <literal>clean failed</literal> to <literal>manageable</literal>:
                <literal>ironic node-set-provision-state manage</literal>.
                You can now take actions on the node, such as replacing a bad disk drive.</para>
            <para>Strategies for determining why a cleaning step failed include checking the
                ironic conductor logs, viewing logs on the still-running ironic-python-agent
                (if an in-band step failed), or performing general hardware troubleshooting on
                the node.</para>
            <para>When the node is repaired, you can move the node back to <literal>available</literal> state,
                to allow it to be scheduled by nova.</para>
            <screen># First, move it out of maintenance mode
ironic node-set-maintenance $node_ident false

# Now, make the node available for scheduling by nova
ironic node-set-provision-state $node_ident provide</screen>
            <para>The node will begin automated cleaning from the start, and move to
                <literal>available</literal> state when complete.</para>
          </section>
        </section>
        <section xml:id="adoption">
          <title>Node adoption</title>
          <section>
            <title>Overview</title>
            <para>As part of hardware inventory lifecycle management, it is not an
                unreasonable need to have the capability to be able to add hardware
                that should be considered in-use by the Bare Metal service,
                that may have been deployed by another Bare Metal service
                installation or deployed via other means.</para>
            <para>As such, the node adoption feature allows a user to define a node
                as <literal>active</literal> while skipping the <literal>available</literal> and <literal>deploying</literal>
                states, which will prevent the node from being seen by the Compute
                service as ready for use.</para>
            <para>This feature is leveraged as part of the state machine workflow,
                where a node in <literal>manageable</literal> can be moved to <literal>active</literal> state
                via the provision_state verb <literal>adopt</literal>. To view the state
                transition capabilities, see <link xlink:href="https://docs.openstack.org/ironic/pike/contributor/states.html#states"> Ironic’s State Machine</link>.</para>
          </section>
          <section xml:id="how-it-works">
            <title>How it works</title>
            <para>A node initially enrolled begins in the <literal>enroll</literal> state. An operator
                must then move the node to <literal>manageable</literal> state, which causes the driver’s
                <literal>power</literal> interface to be validated. Once in <literal>manageable</literal> state,
                an operator can then explicitly choose to adopt a node.</para>
            <para>Adoption of a node results in the validation of the driver <literal>boot</literal> interface,
                and upon success the process leverages what is referred to as the takeover
                logic. The takeover process is intended for conductors to take over the
                management of nodes for a conductor that has failed.</para>
            <para>The takeover process involves the driver deploy <literal>prepare</literal> and <literal>take_over</literal>
                methods being called. These steps take driver specific actions such as
                downloading and staging the deployment kernel and ramdisk, ISO image, any
                required boot image, or boot ISO image and then places any PXE or virtual
                media configuration necessary for the node should it be required.</para>
            <para>The adoption process makes no changes to the physical node, with the
                exception of operator supplied configurations where virtual media is
                used to boot the node under normal circumstances. An operator should
                ensure that any supplied configuration defining the node is sufficient
                for the continued operation of the node moving forward. Such as, if the
                node is configured to network boot via instance_info/boot_option=”netboot”,
                then appropriate driver specific node configuration should be set to
                support this capability.</para>
          </section>
          <section xml:id="possible-risk">
            <title>Possible Risk</title>
            <para>The main risk with this feature is that supplied configuration may ultimately
                be incorrect or invalid which could result in potential operational issues:</para>
            <itemizedlist>
              <listitem>
                <para><literal>rebuild</literal> verb - Rebuild is intended to allow a user to re-deploy the node
                        to a fresh state. The risk with adoption is that the image defined when an
                        operator adopts the node may not be the valid image for the pre-existing
                        configuration.</para>
                <para>If this feature is utilized for a migration from one deployment to another,
                        and pristine original images are loaded and provided, then ultimately the
                        risk is the same with any normal use of the <literal>rebuild</literal> feature, the server
                        is effectively wiped.</para>
              </listitem>
              <listitem>
                <para>When deleting a node, the deletion or cleaning processes may fail if the
                        incorrect deployment image is supplied in the configuration as the node
                        may NOT have been deployed with the supplied image and driver or
                        compatibility issues may exist as a result.</para>
                <para>Operators will need to be cognizant of that possibility and should plan
                        accordingly to ensure that deployment images are known to be compatible
                        with the hardware in their environment.</para>
              </listitem>
              <listitem>
                <para>Networking - Adoption will assert no new networking configuration to the
                        newly adopted node as that would be considered modifying the node.</para>
                <para>Operators will need to plan accordingly and have network configuration
                        such that the nodes will be able to network boot.</para>
              </listitem>
            </itemizedlist>
          </section>
          <section xml:id="how-to-use">
            <title>How to use</title>
            <note>
              <para>The power state that the ironic-conductor observes upon the first
                    successful power state check, as part of the transition to the
                    <literal>manageable</literal> state will be enforced with a node that has been adopted.
                    This means a node that is in <literal>power off</literal> state will, by default, have
                    the power state enforced as <literal>power off</literal> moving forward, unless an
                    administrator actively changes the power state using the Bare Metal
                    service.</para>
            </note>
            <section>
              <title>Requirements</title>
              <para>Requirements for use are essentially the same as to deploy a node:</para>
              <itemizedlist>
                <listitem>
                  <para>Sufficient driver information to allow for a successful
                            power management validation.</para>
                </listitem>
                <listitem>
                  <para>Sufficient <literal>instance_info</literal> to pass deploy driver preparation.</para>
                </listitem>
              </itemizedlist>
              <para>Each driver may have additional requirements dependent upon the
                    configuration that is supplied. An example of this would be defining
                    a node to always boot from the network, which will cause the conductor
                    to attempt to retrieve the pertinent files. Inability to do so will
                    result in the adoption failing, and the node being placed in the
                    <literal>adopt failed</literal> state.</para>
            </section>
            <section xml:id="agent-ipmitool-example">
              <title>agent_ipmitool example</title>
              <para>This is an example to create a new node, named <literal>testnode</literal>, with
                    sufficient information to pass basic validation in order to be taken
                    from the <literal>manageable</literal> state to <literal>active</literal> state:</para>
              <screen># Explicitly set the client API version environment variable to
# 1.17, which introduces the adoption capability.
export IRONIC_API_VERSION=1.17

ironic node-create -n testnode \
    -d agent_ipmitool \
    -i ipmi_address=&lt;ip_address&gt; \
    -i ipmi_username=&lt;username&gt; \
    -i ipmi_password=&lt;password&gt; \
    -i deploy_kernel=&lt;deploy_kernel_id_or_url&gt; \
    -i deploy_ramdisk=&lt;deploy_ramdisk_id_or_url&gt;

ironic port-create --node &lt;node_uuid&gt; -a &lt;node_mac_address&gt;

ironic node-update testnode add \
    instance_info/image_source="http://localhost:8080/blankimage" \
    instance_info/capabilities="{\"boot_option\": \"local\"}"

ironic node-set-provision-state testnode manage

ironic node-set-provision-state testnode adopt</screen>
              <note>
                <para>In the above example, the <literal>image_source</literal> setting must reference a valid
                        image or file, however that image or file can ultimately be empty.</para>
              </note>
              <note>
                <para>The above example utilizes a capability that defines the boot operation
                        to be local. We recommend to define the node as such unless network
                        booting is desired.</para>
              </note>
              <note>
                <para>The above example will fail a re-deployment as a fake image is
                        defined and no <literal>instance_info</literal>,<literal>image_checksum</literal> value is defined.
                        As such any actual attempt to write the image out will fail as the
                        <literal>image_checksum</literal> value is only validated at time of an actual
                        deployment operation.</para>
              </note>
              <note>
                <para>A user may wish to assign an instance_uuid to a node, which could be
                        used to match an instance in the Compute service. Doing so is not
                        required for the proper operation of the Bare Metal service.</para>
                <para>ironic node-update &lt;node name or uuid&gt; add instance_uuid=&lt;uuid&gt;</para>
              </note>
              <note>
                <para>In Newton, coupled with API version 1.20, the concept of a
                        network_interface was introduced. A user of this feature may wish to
                        add new nodes with a network_interface of <literal>noop</literal> and then change
                        the interface at a later point and time.</para>
              </note>
            </section>
          </section>
          <section>
            <title>Troubleshooting</title>
            <para>Should an adoption operation fail for a node, the error that caused the
                failure will be logged in the node’s <literal>last_error</literal> field when viewing the
                node. This error, in the case of node adoption, will largely be due to
                failure of a validation step. Validation steps are dependent
                upon what driver is selected for the node.</para>
            <para>Any node that is in the <literal>adopt failed</literal> state can have the <literal>adopt</literal> verb
                re-attempted. Example:</para>
            <screen>ironic node-set-provision-state &lt;node name or uuid&gt; adopt</screen>
            <para>If a user wishes to abort their attempt at adopting, they can then move
                the node back to <literal>manageable</literal> from <literal>adopt failed</literal> state by issuing the
                <literal>manage</literal> verb. Example:</para>
            <screen>ironic node-set-provision-state &lt;node name or uuid&gt; manage</screen>
            <para>If all else fails the hardware node can be removed from the Bare Metal
                service. The <literal>node-delete</literal> command, which is <emphasis role="bold">not</emphasis> the same as setting
                the provision state to <literal>deleted</literal>, can be used while the node is in
                <literal>adopt failed</literal> state. This will delete the node without cleaning
                occurring to preserve the node’s current state. Example:</para>
            <screen>ironic node-delete &lt;node name or uuid&gt;</screen>
          </section>
        </section>
        <section xml:id="raid-configuration">
          <title>RAID Configuration</title>
          <section>
            <title>Overview</title>
            <para>Ironic supports RAID configuration for bare metal nodes. It allows operators
                to specify the desired RAID configuration via Ironic CLI or REST API.
                The desired RAID configuration is applied on the bare metal during manual
                cleaning.</para>
          </section>
          <section>
            <title>Prerequisites</title>
            <para>The bare metal node needs to use a driver that supports RAID
                configuration. Drivers may implement RAID configuration either in-band or
                out-of-band.</para>
            <para>In-band RAID configuration is done using the Ironic Python Agent
                ramdisk. For in-band RAID configuration using agent ramdisk, a hardware
                manager which supports RAID should be bundled with the ramdisk.
                The drivers supporting RAID configuration could be found using the ironic
                CLI <literal>ironic node-validate &lt;node-uuid&gt;</literal>.</para>
          </section>
          <section xml:id="build-agent-ramdisk-which-supports-raid-configuration">
            <title>Build agent ramdisk which supports RAID configuration</title>
            <para>For doing in-band RAID configuration, Ironic needs an agent ramdisk bundled
                with a hardware manager which supports RAID configuration for your hardware.
                </para>
          </section>
          <section xml:id="raid-configuration-json-format">
            <title>RAID configuration JSON format</title>
            <para>The desired RAID configuration and current RAID configuration are represented
                in JSON format.</para>
            <section xml:id="target-raid-configuration">
              <title>Target RAID configuration</title>
              <para>This is the desired RAID configuration on the bare metal node. Using Ironic CLI
                    or REST API, the operator sets <literal>target_raid_config</literal> field of the node.
                    The target RAID configuration will be applied during manual cleaning.</para>
              <para>Target RAID configuration is a dictionary having <literal>logical_disks</literal>
                    as the key. The value for the <literal>logical_disks</literal> is a list of JSON
                    dictionaries. It looks like:</para>
              <screen>{
 "logical_disks": [
                   {&lt;desired properties of logical disk 1&gt;},
                   {&lt;desired properties of logical disk 2&gt;},
                   .
                   .
                   .
                  ]
}</screen>
              <para>If the <literal>target_raid_config</literal> is an empty dictionary, it unsets the value of
                    <literal>target_raid_config</literal> if the value was set with previous RAID configuration
                    done on the node.</para>
              <para>Each dictionary of logical disk contains the desired properties of logical
                    disk supported by the driver. These properties are discoverable by using
                    Ironic CLI or REST API:</para>
              <screen>Ironic CLI:
  ironic --ironic-api-version 1.15 driver-raid-logical-disk-properties &lt;driver name&gt;
Ironic REST API:
  curl -X GET -H "Content-Type: application/json" -H "X-Auth-Token: $AUTH_TOKEN" -H "X-OpenStack-Ironic-API-Version: 1.15"  http://&lt;ironic-api-url&gt;/v1/drivers/&lt;driver name&gt;/raid/logical_disk_properties</screen>
              <para>The RAID feature is available in ironic API version 1.15 and above.
                    If <literal>--ironic-api-version</literal> is not used in the CLI, it will error out with
                    following message:</para>
              <screen>  No API version was specified and the requested operation was not
  supported by the client's negotiated API version 1.9. Supported
  version range is: 1.1 to ...

where the "..." in above error message would be the maximum version
supported by the service.</screen>
              <para>The RAID properties can be split into 4 different types:</para>
              <procedure>
                <step>
                  <para>Mandatory properties. These properties must be specified for each logical
                            disk and have no default values.</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>size_gb</literal> - Size (Integer) of the logical disk to be created in GiB.
                                    <literal>MAX</literal> may be specified if the logical disk should use all of the
                                    remaining space available. This can be used only when backing physical
                                    disks are specified (see below).</para>
                    </listitem>
                    <listitem>
                      <para><literal>raid_level</literal> - RAID level for the logical disk. Ironic supports the
                                    following RAID levels: 0, 1, 2, 5, 6, 1+0, 5+0, 6+0.</para>
                    </listitem>
                  </itemizedlist>
                </step>
                <step>
                  <para>Optional properties. These properties have default values and
                            they may be overridden in the specification of any logical disk.</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>volume_name</literal> - Name of the volume. Should be unique within the Node.
                                    If not specified, volume name will be auto-generated.</para>
                    </listitem>
                    <listitem>
                      <para><literal>is_root_volume</literal> - Set to <literal>true</literal> if this is the root volume. At
                                    most one logical disk can have this set to <literal>true</literal>; the other
                                    logical disks must have this set to <literal>false</literal>. The
                                    <literal>root device hint</literal> will be saved, if the driver is capable of
                                    retrieving it. This is <literal>false</literal> by default.</para>
                    </listitem>
                  </itemizedlist>
                </step>
                <step>
                  <para>Backing physical disk hints. These hints are specified for each logical
                            disk to let Ironic find the desired disks for RAID configuration. This is
                            machine-independent information. This serves the use-case where the
                            operator doesn’t want to provide individual details for each bare metal
                            node.</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>share_physical_disks</literal> - Set to <literal>true</literal> if this logical disk can
                                    share physical disks with other logical disks. The default value is
                                    <literal>false</literal>.</para>
                    </listitem>
                    <listitem>
                      <para><literal>disk_type</literal> - <literal>hdd</literal> or <literal>ssd</literal>. If this is not specified, disk type
                                    will not be a criterion to find backing physical disks.</para>
                    </listitem>
                    <listitem>
                      <para><literal>interface_type</literal> - <literal>sata</literal> or <literal>scsi</literal> or <literal>sas</literal>. If this is not
                                    specified, interface type will not be a criterion to
                                    find backing physical disks.</para>
                    </listitem>
                    <listitem>
                      <para><literal>number_of_physical_disks</literal> - Integer, number of disks to use for the
                                    logical disk. Defaults to minimum number of disks required for the
                                    particular RAID level.</para>
                    </listitem>
                  </itemizedlist>
                </step>
                <step>
                  <para>Backing physical disks. These are the actual machine-dependent
                            information. This is suitable for environments where the operator wants
                            to automate the selection of physical disks with a 3rd-party tool based
                            on a wider range of attributes (eg. S.M.A.R.T. status, physical location).
                            The values for these properties are hardware dependent.</para>
                  <itemizedlist>
                    <listitem>
                      <para><literal>controller</literal> - The name of the controller as read by the driver.</para>
                    </listitem>
                    <listitem>
                      <para><literal>physical_disks</literal> - A list of physical disks to use as read by the
                                    driver.</para>
                    </listitem>
                  </itemizedlist>
                  <note>
                    <para>If properties from both Backing physical disk hints or
                                Backing physical disks are specified, they should be consistent with
                                each other. If they are not consistent, then the RAID configuration
                                will fail (because the appropriate backing physical disks could
                                not be found).</para>
                  </note>
                </step>
              </procedure>
              <section xml:id="examples-for-target-raid-config">
                <title>Examples for <literal>target_raid_config</literal></title>
                <para><emphasis>Example 1</emphasis>. Single RAID disk of RAID level 5 with all of the space
                        available. Make this the root volume to which Ironic deploys the image:</para>
                <screen>{
 "logical_disks": [
                   {
                    "size_gb": "MAX",
                    "raid_level": "5",
                    "is_root_volume": true
                   }
                  ]
}</screen>
                <para><emphasis>Example 2</emphasis>. Two RAID disks. One with RAID level 5 of 100 GiB and make it
                        root volume and use SSD. Another with RAID level 1 of 500 GiB and use
                        HDD:</para>
                <screen>{
 "logical_disks": [
                   {
                    "size_gb": 100,
                    "raid_level": "5",
                    "is_root_volume": true,
                    "disk_type": "ssd"
                   },
                   {
                    "size_gb": 500,
                    "raid_level": "1",
                    "disk_type": "hdd"
                   }
                  ]
}</screen>
                <para><emphasis>Example 3</emphasis>. Single RAID disk. I know which disks and controller to use:</para>
                <screen>{
 "logical_disks": [
                   {
                    "size_gb": 100,
                    "raid_level": "5",
                    "controller": "Smart Array P822 in Slot 3",
                    "physical_disks": ["6I:1:5", "6I:1:6", "6I:1:7"],
                    "is_root_volume": true
                   }
                  ]
}</screen>
                <para><emphasis>Example 4</emphasis>. Using backing physical disks:</para>
                <screen>{
  "logical_disks":
    [
      {
        "size_gb": 50,
        "raid_level": "1+0",
        "controller": "RAID.Integrated.1-1",
        "volume_name": "root_volume",
        "is_root_volume": true,
        "physical_disks": [
                           "Disk.Bay.0:Encl.Int.0-1:RAID.Integrated.1-1",
                           "Disk.Bay.1:Encl.Int.0-1:RAID.Integrated.1-1"
                          ]
      },
      {
        "size_gb": 100,
        "raid_level": "5",
        "controller": "RAID.Integrated.1-1",
        "volume_name": "data_volume",
        "physical_disks": [
                           "Disk.Bay.2:Encl.Int.0-1:RAID.Integrated.1-1",
                           "Disk.Bay.3:Encl.Int.0-1:RAID.Integrated.1-1",
                           "Disk.Bay.4:Encl.Int.0-1:RAID.Integrated.1-1"
                          ]
      }
    ]
}</screen>
              </section>
            </section>
            <section xml:id="current-raid-configuration">
              <title>Current RAID configuration</title>
              <para>After target RAID configuration is applied on the bare metal node, Ironic
                    populates the current RAID configuration. This is populated in the
                    <literal>raid_config</literal> field in the Ironic node. This contains the details about
                    every logical disk after they were created on the bare metal node. It
                    contains details like RAID controller used, the backing physical disks used,
                    WWN of each logical disk, etc. It also contains information about each
                    physical disk found on the bare metal node.</para>
              <para>To get the current RAID configuration:</para>
              <screen>Ironic CLI:
  ironic --ironic-api-version 1.15 node-show &lt;node-uuid-or-name&gt;
REST API:
  curl -X GET -H "Content-Type: application/json" -H "X-Auth-Token: $AUTH_TOKEN" -H "X-OpenStack-Ironic-API-Version: 1.15" http://&lt;ironic-api-url&gt;/v1/nodes/&lt;node-uuid-or-name&gt;/states</screen>
            </section>
          </section>
          <section xml:id="workflow">
            <title>Workflow</title>
            <itemizedlist>
              <listitem>
                <para>Operator configures the bare metal node with a driver that has a <literal>RAIDInterface</literal>.</para>
              </listitem>
              <listitem>
                <para>For in-band RAID configuration, operator builds an agent ramdisk which
                        supports RAID configuration by bundling the hardware manager with the
                        ramdisk. See <xref linkend="build-agent-ramdisk-which-supports-raid-configuration"/> for
                        more information.</para>
              </listitem>
              <listitem>
                <para>Operator prepares the desired target RAID configuration as mentioned in
                        <xref linkend="target-raid-configuration"/>. The target RAID configuration is set on
                        the Ironic node:</para>
                <screen>Ironic CLI:
  ironic --ironic-api-version 1.15 node-set-target-raid-config &lt;node-uuid-or-name&gt; &lt;JSON file containing target RAID configuration&gt;
REST API:
  curl -X PUT -H "Content-Type: application/json" -H "X-Auth-Token: $AUTH_TOKEN" -H "X-OpenStack-Ironic-API-Version: 1.15" -d '&lt;JSON data target RAID configuration&gt;' http://&lt;ironic-api-url&gt;/v1/nodes/&lt;node-uuid-or-name&gt;/states/raid

The Ironic CLI can accept the input from standard input also:
   ironic --ironic-api-version 1.15 node-set-target-raid-config &lt;node-uuid-or-name&gt; -</screen>
              </listitem>
              <listitem>
                <para>Create a JSON file with the RAID clean steps for manual cleaning. Add other
                        clean steps as desired:</para>
                <screen>[{
  "interface": "raid",
  "step": "delete_configuration"
},
{
  "interface": "raid",
  "step": "create_configuration"
}]</screen>
                <note>
                  <para><literal>create_configuration</literal> doesn’t remove existing disks. We recommend
                            to add <literal>delete_configuration</literal> before <literal>create_configuration</literal> to make
                            sure that only the desired logical disks exist in the system after
                            manual cleaning.</para>
                </note>
              </listitem>
              <listitem>
                <para>Bring the node to <literal>manageable</literal> state and do a <literal>clean</literal> action to start
                        cleaning on the node:</para>
                <screen>Ironic CLI:
  ironic --ironic-api-version 1.15 node-set-provision-state &lt;node-uuid-or-name&gt; clean --clean-steps &lt;JSON file containing clean steps created above&gt;
REST API:
  curl -X PUT -H "Content-Type: application/json" -H "X-Auth-Token: $AUTH_TOKEN" -H "X-OpenStack-Ironic-API-Version: 1.15" -d '{'target': 'clean', 'clean_steps': &lt;JSON description for clean steps as mentioned above&gt;' http://&lt;ironic-api-url&gt;/v1/nodes/&lt;node-uuid-or-name&gt;/states/provision</screen>
              </listitem>
              <listitem>
                <para>After manual cleaning is complete, the current RAID configuration can be
                        viewed using:</para>
                <screen>Ironic CLI:
  ironic --ironic-api-version 1.15 node-show &lt;node-uuid-or-name&gt;
REST API:
  curl -X GET -H "Content-Type: application/json" -H "X-Auth-Token: $AUTH_TOKEN" -H "X-OpenStack-Ironic-API-Version: 1.15" http://&lt;ironic-api-url&gt;/v1/nodes/&lt;node-uuid-or-name&gt;/states</screen>
              </listitem>
            </itemizedlist>
          </section>
          <section xml:id="using-raid-in-nova-flavor-for-scheduling">
            <title>Using RAID in nova flavor for scheduling</title>
            <para>The operator can specify the <literal>raid_level</literal> capability in nova flavor for node to be selected
                for scheduling:</para>
            <screen>nova flavor-key my-baremetal-flavor set capabilities:raid_level="1+0"</screen>
          </section>
          <section xml:id="developer-documentation">
            <title>Developer documentation</title>
            <para>In-band RAID configuration is done using IPA ramdisk. IPA ramdisk has
                support for pluggable hardware managers which can be used to extend the
                functionality offered by IPA ramdisk using stevedore plugins. For more
                information, see Ironic Python Agent <link xlink:href="https://docs.openstack.org/ironic-python-agent/latest/install/index.html#hardware-managers">Hardware Manager</link> documentation.</para>
            <para>The hardware manager that supports RAID configuration should do the following:</para>
            <procedure>
              <step>
                <para>Implement a method named <literal>create_configuration</literal>. This method creates
                        the RAID configuration as given in <literal>target_raid_config</literal>. After successful
                        RAID configuration, it returns the current RAID configuration information
                        which ironic uses to set <literal>node.raid_config</literal>.</para>
              </step>
              <step>
                <para>Implement a method named <literal>delete_configuration</literal>. This method deletes
                        all the RAID disks on the bare metal.</para>
              </step>
              <step>
                <para>Return these two clean steps in <literal>get_clean_steps</literal> method with priority
                        as 0. For example:</para>
                <screen>return [{'step': 'create_configuration',
         'interface': 'raid',
         'priority': 0},
        {'step': 'delete_configuration',
         'interface': 'raid',
         'priority': 0}]</screen>
              </step>
            </procedure>
          </section>
        </section>
        <section xml:id="boot-from-volume">
          <title>Boot From Volume</title>
          <section>
            <title>Overview</title>
            <para>The Bare Metal service supports booting from a Cinder iSCSI volume as of the
                Pike release. This guide will primarily deal with this use case, but will be
                updated as more paths for booting from a volume, such as FCoE, are introduced.</para>
          </section>
          <section>
            <title>Prerequisites</title>
            <para>Currently booting from a volume requires:</para>
            <itemizedlist>
              <listitem>
                <para>Bare Metal service version 9.0.0</para>
              </listitem>
              <listitem>
                <para>Bare Metal API microversion 1.33 or later</para>
              </listitem>
              <listitem>
                <para>A driver that utilizes the <link xlink:href="https://docs.openstack.org/ironic/pike/install/configure-pxe.html">PXE boot mechanism</link>.
                        Currently booting from a volume is supported by the reference drivers that
                        utilize PXE boot mechanisms when iPXE is enabled.</para>
              </listitem>
              <listitem>
                <para>iPXE is an explicit requirement, as it provides the mechanism that attaches
                        and initiates booting from an iSCSI volume.</para>
              </listitem>
            </itemizedlist>
          </section>
          <section xml:id="conductor-configuration">
            <title>Conductor Configuration</title>
            <para>In <literal>ironic.conf</literal>, you can specify a list of enabled storage interfaces. Check
                <literal>[DEFAULT]enabled_storage_interfaces</literal> in your <literal>ironic.conf</literal> to ensure that
                your desired interface is enabled. For example, to enable the <literal>cinder</literal> and
                <literal>noop</literal> storage interfaces:</para>
            <screen>[DEFAULT]
enabled_storage_interfaces = cinder,noop</screen>
            <para>If you want to specify a default storage interface rather than setting the
                storage interface on a per node basis, set <literal>[DEFAULT]default_storage_interface</literal>
                in <literal>ironic.conf</literal>. The <literal>default_storage_interface</literal> will be used for any node that
                doesn’t have a storage interface defined.</para>
          </section>
          <section>
            <title>Node Configuration</title>
            <section xml:id="storage-interface">
              <title>Storage Interface</title>
              <para>You will need to specify what storage interface the node will use to handle
                    storage operations. For example, to set the storage interface to <literal>cinder</literal>
                    on an existing node:</para>
              <screen>openstack --os-baremetal-api-version 1.33 baremetal node set \
          --storage-interface cinder $NODE_UUID</screen>
              <para>A default storage interface can be specified in <literal>ironic.conf</literal>. See the
                    <xref linkend="conductor-configuration"/> section for details.</para>
            </section>
            <section xml:id="iscsi-configuration">
              <title>iSCSI Configuration</title>
              <para>In order for a bare metal node to boot from an iSCSI volume, the <literal>iscsi_boot</literal>
                    capability for the node must be set to <literal>True</literal>. For example, if you want to
                    update an existing node to boot from volume:</para>
              <screen>openstack --os-baremetal-api-version 1.33 baremetal node set \
          --property capabilities=iscsi_boot:True $NODE_UUID</screen>
              <para>You will also need to create a volume connector for the node, so the storage
                    interface will know how to communicate with the node for storage operation. In
                    the case of iSCSI, you will need to provide an iSCSI Qualifying Name (IQN)
                    that is unique to your SAN. For example, to create a volume connector for iSCSI:</para>
              <screen>openstack --os-baremetal-api-version 1.33 baremetal volume connector create \
          --node $NODE_UUID --type iqn --connector-id iqn.2017-08.org.openstack.$NODE_UUID</screen>
            </section>
          </section>
        </section>
        <section xml:id="multitenancy">
          <title>Multi-tenancy in the Bare Metal service</title>
          <section>
            <title>Overview</title>
            <para>It is possible to use dedicated tenant networks for provisioned nodes, which
                extends the current Bare Metal service capabilities of providing flat networks.
                This works in conjunction with the Networking service to allow provisioning of
                nodes in a separate provisioning network. The result of this is that multiple
                tenants can use nodes in an isolated fashion. However, this configuration does
                not support trunk ports belonging to multiple networks.</para>
          </section>
          <section>
            <title>Concepts</title>
            <section xml:id="network-interfaces">
              <title>Network interfaces</title>
              <para>Network interface is one of the driver interfaces that manages network
                    switching for nodes. There are 3 network interfaces available in
                    the Bare Metal service:</para>
              <itemizedlist>
                <listitem>
                  <para><literal>noop</literal> interface is used for standalone deployments, and does not perform
                            any network switching.</para>
                </listitem>
                <listitem>
                  <para><literal>flat</literal> interface places all provisioned nodes and nodes being deployed into
                            a single layer 2 network, separated from the cleaning network.</para>
                </listitem>
                <listitem>
                  <para><literal>neutron</literal> interface provides tenant-defined networking by integrating with
                            the Networking service, while also separating tenant networks from the
                            provisioning and cleaning provider networks.</para>
                </listitem>
              </itemizedlist>
            </section>
            <section xml:id="local-link-connection">
              <title>Local link connection</title>
              <para>The Bare Metal service allows <literal>local_link_connection</literal> information to be
                    associated with Bare Metal ports. This information is provided to the
                    Networking service’s ML2 driver when a Virtual Interface (VIF) is attached. The
                    ML2 driver uses the information to plug the specified port to the tenant
                    network.</para>
              <table>
                <title>local_link_connection fields</title>
                <tgroup cols="2">
                  <colspec colname="c1" colwidth="50"/>
                  <colspec colname="c2" colwidth="50"/>
                  <thead>
                    <row>
                      <entry>
                        <para>Field</para>
                      </entry>
                      <entry>
                        <para>Description</para>
                      </entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>
                        <para>
                          <literal>switch_id</literal>
                        </para>
                      </entry>
                      <entry>
                        <para>Required. Identifies a switch and can be a MAC address or an
                                        OpenFlow-based <literal>datapath_id</literal>.</para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>
                          <literal>port_id</literal>
                        </para>
                      </entry>
                      <entry>
                        <para>Required. Port ID on the switch, for example, Gig0/1.</para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>
                          <literal>switch_info</literal>
                        </para>
                      </entry>
                      <entry>
                        <para>Optional. Used to distinguish different switch models or other
                                        vendor-specific identifier. Some ML2 plugins may require this
                                        field.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </section>
            <section xml:id="multitenancy-physnets">
              <title>Physical networks</title>
              <para>A Bare Metal port may be associated with a physical network using its
                    <literal>physical_network</literal> field. The Bare Metal service uses this information when
                    mapping between virtual ports in the Networking service and physical ports and
                    port groups in the Bare Metal service. A port’s physical network field is
                    optional, and if not set then any virtual port may be mapped to that port,
                    provided that no free Bare Metal port with a suitable physical network
                    assignment exists.</para>
              <para>The physical network of a port group is defined by the physical network of its
                    constituent ports. The Bare Metal service ensures that all ports in a port
                    group have the same value in their physical network field.</para>
              <para>When attaching a virtual interface (VIF) to a node, the following ordered
                    criteria are used to select a suitable unattached port or port group:</para>
              <itemizedlist>
                <listitem>
                  <para>Require ports or port groups to not have a physical network or to have a
                            physical network that matches one of the VIF’s allowed physical networks.</para>
                </listitem>
                <listitem>
                  <para>Prefer ports and port groups that have a physical network to ports and
                            port groups that do not have a physical network.</para>
                </listitem>
                <listitem>
                  <para>Prefer port groups to ports. Prefer ports with PXE enabled.</para>
                </listitem>
              </itemizedlist>
            </section>
          </section>
         <section xml:id="configuring-the-bare-metal-service">
            <title>Configuring the Bare Metal service</title>
            <para>See the <link xlink:href="https://docs.openstack.org/ironic/pike/install/configure-tenant-networks.html#configure-tenant-networks">Configure tenant networks</link>
                  section in the installation guide for
                  the Bare Metal service.</para>
          </section>
          <section xml:id="configuring-nodes">
            <title>Configuring nodes</title>
            <procedure>
              <step>
                <para>Ensure that your python-ironicclient version and requested API version
                        are sufficient for your requirements.</para>
                <itemizedlist>
                  <listitem>
                    <para>Multi-tenancy support was added in API version 1.20, and is supported by
                                python-ironicclient version 1.5.0 or higher.</para>
                  </listitem>
                  <listitem>
                    <para>Physical network support for ironic ports was added in API version 1.34,
                                and is supported by python-ironicclient version 1.15.0 or higher.</para>
                  </listitem>
                </itemizedlist>
                <para>The following examples assume you are using python-ironicclient version
                        1.15.0 or higher. They show the usage of both <literal>ironic</literal> and <literal>openstack
baremetal</literal> commands.</para>
                <para>If you’re going to use <literal>ironic</literal> command, set the following variable in
                        your shell environment:</para>
                <screen>export IRONIC_API_VERSION=&lt;API version&gt;</screen>
                <para>If you’re using Ironic client plugin for openstack client via
                        <literal>openstack baremetal</literal> commands, export the following variable:</para>
                <screen>export OS_BAREMETAL_API_VERSION=&lt;API version&gt;</screen>
              </step>
              <step>
                <para>The node’s <literal>network_interface</literal> field should be set to a valid network
                        interface. Valid interfaces are listed in the
                        <literal>[DEFAULT]/enabled_network_interfaces</literal> configuration option in the
                        ironic-conductor’s configuration file. Set it to <literal>neutron</literal> to use the
                        Networking service’s ML2 driver:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>ironic</literal> command:</para>
                    <screen>ironic node-create --network-interface neutron \
--driver agent-ipmitool</screen>
                  </listitem>
                  <listitem>
                    <para><literal>openstack</literal> command:</para>
                    <screen>openstack baremetal node create --network-interface neutron \
--driver agent-ipmitool</screen>
                  </listitem>
                </itemizedlist>
                <note>
                  <para>If the <literal>[DEFAULT]/default_network_interface</literal> configuration option is
                            set, the <literal>--network-interface</literal> option does not need to be specified
                            when creating the node.</para>
                </note>
              </step>
              <step>
                <para>To update an existing node’s network interface to <literal>neutron</literal>, use the
                        following commands:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>ironic</literal> command:</para>
                    <screen>ironic node-update $NODE_UUID_OR_NAME add network_interface=neutron</screen>
                  </listitem>
                  <listitem>
                    <para><literal>openstack</literal> command:</para>
                    <screen>openstack baremetal node set $NODE_UUID_OR_NAME \
--network-interface neutron</screen>
                  </listitem>
                </itemizedlist>
              </step>
              <step>
                <para>Create a port as follows:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>ironic</literal> command:</para>
                    <screen>ironic port-create -a $HW_MAC_ADDRESS -n $NODE_UUID \
-l switch_id=$SWITCH_MAC_ADDRESS -l switch_info=$SWITCH_HOSTNAME \
-l port_id=$SWITCH_PORT --pxe-enabled true --physical-network physnet1</screen>
                  </listitem>
                  <listitem>
                    <para><literal>openstack</literal> command:</para>
                    <screen>openstack baremetal port create $HW_MAC_ADDRESS --node $NODE_UUID \
--local-link-connection switch_id=$SWITCH_MAC_ADDRESS \
--local-link-connection switch_info=$SWITCH_HOSTNAME \
--local-link-connection port_id=$SWITCH_PORT --pxe-enabled true \
--physical-network physnet1</screen>
                  </listitem>
                </itemizedlist>
              </step>
              <step>
                <para>Check the port configuration:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>ironic</literal> command:</para>
                    <screen>ironic port-show $PORT_UUID</screen>
                  </listitem>
                  <listitem>
                    <para><literal>openstack</literal> command:</para>
                    <screen>openstack baremetal port show $PORT_UUID</screen>
                  </listitem>
                </itemizedlist>
              </step>
            </procedure>
            <para>After these steps, the provisioning of the created node will happen in the
                provisioning network, and then the node will be moved to the tenant network
                that was requested.</para>
          </section>
        </section>
        <section xml:id="port-groups-support">
          <title>Port groups support</title>
          <para>The Bare Metal service supports static configuration of port groups (bonds) in
            the instances via configdrive. See <link xlink:href="https://www.kernel.org/doc/Documentation/networking/bonding.txt">kernel documentation on bonding</link> to see
            why it may be useful and how it is setup in linux. The sections below describe
            how to make use of them in the Bare Metal service.</para>
          <section xml:id="switch-side-configuration">
            <title>Switch-side configuration</title>
            <para>If port groups are desired in the Ironic deployment, they need to be configured
                on the switches. It needs to be done manually, and the mode and properties
                configured on the switch have to correspond to the mode and properties that
                will be configured on the ironic side, as bonding mode and properties may be
                named differently on your switch, or have possible values different from the
                ones described in <link xlink:href="https://www.kernel.org/doc/Documentation/networking/bonding.txt">kernel documentation on bonding</link>. Refer to your
                switch configuration documentation for more details.</para>
            <para>Provisioning and cleaning cannot make use of port groups if they need to boot
                the deployment ramdisk via (i)PXE. If your switches or desired port group
                configuration do not support port group fallback, which will allow port group
                members to be used by themselves, you need to set port group’s
                <literal>standalone_ports_supported</literal> value to be <literal>False</literal> in Ironic, as it is
                <literal>True</literal> by default.</para>
          </section>
          <section xml:id="physical-networks">
            <title>Physical networks</title>
            <para>If any port in a port group has a physical network, then all ports in
                that port group must have the same physical network.</para>
            <para>In order to change the physical network of the ports in a port group, all ports
                must first be removed from the port group, before changing their physical
                networks (to the same value), then adding them back to the port group.</para>
            <para>See <xref linkend="multitenancy-physnets"/> for further information on
                using physical networks in the Bare Metal service.</para>
          </section>
          <section xml:id="port-groups-configuration-in-the-bare-metal-service">
            <title>Port groups configuration in the Bare Metal service</title>
            <para>Port group configuration is supported in ironic API microversions 1.26, the
                CLI commands below specify it for completeness.</para>
            <procedure>
              <step>
                <para>When creating a port group, the node to which it belongs must be specified,
                        along with (optionally): the name, address, mode, properties, and if it
                        supports fallback to standalone ports:</para>
                <screen>openstack --os-baremetal-api-version 1.26 baremetal port group create \
--node $NODE_UUID --name test --address fa:ab:25:48:fd:ba --mode 802.3ad \
--property miimon=100 --property xmit_hash_policy="layer2+3" \
--support-standalone-ports</screen>
                <para>A port group can also be updated with <literal>openstack baremetal port group set</literal>
                        command, see its help for more details.</para>
                <para>If an address is not specified, the port group address on the deployed
                        instance will be the same as the address of the neutron port that is
                        attached to the port group. If the neutron port is not attached, the port
                        group will not be configured.</para>
                <note>
                  <para>In standalone mode, port groups have to be configured manually. It can
                            be done either statically inside the image, or by generating the
                            configdrive and adding it to the node’s <literal>instance_info</literal>. For more
                            information on how to configure bonding via configdrive, refer to
                            <link xlink:href="https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html#version-2">cloud-init documentation</link>
                            and <link xlink:href="https://git.launchpad.net/cloud-init/tree/cloudinit">code</link>.
                            cloud-init version 0.7.7 or later is required for bonding configuration
                            to work.</para>
                  <para>If the port group’s address is not explicitly set in standalone mode, it
                            will be set automatically by the process described in
                            <link xlink:href="https://www.kernel.org/doc/Documentation/networking/bonding.txt">kernel documentation on bonding</link>.</para>
                </note>
                <para>During interface attachment, port groups have higher priority than ports,
                        so they will be used first. (It is not yet possible to specify which one is
                        desired, a port group or a port, in an interface attachment request). Port
                        groups that don’t have any ports will be ignored.</para>
                <para>The mode and properties values are described in the
                        <link xlink:href="https://www.kernel.org/doc/Documentation/networking/bonding.txt">kernel documentation on bonding</link>. The default port group mode is
                        <literal>active-backup</literal>, and this default can be changed by setting the
                        <literal>[DEFAULT]default_portgroup_mode</literal> configuration option in the ironic API
                        service configuration file.</para>
              </step>
              <step>
                <para>Associate ports with the created port group.</para>
                <para>It can be done on port creation:</para>
                <screen>openstack --os-baremetal-api-version 1.26 baremetal port create \
--node $NODE_UUID --address fa:ab:25:48:fd:ba --port-group test</screen>
                <para>Or by updating an existing port:</para>
                <screen>openstack --os-baremetal-api-version 1.26 baremetal port set \
$PORT_UUID --port-group $PORT_GROUP_UUID</screen>
                <para>When updating a port, the node associated with the port has to be in
                        <literal>enroll</literal>, <literal>manageable</literal>, or <literal>inspecting</literal> states. A port group can have
                        the same or different address as individual ports.</para>
              </step>
              <step>
                <para>Boot an instance (or node directly, in case of using standalone ironic)
                        providing an image that has cloud-init version 0.7.7 or later and supports
                        bonding.</para>
              </step>
            </procedure>
            <para>When the deployment is done, you can check that the port group is set up
                properly by running the following command in the instance:</para>
            <screen>cat /proc/net/bonding/bondX</screen>
            <para>where <literal>X</literal> is a number autogenerated by cloud-init for each configured port
                group, in no particular order. It starts with 0 and increments by 1 for every
                configured port group.</para>
          </section>
        </section>
        <section>
          <title>Configuring Web or Serial Console</title>
          <section>
            <title>Overview</title>
            <para>There are two types of console which are available in Bare Metal service,
                one is the web console (<xref linkend="node-web-console"/>) which is available directly from web
                browser, another is the serial console (<xref linkend="node-serial-console"/>).</para>
          </section>
          <section xml:id="node-web-console">
            <title>Node web console</title>
            <para>The web console can be configured in Bare Metal service in the following way:</para>
            <itemizedlist>
              <listitem>
                <para>Install <link xlink:href="https://software.opensuse.org/package/shellinaboxa">shellinabox</link> in Ironic conductor node.</para>
                <para>You can optionally use the SSL certificate in shellinabox. If you want to use the SSL
                        certificate in shellinabox, you should install openssl and generate the SSL certificate.</para>
                <procedure>
                  <step>
                    <para>Install openssl:</para>
                    <screen>sudo zypper install openssl</screen>
                  </step>
                  <step>
                    <para>Generate the SSL certificate, here is an example, you can find more about openssl on
                                the <link xlink:href="https://www.openssl.org/">openssl page</link>:</para>
                    <screen>cd /tmp/ca
openssl genrsa -des3 -out my.key 1024
openssl req -new -key my.key  -out my.csr
cp my.key my.key.org
openssl rsa -in my.key.org -out my.key
openssl x509 -req -days 3650 -in my.csr -signkey my.key -out my.crt
cat my.crt my.key &gt; certificate.pem</screen>
                  </step>
                </procedure>
              </listitem>
              <listitem>
                <para>Customize the console section in the Bare Metal service configuration
                        file (<literal>/etc/ironic/ironic.conf</literal>), if you want to use SSL certificate in
                        shellinabox, you should specify <literal>terminal_cert_dir</literal>.
                        for example:</para>
                <screen>[console]

#
# Options defined in ironic.drivers.modules.console_utils
#

# Path to serial console terminal program. Used only by Shell
# In A Box console. (string value)
#terminal=shellinaboxd

# Directory containing the terminal SSL cert (PEM) for serial
# console access. Used only by Shell In A Box console. (string
# value)
terminal_cert_dir=/tmp/ca

# Directory for holding terminal pid files. If not specified,
# the temporary directory will be used. (string value)
#terminal_pid_dir=&lt;None&gt;

# Time interval (in seconds) for checking the status of
# console subprocess. (integer value)
#subprocess_checking_interval=1

# Time (in seconds) to wait for the console subprocess to
# start. (integer value)
#subprocess_timeout=10</screen>
              </listitem>
              <listitem>
                <para>Append console parameters for bare metal PXE boot in the Bare Metal service
                        configuration file (/etc/ironic/ironic.conf). See the reference for
                        configuration in <link xlink:href="https://docs.openstack.org/ironic/pike/install/include/kernel-boot-parameters.html#kernel-boot-parameters">Appending kernel parameters to boot instances</link>.</para>
              </listitem>
              <listitem>
                <para>Configure node web console.</para>
                <para>Enable the web console, for example:</para>
                <screen>ironic node-update &lt;node-uuid&gt; add driver_info/&lt;terminal_port&gt;=&lt;customized_port&gt;
ironic node-set-console-mode &lt;node-uuid&gt; true</screen>
                <para>Check whether the console is enabled, for example:</para>
                <screen>ironic node-validate &lt;node-uuid&gt;</screen>
                <para>Disable the web console, for example:</para>
                <screen>ironic node-set-console-mode &lt;node-uuid&gt; false
ironic node-update &lt;node-uuid&gt; remove driver_info/&lt;terminal_port&gt;</screen>
                <para>The <literal>&lt;terminal_port&gt;</literal> is driver dependent. The actual name of this field can be
                        checked in driver properties, for example:</para>
                <screen>ironic driver-properties &lt;driver&gt;</screen>
                <para>For <literal>*_ipmitool</literal> and <literal>*_ipminative</literal> drivers, this option is <literal>ipmi_terminal_port</literal>.
                        Give a customized port number to <literal>&lt;customized_port&gt;</literal>,
                        for example <literal>8023</literal>, this customized port is used in web console url.</para>
                <para>Get web console information for a node as follows:</para>
                <screen>ironic node-get-console &lt;node-uuid&gt;
+-----------------+----------------------------------------------------------------------+
| Property        | Value                                                                |
+-----------------+----------------------------------------------------------------------+
| console_enabled | True                                                                 |
| console_info    | {u'url': u'http://&lt;url&gt;:&lt;customized_port&gt;', u'type': u'shellinabox'} |
+-----------------+----------------------------------------------------------------------+</screen>
                <para>You can open web console using above <literal>url</literal> through web browser. If <literal>console_enabled</literal> is
                        <literal>false</literal>, <literal>console_info</literal> is <literal>None</literal>, web console is disabled. If you want to launch web
                        console, see the <literal>Configure node web console</literal> part.</para>
              </listitem>
            </itemizedlist>
          </section>
          <section xml:id="node-serial-console">
            <title>Node serial console</title>
            <para>Serial consoles for nodes are implemented using <link xlink:href="http://www.dest-unreach.org/socat">socat</link>.
                In Newton, the following drivers support socat consoles for nodes:</para>
            <itemizedlist>
              <listitem>
                <para>agent_ipmitool_socat</para>
              </listitem>
              <listitem>
                <para>pxe_ipmitool_socat</para>
              </listitem>
            </itemizedlist>
            <para>Serial consoles can be configured in the Bare Metal service as follows:</para>
            <itemizedlist>
              <listitem>
                <para>Install socat on the ironic conductor node. Also, <literal>socat</literal> needs to be in
                        the <literal>$PATH</literal> environment variable that the ironic-conductor service uses.</para>
                <screen>sudo zypper install socat</screen>
              </listitem>
              <listitem>
                <para>Append console parameters for bare metal PXE boot in the Bare Metal
                        service configuration file. See the reference on how to configure them in
                        <link xlink:href="https://docs.openstack.org/ironic/pike/install/include/kernel-boot-parameters.html#kernel-boot-parameters">Appending kernel parameters to boot instances</link>.</para>
              </listitem>
              <listitem>
                <para>Configure node console.</para>
                <para>Enable the serial console, for example:</para>
                <screen>ironic node-update &lt;node-uuid&gt; add driver_info/ipmi_terminal_port=&lt;port&gt;
ironic node-set-console-mode &lt;node-uuid&gt; true</screen>
                <para>Check whether the serial console is enabled, for example:</para>
                <screen>ironic node-validate &lt;node-uuid&gt;</screen>
                <para>Disable the serial console, for example:</para>
                <screen>ironic node-set-console-mode &lt;node-uuid&gt; false
ironic node-update &lt;node-uuid&gt; remove driver_info/ipmi_terminal_port</screen>
              </listitem>
            </itemizedlist>
            <para>Serial console information is available from the Bare Metal service. Get
                serial console information for a node from the Bare Metal service as follows:</para>
            <screen>ironic node-get-console &lt;node-uuid&gt;
+-----------------+----------------------------------------------------------------------+
| Property        | Value                                                                |
+-----------------+----------------------------------------------------------------------+
| console_enabled | True                                                                 |
| console_info    | {u'url': u'tcp://&lt;host&gt;:&lt;port&gt;', u'type': u'socat'}                  |
+-----------------+----------------------------------------------------------------------+</screen>
            <para>If <literal>console_enabled</literal> is <literal>false</literal> or <literal>console_info</literal> is <literal>None</literal> then
                the serial console is disabled. If you want to launch serial console, see the
                <literal>Configure node console</literal>.</para>
          </section>
        </section>
        <section xml:id="deploy-notifications">
          <title>Notifications</title>
          <para>Ironic, when configured to do so, will emit notifications over a message bus
            that indicate different events that occur within the service. These can be
            consumed by any external service. Examples may include a billing or usage
            system, a monitoring data store, or other OpenStack services. This page
            describes how to enable notifications and the different kinds of notifications
            that Ironic may emit. The external consumer will see notifications emitted by
            ironic as JSON objects structured in the following manner:</para>
          <screen>{
    "priority": &lt;string, defined by the sender&gt;,
    "event_type": &lt;string, defined by the sender&gt;,
    "timestamp": &lt;string, the isotime of when the notification emitted&gt;,
    "publisher_id": &lt;string, defined by the sender&gt;,
    "message_id": &lt;uuid, generated by oslo&gt;,
    "payload": &lt;json serialized dict, defined by the sender&gt;
}</screen>
          <section>
            <title>Configuration</title>
            <para>To enable notifications with ironic, there are two configuration options in
                <literal>ironic.conf</literal> that must be adjusted.</para>
            <para>The first option is the <literal>notification_level</literal> option in the <literal>[DEFAULT]</literal>
                section of the configuration file. This can be set to <literal>debug</literal>, <literal>info</literal>,
                <literal>warning</literal>, <literal>error</literal>, or <literal>critical</literal>, and determines the minimum priority level
                for which notifications are emitted. For example, if the option is set to
                  <literal>warning</literal>, all notifications with priority level   <literal>warning</literal>, <literal>error</literal>, or
                <literal>critical</literal> are emitted, but not notifications with priority level <literal>debug</literal> or
                <literal>info</literal>. For information about the semantics of each log level, see the
                <link xlink:href="https://wiki.openstack.org/wiki/LoggingStandards#Log_level_definitions">OpenStack logging standards</link>.
                If this option is unset, no notifications
                will be emitted. The priority level of each available notification is
                documented below.</para>
            <para>The second option is the <literal>transport_url</literal> option in the
                <literal>[oslo_messaging_notifications]</literal> section of the configuration. This
                determines the message bus used when sending notifications. If this is unset,
                the default transport used for RPC is used.</para>
            <para>All notifications are emitted on the <literal>ironic_versioned_notifications</literal> topic in
                the message bus. Generally, each type of message that traverses the message bus
                is associated with a topic describing what the message is about. For more
                information, see the documentation of your chosen message bus, such as the
                <link xlink:href="https://www.rabbitmq.com/documentation.html">RabbitMQ documentation</link>.</para>
            <note>
              <para>Notifications may be lossy, and there’s no guarantee that a
                notification will make it across the message bus to a consumer.</para>
            </note>
          </section>
          <section xml:id="versioning">
            <title>Versioning</title>
            <para>Each notification has an associated version in the <literal>ironic_object.version</literal>
                field of the payload. Consumers are guaranteed that microversion bumps will add
                new fields, while macroversion bumps are backwards-incompatible and may have
                fields removed.</para>
          </section>
          <section xml:id="available-notifications">
            <title>Available notifications</title>
            <para>The notifications that ironic emits are described here. They are listed
                (alphabetically) by service first, then by <literal>event_type</literal>. All examples below
                show payloads before serialization to JSON.</para>
            <section xml:id="ironic-api-notifications">
              <title>ironic-api notifications</title>
              <section xml:id="resources-crud-notifications">
                <title>Resources CRUD notifications</title>
                <para>These notifications are emitted from API service when ironic resources are
                        modified as part of create, update, or delete (CRUD)  procedures. All
                        CRUD notifications are emitted at INFO level, except for <literal>error</literal> status that
                        is emitted at ERROR level.</para>
                <para>List of CRUD notifications for chassis:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>baremetal.chassis.create.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.chassis.create.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.chassis.create.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.chassis.update.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.chassis.update.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.chassis.update.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.chassis.delete.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.chassis.delete.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.chassis.delete.error</literal>
                    </para>
                  </listitem>
                </itemizedlist>
                <para>Example of chassis CRUD notification:</para>
                <screen>{
 "priority": "info",
 "payload":{
     "ironic_object.namespace":"ironic",
     "ironic_object.name":"ChassisCRUDPayload",
     "ironic_object.version":"1.0",
     "ironic_object.data":{
         "created_at": "2016-04-10T10:13:03+00:00",
         "description": "bare 28",
         "extra": {},
         "updated_at": "2016-04-27T21:11:03+00:00",
         "uuid": "1910f669-ce8b-43c2-b1d8-cf3d65be815e"
     }
 },
 "event_type":"baremetal.chassis.update.end",
 "publisher_id":"ironic-api.hostname02"
}</screen>
                <para>List of CRUD notifications for node:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>baremetal.node.create.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.create.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.create.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.update.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.update.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.update.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.delete.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.delete.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.delete.error</literal>
                    </para>
                  </listitem>
                </itemizedlist>
                <para>Example of node CRUD notification:</para>
                <screen>{
 "priority": "info",
 "payload":{
     "ironic_object.namespace":"ironic",
     "ironic_object.name":"NodeCRUDPayload",
     "ironic_object.version":"1.2",
     "ironic_object.data":{
         "chassis_uuid": "db0eef9d-45b2-4dc0-94a8-fc283c01171f",
         "clean_step": None,
         "console_enabled": False,
         "created_at": "2016-01-26T20:41:03+00:00",
         "driver": "fake",
         "driver_info": {
             "host": "192.168.0.111"},
         "extra": {},
         "inspection_finished_at": None,
         "inspection_started_at": None,
         "instance_info": {},
         "instance_uuid": None,
         "last_error": None,
         "maintenance": False,
         "maintenance_reason": None,
         "boot_interface": None,
         "console_interface": None,
         "deploy_interface": None,
         "inspect_interface": None,
         "management_interface": None,
         "network_interface": "flat",
         "power_interface": None,
         "raid_interface": None,
         "storage_interface": None,
         "vendor_interface": None,
         "name": None,
         "power_state": "power off",
         "properties": {
             "memory_mb":  4096,
             "cpu_arch":  "x86_64",
             "local_gb":  10,
             "cpus":  8},
         "provision_state": "deploying",
         "provision_updated_at": "2016-01-27T20:41:03+00:00",
         "resource_class": None,
         "target_power_state": None,
         "target_provision_state": "active",
         "updated_at": "2016-01-27T20:41:03+00:00",
         "uuid": "1be26c0b-03f2-4d2e-ae87-c02d7f33c123"
     }
 },
 "event_type":"baremetal.node.update.end",
 "publisher_id":"ironic-api.hostname02"
}</screen>
                <para>List of CRUD notifications for port:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>baremetal.port.create.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.port.create.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.port.create.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.port.update.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.port.update.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.port.update.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.port.delete.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.port.delete.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.port.delete.error</literal>
                    </para>
                  </listitem>
                </itemizedlist>
                <para>Example of port CRUD notification:</para>
                <screen>{
 "priority": "info",
 "payload":{
     "ironic_object.namespace":"ironic",
     "ironic_object.name":"PortCRUDPayload",
     "ironic_object.version":"1.2",
     "ironic_object.data":{
         "address": "77:66:23:34:11:b7",
         "created_at": "2016-02-11T15:23:03+00:00",
         "node_uuid": "5b236cab-ad4e-4220-b57c-e827e858745a",
         "extra": {},
         "local_link_connection": {},
         "physical_network": "physnet1",
         "portgroup_uuid": "bd2f385e-c51c-4752-82d1-7a9ec2c25f24",
         "pxe_enabled": True,
         "updated_at": "2016-03-27T20:41:03+00:00",
         "uuid": "1be26c0b-03f2-4d2e-ae87-c02d7f33c123"
     }
 },
 "event_type":"baremetal.port.update.end",
 "publisher_id":"ironic-api.hostname02"
}</screen>
                <para>List of CRUD notifications for port group:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>baremetal.portgroup.create.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.portgroup.create.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.portgroup.create.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.portgroup.update.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.portgroup.update.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.portgroup.update.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.portgroup.delete.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.portgroup.delete.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.portgroup.delete.error</literal>
                    </para>
                  </listitem>
                </itemizedlist>
                <para>Example of portgroup CRUD notification:</para>
                <screen>{
 "priority": "info",
 "payload":{
     "ironic_object.namespace":"ironic",
     "ironic_object.name":"PortgroupCRUDPayload",
     "ironic_object.version":"1.0",
     "ironic_object.data":{
         "address": "11:44:32:87:61:e5",
         "created_at": "2017-01-11T11:33:03+00:00",
         "node_uuid": "5b236cab-ad4e-4220-b57c-e827e858745a",
         "extra": {},
         "mode": "7",
         "name": "portgroup-node-18",
         "properties": {},
         "standalone_ports_supported": True,
         "updated_at": "2017-01-31T11:41:07+00:00",
         "uuid": "db033a40-bfed-4c84-815a-3db26bb268bb",
     }
 },
 "event_type":"baremetal.portgroup.update.end",
 "publisher_id":"ironic-api.hostname02"
}</screen>
                <para>List of CRUD notifications for volume connector:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>baremetal.volumeconnector.create.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumeconnector.create.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumeconnector.create.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumeconnector.update.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumeconnector.update.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumeconnector.update.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumeconnector.delete.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumeconnector.delete.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumeconnector.delete.error</literal>
                    </para>
                  </listitem>
                </itemizedlist>
                <para>Example of volume connector CRUD notification:</para>
                <screen>{
 "priority": "info",
 "payload": {
     "ironic_object.namespace": "ironic",
     "ironic_object.name": "VolumeConnectorCRUDPayload",
     "ironic_object.version": "1.0",
     "ironic_object.data": {
        "connector_id": "iqn.2017-05.org.openstack:01:d9a51732c3f",
        "created_at": "2017-05-11T05:57:36+00:00",
        "extra": {},
        "node_uuid": "4dbb4e69-99a8-4e13-b6e8-dd2ad4a20caf",
        "type": "iqn",
        "updated_at": "2017-05-11T08:28:58+00:00",
        "uuid": "19b9f3ab-4754-4725-a7a4-c43ea7e57360"
     }
 },
 "event_type": "baremetal.volumeconnector.update.end",
 "publisher_id":"ironic-api.hostname02"
}</screen>
                <para>List of CRUD notifications for volume target:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>baremetal.volumetarget.create.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumetarget.create.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumetarget.create.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumetarget.update.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumetarget.update.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumetarget.update.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumetarget.delete.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumetarget.delete.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.volumetarget.delete.error</literal>
                    </para>
                  </listitem>
                </itemizedlist>
                <para>Example of volume target CRUD notification:</para>
                <screen>{
 "priority": "info",
 "payload": {
     "ironic_object.namespace": "ironic",
     "ironic_object.version": "1.0",
     "ironic_object.name": "VolumeTargetCRUDPayload"
     "ironic_object.data": {
         "boot_index": 0,
         "created_at": "2017-05-11T09:38:59+00:00",
         "extra": {},
         "node_uuid": "4dbb4e69-99a8-4e13-b6e8-dd2ad4a20caf",
         "properties": {
             "access_mode": "rw",
             "auth_method": "CHAP"
             "auth_password": "***",
             "auth_username": "urxhQCzAKr4sjyE8DivY",
             "encrypted": false,
             "qos_specs": null,
             "target_discovered": false,
             "target_iqn": "iqn.2010-10.org.openstack:volume-f0d9b0e6-b242-9105-91d4-a20331693ad8",
             "target_lun": 1,
             "target_portal": "192.168.12.34:3260",
             "volume_id": "f0d9b0e6-b042-4105-91d4-a20331693ad8",
         },
         "updated_at": "2017-05-11T09:52:04+00:00",
         "uuid": "82a45833-9c58-4ec1-943c-2091ab10e47b",
         "volume_id": "f0d9b0e6-b242-9105-91d4-a20331693ad8",
         "volume_type": "iscsi"
     }
 },
 "event_type": "baremetal.volumetarget.update.end",
 "publisher_id":"ironic-api.hostname02"
}</screen>
              </section>
              <section xml:id="node-maintenance-notifications">
                <title>Node maintenance notifications</title>
                <para>These notifications are emitted from API service when maintenance mode is
                        changed via API service. List of maintenance notifications for a node:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>baremetal.node.maintenance_set.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.maintenance_set.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.maintenance_set.error</literal>
                    </para>
                  </listitem>
                </itemizedlist>
                <para>“start” and “end” notifications have INFO level, “error” has ERROR. Example of
                        node maintenance notification:</para>
                <screen>{
 "priority": "info",
 "payload":{
     "ironic_object.namespace":"ironic",
     "ironic_object.name":"NodePayload",
     "ironic_object.version":"1.4",
     "ironic_object.data":{
         "clean_step": None,
         "console_enabled": False,
         "created_at": "2016-01-26T20:41:03+00:00",
         "driver": "fake",
         "extra": {},
         "inspection_finished_at": None,
         "inspection_started_at": None,
         "instance_info": {},
         "instance_uuid": None,
         "last_error": None,
         "maintenance": True,
         "maintenance_reason": "hw upgrade",
         "boot_interface": None,
         "console_interface": None,
         "deploy_interface": None,
         "inspect_interface": None,
         "management_interface": None,
         "network_interface": "flat",
         "power_interface": None,
         "raid_interface": None,
         "storage_interface": None,
         "vendor_interface": None,
         "name": None,
         "power_state": "power off",
         "properties": {
             "memory_mb":  4096,
             "cpu_arch":  "x86_64",
             "local_gb":  10,
             "cpus":  8},
         "provision_state": "available",
         "provision_updated_at": "2016-01-27T20:41:03+00:00",
         "resource_class": None,
         "target_power_state": None,
         "target_provision_state": None,
         "updated_at": "2016-01-27T20:41:03+00:00",
         "uuid": "1be26c0b-03f2-4d2e-ae87-c02d7f33c123"
     }
 },
 "event_type":"baremetal.node.maintenance_set.start",
 "publisher_id":"ironic-api.hostname02"
}</screen>
              </section>
            </section>
            <section xml:id="ironic-conductor-notifications">
              <title>ironic-conductor notifications</title>
              <section xml:id="node-console-notifications">
                <title>Node console notifications</title>
                <para>These notifications are emitted by the ironic-conductor service when conductor
                        service starts or stops console for the node. The notification event types for
                        a node console are:</para>
                <itemizedlist>
                  <listitem>
                    <para>
                      <literal>baremetal.node.console_set.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.console_set.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.console_set.error</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.console_restore.start</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.console_restore.end</literal>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <literal>baremetal.node.console_restore.error</literal>
                    </para>
                  </listitem>
                </itemizedlist>
                <para><literal>console_set</literal> action is used when start or stop console is initiated. The
                        <literal>console_restore</literal> action is used when the console was already enabled, but a
                        driver must restart the console because an ironic-conductor was restarted. This
                        may also be sent when an ironic-conductor takes over a node that was being
                        managed by another ironic-conductor. <literal>start</literal> and <literal>end</literal> notifications have INFO
                        level, <literal>error</literal> has ERROR. Example of node console notification:</para>
                <screen>{
 "priority": "info",
 "payload":{
     "ironic_object.namespace":"ironic",
     "ironic_object.name":"NodePayload",
     "ironic_object.version":"1.4",
     "ironic_object.data":{
         "clean_step": None,
         "console_enabled": True,
         "created_at": "2016-01-26T20:41:03+00:00",
         "driver": "fake",
         "extra": {},
         "inspection_finished_at": None,
         "inspection_started_at": None,
         "instance_info": {},
         "instance_uuid": None,
         "last_error": None,
         "maintenance": False,
         "maintenance_reason": None,
         "boot_interface": None,
         "console_interface": None,
         "deploy_interface": None,
         "inspect_interface": None,
         "management_interface": None,
         "network_interface": "flat",
         "power_interface": None,
         "raid_interface": None,
         "storage_interface": None,
         "vendor_interface": None,
         "name": None,
         "power_state": "power off",
         "properties": {
             "memory_mb":  4096,
             "cpu_arch":  "x86_64",
             "local_gb":  10,
             "cpus":  8},
         "provision_state": "available",
         "provision_updated_at": "2016-01-27T20:41:03+00:00",
         "resource_class": None,
         "target_power_state": None,
         "target_provision_state": None,
         "updated_at": "2016-01-27T20:41:03+00:00",
         "uuid": "1be26c0b-03f2-4d2e-ae87-c02d7f33c123"
     }
 },
 "event_type":"baremetal.node.console_set.end",
 "publisher_id":"ironic-conductor.hostname01"
}</screen>
              </section>
              <section xml:id="baremetal-node-power-set">
                <title>baremetal.node.power_set</title>
                <itemizedlist>
                  <listitem>
                    <para><literal>baremetal.node.power_set.start</literal> is emitted by the ironic-conductor service
                                when it begins a power state change. It has notification level <literal>info</literal>.</para>
                  </listitem>
                  <listitem>
                    <para><literal>baremetal.node.power_set.end</literal> is emitted when ironic-conductor
                                successfully completes a power state change task. It has notification level
                                <literal>info</literal>.</para>
                  </listitem>
                  <listitem>
                    <para><literal>baremetal.node.power_set.error</literal> is emitted by ironic-conductor when it
                                fails to set a node’s power state. It has notification level <literal>error</literal>. This
                                can occur when ironic fails to retrieve the old power state prior to setting
                                the new one on the node, or when it fails to set the power state if a change
                                is requested.</para>
                  </listitem>
                </itemizedlist>
                <para>Here is an example payload for a notification with this event type. The
                        <literal>to_power</literal> payload field indicates the power state to which the
                        ironic-conductor is attempting to change the node:</para>
                <screen>{
 "priority": "info",
 "payload":{
     "ironic_object.namespace":"ironic",
     "ironic_object.name":"NodeSetPowerStatePayload",
     "ironic_object.version":"1.4",
     "ironic_object.data":{
         "clean_step": None,
         "console_enabled": False,
         "created_at": "2016-01-26T20:41:03+00:00",
         "driver": "fake",
         "extra": {},
         "inspection_finished_at": None,
         "inspection_started_at": None,
         "instance_uuid": "d6ea00c1-1f94-4e95-90b3-3462d7031678",
         "last_error": None,
         "maintenance": False,
         "maintenance_reason": None,
         "boot_interface": None,
         "console_interface": None,
         "deploy_interface": None,
         "inspect_interface": None,
         "management_interface": None,
         "network_interface": "flat",
         "power_interface": None,
         "raid_interface": None,
         "storage_interface": None,
         "vendor_interface": None,
         "name": None,
         "power_state": "power off",
         "properties": {
             "memory_mb":  4096,
             "cpu_arch":  "x86_64",
             "local_gb":  10,
             "cpus":  8},
         "provision_state": "available",
         "provision_updated_at": "2016-01-27T20:41:03+00:00",
         "resource_class": None,
         "target_power_state": None,
         "target_provision_state": None,
         "updated_at": "2016-01-27T20:41:03+00:00",
         "uuid": "1be26c0b-03f2-4d2e-ae87-c02d7f33c123",
         "to_power": "power on"
     }
 },
 "event_type":"baremetal.node.power_set.start",
 "publisher_id":"ironic-conductor.hostname01"
}</screen>
              </section>
              <section xml:id="baremetal-node-power-state-corrected">
                <title>baremetal.node.power_state_corrected</title>
                <itemizedlist>
                  <listitem>
                    <para><literal>baremetal.node.power_state_corrected.success</literal> is emitted by
                                ironic-conductor when the power state on the baremetal hardware is different
                                from the previous known power state of the node and the database is corrected
                                to reflect this new power state. It has notification level <literal>info</literal>.</para>
                  </listitem>
                </itemizedlist>
                <para>Here is an example payload for a notification with this <literal>event_type</literal>. The
                        <literal>from_power</literal> payload field indicates the previous power state on the node,
                        prior to the correction:</para>
                <screen>{
 "priority": "info",
 "payload":{
     "ironic_object.namespace":"ironic",
     "ironic_object.name":"NodeCorrectedPowerStatePayload",
     "ironic_object.version":"1.4",
     "ironic_object.data":{
         "clean_step": None,
         "console_enabled": False,
         "created_at": "2016-01-26T20:41:03+00:00",
         "driver": "fake",
         "extra": {},
         "inspection_finished_at": None,
         "inspection_started_at": None,
         "instance_uuid": "d6ea00c1-1f94-4e95-90b3-3462d7031678",
         "last_error": None,
         "maintenance": False,
         "maintenance_reason": None,
         "boot_interface": None,
         "console_interface": None,
         "deploy_interface": None,
         "inspect_interface": None,
         "management_interface": None,
         "network_interface": "flat",
         "power_interface": None,
         "raid_interface": None,
         "storage_interface": None,
         "vendor_interface": None,
         "name": None,
         "power_state": "power off",
         "properties": {
             "memory_mb":  4096,
             "cpu_arch":  "x86_64",
             "local_gb":  10,
             "cpus":  8},
         "provision_state": "available",
         "provision_updated_at": "2016-01-27T20:41:03+00:00",
         "resource_class": None,
         "target_power_state": None,
         "target_provision_state": None,
         "updated_at": "2016-01-27T20:41:03+00:00",
         "uuid": "1be26c0b-03f2-4d2e-ae87-c02d7f33c123",
         "from_power": "power on"
     }
 },
 "event_type":"baremetal.node.power_state_corrected.success",
 "publisher_id":"ironic-conductor.cond-hostname02"
}</screen>
              </section>
              <section xml:id="baremetal-node-provision-set">
                <title>baremetal.node.provision_set</title>
                <itemizedlist>
                  <listitem>
                    <para><literal>baremetal.node.provision_set.start</literal> is emitted by the ironic-conductor
                                service when it begins a provision state transition. It has notification
                                level INFO.</para>
                  </listitem>
                  <listitem>
                    <para><literal>baremetal.node.provision_set.end</literal> is emitted when ironic-conductor
                                successfully completes a provision state transition. It has notification
                                level INFO.</para>
                  </listitem>
                  <listitem>
                    <para><literal>baremetal.node.provision_set.success</literal> is emitted when ironic-conductor
                                successfully changes provision state instantly, without any intermediate
                                work required (example is AVAILABLE to MANAGEABLE). It has notification level
                                INFO.</para>
                  </listitem>
                  <listitem>
                    <para><literal>baremetal.node.provision_set.error</literal> is emitted by ironic-conductor when it
                                changes provision state as result of error event processing. It has
                                notification level ERROR.</para>
                  </listitem>
                </itemizedlist>
                <para>Here is an example payload for a notification with this event type. The
                        <literal>previous_provision_state</literal> and <literal>previous_target_provision_state</literal> payload fields
                        indicate a node’s provision states before state change, <literal>event</literal> is the FSM
                        (finite state machine) event that triggered the state change:</para>
                <screen>{
 "priority": "info",
 "payload":{
     "ironic_object.namespace":"ironic",
     "ironic_object.name":"NodeSetProvisionStatePayload",
     "ironic_object.version":"1.4",
     "ironic_object.data":{
         "clean_step": None,
         "console_enabled": False,
         "created_at": "2016-01-26T20:41:03+00:00",
         "driver": "fake",
         "extra": {},
         "inspection_finished_at": None,
         "inspection_started_at": None,
         "instance_info": {},
         "instance_uuid": None,
         "last_error": None,
         "maintenance": False,
         "maintenance_reason": None,
         "boot_interface": None,
         "console_interface": None,
         "deploy_interface": None,
         "inspect_interface": None,
         "management_interface": None,
         "network_interface": "flat",
         "power_interface": None,
         "raid_interface": None,
         "storage_interface": None,
         "vendor_interface": None,
         "name": None,
         "power_state": "power off",
         "properties": {
             "memory_mb":  4096,
             "cpu_arch":  "x86_64",
             "local_gb":  10,
             "cpus":  8},
         "provision_state": "deploying",
         "provision_updated_at": "2016-01-27T20:41:03+00:00",
         "resource_class": None,
         "target_power_state": None,
         "target_provision_state": "active",
         "updated_at": "2016-01-27T20:41:03+00:00",
         "uuid": "1be26c0b-03f2-4d2e-ae87-c02d7f33c123",
         "previous_provision_state": "available",
         "previous_target_provision_state": None,
         "event": "deploy"
     }
 },
 "event_type":"baremetal.node.provision_set.start",
 "publisher_id":"ironic-conductor.hostname01"
}</screen>
              </section>
            </section>
          </section>
        </section>
        <section xml:id="radosgw-support">
          <title>Ceph Object Gateway support</title>
          <section>
            <title>Overview</title>
            <para>Ceph project is a powerful distributed storage system. It contains object store
                and provides a RADOS Gateway Swift API which is compatible with OpenStack Swift
                API. These two APIs use different formats for their temporary URLs.</para>
            <para>Ironic added support for RADOS Gateway temporary URL in the Mitaka release.</para>
          </section>
          <section xml:id="configure-ironic-and-glance-with-rados-gateway">
            <title>Configure Ironic and Glance with RADOS Gateway</title>
            <procedure>
              <step>
                <para>Install Ceph storage with RADOS Gateway. See <link xlink:href="http://docs.ceph.com/docs">Ceph documentation</link>.</para>
              </step>
              <step>
                <para>Create RADOS Gateway credentials for Glance by executing the following
                        commands on the RADOS Gateway admin host:</para>
                <screen>sudo radosgw-admin user create --uid="GLANCE_USERNAME" --display-name="User for Glance"

sudo radosgw-admin subuser create --uid=GLANCE_USERNAME --subuser=GLANCE_USERNAME:swift --access=full

sudo radosgw-admin key create --subuser=GLANCE_USERNAME:swift --key-type=swift --secret=STORE_KEY

sudo radosgw-admin user modify --uid=GLANCE_USERNAME --temp-url-key=TEMP_URL_KEY</screen>
                <para>Replace GLANCE_USERNAME with a user name for Glance access, and replace
                        STORE_KEY and TEMP_URL_KEY with suitable keys.</para>
                <para>Note: Do not use “–gen-secret” CLI parameter because it will cause the
                        “radosgw-admin” utility to generate keys with slash symbols which do not
                        work with Glance.</para>
              </step>
              <step>
                <para>Configure Glance API service for RADOS Swift API as backend. Edit the
                        configuration file for the Glance API service (is typically located at
                        <literal>/etc/glance/glance-api.conf</literal>). Replace RADOS_IP and PORT with the IP/port
                        of the RADOS Gateway API service:</para>
                <screen>[glance_store]

stores = file, http, swift
default_store = swift
swift_store_auth_version = 1
swift_store_auth_address = http://RADOS_IP:PORT/auth/1.0
swift_store_user = GLANCE_USERNAME:swift
swift_store_key = STORE_KEY
swift_store_container = glance
swift_store_create_container_on_put = True</screen>

                <note>
                  <para>RADOS Gateway uses FastCGI protocol for interacting with HTTP server.
                        Read your HTTP server documentation if you want to enable HTTPS support.</para>
                </note>
              </step>
              <step>
                <para>Restart Glance API service and upload all needed images.</para>
              </step>
              <step>
                <para>Change Ironic configuration file on the conductor host(s) as follows:</para>
                <screen>[glance]

swift_container = glance
swift_api_version = v1
swift_endpoint_url = http://RADOS_IP:PORT
swift_temp_url_key = TEMP_URL_KEY

[deploy]

object_store_endpoint_type = radosgw</screen>
              </step>
              <step>
                <para>Restart Ironic conductor service(s).</para>
              </step>
            </procedure>
          </section>
        </section>
        <section>
          <title>Emitting Software Metrics</title>
          <para>Beginning with the Newton (6.1.0) release, the ironic services support
            emitting internal performance data to
            <link xlink:href="https://github.com/etsy/statsd">statsd</link>. This allows operators to graph
            and understand performance bottlenecks in their system.</para>
          <para>This guide assumes you have a statsd server setup. For information on using
            and configuring statsd,see the
            <link xlink:href="https://github.com/etsy/statsd">statsd</link> README and documentation.</para>
          <para>These performance measurements, herein referred to as metrics, can be
            emitted from the Bare Metal service, including ironic-api, ironic-conductor,
            and ironic-python-agent. By default, none of the services will emit metrics.</para>
          <section xml:id="configuring-the-bare-metal-service-to-enable-metrics">
            <title>Configuring the Bare Metal Service to Enable Metrics</title>
            <section xml:id="enabling-metrics-in-ironic-api-and-ironic-conductor">
              <title>Enabling metrics in ironic-api and ironic-conductor</title>
              <para>The ironic-api and ironic-conductor services can be configured to emit metrics
                    to statsd by adding the following to the ironic configuration file, usually
                    located at <literal>/etc/ironic/ironic.conf</literal>:</para>
              <screen>[metrics]
backend = statsd</screen>
              <para>If a statsd daemon is installed and configured on every host running an ironic
                    service, listening on the default UDP port (8125), no further configuration is
                    needed. If you are using a remote statsd server, you must also supply
                    connection information in the ironic configuration file:</para>
              <screen>[metrics_statsd]
# Point this at your environments' statsd host
statsd_host = 192.0.2.1
statsd_port = 8125</screen>
            </section>
            <section xml:id="enabling-metrics-in-ironic-python-agent">
              <title>Enabling metrics in ironic-python-agent</title>
              <para>The ironic-python-agent process receives its configuration in the response from
                    the initial lookup request to the ironic-api service. This means to configure
                    ironic-python-agent to emit metrics, you must enable the agent metrics backend
                    in your ironic configuration file on all ironic-conductor hosts:</para>
              <screen>[metrics]
agent_backend = statsd</screen>
              <para>In order to reliably emit metrics from the ironic-python-agent, you must
                    provide a statsd server that is reachable from both the configured provisioning
                    and cleaning networks. The agent statsd connection information is configured
                    in the ironic configuration file as well:</para>
              <screen>[metrics_statsd]
# Point this at a statsd host reachable from the provisioning and cleaning nets
agent_statsd_host = 198.51.100.2
agent_statsd_port = 8125</screen>
            </section>
          </section>
          <section xml:id="types-of-metrics-emitted">
            <title>Types of Metrics Emitted</title>
            <para>The Bare Metal service emits timing metrics for every API method, as well as
                for most driver methods. These metrics measure how long a given method takes
                to execute.</para>
            <para>A deployer with metrics enabled should expect between 100 and 500 distinctly
                named data points to be emitted from the Bare Metal service. This will
                increase if the <literal>metrics.preserve_host</literal> option is set to true or if multiple
                drivers are used in the Bare Metal deployment. This estimate may be used to
                determine if a deployer needs to scale their metrics backend to handle the
                additional load before enabling metrics. To see which metrics have changed names
                or have been removed between releases, refer to the <link xlink:href="https://docs.openstack.org/releasenotes/ironic/">ironic release notes</link>.</para>
            <note>
              <para>With the default statsd configuration, each timing metric may create
                    additional metrics due to how statsd handles timing metrics. For more
                    information, see statds documentation on
                    <link xlink:href="https://github.com/etsy/statsd/blob/master/docs/metric_types.md#timing">metric types</link>.</para>
            </note>
            <para>The ironic-python-agent ramdisk emits timing metrics for every API method.</para>
            <para>Deployers who use custom HardwareManagers can emit custom metrics for their
                hardware. For more information on custom HardwareManagers, and emitting
                metrics from them, see the
                <link xlink:href="https://docs.openstack.org/ironic-python-agent/latest/">ironic-python-agent documentation</link>.</para>
          </section>
          <section xml:id="adding-new-metrics">
            <title>Adding New Metrics</title>
            <para>If you’re a developer, and would like to add additional metrics to ironic,
                see the <link xlink:href="https://docs.openstack.org/ironic-lib/latest/">ironic-lib developer documentation</link> for details on how to use
                the metrics library. A release note should also be created each time a metric
                is changed or removed to alert deployers of the change.</para>
          </section>
        </section>
        <section xml:id="api-audit-support">
          <title>API Audit Logging</title>
          <para>Audit middleware supports delivery of CADF audit events via Oslo messaging
            notifier capability. Based on <literal>notification_driver</literal> configuration, audit events
            can be routed to messaging infrastructure (notification_driver = messagingv2)
            or can be routed to a log file (<literal>[oslo_messaging_notifications]/driver = log</literal>).</para>
          <para>Audit middleware creates two events per REST API interaction. First event has
            information extracted from request data and the second one has request outcome
            (response).</para>
          <section xml:id="enabling-api-audit-logging">
            <title>Enabling API Audit Logging</title>
            <para>Audit middleware is available as part of <literal>keystonemiddleware</literal> (&gt;= 1.6) library.
                For information regarding how audit middleware functions refer <link xlink:href="https://docs.openstack.org/keystonemiddleware/latest/audit.html">here.</link></para>
            <para>Auditing can be enabled for the Bare Metal service by making the following changes
                to <literal>/etc/ironic/ironic.conf</literal>.</para>
            <procedure>
              <step>
                <para>To enable audit logging of API requests:</para>
                <screen>[audit]
...
enabled=true</screen>
              </step>
              <step>
                <para>To customize auditing API requests, the audit middleware requires <literal>the audit_map_file</literal> setting
                        to be defined. Update the value of configuration setting <literal>audit_map_file</literal> to set its
                        location. Audit map file configuration options for the Bare Metal service are included
                        in the <literal>etc/ironic/ironic_api_audit_map.conf.sample</literal> file. To understand CADF format
                        specified in <literal>ironic_api_audit_map.conf</literal> file refer
                        to <link xlink:href="http://www.dmtf.org/sites/default/files/standards/documents/DSP2038_1.0.0.pdf">CADF Format.</link>:</para>
                <screen>[audit]
...
audit_map_file=/etc/ironic/api_audit_map.conf</screen>
              </step>
              <step>
                <para>Comma separated list of Ironic REST API HTTP methods to be ignored during audit.
                        It is used only when API audit is enabled. For example:</para>
                <screen>[audit]
...
ignore_req_list=GET,POST</screen>
              </step>
            </procedure>
          </section>
          <section xml:id="sample-audit-event">
            <title>Sample Audit Event</title>
            <para>Following is the sample of audit event for Ironic node list request.</para>
            <screen language="json">{
   "event_type":"audit.http.request",
   "timestamp":"2016-06-15 06:04:30.904397",
   "payload":{
      "typeURI":"http://schemas.dmtf.org/cloud/audit/1.0/event",
      "eventTime":"2016-06-15T06:04:30.903071+0000",
      "target":{
         "id":"ironic",
         "typeURI":"unknown",
         "addresses":[
            {
               "url":"http://{ironic_admin_host}:6385",
               "name":"admin"
            },
           {
               "url":"http://{ironic_internal_host}:6385",
               "name":"private"
           },
           {
               "url":"http://{ironic_public_host}:6385",
               "name":"public"
           }
         ],
         "name":"ironic"
      },
      "observer":{
         "id":"target"
      },
      "tags":[
         "correlation_id?value=685f1abb-620e-5d5d-b74a-b4135fb32373"
      ],
      "eventType":"activity",
      "initiator":{
         "typeURI":"service/security/account/user",
         "name":"admin",
         "credential":{
            "token":"***",
            "identity_status":"Confirmed"
         },
         "host":{
            "agent":"python-ironicclient",
            "address":"10.1.200.129"
         },
         "project_id":"d8f52dd7d9e1475dbbf3ba47a4a83313",
         "id":"8c1a948bad3948929aa5d5b50627a174"
      },
      "action":"read",
      "outcome":"pending",
      "id":"061b7aa7-5879-5225-a331-c002cf23cb6c",
      "requestPath":"/v1/nodes/?associated=True"
   },
   "priority":"INFO",
   "publisher_id":"ironic-api",
   "message_id":"2f61ebaa-2d3e-4023-afba-f9fca6f21fc2"
}</screen>
          </section>
        </section>
        <section>
          <title>Bare Metal Service Upgrade Guide</title>
          <para>This document outlines various steps and notes for operators to consider when
            upgrading their ironic-driven clouds from previous versions of OpenStack.</para>
          <para>The Bare Metal (ironic) service is tightly coupled with the ironic driver that
            is shipped with the Compute (nova) service. Some special considerations must be
            taken into account when upgrading your cloud.</para>
          <para>Both offline and rolling upgrades are supported.</para>
          <section>
            <title>Plan your upgrade</title>
            <itemizedlist>
              <listitem>
                <para>Rolling upgrades are available starting with the Pike release; that is, when
                        upgrading from Ocata. This means that it is possible to do an upgrade with
                        minimal to no downtime of the Bare Metal API.</para>
              </listitem>
              <listitem>
                <para>Upgrades are only supported between two consecutive named releases.
                        This means that you cannot upgrade Ocata directly into Queens; you need to
                        upgrade into Pike first.</para>
              </listitem>
              <listitem>
                <para>The <link xlink:href="https://docs.openstack.org/releasenotes/ironic/">release notes</link>
                        should always be read carefully when upgrading the Bare Metal service.
                        Specific upgrade steps and considerations are documented there.</para>
              </listitem>
              <listitem>
                <para>The Bare Metal service should always be upgraded before the Compute service.</para>
                <note>
                  <para>The Ironic virt driver in nova always uses a specific version of the
                            ironic REST API. This API version may be one that was introduced in the
                            same development cycle, so upgrading nova first may result in nova being
                            unable to use the Bare Metal API.</para>
                </note>
              </listitem>
              <listitem>
                <para>Make a backup of your database. Ironic does not support downgrading of the
                        database. Hence, in case of upgrade failure, restoring the database from
                        a backup is the only choice.</para>
              </listitem>
              <listitem>
                <para>Before starting your upgrade, it is best to ensure that all nodes have
                        reached, or are in, a stable <literal>provision_state</literal>. Nodes in states with
                        long running processes such as deploying or cleaning, may fail, and may
                        require manual intervention to return them to the available hardware pool.
                        This is most likely in cases where a timeout has occurred or a service was
                        terminated abruptly. For a visual diagram detailing states and possible
                        state transitions, see <link xlink:href="https://docs.openstack.org/ironic/pike/contributor/states.html#states">states</link>.</para>
              </listitem>
            </itemizedlist>
          </section>
          <section>
            <title>Offline upgrades</title>
            <para>In an offline (or cold) upgrade, the Bare Metal service is not available
                during the upgrade, because all the services have to be taken down.</para>
            <para>When upgrading the Bare Metal service, the following steps should always be
                taken in this order:</para>
            <procedure>
              <step>
                <para>upgrade the ironic-python-agent image</para>
              </step>
              <step>
                <para>update ironic code, without restarting services</para>
              </step>
              <step>
                <para>run database schema migrations via <literal>ironic-dbsync upgrade</literal></para>
              </step>
              <step>
                <para>restart ironic-conductor and ironic-api services</para>
              </step>
            </procedure>
            <para>Once the above is done, do the following:</para>
            <itemizedlist>
              <listitem>
                <para>update any applicable configuration options to stop using any deprecated
                        features or options, and perform any required work to transition to
                        alternatives. All the deprecated features and options will be supported for
                        one release cycle, so should be removed before your next upgrade is
                        performed.</para>
              </listitem>
              <listitem>
                <para>upgrade python-ironicclient along with any other services connecting
                        to the Bare Metal service as a client, such as nova-compute.</para>
              </listitem>
              <listitem>
                <para>run the <literal>ironic-dbsync online_data_migrations</literal> command to make sure
                        that data migrations are applied. The command lets you limit
                        the impact of the data migrations with the <literal>--max-count</literal> option, which
                        limits the number of migrations executed in one run. You should complete
                        all of the migrations as soon as possible after the upgrade.</para>
                <warning>
                  <para>You will not be able to start an upgrade to the release
                            after this one, until this has been completed for the current
                            release. For example, as part of upgrading from Ocata to Pike,
                            you need to complete Pike’s data migrations. If this not done,
                            you will not be able to upgrade to Queens – it will not be
                            possible to execute Queens’ database schema updates.</para>
                </warning>
              </listitem>
            </itemizedlist>
          </section>
          <section>
            <title>Rolling upgrades</title>
            <para>To Reduce downtime, the services can be upgraded in a rolling fashion, meaning
                to upgrade one or a few services at a time to minimize impact.</para>
            <para>Rolling upgrades are available starting with the Pike release. This feature
                makes it possible to upgrade between releases, such as Ocata to Pike, with
                minimal to no downtime of the Bare Metal API.</para>
            <section>
              <title>Requirements</title>
              <para>To facilitate an upgrade in a rolling fashion, you need to have a
                    highly-available deployment consisting of at least two ironic-api
                    and two ironic-conductor services.
                    Uwe recommend the use of a load balancer to balance requests across the ironic-api
                    services as it allows for a minimal impact to end users.</para>
            </section>
            <section>
              <title>Concepts</title>
              <para>There are four aspects of the rolling upgrade process to keep in mind:</para>
              <itemizedlist>
                <listitem>
                  <para>RPC version pinning and versioned object backports</para>
                </listitem>
                <listitem>
                  <para>online data migrations</para>
                </listitem>
                <listitem>
                  <para>graceful service shutdown</para>
                </listitem>
                <listitem>
                  <para>API load balancer draining</para>
                </listitem>
              </itemizedlist>
              <section>
                <title>RPC version pinning and versioned object backports</title>
                <para>Through careful RPC versioning, newer services are able to talk to older
                        services (and vice-versa). The <literal>[DEFAULT]/pin_release_version</literal> configuration
                        option is used for this. It should be set (pinned) to the release version
                        that the older services are using. The newer services will backport RPC calls
                        and objects to their appropriate versions from the pinned release. If the
                        <literal>IncompatibleObjectVersion</literal> exception occurs, it is most likely due to an
                        incorrect or unspecified <literal>[DEFAULT]/pin_release_version</literal> configuration value.
                        For example, when <literal>[DEFAULT]/pin_release_version</literal> is not set to the older
                        release version, no conversion will happen during the upgrade.</para>
              </section>
              <section>
                <title>Online data migrations</title>
                <para>To make database schema migrations less painful to execute, we have
                        implemented process changes to facilitate upgrades.</para>
                <itemizedlist>
                  <listitem>
                    <para>All data migrations are banned from schema migration scripts.</para>
                  </listitem>
                  <listitem>
                    <para>Schema migration scripts only update the database schema.</para>
                  </listitem>
                  <listitem>
                    <para>Data migrations must be done at the end of the rolling upgrade process,
                                after the schema migration and after the services have been upgraded to
                                the latest release.</para>
                  </listitem>
                </itemizedlist>
                <para>All data migrations are performed using the
                        <literal>ironic-dbsync online_data_migrations</literal> command. It can be run as
                        a background process so that it does not interrupt running services,
                        however it must be run to completion for a cold upgrade if the intent
                        is to make use of new features immediately.</para>
                <para>(You would also execute the same command with services turned off if
                        you are doing a cold upgrade).</para>
                <para>This data migration must be completed. If not, you will not be able to
                        upgrade to future releases. For example, if you had upgraded from Ocata to
                        Pike but did not do the data migrations, you will not be able to upgrade from
                        Pike to Queens. (More precisely, you will not be able to apply Queens’ schema
                        migrations.)</para>
              </section>
              <section>
                <title>Graceful conductor service shutdown</title>
                <para>The ironic-conductor service is a Python process listening for messages on a
                        message queue. When the operator sends the SIGTERM signal to the process, the
                        service stops consuming messages from the queue, so that no additional work is
                        picked up. It completes any outstanding work and then terminates. During this
                        process, messages can be left on the queue and will be processed after the
                        Python process starts back up. This gives us a way to shutdown a service using
                        older code, and start up a service using newer code with minimal impact.</para>
                <note>
                  <para>This was tested with RabbitMQ messaging backend and may vary with other
                            backends.</para>
                </note>
                <para>Nodes that are being acted upon by an ironic-conductor process, which are
                        not in a stable state, may encounter failures. Node failures that occur
                        during an upgrade are likely due to timeouts, resulting from delays
                        involving messages being processed and acted upon by a conductor
                        during long running, multi-step processes such as deployment or cleaning.</para>
              </section>
              <section>
                <title>API load balancer draining</title>
                <para>If you are using a load balancer for the ironic-api services, we recommend that
                        you redirect requests to the new API services and drain off of the ironic-api
                        services that have not yet been upgraded.</para>
              </section>
            </section>
            <section>
              <title>Rolling upgrade process</title>
              <warning>
                <para>New features and/or new API versions should not be used until after the upgrade
                        has been completed.</para>
              </warning>
              <section>
                <title>Before maintenance window</title>
                <itemizedlist>
                  <listitem>
                    <para>Upgrade the ironic-python-agent image</para>
                  </listitem>
                  <listitem>
                    <para>Using the new release (ironic code), execute the required database schema
                                updates by running the database upgrade command: <literal>ironic-dbsync upgrade</literal>.
                                These schema change operations should have minimal or no effect on
                                performance, and should not cause any operations to fail (but check
                                the release notes). You can:</para>
                    <itemizedlist>
                      <listitem>
                        <para>Install the new release on an existing system.</para>
                      </listitem>
                      <listitem>
                        <para>Install the new release in a new virtualenv or a container.</para>
                      </listitem>
                    </itemizedlist>
                    <para>At this point, new columns and tables may exist in the database. These
                                database schema changes are done in a way that both the old and new (N and
                                N+1) releases can perform operations against the same schema.</para>
                  </listitem>
                </itemizedlist>
                <note>
                  <para>Ironic bases its RPC and object storage format versions on the
                            <literal>[DEFAULT]/pin_release_version</literal> configuration option. It is
                            advisable to automate the deployment of changes in configuration
                            files to make the process less error prone and repeatable.</para>
                </note>
              </section>
              <section>
                <title>During maintenance window</title>
                <procedure>
                  <step>
                    <para>All ironic-conductor services should be upgraded first. Ensure that at
                                least one ironic-conductor service is running at all times. For every
                                ironic-conductor, either one by one or a few at a time:</para>
                    <itemizedlist>
                      <listitem>
                        <para>Shut down the service. Messages from the ironic-api services to the
                              conductors are load-balanced by the message queue and a hash-ring,
                              so the only thing you need to worry about is to shut the service down
                              gracefully (using <literal>SIGTERM</literal> signal) to make sure it will finish all the
                              requests being processed before shutting down.</para>
                      </listitem>
                      <listitem>
                        <para>Upgrade the installed version of ironic and dependencies</para>
                      </listitem>
                      <listitem>
                        <para>Set the <literal>[DEFAULT]/pin_release_version</literal> configuration option value to
                              the version you are upgrading from (that is, the old version). Based on
                              this setting, the new ironic-conductor services will downgrade any
                              RPC communication and data objects to conform to the old service.
                              For example, if you are upgrading from Ocata to Pike, set this value to
                              <literal>ocata</literal>.</para>
                      </listitem>
                      <listitem>
                        <para>Start the service</para>
                      </listitem>
                    </itemizedlist>
                  </step>
                  <step>
                    <para>The next service to upgrade is ironic-api. Ensure that at least one
                                ironic-api service is running at all times. You may want to start another
                                temporary instance of the older ironic-api to handle the load while you are
                                upgrading the original ironic-api services. For every ironic-api service,
                                either one by one or a few at a time:</para>
                    <itemizedlist>
                      <listitem>
                        <para>In HA deployment you are typically running them behind a load balancer
                                        (for example HAProxy), so you need to take the service instance out of the
                                        balancer.</para>
                      </listitem>
                      <listitem>
                        <para>Shut it down.</para>
                      </listitem>
                      <listitem>
                        <para>Upgrade the installed version of ironic and dependencies.</para>
                      </listitem>
                      <listitem>
                        <para>Set the <literal>[DEFAULT]/pin_release_version</literal> configuration option value to
                                        the version you are upgrading from (that is, the old version). Based on
                                        this setting, the new ironic-api services will downgrade any RPC
                                        communication and data objects to conform to the old service.
                                        For example, if you are upgrading from Ocata to Pike, set this value to
                                        <literal>ocata</literal>.</para>
                      </listitem>
                      <listitem>
                        <para>Restart the service.</para>
                      </listitem>
                      <listitem>
                        <para>Add it back into the load balancer.</para>
                      </listitem>
                    </itemizedlist>
                    <para>After upgrading all the ironic-api services, the Bare Metal service is
                                running in the new version but with downgraded RPC communication and
                                database object storage formats. New features can fail when objects are in
                                the downgraded object formats and some internal RPC API functions may still
                                not be available.</para>
                  </step>
                  <step>
                    <para>For all the ironic-conductor services, one at a time:</para>
                    <itemizedlist>
                      <listitem>
                        <para>Remove the <literal>[DEFAULT]/pin_release_version</literal> configuration option setting.</para>
                      </listitem>
                      <listitem>
                        <para>Restart the ironic-conductor service.</para>
                      </listitem>
                    </itemizedlist>
                  </step>
                  <step>
                    <para>For all the ironic-api services, one at a time:</para>
                    <itemizedlist>
                      <listitem>
                        <para>Remove the <literal>[DEFAULT]/pin_release_version</literal> configuration option setting.</para>
                      </listitem>
                      <listitem>
                        <para>Restart the ironic-api service.</para>
                      </listitem>
                    </itemizedlist>
                  </step>
                </procedure>
              </section>
              <section>
                <title>After maintenance window</title>
                <para>Now that all the services are upgraded, the system is able to use the latest
                        version of the RPC protocol and able to access all the features of the new
                        release.</para>
                <itemizedlist>
                  <listitem>
                    <para>Update any applicable configuration options to stop using any deprecated
                                features or options, and perform any required work to transition to
                                alternatives. All the deprecated features and options will be supported for
                                one release cycle, so should be removed before your next upgrade is
                                performed.</para>
                  </listitem>
                  <listitem>
                    <para>Upgrade <literal>python-ironicclient</literal> along with other services connecting
                                to the Bare Metal service as a client, such as <literal>nova-compute</literal>.</para>
                  </listitem>
                  <listitem>
                    <para>Run the <literal>ironic-dbsync online_data_migrations</literal> command to make sure
                                that data migrations are applied. The command lets you limit
                                the impact of the data migrations with the <literal>--max-count</literal> option, which
                                limits the number of migrations executed in one run. You should complete
                                all of the migrations as soon as possible after the upgrade.</para>
                    <warning>
                      <para>You will not be able to start an upgrade to the next release after
                            this one, until this has been completed for the current release. For example,
                            as part of upgrading from Ocata to Pike, you need to complete Pike’s data
                            migrations. If this not done, you will not be able to upgrade to Queens –
                            it will not be possible to execute Queens’ database schema updates.</para>
                    </warning>
                  </listitem>
                </itemizedlist>
              </section>
            </section>
          </section>
          <section>
            <title>Upgrading from Ocata to Pike</title>
            <procedure>
              <step>
                <para>It is required to set the <literal>resource_class</literal> field for nodes registered
                        with the Bare Metal service <emphasis>before</emphasis> using the Pike version of the Compute
                        service. See <link xlink:href="https://docs.openstack.org/ironic/pike/install/enrollment.html#enrollment">Enrollment</link> for details.</para>
              </step>
              <step>
                <para>We recommend to move from old-style classic drivers to the new
                        hardware types after the upgrade to Pike. We expect the classic drivers to
                        be deprecated in the Queens release and removed in the Rocky release.
                        See  for the details on the migration.</para>
              </step>
            </procedure>
            <para>Other upgrade instructions are in the <link xlink:href="https://docs.openstack.org/releasenotes/ironic/pike.html">Pike release notes</link>.</para>
            <section xml:id="upgrade-hardware-types">
              <title>Upgrading to Hardware Types</title>
              <para>In the future, the Bare Metal service will stop supporting <emphasis>classic drivers</emphasis>
                    and will only support <emphasis>hardware types</emphasis>. See <link xlink:href="https://docs.openstack.org/ironic/pike/install/enabling-drivers.html">Enabling drivers and hardware types</link>
                    for the detailed explanation of the difference between these two types of drivers.</para>
              <section>
                <title>Planning the upgrade</title>
                <para>It is necessary to figure out which hardware types and hardware interfaces
                correspond to which classic drivers used in your deployment. The following
                table lists the classic drivers with their corresponding hardware types and
                the boot, deploy, inspect, management, and power hardware interfaces:</para>
                <informaltable>
                  <tgroup cols="7">
                    <colspec colname="c1" colwidth="21"/>
                    <colspec colname="c2" colwidth="20"/>
                    <colspec colname="c3" colwidth="20"/>
                    <colspec colname="c4" colwidth="14"/>
                    <colspec colname="c5" colwidth="10"/>
                    <colspec colname="c6" colwidth="10"/>
                    <colspec colname="c7" colwidth="9"/>
                    <thead>
                      <row>
                        <entry>
                          <para>Classic Driver</para>
                        </entry>
                        <entry>
                          <para>Hardware Type</para>
                        </entry>
                        <entry>
                          <para>Boot</para>
                        </entry>
                        <entry>
                          <para>Deploy</para>
                        </entry>
                        <entry>
                          <para>Inspect</para>
                        </entry>
                        <entry>
                          <para>Management</para>
                        </entry>
                        <entry>
                          <para>Power</para>
                        </entry>
                      </row>
                    </thead>
                    <tbody>
                      <row>
                        <entry>
                          <para>agent_ilo</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                        <entry>
                          <para>ilo-virtual-media</para>
                        </entry>
                        <entry>
                          <para>direct</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>agent_ipmitool</para>
                        </entry>
                        <entry>
                          <para>ipmi</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>direct</para>
                        </entry>
                        <entry>
                          <para>inspector</para>
                        </entry>
                        <entry>
                          <para>ipmitool</para>
                        </entry>
                        <entry>
                          <para>ipmitool</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>agent_ipmitool_socat</para>
                        </entry>
                        <entry>
                          <para>ipmi</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>direct</para>
                        </entry>
                        <entry>
                          <para>inspector</para>
                        </entry>
                        <entry>
                          <para>ipmitool</para>
                        </entry>
                        <entry>
                          <para>ipmitool</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>agent_irmc</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                        <entry>
                          <para>irmc-virtual-media</para>
                        </entry>
                        <entry>
                          <para>direct</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>agent_pxe_oneview</para>
                        </entry>
                        <entry>
                          <para>oneview</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>oneview-direct</para>
                        </entry>
                        <entry>
                          <para>oneview</para>
                        </entry>
                        <entry>
                          <para>oneview</para>
                        </entry>
                        <entry>
                          <para>oneview</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>agent_ucs</para>
                        </entry>
                        <entry>
                          <para>cisco-ucs-managed</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>direct</para>
                        </entry>
                        <entry>
                          <para>inspector</para>
                        </entry>
                        <entry>
                          <para>ucsm</para>
                        </entry>
                        <entry>
                          <para>ucsm</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>iscsi_ilo</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                        <entry>
                          <para>ilo-virtual-media</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>iscsi_irmc</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                        <entry>
                          <para>irmc-virtual-media</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>iscsi_pxe_oneview</para>
                        </entry>
                        <entry>
                          <para>oneview</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>oneview-iscsi</para>
                        </entry>
                        <entry>
                          <para>oneview</para>
                        </entry>
                        <entry>
                          <para>oneview</para>
                        </entry>
                        <entry>
                          <para>oneview</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>pxe_agent_cimc</para>
                        </entry>
                        <entry>
                          <para>cisco-ucs-standalone</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>direct</para>
                        </entry>
                        <entry>
                          <para>inspector</para>
                        </entry>
                        <entry>
                          <para>cimc</para>
                        </entry>
                        <entry>
                          <para>cimc</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>pxe_drac</para>
                        </entry>
                        <entry>
                          <para>idrac</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>idrac</para>
                        </entry>
                        <entry>
                          <para>idrac</para>
                        </entry>
                        <entry>
                          <para>idrac</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>pxe_drac_inspector</para>
                        </entry>
                        <entry>
                          <para>idrac</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>inspector</para>
                        </entry>
                        <entry>
                          <para>idrac</para>
                        </entry>
                        <entry>
                          <para>idrac</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>pxe_ilo</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                        <entry>
                          <para>ilo-pxe</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                        <entry>
                          <para>ilo</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>pxe_ipmitool</para>
                        </entry>
                        <entry>
                          <para>ipmi</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>inspector</para>
                        </entry>
                        <entry>
                          <para>ipmitool</para>
                        </entry>
                        <entry>
                          <para>ipmitool</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>pxe_ipmitool_socat</para>
                        </entry>
                        <entry>
                          <para>ipmi</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>inspector</para>
                        </entry>
                        <entry>
                          <para>ipmitool</para>
                        </entry>
                        <entry>
                          <para>ipmitool</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>pxe_iscsi_cimc</para>
                        </entry>
                        <entry>
                          <para>cisco-ucs-standalone</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>inspector</para>
                        </entry>
                        <entry>
                          <para>cimc</para>
                        </entry>
                        <entry>
                          <para>cimc</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>pxe_irmc</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                        <entry>
                          <para>irmc-pxe</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                        <entry>
                          <para>irmc</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>pxe_snmp</para>
                        </entry>
                        <entry>
                          <para>snmp</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>no-inspect</para>
                        </entry>
                        <entry>
                          <para>fake</para>
                        </entry>
                        <entry>
                          <para>snmp</para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>pxe_ucs</para>
                        </entry>
                        <entry>
                          <para>cisco-ucs-managed</para>
                        </entry>
                        <entry>
                          <para>pxe</para>
                        </entry>
                        <entry>
                          <para>iscsi</para>
                        </entry>
                        <entry>
                          <para>inspector</para>
                        </entry>
                        <entry>
                          <para>ucsm</para>
                        </entry>
                        <entry>
                          <para>ucsm</para>
                        </entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable>
                <note>
                  <para>The <literal>inspector</literal><emphasis>inspect</emphasis> interface was only used if
                    explicitly enabled in the configuration. Otherwise, <literal>no-inspect</literal>
                    was used.</para>
                </note>
                <note>
                  <para>pxe_ipmitool_socat and agent_ipmitool_socat use
                    ipmitool-socatconsole interface (the default for the ipmi
                    hardware type), while pxe_ipmitool and agent_ipmitool use
                    ipmitool-shellinabox. See <xref linkend="console"/> for details.</para>
                </note>
                <para>For out-of-tree drivers you may need to reach out to their maintainers or
                figure out the appropriate interfaces by researching the source code.</para>
              </section>
              <section>
                <title>Configuration</title>
                <para>You will need to enable hardware types and interfaces that correspond to your
                currently enabled classic drivers. For example, if you have the following
                configuration in your <literal>ironic.conf</literal>:</para>
                <screen language="ini">[DEFAULT]
enabled_drivers = pxe_ipmitool,agent_ipmitool</screen>
                <para>You will have to add this configuration as well:</para>
                <screen language="ini">[DEFAULT]
enabled_hardware_types = ipmi
enabled_boot_interfaces = pxe
enabled_deploy_interfaces = iscsi,direct
enabled_management_interfaces = ipmitool
enabled_power_interfaces = ipmitool</screen>
                <note>
                  <para>For every interface type there is an option
                    <literal>default_&lt;INTERFACE&gt;_interface</literal>, where <literal>&lt;INTERFACE&gt;</literal> is the interface
                    type name. For example, one can make all nodes use the <literal>direct</literal> deploy
                    method by default by setting:</para>
                  <screen language="ini">[DEFAULT]
default_deploy_interface = direct</screen>
                </note>
              </section>
              <section>
                <title>Migrating nodes</title>
                <para>After the required items are enabled in the configuration, each node’s
                <literal>driver</literal> field has to be updated to a new value. You may need to also
                set new values for some or all interfaces:</para>
                <screen language="console">export OS_BAREMETAL_API_VERSION=1.31

for uuid in $(openstack baremetal node list --driver pxe_ipmitool -f value -c UUID); do
    openstack baremetal node set $uuid --driver ipmi --deploy-interface iscsi
done

for uuid in $(openstack baremetal node list --driver agent_ipmitool -f value -c UUID); do
    openstack baremetal node set $uuid --driver ipmi --deploy-interface direct
done</screen>
                <para>See  for more details on setting hardware types and
                interfaces.</para>
                <warning>
                  <para>We do not recommend changing the interfaces for <literal>active</literal> nodes. If
                    absolutely needed, the nodes have to be put in the maintenance mode first:</para>
                  <screen language="console">openstack baremetal node maintenance set $UUID \
    --reason "Changing driver and/or hardware interfaces"
# do the update, validate its correctness
openstack baremetal node maintenance unset $UUID</screen>
                </warning>
              </section>
              <section>
                <title>Other interfaces</title>
                <para>Care has to be taken to migrate from classic drivers using non-default
                interfaces. This chapter covers a few of the most commonly used.</para>
                <section>
                  <title>Ironic Inspector</title>
                  <para>Some classic drivers, notably <literal>pxe_ipmitool</literal>, <literal>agent_ipmitool</literal> and
                    <literal>pxe_drac_inspector</literal>, use <link xlink:href="https://docs.openstack.org/ironic-inspector/">ironic-inspector</link> for their <emphasis>inspect</emphasis> interface.</para>
                  <para>The same functionality is available for all hardware types, but the appropriate
                    <literal>inspect</literal> interface has to be enabled in the Bare Metal service configuration
                    file, for example:</para>
                  <screen language="ini">[DEFAULT]
enabled_inspect_interfaces = inspector,no-inspect</screen>
                  <para>See  for more details.</para>
                  <note>
                    <para>The configuration option <literal>[inspector]enabled</literal> does not affect hardware
                        types.</para>
                  </note>
                  <para>Then you can tell your nodes to use this interface, for example:</para>
                  <screen language="console">export OS_BAREMETAL_API_VERSION=1.31
for uuid in $(openstack baremetal node list --driver ipmi -f value -c UUID); do
    openstack baremetal node set $uuid --inspect-interface inspector
done</screen>
                  <note>
                    <para>A node configured with the IPMI hardware type, will use the inspector
                        inspection implementation automatically if it is enabled. This is not
                        the case for the most of the vendor drivers.</para>
                  </note>
                </section>
                <section xml:id="console">
                  <title>Console</title>
                  <para>Several classic drivers, notably <literal>pxe_ipmitool_socat</literal> and
                    <literal>agent_ipmitool_socat</literal>, use socat-based serial console implementation.</para>
                  <para>For the <literal>ipmi</literal> hardware type it is used by default, if enabled in the
                    configuration file:</para>
                  <screen language="ini">[DEFAULT]
enabled_console_interfaces = ipmitool-socat,no-console</screen>
                  <para>If you want to use the <literal>shellinabox</literal> implementation instead, it has to be
                    enabled as well:</para>
                  <screen language="ini">[DEFAULT]
enabled_console_interfaces = ipmitool-shellinabox,no-console</screen>
                  <para>Then you need to update some or all nodes to use it explicitly. For example,
                    to update all nodes use:</para>
                  <screen language="console">export OS_BAREMETAL_API_VERSION=1.31
for uuid in $(openstack baremetal node list --driver ipmi -f value -c UUID); do
    openstack baremetal node set $uuid --console-interface ipmitool-shellinabox
done</screen>
                </section>
                <section>
                  <title>RAID</title>
                  <para>Many classic drivers, including <literal>pxe_ipmitool</literal> and <literal>agent_ipmitool</literal> use
                    the IPA-based in-band RAID implementation by default.</para>
                  <para>For the hardware types it is not used by default. To use it, you need to
                    enable it in the configuration first:</para>
                  <screen language="ini">[DEFAULT]
enabled_raid_interfaces = agent,no-raid</screen>
                  <para>Then you can update those nodes that support in-band RAID to use the <literal>agent</literal>
                    RAID interface. For example, to update all nodes use:</para>
                  <screen language="console">export OS_BAREMETAL_API_VERSION=1.31
for uuid in $(openstack baremetal node list --driver ipmi -f value -c UUID); do
    openstack baremetal node set $uuid --raid-interface agent
done</screen>
                  <note>
                    <para>The ability of a node to use the <literal>agent</literal> RAID interface depends on
                        the ramdisk (more specifically, a <link xlink:href="https://docs.openstack.org/ironic-python-agent/pike/contributor/hardware_managers.html">hardware manager</link> used in it),
                        not on the driver.</para>
                  </note>
                </section>
                <section>
                  <title>Network and storage</title>
                  <para>The network and storage interfaces have always been dynamic, and thus do not
                    require any special treatment during upgrade.</para>
                </section>
                <section>
                  <title>Vendor</title>
                  <para>Classic drivers are allowed to use the <literal>VendorMixin</literal> functionality
                    to combine and expose several node or driver vendor passthru methods
                    from different vendor interface implementations in one driver.</para>
                  <para>
                    <emphasis role="bold">This is no longer possible with hardware types.</emphasis>
                  </para>
                  <para>With hardware types, a vendor interface can only have a single active
                    implementation from the list of vendor interfaces supported by a given
                    hardware type.</para>
                  <para>Ironic no longer has in-tree drivers (both classic and hardware types) that
                    rely on this <literal>VendorMixin</literal> functionality support.
                    However if you are using an out-of-tree classic driver that depends on it,
                    you’ll need to do the following in order to use vendor
                    passthru methods from different vendor passthru implementations:</para>
                  <procedure>
                    <step>
                      <para>While creating a new hardware type to replace your classic driver,
                            specify all vendor interface implementations your classic driver
                            was using to build its <literal>VendorMixin</literal> as supported vendor interfaces
                            (property <literal>supported_vendor_interfaces</literal> of the Python class
                            that defines your hardware type).</para>
                    </step>
                    <step>
                      <para>Ensure all required vendor interfaces are enabled in the ironic
                            configuration file under the <literal>[DEFAULT]enabled_vendor_interfaces</literal>
                            option.
                            You should also consider setting the <literal>[DEFAULT]default_vendor_interface</literal>
                            option to specify the vendor interface for nodes that do not have one set
                            explicitly.</para>
                    </step>
                    <step>
                      <para>Before invoking a specific vendor passthru method,
                            make sure that the node’s vendor interface is set to the interface
                            with the desired vendor passthru method.
                            For example, if you want to invoke the vendor passthru method
                            <literal>vendor_method_foo()</literal> from <literal>vendor_foo</literal> vendor interface:</para>
                      <screen language="shell"># set the vendor interface to 'vendor_foo`
openstack --os-baremetal-api-version 1.31 baremetal node set &lt;node&gt; --vendor-interface vendor_foo

# invoke the vendor passthru method
openstack baremetal node passthru call &lt;node&gt; vendor_method_foo</screen>
                    </step>
                  </procedure>
                </section>
              </section>
            </section>
          </section>
          <section>
            <title>Upgrading from Newton to Ocata</title>
            <para>There are no specific upgrade instructions other than the
                <link xlink:href="https://docs.openstack.org/releasenotes/ironic/ocata.html#upgrade-notes">Ocata release notes</link>.</para>
          </section>
          <section>
            <title>Upgrading from Mitaka to Newton</title>
            <para>There are no specific upgrade instructions other than the
                <link xlink:href="https://docs.openstack.org/releasenotes/ironic/newton.html">Newton release notes</link>.</para>
          </section>
          <section>
            <title>Upgrading from Liberty to Mitaka</title>
            <para>There are no specific upgrade instructions other than the
                <link xlink:href="https://docs.openstack.org/releasenotes/ironic/mitaka.html">Mitaka release notes</link>.</para>
          </section>
          <section>
            <title>Upgrading from Kilo to Liberty</title>
            <section>
              <title>In-band Inspection</title>
              <para>If you used in-band inspection with <emphasis role="bold">ironic-discoverd</emphasis>, it is highly
                    recommended that you switch to using <emphasis role="bold">ironic-inspector</emphasis>, which is a newer
                    (and compatible on API level) version of the same service. You have to install
                    <emphasis role="bold">python-ironic-inspector-client</emphasis> during the upgrade. This package contains a
                    client module for the in-band inspection service, which was previously part of
                    the <emphasis role="bold">ironic-discoverd</emphasis> package. Ironic Liberty supports the
                    <emphasis role="bold">ironic-discoverd</emphasis> service, but does not support its in-tree client module.
                    Refer to <link xlink:href="https://docs.openstack.org/ironic-inspector/latest/install/index.html#version-support-matrix">ironic-inspector version support matrix</link>
                    for details on which ironic versions are compatible with which
                    <emphasis role="bold">ironic-inspector</emphasis>/<emphasis role="bold">ironic-discoverd</emphasis> versions.</para>
              <para>The discoverd to inspector upgrade procedure is as follows:</para>
              <itemizedlist>
                <listitem>
                  <para>Install <emphasis role="bold">ironic-inspector</emphasis> on the machine where you have
                            <emphasis role="bold">ironic-discoverd</emphasis> (usually the same as conductor).</para>
                </listitem>
                <listitem>
                  <para>Update the <emphasis role="bold">ironic-inspector</emphasis> configuration file to stop using deprecated
                            configuration options, as marked by the comments in the <link xlink:href="https://git.openstack.org/cgit/openstack/ironic-inspector/tree/example.conf">example.conf</link>.
                            We recommend you move the configuration file to
                            <literal>/etc/ironic-inspector/inspector.conf</literal>.</para>
                </listitem>
                <listitem>
                  <para>Shutdown <emphasis role="bold">ironic-discoverd</emphasis>, and start <emphasis role="bold">ironic-inspector</emphasis>.</para>
                </listitem>
                <listitem>
                  <para>During upgrade of each conductor instance:</para>
                  <procedure>
                    <step>
                      <para>Shutdown the conductor.</para>
                    </step>
                    <step>
                      <para>Uninstall <emphasis role="bold">ironic-discoverd</emphasis>,
                                    install <emphasis role="bold">python-ironic-inspector-client</emphasis>.</para>
                    </step>
                    <step>
                      <para>Update the conductor.</para>
                    </step>
                    <step>
                      <para>Update <literal>ironic.conf</literal> to use <literal>[inspector]</literal> section
                                    instead of <literal>[discoverd]</literal> (option names are the same).</para>
                    </step>
                    <step>
                      <para>Start the conductor.</para>
                    </step>
                  </procedure>
                </listitem>
              </itemizedlist>
            </section>
          </section>
          <section>
            <title>Upgrading from Juno to Kilo</title>
            <para>When upgrading a cloud from Juno to Kilo, users must ensure the nova
                service is upgraded prior to upgrading the ironic service. Additionally,
                users need to set a special config flag in nova prior to upgrading to ensure
                the newer version of nova is not attempting to take advantage of new ironic
                features until the ironic service has been upgraded. The steps for upgrading
                your nova and ironic services are as follows:</para>
            <itemizedlist>
              <listitem>
                <para>Edit <literal>nova.conf</literal> and ensure <literal>force_config_drive=False</literal>
                      is set in the <literal>[DEFAULT]</literal> group. Restart <literal>nova-compute</literal> if necessary.</para>
              </listitem>
              <listitem>
                <para>Install new nova code, run database migrations.</para>
              </listitem>
              <listitem>
                <para>Install new python-ironicclient code.</para>
              </listitem>
              <listitem>
                <para>Restart nova services.</para>
              </listitem>
              <listitem>
                <para>Install new Ironic code, run database migrations, restart Ironic services.</para>
              </listitem>
              <listitem>
                <para>Edit <literal>nova.conf</literal> and set <literal>force_config_drive</literal> to your liking, restarting
                        <literal>nova-compute</literal> if necessary.</para>
              </listitem>
            </itemizedlist>
            <note>
              <para>During the period between nova’s upgrade and ironic’s upgrades,
                instances can still be provisioned to nodes. However, any attempt by users to
                specify a config drive for an instance will cause an error until ironic’s
                upgrade has completed.</para>
            </note>
            <section>
              <title>Cleaning</title>
              <para>A new feature starting from Kilo cycle is support for the automated cleaning
                    of nodes between workloads to ensure the node is ready for another workload.
                    This can include erasing the hard drives, updating firmware, and other steps.
                    For more information, see <xref linkend="automated-cleaning"/>.</para>
              <para>If Ironic is configured with automated cleaning enabled (defaults to <literal>True</literal>) and
                    neutron is set as the DHCP provider (also the default), you will need to set
                    the <literal>cleaning_network_uuid</literal> option in the ironic configuration file before
                    starting the ironic service. See <link xlink:href="https://docs.openstack.org/ironic/pike/install/configure-cleaning.html#configure-cleaning"> Configure the Bare Metal service for cleaning</link>
                    for information on how to set up the cleaning network for Ironic.</para>
            </section>
          </section>
        </section>
        <section xml:id="security">
          <title>Security Overview</title>
          <para>While the Bare Metal service is intended to be a secure application, it is
            important to understand what it does and does not cover today.</para>
          <para>Deployers must properly evaluate their use case and take the appropriate
            actions to secure their environment(s). This document is intended to provide an
            overview of what risks an operator of the Bare Metal service should be aware
            of. It is not intended as a How-To guide for securing a data center or an
            OpenStack deployment.</para>
          <section xml:id="rest-api-user-roles-and-policy-settings">
            <title>REST API: user roles and policy settings</title>
            <para>Beginning with the Newton (6.1.0) release, the Bare Metal service allows
                operators significant control over API access:</para>
            <itemizedlist>
              <listitem>
                <para>Access may be restricted to each method (GET, PUT, etc) for each
                        REST resource. Defaults are provided with the release and defined in code.</para>
              </listitem>
              <listitem>
                <para>Access may be divided between an administrative role with full access and
                        observer role with read-only access. By default, these roles are assigned
                        the names <literal>baremetal_admin</literal> and <literal>baremetal_observer</literal>, respectively.</para>
              </listitem>
              <listitem>
                <para>As before, passwords may be hidden in <literal>driver_info</literal>.</para>
              </listitem>
            </itemizedlist>
            <para>Prior to the Newton (6.1.0) release, the Bare Metal service only supported two
                policy options:</para>
            <itemizedlist>
              <listitem>
                <para>API access may be secured by a simple policy rule: users with administrative
                        privileges may access all API resources, whereas users without administrative
                        privileges may only access public API resources.</para>
              </listitem>
              <listitem>
                <para>Passwords contained in the <literal>driver_info</literal> field may be hidden from all API
                        responses with the <literal>show_password</literal> policy setting. This defaults to always
                        hide passwords, regardless of the user’s role.</para>
              </listitem>
            </itemizedlist>
          </section>
          <section xml:id="multi-tenancy">
            <title>Multi-tenancy</title>
            <para>There are two aspects of multitenancy to consider when evaluating a deployment
                of the Bare Metal Service: Interactions between tenants on the network, and
                actions one tenant can take on a machine that will affect the next tenant.</para>
            <section xml:id="network-interactions">
              <title>Network Interactions</title>
              <para>Interactions between tenants’ workloads running simultaneously on separate
                    servers include, but are not limited to: IP spoofing, packet sniffing, and
                    network man-in-the-middle attacks.</para>
              <para>By default, the Bare Metal service provisions all nodes on a flat network, and
                    does not take any precautions to avoid or prevent interaction between tenants.
                    This can be addressed by integration with the OpenStack Identity, Compute, and
                    Networking services, so as to provide tenant-network isolation. Additional
                    documentation on <link xlink:href="multitenancy">network multi-tenancy</link> is available.</para>
            </section>
            <section xml:id="lingering-effects">
              <title>Lingering Effects</title>
              <para>Interactions between tenants placed sequentially on the same server include, but
                    are not limited to: Changes in BIOS settings, modifications to firmware, or
                    files left on disk or peripheral storage devices (if these devices are not
                    erased between uses).</para>
              <para>By default, the Bare Metal service will erase (clean) the local disk drives
                    during the cleaning phase, after deleting an instance. It <emphasis>does not</emphasis> reset
                    BIOS or reflash firmware or peripheral devices. This can be addressed through
                    customizing the utility ramdisk used during the cleaning phase. See details in
                    the <xref linkend="firmware-security"/> section.</para>
            </section>
          </section>
          <section xml:id="firmware-security">
            <title>Firmware security</title>
            <para>When the Bare Metal service deploys an operating system image to a server, that
                image is run natively on the server without virtualization. Any user with
                administrative access to the deployed instance has administrative access to
                the underlying hardware.</para>
            <para>Most servers’ default settings do not prevent a privileged local user from
                gaining direct access to hardware devices. Such a user could modify device or
                firmware settings, and potentially flash new firmware to the device, before
                deleting their instance and allowing the server to be allocated to another
                user.</para>
            <para>If the <literal>[conductor]/automated_clean</literal> configuration option is enabled (and
                the <literal>[deploy]/erase_devices_priority</literal> configuration option is not zero),
                the Bare Metal service will securely erase all local disk devices within a
                machine during instance deletion. However, the service does not ship with
                any code that will validate the integrity of, or make any modifications to,
                system or device firmware or firmware settings.</para>
            <para>Operators are encouraged to write their own hardware manager plugins for the
                ironic-python-agent ramdisk. This should include custom clean steps
                that would be run during the cleaning process, as part of Node
                de-provisioning. The clean steps
                would perform the specific actions necessary within that environment to ensure
                the integrity of each server’s firmware.</para>
            <para>Ideally, an operator would work with their hardware vendor to ensure that
                proper firmware security measures are put in place ahead of time. This could
                include:</para>
            <itemizedlist>
              <listitem>
                <para>Installing signed firmware for BIOS and peripheral devices.</para>
              </listitem>
              <listitem>
                <para>Using a TPM (Trusted Platform Module) to validate signatures at boot time.</para>
              </listitem>
              <listitem>
                <para>Booting machines in <xref linkend="ilo-uefi-secure-boot-support"/>, rather than BIOS mode, to
                        validate kernel signatures.</para>
              </listitem>
              <listitem>
                <para>Disabling local (in-band) access from the host OS to the management controller (BMC).</para>
              </listitem>
              <listitem>
                <para>Disabling modifications to boot settings from the host OS.</para>
              </listitem>
            </itemizedlist>
            <para>Additional references:</para>
            <itemizedlist>
              <listitem>
                <para>
                  <xref linkend="ilo-node-cleaning"/>
                </para>
              </listitem>
              <listitem>
                <para>
                  <link xlink:href="https://docs.openstack.org/ironic/pike/install/include/trusted-boot.html"> Trusted boot with partition image</link>
                </para>
              </listitem>
            </itemizedlist>
          </section>
        </section>
        <section>
          <title>Troubleshooting Ironic</title>
          <section xml:id="nova-returns-no-valid-host-was-found-error">
            <title>Nova returns “No valid host was found” Error</title>
            <para>Sometimes Nova Conductor log file <literal>nova-conductor.log</literal> or a message returned
                from Nova API contains the following error:</para>
            <screen>NoValidHost: No valid host was found. There are not enough hosts available.</screen>
            <para><literal>No valid host was found</literal> means that the Nova Scheduler could not find a bare
                metal node suitable for booting the new instance.</para>
            <para>This in turn usually means some mismatch between resources that Nova expects
                to find and resources that Ironic advertised to Nova.</para>
            <para>A few things should be checked in this case:</para>
            <procedure>
              <step>
                <para>Make sure that enough nodes are in <literal>available</literal> state, not in
                        maintenance mode and not already used by an existing instance.
                        Check with the following command:</para>
                <screen>ironic node-list --provision-state available --maintenance false --associated false</screen>
                <para>If this command does not show enough nodes, use generic <literal>ironic
node-list</literal> to check other nodes. For example, nodes in <literal>manageable</literal> state
                        should be made available:</para>
                <screen>ironic node-set-provision-state &lt;IRONIC NODE&gt; provide</screen>
                <para>The Bare metal service automatically puts a node in maintenance mode if
                        there are issues with accessing its management interface. Check the power
                        credentials (For example: <literal>ipmi_address</literal>, <literal>ipmi_username</literal> and <literal>ipmi_password</literal>)
                        and then move the node out of maintenance mode:</para>
                <screen>ironic node-set-maintenance &lt;IRONIC NODE&gt; off</screen>
                <para>The <literal>node-validate</literal> command can be used to verify that all required fields
                        are present. The following command should not return anything:</para>
                <screen>ironic node-validate baremetal-0 | grep -E '(power|management)\W*False'</screen>
                <para>Maintenance mode will be also set on a node if automated cleaning has
                        failed for it previously.</para>
              </step>
              <step>
                <para>Starting with the Pike release, check that all your nodes have the
                        <literal>resource_class</literal> field set using the following command:</para>
                <screen>openstack --os-baremetal-api-version 1.21 baremetal node list --fields uuid name resource_class</screen>
                <para>Then check that the flavor(s) are configured to request these resource
                        classes via their properties:</para>
                <screen>openstack flavor show &lt;FLAVOR NAME&gt; -f value -c properties</screen>
                <para>For example, if your node has resource class <literal>baremetal-large</literal>, it will
                        be matched by a flavor with property <literal>resources:CUSTOM_BAREMETAL_LARGE</literal>
                        set to <literal>1</literal>. See <link xlink:href="https://docs.openstack.org/ironic/pike/install/configure-nova-flavors.html"> Create flavors for use with the Bare Metal service</link> for more
                        details on the correct configuration.</para>
              </step>
              <step>
                <para>If you do not use scheduling based on resource classes, then the node’s
                        properties must have been set either manually or via inspection.
                        For each node with <literal>available</literal> state check that the <literal>properties</literal>
                        JSON field has valid values for the keys <literal>cpus</literal>, <literal>cpu_arch</literal>,
                        <literal>memory_mb</literal> and <literal>local_gb</literal>. Example of valid properties:</para>
                <screen>$ ironic node-show &lt;IRONIC NODE&gt; --fields properties
+------------+------------------------------------------------------------------------------------+
| Property   | Value                                                                              |
+------------+------------------------------------------------------------------------------------+
| properties | {u'memory_mb': u'8192', u'cpu_arch': u'x86_64', u'local_gb': u'41', u'cpus': u'4'} |
+------------+------------------------------------------------------------------------------------+</screen>
                <warning>
                  <para>If you’re using exact match filters in the Nova Scheduler, make sure
                            the flavor and the node properties match exactly.</para>
                </warning>
              </step>
              <step>
                <para>The Nova flavor that you are using does not match any properties of the
                        available Ironic nodes. Use the following command to compare:</para>
                <screen>openstack flavor show &lt;FLAVOR NAME&gt;</screen>
                <para>The extra specs in your flavor starting with <literal>capability:</literal>
                        should match ones in <literal>node.properties['capabilities']</literal>.</para>
                <note>
                  <para>The format of capabilities is different in Nova and Ironic.
                            For example, in Nova flavor:</para>
                  <screen>$ openstack flavor show &lt;FLAVOR NAME&gt; -c properties
+------------+----------------------------------+
| Field      | Value                            |
+------------+----------------------------------+
| properties | capabilities:boot_option='local' |
+------------+----------------------------------+</screen>
                  <para>But in Ironic node:</para>
                  <screen>$ ironic node-show &lt;IRONIC NODE&gt; --fields properties
+------------+-----------------------------------------+
| Property   | Value                                   |
+------------+-----------------------------------------+
| properties | {u'capabilities': u'boot_option:local'} |
+------------+-----------------------------------------+</screen>
                </note>
              </step>
              <step>
                <para>After making changes to nodes in Ironic, it takes time for those changes
                        to propagate from Ironic to Nova. Check tha the following command correctly
                        shows total amount of resources in your system:</para>
                <screen>openstack hypervisor stats show</screen>
                <para>You can also check <literal>openstack hypervisor show &lt;IRONIC NODE&gt;</literal> to see the status of
                        individual Ironic nodes as reported to Nova.</para>
              </step>
              <step>
                <para>Figure out which Nova Scheduler filter ruled out your nodes. Check the
                        <literal>nova-scheduler</literal> logs for lines containing something like:</para>
                <screen>Filter ComputeCapabilitiesFilter returned 0 hosts</screen>
                <para>The name of the filter that removed the last hosts may give some hints on
                        what exactly was not matched. See <link xlink:href="https://docs.openstack.org/nova/latest/filter_scheduler.html">Nova filters documentation</link> for more
                        details.</para>
              </step>
              <step>
                <para>If none of the above helped, check Ironic conductor log carefully to see
                        if there are any conductor-related errors which are the root cause for
                        “No valid host was found”. If there are any <literal>Error in deploy of node
                        &lt;IRONIC-NODE-UUID&gt;: [Errno 28] …</literal> error messages in Ironic conductor
                        log, it means the conductor run into a special error during deployment.
                        So you can check the log carefully to fix or work around and then try
                        again.</para>
              </step>
            </procedure>
          </section>
          <section xml:id="patching-the-deploy-ramdisk">
            <title>Patching the Deploy Ramdisk</title>
            <para>When debugging a problem with deployment and/or inspection you may want to
                quickly apply a change to the ramdisk to see if it helps. Of course you can
                inject your code and SSH keys during the ramdisk build (depends on how
                exactly you’ve built your ramdisk). But it’s also possible to quickly modify
                an already built ramdisk.</para>
            <para>Create an empty directory and unpack the ramdisk content there:</para>
            <screen>mkdir unpack
cd unpack
gzip -dc /path/to/the/ramdisk | cpio -id</screen>
            <para>The last command will result in the whole Linux file system tree unpacked in
                the current directory. Now you can modify any files you want. The actual
                location of the files will depend on the way you’ve built the ramdisk.</para>
            <para>After you’ve done the modifications, pack the whole content of the current
                directory back:</para>
            <screen>find . | cpio -H newc -o &gt; /path/to/the/new/ramdisk</screen>
            <note>
              <para>You don’t need to modify the kernel (For example,
                    <literal>tinyipa-master.vmlinuz</literal>), only the ramdisk part.</para>
            </note>
            <note>
              <para>For CoreOS-based ramdisk you also need to unpack and pack back the
                    squashfs archive inside the unpacked ramdisk.</para>
            </note>
          </section>
          <section xml:id="api-errors">
            <title>API Errors</title>
            <para>The <literal>debug_tracebacks_in_api</literal> config option may be set to return tracebacks
                in the API response for all 4xx and 5xx errors.</para>
          </section>
          <section xml:id="retrieving-logs-from-the-deploy-ramdisk">
            <title>Retrieving logs from the deploy ramdisk</title>
            <para>When troubleshooting deployments (specially in case of a deploy failure)
                it’s important to have access to the deploy ramdisk logs to be able to
                identify the source of the problem. By default, Ironic will retrieve the
                logs from the deploy ramdisk when the deployment fails and save it on the
                local filesystem at <literal>/var/log/ironic/deploy</literal>.</para>
            <para>To change this behavior, operators can make the following changes to
                <literal>/etc/ironic/ironic.conf</literal> under the <literal>[agent]</literal> group:</para>
            <itemizedlist>
              <listitem>
                <para><literal>deploy_logs_collect</literal>: Whether Ironic should collect the deployment
                        logs on deployment. Valid values for this option are:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>on_failure</literal> (<emphasis role="bold">default</emphasis>): Retrieve the deployment logs upon a
                                deployment failure.</para>
                  </listitem>
                  <listitem>
                    <para><literal>always</literal>: Always retrieve the deployment logs, even if the
                                deployment succeed.</para>
                  </listitem>
                  <listitem>
                    <para><literal>never</literal>: Disable retrieving the deployment logs.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
              <listitem>
                <para><literal>deploy_logs_storage_backend</literal>: The name of the storage backend where
                        the logs will be stored. Valid values for this option are:</para>
                <itemizedlist>
                  <listitem>
                    <para><literal>local</literal> (<emphasis role="bold">default</emphasis>): Store the logs in the local filesystem.</para>
                  </listitem>
                  <listitem>
                    <para><literal>swift</literal>: Store the logs in Swift.</para>
                  </listitem>
                </itemizedlist>
              </listitem>
              <listitem>
                <para><literal>deploy_logs_local_path</literal>: The path to the directory where the
                        logs should be stored, used when the <literal>deploy_logs_storage_backend</literal>
                        is configured to <literal>local</literal>. By default logs will be stored at
                        <emphasis role="bold">/var/log/ironic/deploy</emphasis>.</para>
              </listitem>
              <listitem>
                <para><literal>deploy_logs_swift_container</literal>: The name of the Swift container to
                        store the logs, used when the <literal>deploy_logs_storage_backend</literal> is configured to
                        swift. By default <emphasis role="bold">ironic_deploy_logs_container</emphasis>.</para>
              </listitem>
              <listitem>
                <para><literal>deploy_logs_swift_days_to_expire</literal>: Number of days before a log object
                        is marked as expired in Swift. If None, the logs will be kept forever
                        or until manually deleted. Used when the <literal>deploy_logs_storage_backend</literal> is
                        configured to swift. By default <emphasis role="bold">30</emphasis> days.</para>
              </listitem>
            </itemizedlist>
            <para>When the logs are collected, Ironic will store a <emphasis>tar.gz</emphasis> file containing
                all the logs according to the <literal>deploy_logs_storage_backend</literal>
                configuration option. All log objects will be named with the following
                pattern:</para>
            <screen>&lt;node-uuid&gt;[_&lt;instance-uuid&gt;]_&lt;timestamp yyyy-mm-dd-hh:mm:ss&gt;.tar.gz</screen>
            <note>
              <para>The <emphasis>instance_uuid</emphasis> field is not required for deploying a node when
                    Ironic is configured to be used in standalone mode. If present it
                    will be appended to the name.</para>
            </note>
            <section xml:id="accessing-the-log-data">
              <title>Accessing the log data</title>
              <section xml:id="when-storing-in-the-local-filesystem">
                <title>When storing in the local filesystem</title>
                <para>When storing the logs in the local filesystem, the log files can
                        be found at the path configured in the <literal>deploy_logs_local_path</literal>
                        configuration option. For example, to find the logs from the node
                        <literal>5e9258c4-cfda-40b6-86e2-e192f523d668</literal>:</para>
                <screen language="bash">$ ls /var/log/ironic/deploy | grep 5e9258c4-cfda-40b6-86e2-e192f523d668
5e9258c4-cfda-40b6-86e2-e192f523d668_88595d8a-6725-4471-8cd5-c0f3106b6898_2016-08-08-13:52:12.tar.gz
5e9258c4-cfda-40b6-86e2-e192f523d668_db87f2c5-7a9a-48c2-9a76-604287257c1b_2016-08-08-14:07:25.tar.gz</screen>
                <note>
                  <para>When saving the logs to the filesystem, operators may want to enable
                            some form of rotation for the logs to avoid disk space problems.</para>
                </note>
              </section>
              <section xml:id="when-storing-in-swift">
                <title>When storing in Swift</title>
                <para>When using Swift, operators can associate the objects in the
                        container with the nodes in Ironic and search for the logs for the node
                        <literal>5e9258c4-cfda-40b6-86e2-e192f523d668</literal> using the <emphasis role="bold">prefix</emphasis> parameter.
                        For example:</para>
                <screen language="bash">$ swift list ironic_deploy_logs_container -p 5e9258c4-cfda-40b6-86e2-e192f523d668
5e9258c4-cfda-40b6-86e2-e192f523d668_88595d8a-6725-4471-8cd5-c0f3106b6898_2016-08-08-13:52:12.tar.gz
5e9258c4-cfda-40b6-86e2-e192f523d668_db87f2c5-7a9a-48c2-9a76-604287257c1b_2016-08-08-14:07:25.tar.gz</screen>
                <para>To download a specific log from Swift, do:</para>
                <screen language="bash">$ swift download ironic_deploy_logs_container "5e9258c4-cfda-40b6-86e2-e192f523d668_db87f2c5-7a9a-48c2-9a76-604287257c1b_2016-08-08-14:07:25.tar.gz"
5e9258c4-cfda-40b6-86e2-e192f523d668_db87f2c5-7a9a-48c2-9a76-604287257c1b_2016-08-08-14:07:25.tar.gz [auth 0.341s, headers 0.391s, total 0.391s, 0.531 MB/s]</screen>
              </section>
              <section xml:id="the-contents-of-the-log-file">
                <title>The contents of the log file</title>
                <para>The log is just a <literal>.tar.gz</literal> file that can be extracted as:</para>
                <screen language="bash">$ tar xvf &lt;file path&gt;</screen>
                <para>The contents of the file may differ slightly depending on the distribution
                        that the deploy ramdisk is using:</para>
                <itemizedlist>
                  <listitem>
                    <para>For distributions using <literal>systemd</literal> there will be a file called
                                <emphasis role="bold">journal</emphasis> which contains all the system logs collected via the
                                <literal>journalctl</literal> command.</para>
                  </listitem>
                  <listitem>
                    <para>For other distributions, the ramdisk will collect all the contents of
                                the <literal>/var/log</literal> directory.</para>
                  </listitem>
                </itemizedlist>
                <para>For all distributions, the log file will also contain the output of
                        the following commands (if present): <literal>ps</literal>, <literal>df</literal>, <literal>ip addr</literal> and
                        <literal>iptables</literal>.</para>
                <para>Here’s one example when extracting the content of a log file for a
                        distribution that uses <literal>systemd</literal>:</para>
                <screen language="bash">$ tar xvf 5e9258c4-cfda-40b6-86e2-e192f523d668_88595d8a-6725-4471-8cd5-c0f3106b6898_2016-08-08-13:52:12.tar.gz
df
ps
journal
ip_addr
iptables</screen>
              </section>
            </section>
          </section>
          <section xml:id="dhcp-during-pxe-or-ipxe-is-inconsistent-or-unreliable">
            <title>DHCP during PXE or iPXE is inconsistent or unreliable</title>
            <para>This can be caused by the spanning tree protocol delay on some switches. The
                delay prevents the switch port moving to forwarding mode during the nodes
                attempts to PXE, so the packets never make it to the DHCP server. To resolve
                this issue you should set the switch port that connects to your baremetal nodes
                as an edge or PortFast type port. Configured in this way the switch port will
                move to forwarding mode as soon as the link is established. An example on how to
                do that for a Cisco Nexus switch is:</para>
            <screen language="bash">$ config terminal
$ (config) interface eth1/11
$ (config-if) spanning-tree port type edge</screen>
          </section>
        </section>
        <section xml:id="dashboard-integration">
          <title>Dashboard Integration</title>
          <para>A plugin for the OpenStack Dashboard (horizon) service is under development.
                Documentation for that can be found within the ironic-ui project.</para>
        </section>
    </chapter>
