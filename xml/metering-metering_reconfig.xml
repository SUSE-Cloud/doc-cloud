<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<!---->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="reconfig_metering">
 <title>Configure the Ceilometer Metering Service</title>
<!---->
 <para>
  &kw-hos-phrase; automatically deploys Ceilometer to use the Monasca database.
  Ceilometer is deployed on the same control plane nodes along with other
  OpenStack services such as Keystone, Nova, Neutron, Glance, and Swift.
 </para>
 <para>
  The Metering Service can be configured using one of the procedures described
  below.
 </para>
 <section xml:id="idg-all-metering-metering_reconfig-xml-7">
  <title>Run the Upgrade Playbook</title>
  <para>
   Follow Standard Service upgrade mechanism available in the &clm;
   distribution. For Ceilometer, the playbook included with &kw-hos; is
   <emphasis role="bold">ceilometer-upgrade.yml</emphasis>
  </para>
 </section>
 <section xml:id="apache">
  <title>Configure Apache2 for the Ceilometer API</title>
  <para>
   Reporting APIs provide access to the metering data stored in Ceilometer.
   These APIs are accessed by Horizon to provide basic usage data and
   information.&kw-hos; uses Apache2 Web Server to provide the API access.
  </para>
  <important>
   <para>
    To improve API responsiveness you can increase the number of threads and
    processes in the Ceilometer configuration file. The Ceilometer API runs as
    an WSGI processes. Each process can have a certain amount of threads
    managing the filters and applications, which can comprise the processing
    pipeline.
   </para>
  </important>
  <para>
   To configure Apache:
  </para>
  <orderedlist>
   <listitem>
    <para>
     Edit the Ceilometer configuration files.
    </para>
   </listitem>
   <listitem>
    <para>
     Reload and verify Apache2.
    </para>
   </listitem>
  </orderedlist>
  <para>
   <emphasis role="bold">Edit the Ceilometer Configuration Files</emphasis>
  </para>
  <para>
   To create a working file for Ceilometer with the correct settings:
  </para>
  <orderedlist>
   <listitem>
    <para>
     To add the configuration file to the correct folder, copy the following
     file:
    </para>
<screen>ceilometer.conf</screen>
    <para>
     to the following directory:
    </para>
<screen>/etc/apache2/vhosts.d/</screen>
   </listitem>
   <listitem>
    <para>
     To verify the settings, in a text editor, open the
     <literal>ceilometer_modwsgi.vhost</literal> file.
    </para>
   </listitem>
   <listitem>
    <para>
     The ceilometer_modwsgi.conf file should have the following data. If it does not
     exist, add it to the file.
    </para>
<screen>Listen &lt;ipaddress&gt;:8777
&lt;VirtualHost *:8777&gt;
  WSGIScriptAlias / /srv/www/ceilometer/ceilometer-api
  WSGIDaemonProcess ceilometer user=ceilometer group=ceilometer processes=4 threads=5 socket-timeout=600 python-path=/opt/stack/service/ceilometer-api/venv:/opt/stack/service/ceilometer-api/venv/lib/python2.7/site-packages/ display-name=ceilometer-api
  WSGIApplicationGroup %{GLOBAL}
  WSGIProcessGroup ceilometer

  ErrorLog /var/log/ceilometer/ceilometer_modwsgi.log
  LogLevel INFO
  CustomLog /var/log/ceilometer/ceilometer_access.log combined

  &lt;Directory /opt/stack/service/ceilometer-api/venv/lib/python2.7/site-packages/ceilometer&gt;
    Options Indexes FollowSymLinks MultiViews
    Require all granted
    AllowOverride None
    Order allow,deny
    allow from all
    LimitRequestBody 102400
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;</screen>
    <note>
     <para>
      The WSGIDaemon Recommended Settings are to use four processes running in
      parallel:
     </para>
     <screen>processes=4</screen>
     <para>
      Five threads for each process is also recommended:
     </para>
     <screen>threads=5</screen>
    </note>
   </listitem>
   <listitem>
    <para>
     To add a softlink for the ceilometer.conf, run:
    </para>
<screen>&prompt.sudo;ln -s /etc/apache2/vhosts.d/ceilometer_modwsgi.vhost /etc/apache2/vhosts.d/ceilometer_modwsgi.conf</screen>
   </listitem>
  </orderedlist>
  <para>
   <emphasis role="bold">Reload and Verify Apache2</emphasis>
  </para>
  <para>
   For the changes to take effect, the Apache2 service needs to be reloaded.
   This ensures that all the configuration changes are saved and the service
   has applied them. The system administrator can change the configuration of
   processes and threads and experiment if alternative settings are necessary.
  </para>
  <para>
   Once the Apache2 service has been reloaded you can verify that the
   Ceilometer APIs are running and able to receive incoming traffic. The
   Ceilometer APIs are listening on port 8777.
  </para>
  <para>
   To reload and verify the Apache2 service:
  </para>
  <orderedlist>
   <listitem>
    <para>
     To reload Apache2, run:
    </para>
<screen>&prompt.sudo;systemctl reload apache2.service</screen>
   </listitem>
   <listitem>
    <para>
     To verify the service is running, run:
    </para>
<screen>&prompt.sudo;systemctl status apache2.service</screen>
    <important>
     <para>
      In a working environment, the list of entries in the output should match
      the number of processes in the configuration file. In the example
      configuration file, the recommended number of 4 is used, and the number
      of Running Instances is also 4.
     </para>
    </important>
   </listitem>
  </orderedlist>
  <para>
   You can also verify that Apache2 is accepting incoming traffic using the
   following procedure:
  </para>
  <orderedlist>
   <listitem>
    <para>
     To verify traffic on port 8777, run:
    </para>
<screen>&prompt.sudo;netstat -tulpn | grep 8777</screen>
   </listitem>
   <listitem>
    <para>
     Verify your output is similar to the following example:
    </para>
<screen>tcp6 0 0 :::8777 :::* LISTEN 8959/apache2</screen>
   </listitem>
  </orderedlist>
  <important>
   <para>
    If Ceilometer fails to deploy:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      check the proxy setting
     </para>
    </listitem>
    <listitem>
     <para>
      unset the https_proxy, for example:
     </para>
<screen>unset http_proxy HTTP_PROXY HTTPS_PROXY</screen>
    </listitem>
   </itemizedlist>
  </important>
 </section>
 <section xml:id="metering_services">
  <title>Enable Services for Messaging Notifications</title>
  <para>
   After installation of &productname;, the following services are enabled
   by default to send notifications:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Nova
    </para>
   </listitem>
   <listitem>
    <para>
     Cinder
    </para>
   </listitem>
   <listitem>
    <para>
     Glance
    </para>
   </listitem>
   <listitem>
    <para>
     Neutron
    </para>
   </listitem>
   <listitem>
    <para>
     Swift
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The list of meters for these services are specified in the Notification
   Agent or Polling Agent's pipeline configuration file.
  </para>
  <para>
   For steps on how to edit the pipeline configuration files, see:
   <xref linkend="notifications"/>
  </para>
 </section>
 <section xml:id="Ceilo_StopStart">
  <title>Restart the Polling Agent</title>
  <para>
   The Polling Agent is responsible for coordinating the polling activity. It
   parses the <emphasis role="bold">pipeline.yml</emphasis> configuration file
   and identifies all the sources where data is collected. The sources are then
   evaluated and are translated to resources that a dedicated pollster can
   retrieve. The Polling Agent follows this process:
  </para>
  <orderedlist>
   <listitem>
    <para>
     At each identified interval, the
     <emphasis role="bold">pipeline.yml</emphasis> configuration file is
     parsed.
    </para>
   </listitem>
   <listitem>
    <para>
     The resource list is composed.
    </para>
   </listitem>
   <listitem>
    <para>
     The pollster collects the data.
    </para>
   </listitem>
   <listitem>
    <para>
     The pollster sends data to the queue.
    </para>
   </listitem>
  </orderedlist>
  <para>
   Metering processes should normally be operating at all times. This need is
   addressed by the Upstart event engine which is designed to run on any Linux
   system. Upstart creates events, handles the consequences of those events,
   and starts and stops processes as required. Upstart will continually attempt
   to restart stopped processes even if the process was stopped manually. To
   stop or start the Polling Agent and avoid the conflict with Upstart, using
   the following steps.
  </para>
  <para>
   <emphasis role="bold">To restart the Polling Agent:</emphasis>
  </para>
  <procedure>
   <step>
    <para>
     To determine whether the process is running, run:
    </para>
<screen>&prompt.sudo;systemctl status ceilometer-agent-notification
#SAMPLE OUTPUT:
ceilometer-agent-notification.service - ceilometer-agent-notification Service
   Loaded: loaded (/etc/systemd/system/ceilometer-agent-notification.service; enabled; vendor preset: disabled)
   Active: active (running) since Tue 2018-06-12 05:07:14 UTC; 2 days ago
 Main PID: 31529 (ceilometer-agen)
    Tasks: 69
   CGroup: /system.slice/ceilometer-agent-notification.service
           ├─31529 ceilometer-agent-notification: master process [/opt/stack/service/ceilometer-agent-notification/venv/bin/ceilometer-agent-notification --config-file /opt/stack/service/ceilometer-agent-noti...
           └─31621 ceilometer-agent-notification: NotificationService worker(0)

Jun 12 05:07:14 ardana-qe201-cp1-c1-m2-mgmt systemd[1]: Started ceilometer-agent-notification Service.
</screen>
   </step>
   <step>
    <para>
     To stop the process, run:
    </para>
<screen>&prompt.sudo;systemctl stop ceilometer-agent-notification</screen>
   </step>
   <step>
    <para>
     To start the process, run:
    </para>
<screen>&prompt.sudo;systemctl start ceilometer-agent-notification</screen>
   </step>
  </procedure>
 </section>
 <section xml:id="ceilo_replace_cntrler">
  <title>Replace a Logging, Monitoring, and Metering Controller</title>
  <para>
   In a medium-scale environment, if a metering controller has to be replaced
   or rebuilt, use the following steps:
  </para>
  <procedure>
   <step>
    <para>
     <xref linkend="replacing_controller"/>.
    </para>
   </step>
   <step>
    <para>
     If the Ceilometer nodes are not on the shared control plane, to implement
     the changes and replace the controller, you must reconfigure Ceilometer.
     To do this, run the ceilometer-reconfigure.yml ansible playbook
     <emphasis role="bold">without</emphasis> the limit option
    </para>
   </step>
  </procedure>
 </section>
 <section xml:id="ceilo_monitoring">
  <title>Configure Monitoring</title>
  <para>
   The Monasca HTTP Process monitors the Ceilometer API service. Ceilometer's
   notification and polling agents are also monitored. If these agents are
   down, Monasca monitoring alarms are triggered. You can use the notification
   alarms to debug the issue and restart the notifications agent. However, for
   Central-Agent (polling) and Collector the alarms need to be deleted. These
   two processes are not started after an upgrade so when the monitoring
   process checks the alarms for these components, they will be in UNDETERMINED
   state. &productname; does not monitor these processes anymore so the best option to
   resolve this issue is to manually delete alarms that are no longer used but
   are installed.
  </para>
  <para>
   To resolve notification alarms, first check the
   <emphasis role="bold">ceilometer-agent-notification</emphasis> logs for
   errors in the <emphasis role="bold">/var/log/ceilometer</emphasis>
   directory. You can also use the &opscon; to access Kibana and
   check the logs. This will help you understand and debug the error.
  </para>
  <para>
   To restart the service, run the
   <emphasis role="bold">ceilometer-start.yml</emphasis>. This playbook starts
   the ceilometer processes that has stopped and only restarts during install,
   upgrade or reconfigure which is what is needed in this case. Restarting the
   process that has stopped will resolve this alarm because this Monasca alarm
   means that ceilometer-agent-notification is no longer running on certain
   nodes.
  </para>
  <para>
   You can access Ceilometer data through Monasca. Ceilometer publishes samples
   to Monasca with credentials of the following accounts:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <emphasis role="bold">ceilometer</emphasis> user
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">services</emphasis>
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Data collected by Ceilometer can also be retrieved by the Monasca REST API.
   Make sure you use the following guidelines when requesting data from the
   Monasca REST API:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Verify you have the monasca-admin role. This role is configured in the
     monasca-api configuration file.
    </para>
   </listitem>
   <listitem>
    <para>
     Specify the <literal>tenant id</literal> of the
     <emphasis role="bold">services</emphasis> project.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   For more details, read the
   <link xlink:href="https://github.com/openstack/monasca-api/blob/master/docs/monasca-api-spec.md">Monasca
   API Specification</link>.
  </para>
  <para>
   To run Monasca commands at the command line, you must be have the
   <emphasis role="bold">admin</emphasis> role. This allows you to use the
   Ceilometer account credentials to replace the default admin account
   credentials defined in the <emphasis role="bold">service.osrc</emphasis>
   file. When you use the Ceilometer account credentials, Monasca commands will
   only return data collected by Ceilometer. At this time, Monasca command line
   interface (CLI) does not support the data retrieval of other tenants or
   projects.
  </para>
 </section>
</section>
