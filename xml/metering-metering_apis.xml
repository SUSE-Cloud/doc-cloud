<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="topic_icq_hvc_5t">
 <title>Metering API Reference</title>
 <para>
  Ceilometer uses a polling agent to communicate with an API to collect
  information at a regular interval, as shown in the diagram below.
 </para>
 <informalfigure>
  <mediaobject>
   <imageobject role="fo">
    <imagedata fileref="media-metering-Ceilo_API_Polling.png" width="75%"/>
   </imageobject>
   <imageobject role="html">
    <imagedata fileref="media-metering-Ceilo_API_Polling.png"/>
   </imageobject>
  </mediaobject>
 </informalfigure>
 <para>
  Ceilometer query APIs can put a significant load on the database leading to
  unexpected results or failures. Therefore it is important to understand how
  the Ceilometer API works and how to change the configuration to protect
  against failures.
 </para>
 <section xml:id="API_changes">
  <title>Ceilometer API Changes</title>
  <para>
   The following changes have been made in the latest release of Ceilometer for
   &productname;:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <emphasis role="bold">Ceilometer API</emphasis> supports a default of 100
     queries. This limit is configurable in the ceilometer.conf configuration
     file. The option is in the <literal>DEFAULT</literal> section and is named
     <literal>default_api_return_limit</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Flexible configuration for pollster and notifications has been added.
     Ceilometer can now list different event types differently for these
     services.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Query-sample API</emphasis> is now supported in
     &productname;.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Meter-list API</emphasis> can now return a unique
     list of meter names with no duplicates. To create this list, when running
     the list command, use the <literal>--unique</literal> option.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The following limitations exist in the latest release of Ceilometer for
   &productname;:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <emphasis role="bold">Event API</emphasis> is disabled by default and is
     unsupported in &productname;.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Trait API</emphasis> is disabled by default and is
     unsupported in &productname;.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Post Sample API</emphasis> is disabled by default
     and is unsupported in &productname;.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Alarm API</emphasis> is disabled by default and is
     unsupported in &productname;.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Sample-Show API</emphasis> is unsupported in
     &productname;.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Meter-List API</emphasis> does not support filtering
     with metadata.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Query-Sample API</emphasis> (Complex query) does not
     support using the following operators in the same query:
    </para>
<screen>order by argument
NOT</screen>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Query-Sample API</emphasis> requires you to specify
     a meter name. Complex queries will be analyzed as several simple queries
     according to the AND/OR logic. As meter-list is a constraint, each simple
     query must specify a meter name. If this condition is not met, you will
     receive a detailed 400 error.
    </para>
   </listitem>
   <listitem>
    <para>
     Due to a Monasca API limitation, microsecond is no longer supported. In
     the <emphasis role="bold">Resource-List API</emphasis>,
     <emphasis role="bold">Sample-List API</emphasis>,
     <emphasis role="bold">Statistics API</emphasis> and
     <emphasis role="bold">Query-Samples API</emphasis>, the
     <literal>timestamp</literal> field now only supports measuring down to the
     millisecond.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Sample-List API</emphasis> does not support
     <literal>message_id</literal> as a valid search parameter. This parameter
     is also not included in the output.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Sample-List API</emphasis> now requires the meter
     name as a positional parameter.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Sample-List API</emphasis> returns a sample with an
     empty <literal>message_signature</literal> field.
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section xml:id="disabled">
  <title>Disabled APIs</title>
  <para>
   The following Ceilometer metering APIs are disabled in this release:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Event API
    </para>
   </listitem>
   <listitem>
    <para>
     Trait API
    </para>
   </listitem>
   <listitem>
    <para>
     Ceilometer Alarms API
    </para>
   </listitem>
   <listitem>
    <para>
     Post Samples API
    </para>
   </listitem>
  </itemizedlist>
  <para>
   These APIs are disabled through a custom rule called
   <literal>hp_disabled_rule:not_implemented</literal>. This rule is added to
   each disabled API in Ceilometer's policy.json file
   <emphasis role="bold">/etc/ceilometer/policy.json</emphasis> on controller
   nodes. Attempts to access any of the disabled APIs will result in an HTTP
   response 501 Not Implemented.
  </para>
  <para>
   To manually enable any of the APIs, remove the corresponding rule and
   restart Apache
  </para>
<screen>{
	"context_is_admin": "role:admin",
	"context_is_project": "project_id:%(target.project_id)s",
	"context_is_owner": "user_id:%(target.user_id)s",
	"segregation": "rule:context_is_admin",

	"telemetry:create_samples": "hp_disabled_rule:not_implemented",

	"telemetry:get_alarm": "hp_disabled_rule:not_implemented",
	"telemetry:change_alarm": "hp_disabled_rule:not_implemented",
	"telemetry:delete_alarm": "hp_disabled_rule:not_implemented",
	"telemetry:alarm_history": "hp_disabled_rule:not_implemented",
	"telemetry:change_alarm_state": "hp_disabled_rule:not_implemented",
	"telemetry:get_alarm_state": "hp_disabled_rule:not_implemented",
	"telemetry:create_alarm": "hp_disabled_rule:not_implemented",
	"telemetry:get_alarms": "hp_disabled_rule:not_implemented",
	"telemetry:query_sample":"hp_disabled_rule:not_implemented",
	"default": ""
}</screen>
  <para>
   The following Alarm APIs are disabled
  </para>
  <itemizedlist>
   <listitem>
    <para>
     POST /v2/alarms
    </para>
   </listitem>
   <listitem>
    <para>
     GET /v2/alarms
    </para>
   </listitem>
   <listitem>
    <para>
     GET /v2/alarms/(alarm_id)
    </para>
   </listitem>
   <listitem>
    <para>
     PUT /v2/alarms/(alarm_id)
    </para>
   </listitem>
   <listitem>
    <para>
     DELETE /v2/alarms/(alarm_id)
    </para>
   </listitem>
   <listitem>
    <para>
     GET /v2/alarms/(alarm_id)/history
    </para>
   </listitem>
   <listitem>
    <para>
     PUT /v2/alarms/(alarm_id)/state
    </para>
   </listitem>
   <listitem>
    <para>
     GET /v2/alarms/(alarm_id)/state
    </para>
   </listitem>
   <listitem>
    <para>
     POST /v2/query/alarms
    </para>
   </listitem>
   <listitem>
    <para>
     POST /v2/query/alarms/history
    </para>
   </listitem>
  </itemizedlist>
  <para>
   In addition, these APIs are disabled:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Post Samples API: POST /v2/meters/(meter_name)
    </para>
   </listitem>
   <listitem>
    <para>
     Query Sample API: POST /v2/query/samples
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section xml:id="improve_reporting">
  <title>Improving Reporting API Responsiveness</title>
  <para>
   Reporting APIs are the main access to the Metering data stored in
   Ceilometer. These APIs are accessed by Horizon to provide basic usage data
   and information. However, Horizon Resources Usage Overview / Stats panel
   shows usage metrics with the following limitations:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     No metric option is available until you actually create a resource (such
     as an instance, Swift container, etc).
    </para>
   </listitem>
   <listitem>
    <para>
     Only specific meters are displayed for a selection after resources have
     been created. For example, only the Cinder volume and volume.size meters
     are displayed if only a Cinder volume has been created (for example, if no
     compute instance or Swift containers were created yet)
    </para>
   </listitem>
   <listitem>
    <para>
     Only the top 20 meters associated with the sample query results are
     displayed.
    </para>
   </listitem>
   <listitem>
    <para>
     Period duration selection should be much less than the default retention
     period (currently 7 days), to get statistics for multiple groups.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   &kw-hos; uses the Apache2 Web Server to provide API access. It is possible
   to tune performance to optimize the front end as well as the back-end
   database. Experience indicates that an excessive increase of concurrent
   access to the front-end tends to put a strain in the database.
  </para>
 </section>
 <section xml:id="ceilo_ap_remove">
  <title>Reconfiguring Apache2, Horizon and Keystone</title>
  <para>
   The ceilometer-api is now running as part of the Apache2 service together
   with Horizon and Keystone. To remove them from the active list so that
   changes can be made and then re-instate them, use the following commands.
  </para>
  <orderedlist>
   <listitem>
    <para>
     Disable the Ceilometer API on the active sites.
    </para>
<screen>&prompt.sudo;rm /etc/apache2/vhosts.d/ceilometer_modwsgi.conf</screen>
<screen>&prompt.sudo;systemctl reload apache2.service</screen>
   </listitem>
   <listitem>
    <para>
     Perform all necessary changes. The Ceilometer API will not be served until
     it is re-enabled.
    </para>
   </listitem>
   <listitem>
    <para>
     Re-enable the Ceilometer API on the active sites.
    </para>
<screen>&prompt.sudo;ln -s  /etc/apache2/vhosts.d/ceilometer_modwsgi.vhost /etc/apache2/vhosts.d/ceilometer_modwsgi.conf</screen>
<screen>&prompt.sudo;systemctl reload apache2.service</screen>
   </listitem>
   <listitem>
    <para>
     The new changes need to be picked up by Apache2. If possible, force a
     reload rather than a restart. Unlike a restart, the reload waits for
     currently active sessions to gracefully terminate or complete.
    </para>
<screen>&prompt.sudo;systemctl reload apache2.service</screen>
   </listitem>
  </orderedlist>
 </section>
 <section xml:id="data_access">
  <title>Data Access API</title>
  <para>
   Ceilometer provides a complete API for data access only and not for data
   visualization or aggregation. These functions are provided by external,
   downstream applications that support various use cases like usage billing
   and software license policy adherence.
  </para>
  <para>
   Each application calls the specific Ceilometer API needed for their use
   case. The resulting data is then aggregated and visualized based on the
   unique functions provided by each application.
  </para>
  <para>
   For more information, see the OpenStack Developer documentation for
   <link xlink:href="http://docs.openstack.org/developer/ceilometer/webapi/v2.html">V2
   Web API</link>.
  </para>
 </section>
 <section xml:id="pipeline">
  <title>Post Samples API</title>
  <para>
   The Post Sample API is disabled by default in &kw-hos-phrase; and it
   requires a separate pipeline.yml for Ceilometer. This is because it uses a
   pipeline configuration different than the agents. Also by default, the API
   pipeline has no meters enabled. When the Post Samples API is enabled, you
   need to configure the meters.
  </para>
  <important>
   <para>
    Use caution when adding meters to the API pipeline. Ensure that only meters
    already present in the notification agent and the polling agent pipeline
    are added to the Post Sample API pipeline.
   </para>
  </important>
  <para>
   The Ceilometer API pipeline configuration file is located in the following
   directory:
  </para>
<screen>/opt/stack/service/ceilometer-api/etc/pipeline-api.yml  </screen>
  <para>
   Sample API pipeline file:
  </para>
<screen>---
sources:
    - name: meter_source
      interval: 30
      meters:
          - "instance"
          - "ip.floating"
          - "network"
          - "network.create"
          - "network.update"
      sinks:
          - meter_sink
    - name: image_source
      interval: 30
      meters:
          - "image"
          - "image.size"
          - "image.upload"
          - "image.delete"
      sinks:
          - meter_sink
    - name: volume_source
      interval: 30
      meters:
          - "volume"
          - "volume.size"
          - "snapshot"
          - "snapshot.size"
      sinks:
          - meter_sink
    - name: swift_source
      interval: 3600
      meters:
          - "storage.objects"
          - "storage.objects.size"
          - "storage.objects.containers"
      sinks:
          - meter_sink
sinks:
    - name: meter_sink
      transformers:
      publishers:
         - notifier://</screen>
 </section>
 <section xml:id="resource">
  <title>Resource API</title>
  <para>
   The Ceilometer Resource API provides a list of resources associated with
   meters that Ceilometer polls. By default, all meter links are generated for
   each resource.
  </para>
  <important>
   <para>
    Be aware that this functionality has a high cost. For a large deployment,
    in order to reduce the response time, it is recommended that you do not
    return meter links. You can disable links in the output using the following
    filter in your query: (for the REST API only)
   </para>
<screen>meter_links=0</screen>
  </important>
  <para>
   The <literal>resource-list</literal> (/v2/resources) API can be filtered by
   the following parameters:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     project_id
    </para>
   </listitem>
   <listitem>
    <para>
     user_id
    </para>
   </listitem>
   <listitem>
    <para>
     source
    </para>
   </listitem>
   <listitem>
    <para>
     resource_id
    </para>
   </listitem>
   <listitem>
    <para>
     timestamp
    </para>
   </listitem>
   <listitem>
    <para>
     metadata
    </para>
   </listitem>
  </itemizedlist>
  <important>
   <para>
    It is highly recommended that you use one or both of the following query
    filters to get a quick response in a scaled deployment:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      project_id
     </para>
    </listitem>
    <listitem>
     <para>
      timestamp
     </para>
    </listitem>
   </itemizedlist>
  </important>
  <para>
   <emphasis role="bold">Example Query:</emphasis>
  </para>
<screen>&prompt.ardana;ceilometer resource-list -q "project_id=7aa0fe3f02ff4e11a70a41e97d0db5e3;timestamp&gt;=2015-10-22T15:44:00;timestamp&lt;=2015-10-23T15:44:00"</screen>
 </section>
 <section xml:id="sampleAPI">
  <title>Sample API</title>
  <para>
   Ceilometer Sample has two APIs:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     ceilometer sample-list(/v2/samples)
    </para>
   </listitem>
   <listitem>
    <para>
     ceilometer query-sample (/v2/query/samples)
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Sample-list API allows querying based on the following values:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     meter name
    </para>
   </listitem>
   <listitem>
    <para>
     user_id
    </para>
   </listitem>
   <listitem>
    <para>
     project_id
    </para>
   </listitem>
   <listitem>
    <para>
     sample source
    </para>
   </listitem>
   <listitem>
    <para>
     resource_id
    </para>
   </listitem>
   <listitem>
    <para>
     sample timestamp (range)
    </para>
   </listitem>
   <listitem>
    <para>
     sample message_id
    </para>
   </listitem>
   <listitem>
    <para>
     resource metadata attributes
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Sample-list API uses the AND operator implicitly. However, the query-sample
   API allows for finer control over the filter expression. This is because
   query-sample API allows the use of AND, OR, and NOT operators over any of
   the sample, meter or resource attributes.
  </para>
  <para>
   <emphasis role="bold">Limitations:</emphasis>
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Ceilometer query-sample API does not support the JOIN operator for
     stability of the system. This is due to the fact that query-sample API
     uses an anonymous/alias table to cache the JOIN query results and
     concurrent requests to this API. This can use up the disk space quickly
     and cause service interruptions.
    </para>
   </listitem>
   <listitem>
    <para>
     Ceilometer sample-list API uses the AND operator implicitly for all
     queries. However, sample-list API does allow you to query on resource
     metadata field of samples.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   <emphasis role="bold">Sample queries from the command line:</emphasis>
  </para>
<screen>&prompt.ardana;ceilometer sample-list -m METER_NAME -q '&lt;field1&gt;&lt;operator1&gt;&lt;value1&gt;;...;&lt;field_n&gt;&lt;operator_n&gt;&lt;value_n&gt;'</screen>
  <para>
   where operators can be:<emphasis role="bold"> &lt;, &lt;=, =, !=, &gt;=
   &gt;</emphasis>
  </para>
  <important>
   <para>
    All the key value pairs will be combined with the implicit AND operator.
   </para>
  </important>
  <para>
   <emphasis role="bold">Example usage for the sample-list API</emphasis>
  </para>
<screen>&prompt.ardana;ceilometer sample-list --meter image.serve -q 'resource_id=a1ec2585' </screen>
<screen>&prompt.ardana;ceilometer sample-list --meter instance -q 'resource_id=&lt;ResourceID&gt;;metadata.event_type=&lt;eventType&gt;'</screen>
 </section>
 <section xml:id="statAPI">
  <title>Statistics API</title>
  <para>
   Ceilometer Statistics is an open-ended query API that performs queries on
   the table of data collected from a meter. The Statistics API obtains the
   minimum and maximum timestamp for the meter that is being queried.
  </para>
  <para>
   The Statistics API also provides a set of statistical functions. These
   functions perform basic aggregation for meter-specific data over a period of
   time. Statistics API includes the following functions:
  </para>
  <variablelist>
   <varlistentry>
    <term>Count</term>
    <listitem>
     <para>
      the number of discrete samples collected in each period
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Maximum</term>
    <listitem>
     <para>
      the sample with the maximum value in a selected time period
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Minimum</term>
    <listitem>
     <para>
      the sample with the minimum value in a selected time period
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Average</term>
    <listitem>
     <para>
      the average value of a samples within a selected time period
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Sum</term>
    <listitem>
     <para>
      the total value of all samples within a selected time period added
      together
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <important>
   <para>
    The Statistics API can put a significant load on the database leading to
    unexpected results and or failures. Therefore, you should be careful about
    restricting your queries.
   </para>
  </important>
  <para>
   <emphasis role="bold">Limitations of
   <emphasis role="bold">Statistics-list</emphasis> API</emphasis>
  </para>
  <itemizedlist>
   <listitem>
    <para>
     filtering with metadata is not supported
    </para>
   </listitem>
   <listitem>
    <para>
     the <literal>groupby</literal> option is only supported with only one
     parameter. That single parameter has to be one of the following:
    </para>
<screen>user_id
project_id
resource_id
source</screen>
   </listitem>
   <listitem>
    <para>
     only the following are supported as aggregate functions:
     <emphasis role="bold">average</emphasis>,
     <emphasis role="bold">minimum</emphasis>,
     <emphasis role="bold">maximum</emphasis>,
     <emphasis role="bold">sum</emphasis>, and
     <emphasis role="bold">count</emphasis>
    </para>
   </listitem>
   <listitem>
    <para>
     when no time period is specified in the query, a default period of 300
     seconds is used to aggregate measurements (samples)
    </para>
   </listitem>
   <listitem>
    <para>
     the <emphasis role="bold">meter name</emphasis> is a required positional
     parameter
    </para>
   </listitem>
   <listitem>
    <para>
     when a closed time range is specified, results may contain an extra row
     with <emphasis role="bold">duration</emphasis>,
     <emphasis role="bold">duration start</emphasis>,
     <emphasis role="bold">duration end</emphasis> assigned with a value of
     <emphasis role="bold">None</emphasis>. This row has a start and end time
     period that fall outside the requested time range and can be ignored.
     Ceilometer does not remove this row because it is by design inside the
     back-end Monasca.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   <emphasis role="bold">Statistical Query Best Practices</emphasis>
  </para>
  <para>
   By default, the Statistics API will return a limited number of statistics.
   You can control the output using the <emphasis role="bold">period "."
   </emphasis> parameter.
  </para>
  <variablelist>
   <varlistentry>
    <term>Without a period parameter</term>
    <listitem>
     <para>
      only a few statistics: <emphasis role="bold">minimum</emphasis>,
      <emphasis role="bold">maximum</emphasis>,
      <emphasis role="bold">avgerage</emphasis> and
      <emphasis role="bold">sum</emphasis>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>With a period parameter "."</term>
    <listitem>
     <para>
      the range is divided into equal periods and Statistics API finds the
      <emphasis role="bold">count</emphasis>,
      <emphasis role="bold">minimum</emphasis>,
      <emphasis role="bold">maximum</emphasis>,
      <emphasis role="bold">average</emphasis>, and
      <emphasis role="bold">sum</emphasis> for each of the periods
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <important>
   <para>
    It is recommended that you provide a <literal>timestamp</literal> parameter
    with every query, regardless of whether a period paramter is used. For
    example:
   </para>
<screen>timestamp&gt;={$start-timestamp} and timestamp&lt;{$end-timestamp} </screen>
   <para>
    It is also recommended that you query a period of time that covers at most
    1 day (24 hours).
   </para>
  </important>
  <para>
   <emphasis role="bold">Examples</emphasis>
  </para>
  <variablelist>
   <varlistentry>
    <term>Without period parameter</term>
    <listitem>
<screen>&prompt.ardana;ceilometer statistics -q "timestamp&gt;=2014-12-11T00:00:10;timestamp&lt;2014-12-11T23:00:00" -m "instance"</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>With the period parameter "."</term>
    <listitem>
<screen>&prompt.ardana;ceilometer statistics -q "timestamp&gt;=2014-12-11T00:00:10;timestamp&lt;2014-12-11T23:00:00" -m "instance" -p 3600</screen>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   If the <emphasis role="bold">query</emphasis> and
   <emphasis role="bold">timestamp</emphasis> parameters are not provided, all
   records in the database will be queried. This is not recommended. Use the
   following recommended values for <emphasis role="bold">query (-q)</emphasis>
   parameter and <emphasis role="bold">period (-p)</emphasis> parameters:
  </para>
  <variablelist>
   <varlistentry>
    <term>-q</term>
    <listitem>
     <para>
      Always provide a <emphasis role="bold">timestamp</emphasis> range, with
      the following guidelines:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        recommended maximum time period to query is one day (24 hours)
       </para>
      </listitem>
      <listitem>
       <para>
        do not set the timestamp range to greater than a day
       </para>
      </listitem>
      <listitem>
       <para>
        it is better to provide no time stamp range than to set the time period
        for more than 1 day
       </para>
      </listitem>
      <listitem>
       <para>
        example of an acceptable range:
       </para>
<screen>-q "timestamp&gt;=2014-12-11T00:00:10;timestamp&lt;2014-12-11T23:00:00"</screen>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>-p</term>
    <listitem>
     <para>
      Provide a large number in seconds, with the following guidelines:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        recommended minimum value is 3600 or more (1 hour or more)
       </para>
      </listitem>
      <listitem>
       <para>
        providing a period of less than 3600 is not recommended
       </para>
      </listitem>
      <listitem>
       <para>
        Use this parameter to divide the overall time range into smaller
        intervals. A small period parameter value will translate into a very
        large number of queries against the database.
       </para>
      </listitem>
      <listitem>
       <para>
        Example of an acceptable range:
       </para>
<screen>-p 3600</screen>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>
</section>
