<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="swift_storage_policies" version="5.1">
 <title>Designing Storage Policies</title>
 <para>
  Storage policies enable you to differentiate the way objects are stored.
 </para>
 <para>
  Reasons to use storage policies include the following:
 </para>
 <itemizedlist xml:id="ul_q4t_cxd_jt">
  <listitem>
   <para>
    Different types or classes of disk drive
   </para>
   <para>
    You can use different drives to store various type of data. For example,
    you can use 7.5K RPM high-capacity drives for one type of data and fast SSD
    drives for another type of data.
   </para>
  </listitem>
  <listitem>
   <para>
    Different redundancy or availability needs
   </para>
   <para>
    You can define the redundancy and availability based on your requirement.
    You can use a replica count of 3 for "normal" data and a replica count of 4
    for "critical" data.
   </para>
  </listitem>
  <listitem>
   <para>
    Growing of cluster capacity
   </para>
   <para>
    If the storage cluster capacity grows beyond the recommended partition
    power as described in <xref linkend="ring-specification"/>.
   </para>
  </listitem>
  <listitem>
   <para>
    Erasure-coded storage and replicated storage
   </para>
   <para>
    If you use erasure-coded storage for some objects and replicated storage
    for other objects.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  Storage policies are implemented on a per-container basis. If you want a
  non-default storage policy to be used for a new container, you can explicitly
  specify the storage policy to use when you create the container. You can
  change which storage policy is the default. However, this does not affect
  existing containers. Once the storage policy of a container is set, the
  policy for that container cannot be changed.
 </para>
<!-- FIXME: Commented text in DITA original - sknorr, 2018-02-03 -->
<!--<para>Once you create and assign the storage policy to a container that remains intact, i.e., you cannot change the policy for that container but you can always create additional policies and move data from one container to another, if you choose to assign a different policy to a new container.</para>-->
 <para>
  The disk drives used by storage policies can overlap or be distinct. If the
  storage policies overlap (that is, have disks in common between two storage
  policies), it is recommended to use the same set of disk drives for both
  policies. But in the case where there is a partial overlap in disk drives,
  because one storage policy receives many objects, the drives that are common
  to both policies must store more objects than drives that are only allocated
  to one storage policy. This can be appropriate for a situation where the
  overlapped disk drives are larger than the non-overlapped drives.
<!--However, in general this situation is harder to balance then a simple topology.-->
 </para>
 <section>
  <title>Specifying Storage Policies</title>
  <para>
   There are two places where storage policies are specified in the input
   model:
  </para>
  <itemizedlist xml:id="ul_psf_lg2_jt">
   <listitem>
    <para>
     The attribute of the storage policy is specified in ring-specification in
     the <literal>data/swift/rings.yml</literal> file.
    </para>
   </listitem>
   <listitem>
    <para>
     When associating disk drives with specific rings in a disk model. This
     specifies which drives and nodes use the storage policy. In other word
     words, where data associated with a storage policy is stored.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   A storage policy is specified similar to other rings. However, the following
   features are unique to storage policies:
  </para>
  <itemizedlist xml:id="ul_k3j_ng2_jt">
   <listitem>
    <para>
     Storage policies are applicable to object rings only. The account or
     container rings cannot have storage policies.
    </para>
   </listitem>
   <listitem>
    <para>
     There is a format for the ring name:
     object-<replaceable>index</replaceable>, where index is a number in the
     range 0 to 9 (in this release). For example: object-0.
    </para>
   </listitem>
   <listitem>
    <para>
     The object-0 ring must always be specified.
    </para>
   </listitem>
   <listitem>
    <para>
     Once a storage policy is deployed, it should never be deleted. You can
     remove all disk drives for the storage policy, however the ring
     specification itself cannot be deleted.
    </para>
   </listitem>
   <listitem>
    <para>
     You can use the <literal>display-name</literal> attribute when creating a
     container to indicate which storage policy you want to use for that
     container.
    </para>
   </listitem>
   <listitem>
    <para>
     One of the storage policies can be the default policy. If you do not
     specify the storage policy then the object created in new container uses
     the default storage policy.
    </para>
   </listitem>
   <listitem>
    <para>
     If you change the default, only containers created later will have that
     changed default policy.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The following example shows three storage policies in use. Note that the
   third storage policy example is an erasure coded ring.
  </para>
<screen>rings:
. . .
- name: object-0
  display-name: General
  default: no
  min-part-hours: 16
  partition-power: 12
  replication-policy:
      replica-count: 3
- name: object-1
  display-name: Data
  default: yes
  min-part-hours: 16
  partition-power: 20
  replication-policy:
      replica-count: 3
- name: object-2
  display-name: Archive
  default: no
  min-part-hours: 16
  partition-power: 20
  erasure-coded-policy:
    ec-type: jerasure_rs_vand
    ec-num-data-fragments: 10
    ec-num-parity-fragments: 4
    ec-object-segment-size: 1048576</screen>
 </section>
</section>
