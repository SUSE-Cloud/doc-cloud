<?xml version="1.0"?>
<!DOCTYPE chapter [
 <!ENTITY % entities SYSTEM "entity-decl.ent"> %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="example_configurations" version="5.1">
 <title>Example Configurations</title>
 <para>
  The &product; system ships with a collection of pre-qualified example
  configurations. These are designed to help you to get up and running quickly
  with a minimum number of configuration changes.
 </para>
 <para>
  The &productname; input model allows a wide variety of configuration parameters
  that can, at first glance, appear daunting. The example configurations are
  designed to simplify this process by providing pre-built and pre-qualified
  examples that need only a minimum number of modifications to get started.
 </para>
 <section xml:id="example_configs">
  <title>&productname; Example Configurations</title>
  <para>
   This section briefly describes the various example configurations and their
   capabilities. It also describes in detail, for the entry-scale-kvm
   example, how you can adapt the input model to work in your environment.
  </para>
  <para>
   The following pre-qualified examples are shipped with &product;:
  </para>
  <xi:include xpointer="element(/1/2)" href="planning+installation-example_config_xpointer.xml"/>
  <para>
   The entry-scale systems are designed to provide an entry-level solution that
   can be scaled from a small number of nodes to a moderately high node count
   (approximately 100 compute nodes, for example).
  </para>
  <para>
   In the mid-scale model, the cloud control plane is subdivided into a number
   of dedicated service clusters to provide more processing power for
   individual control plane elements. This enables a greater number of
   resources to be supported (compute nodes, Swift object servers). This model
   also shows how a segmented network can be expressed in the &productname; model.
  </para>
 </section>
 <section xml:id="alternative">
  <title>Alternative Configurations</title>
  <para>
   In &product; there are alternative configurations that we recommend
   for specific purposes and this section we will outline them.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <xref linkend="standalone_deployer"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="without_dvr"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="without_l3agent"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="twosystems"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The &o_iron; multi-tenancy feature uses &o_netw; to manage the tenant
   networks. The interaction between &o_netw; and the physical switch is
   facilitated by &o_netw;'s Modular Layer 2 (ML2) plugin. The &o_netw; ML2
   plugin supports drivers to interact with various networks, as each vendor
   may have their own extensions. Those drivers are referred to as <emphasis>&o_netw; ML2
   mechanism drivers</emphasis>, or simply <emphasis>mechanism drivers</emphasis>.
  </para>
  <para>
   The &o_iron; multi-tenancy feature has been validated using &ostack;
   genericswitch mechanism driver. However, if the given physical switch
   requires a different mechanism driver, you must update the input model
   accordingly. To update the input model with a custom ML2 mechanism driver,
   specify the relevant information in the
   <literal>multi_tenancy_switch_config:</literal> section of the
   <filename>data/ironic/ironic_config.yml</filename> file.
  </para>
 </section>
 <xi:include href="planning-architecture-examples-kvm_examples.xml"/>
 <xi:include href="planning-architecture-examples-esx_examples.xml"/>
 <xi:include href="planning-architecture-examples-swift_examples.xml"/>
 <xi:include href="planning-architecture-examples-ironic_examples.xml"/>
</chapter>
