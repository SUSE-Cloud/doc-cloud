<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="troubleshootng_tls">
 <title>Troubleshooting TLS</title>
 <section>
  <title>Troubleshooting TLS certificate errors when running playbooks with a limit</title>
  <para>
   Has the deployer been restarted after the original site installation or is
   this a new deployer? If so, TLS certificates need to be bootstrapped before
   a playbook is run with limits. You can do this by running the following
   command.
  </para>
<screen>
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts tls-reconfigure.yml --limit TLS-CA
</screen>
 </section>
 <section>
  <title>Certificate Update Failure</title>
  <para>
   In general, if a certificate update fails, it is because of the following:
   Haproxy hasn't restarted or the Trust chain is not installed. This is the
   certificate of the CA that signed the server certificate.
  </para>
 </section>
 <section>
  <title>Troubleshooting trust chain installation</title>
  <para>
   &kw-hos-phrase;
  </para>
 </section>
 <section>
  <title><!-- FIXME: no title?? --></title>
  <para>
   However, this does't apply to certificates. There is a certificate-related
   issue whereby haproxy is not restarted if certificate content has been
   changed but the certificate file name remained the same. If you are having
   issues and you have replaced the content of existing CA file with new
   content, create another CA file with a new name. Also make sure the CA file
   has a .crt extension.
  </para>
  <para>
   Do not update both certificate and the CA together. Add the CA first and
   then run a site deploy. Then update the certificate and run tls-reconfigure,
   FND-CLU-stop, FND-CLU-start and then hlm-reconfigure. If you know which
   playbook failed, rerun it with -vv to get detaled error information. The
   configure, HAproxy restart, and reconfigure steps are included in
   <!-- FIXME: <xref linkend="tlsConfig"/> -->.
  </para>
 </section>
 <section>
  <title><!-- FIXME: no title?? --></title>
  <para>
   You can run the following commands to see if client libraries see the CA
   you've added:
  </para>
<screen>~/scratch/ansible/next/hos/ansible$ ansible -i hosts/verb_hosts FND-STN -a 'sudo keytool -list -alias \
    debian:username-internal-cacert-001.pem -keystore /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/security/cacerts -storepass changeit'
  padawan-ccp-c0-m1-mgmt | FAILED | rc=1 &gt;&gt;
  sudo: keytool: command not found

  padawan-ccp-comp0001-mgmt | FAILED | rc=1 &gt;&gt;
  sudo: keytool: command not found

  padawan-ccp-comp0003-mgmt | FAILED | rc=1 &gt;&gt;
  sudo: keytool: command not found

  padawan-ccp-comp0002-mgmt | FAILED | rc=1 &gt;&gt;
  sudo: keytool: command not found

  padawan-ccp-c1-m1-mgmt | success | rc=0 &gt;&gt;
  debian:username-internal-cacert-001.pem, May 9, 2016, trustedCertEntry,
  Certificate fingerprint (SHA1): E7:B2:6E:9E:00:FB:86:0F:E5:46:CD:B8:C5:67:13:53:4E:3D:8F:43

  padawan-ccp-c1-m2-mgmt | success | rc=0 &gt;&gt;
  debian:username-internal-cacert-001.pem, May 9, 2016, trustedCertEntry,
  Certificate fingerprint (SHA1): E7:B2:6E:9E:00:FB:86:0F:E5:46:CD:B8:C5:67:13:53:4E:3D:8F:43

  padawan-ccp-c1-m3-mgmt | success | rc=0 &gt;&gt;
  debian:username-internal-cacert-001.pem, May 9, 2016, trustedCertEntry,
  Certificate fingerprint (SHA1): E7:B2:6E:9E:00:FB:86:0F:E5:46:CD:B8:C5:67:13:53:4E:3D:8F:43</screen>
  <para>
   Java client libraries are used by Monasca, so compute nodes will not have
   them. So the first three errors are expected. Check that the fingerprint is
   correct by checking the CA:
  </para>
<screen>~/scratch/d002-certs/t002$ openssl x509 -in example-CA.crt -noout -fingerprint
  SHA1 Fingerprint=E7:B2:6E:9E:00:FB:86:0F:E5:46:CD:B8:C5:67:13:53:4E:3D:8F:43</screen>
  <para>
   If they don't match there likely was a name collision. Add the CA cert again
   with a new file name. If you get Monasca errors but find that the
   fingerprints match, then try stopping and starting Monasca.
  </para>
<screen>ansible-playbook -i hosts/verb_hosts monasca-stop.yml
ansible-playbook -i hosts/verb_hosts monasca-start.yml</screen>
 </section>
 <section>
  <title>Troubleshooting certificates</title>
  <para>
   Certificates can fail in &kw-hos-phrase; due to the following.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Trust chain issue. This is dealt with in the previous section
    </para>
   </listitem>
   <listitem>
    <para>
     Wrong certificate: Compare the fingerprints. If they differ, then you have
     a wrong certificate somewhere.
    </para>
   </listitem>
   <listitem>
    <para>
     Date range of the certificate is either in the future or expired: Check
     the dates and change certificates as necessary, observing the naming
     cautions above.
    </para>
   </listitem>
   <listitem>
    <para>
     TLS handshake fails because the client doesn't support the ciphers the
     server offers. It's possible that you reused a certificate created for a
     different network model. Make sure the request file found under
     info/cert_req/ are used to create the certificate. If not, the service VIP
     names may not match.
    </para>
   </listitem>
  </itemizedlist>
 </section>
</section>
