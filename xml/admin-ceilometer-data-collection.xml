<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1" xml:id="telemetry-data-collection">
  <title>Data collection</title>
  <para>The main responsibility of Telemetry in OpenStack is to collect
            information about the system that can be used by billing systems or
            interpreted by analytic tooling.</para>
  <para>Collected data can be stored in the form of samples or events in the
            supported databases, which are listed
            in <xref linkend="telemetry-supported-databases"/>.</para>
  <para>The available data collection mechanisms are:</para>
  <variablelist>
    <varlistentry>
      <term>Notifications</term>
      <listitem>
        <para>Processing notifications from other OpenStack services, by consuming
                        messages from the configured message queue system.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Polling</term>
      <listitem>
        <para>Retrieve information directly from the hypervisor or from the host
                        machine using SNMP, or by using the APIs of other OpenStack
                        services.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>RESTful API (deprecated in Ocata)</term>
      <listitem>
        <para>Pushing samples via the RESTful API of Telemetry.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <note>
    <para>Rather than pushing data through Ceilometer’s API, it is advised to push
                directly into gnocchi. Ceilometer’s API is officially deprecated as of
                Ocata.</para>
  </note>
  <section>
    <title>Notifications</title>
    <para>All OpenStack services send notifications about the executed operations
                or system state. Several notifications carry information that can be
                metered. For example, CPU time of a VM instance created by OpenStack
                Compute service.</para>
    <para>The notification agent is responsible for consuming notifications. This
                component is responsible for consuming from the message bus and transforming
                notifications into events and measurement samples.</para>
    <para>Additionally, the notification agent is responsible for all data processing
                such as transformations and publishing. After processing, the data is sent
                to any supported publisher target such as gnocchi or panko. These services
                persist the data in configured databases.</para>
    <note>
      <para>Prior to Ocata, the data was sent via AMQP to the collector service or any
                    external service.</para>
    </note>
    <para>The different OpenStack services emit several notifications about the
                various types of events that happen in the system during normal
                operation. Not all these notifications are consumed by the Telemetry
                service, as the intention is only to capture the billable events and
                notifications that can be used for monitoring or profiling purposes. The
                notifications handled are contained under the <literal>ceilometer.sample.endpoint</literal>
                namespace.</para>
    <note>
      <para>Some services require additional configuration to emit the
            notifications. Please see the <link xlink:href="https://docs.openstack.org/ceilometer/pike/install/install-controller.html#install-controller">Install and Configure Controller Services</link>
            for more details.</para>
    </note>
    <section xml:id="meter-definitions">
      <title>Meter definitions</title>
      <para>The Telemetry service collects a subset of the meters by filtering
                    notifications emitted by other OpenStack services. You can find the meter
                    definitions in a separate configuration file, called
                    <literal>ceilometer/data/meters.d/meters.yaml</literal>. This enables
                    operators and administrators to add new meters to Telemetry project by updating
                    the <literal>meters.yaml</literal> file without any need for additional code changes.</para>
      <note>
        <para>The <literal>meters.yaml</literal> file should be modified with care. Unless intended,
                        do not remove any existing meter definitions from the file. Also, the
                        collected meters can differ in some cases from what is referenced in the
                        documentation.</para>
      </note>
      <para>It also supports loading multiple meter definition files and allow users to add
                    their own meter definitions into several files according to different types of
                    metrics under the directory of <literal>/etc/ceilometer/meters.d</literal>.</para>
      <para>A standard meter definition looks like:</para>
      <screen language="yaml">---
metric:
  - name: 'meter name'
    event_type: 'event name'
    type: 'type of meter eg: gauge, cumulative or delta'
    unit: 'name of unit eg: MB'
    volume: 'path to a measurable value eg: $.payload.size'
    resource_id: 'path to resource id eg: $.payload.id'
    project_id: 'path to project id eg: $.payload.owner'
    metadata: 'addiitonal key-value data describing resource'</screen>
      <para>The definition above shows a simple meter definition with some fields,
                    from which <literal>name</literal>, <literal>event_type</literal>, <literal>type</literal>, <literal>unit</literal>, and <literal>volume</literal>
                    are required. If there is a match on the event type, samples are generated
                    for the meter.</para>
      <para>The <literal>meters.yaml</literal> file contains the sample
                    definitions for all the meters that Telemetry is collecting from
                    notifications. The value of each field is specified by using JSON path in
                    order to find the right value from the notification message. In order to be
                    able to specify the right field you need to be aware of the format of the
                    consumed notification. The values that need to be searched in the notification
                    message are set with a JSON path starting with <literal>$.</literal> For instance, if you need
                    the <literal>size</literal> information from the payload you can define it like
                    <literal>$.payload.size</literal>.</para>
      <para>A notification message may contain multiple meters. You can use <literal>*</literal> in
                    the meter definition to capture all the meters and generate samples
                    respectively. You can use wild cards as shown in the following example:</para>
      <screen language="yaml">---
metric:
  - name: $.payload.measurements.[*].metric.[*].name
    event_type: 'event_name.*'
    type: 'delta'
    unit: $.payload.measurements.[*].metric.[*].unit
    volume: payload.measurements.[*].result
    resource_id: $.payload.target
    user_id: $.payload.initiator.id
    project_id: $.payload.initiator.project_id</screen>
      <para>In the above example, the <literal>name</literal> field is a JSON path with matching
                    a list of meter names defined in the notification message.</para>
      <para>You can use complex operations on JSON paths. In the following example,
                    <literal>volume</literal> and <literal>resource_id</literal> fields perform an arithmetic
                    and string concatenation:</para>
      <screen language="yaml">---
metric:
- name: 'compute.node.cpu.idle.percent'
  event_type: 'compute.metrics.update'
  type: 'gauge'
  unit: 'percent'
  volume: payload.metrics[?(@.name='cpu.idle.percent')].value * 100
  resource_id: $.payload.host + "_" + $.payload.nodename</screen>
      <para>You can use the <literal>timedelta</literal> plug-in to evaluate the difference in seconds
                    between two <literal>datetime</literal> fields from one notification.</para>
      <screen language="yaml">---
metric:
- name: 'compute.instance.booting.time'
  event_type: 'compute.instance.create.end'
 type: 'gauge'
 unit: 'sec'
 volume:
   fields: [$.payload.created_at, $.payload.launched_at]
   plugin: 'timedelta'
 project_id: $.payload.tenant_id
 resource_id: $.payload.instance_id</screen>
    </section>
  </section>
  <section xml:id="polling-configuration">
    <title>Polling</title>
    <para>The Telemetry service is intended to store a complex picture of the
                infrastructure. This goal requires additional information than what is
                provided by the events and notifications published by each service. Some
                information is not emitted directly, like resource usage of the VM
                instances.</para>
    <para>Therefore, Telemetry uses another method to gather this data by polling
                the infrastructure including the APIs of the different OpenStack
                services and other assets, like hypervisors. The latter case requires
                closer interaction with the compute hosts. To solve this issue,
                Telemetry uses an agent based architecture to fulfill the requirements
                against the data collection.</para>
    <section>
      <title>Configuration</title>
      <para>Polling rules are defined by the <literal>polling.yaml</literal> file. It defines the pollsters
                    to enable and the interval they should be polled.</para>
      <para>Each source configuration encapsulates meter name matching which matches
                    against the entry point of pollster. It also includes: polling
                    interval determination, optional resource enumeration or discovery.</para>
      <para>All samples generated by polling are placed on the queue to be handled by
                    the pipeline configuration loaded in the notification agent.</para>
      <para>The polling definition may look like the following:</para>
      <screen>---
sources:
  - name: 'source name'
    interval: 'how often the samples should be generated'
    meters:
      - 'meter filter'
    resources:
      - 'list of resource URLs'
    discovery:
      - 'list of discoverers'</screen>
      <para>The <emphasis>interval</emphasis> parameter in the sources section defines the cadence of sample
                    generation in seconds.</para>
      <para>Polling plugins are invoked according to each source’s section whose <emphasis>meters</emphasis>
                    parameter matches the plugin’s meter name. Its matching logic functions the
                    same as pipeline filtering.</para>
      <para>The optional <emphasis>resources</emphasis> section of a polling source allows a list of
                    static resource URLs to be configured. An amalgamated list of all
                    statically defined resources are passed to individual pollsters for polling.</para>
      <para>The optional <emphasis>discovery</emphasis> section of a polling source contains the list of
                    discoverers. These discoverers can be used to dynamically discover the
                    resources to be polled by the pollsters.</para>
      <para>If both <emphasis>resources</emphasis> and <emphasis>discovery</emphasis> are set, the final resources passed to the
                    pollsters will be the combination of the dynamic resources returned by the
                    discoverers and the static resources defined in the <emphasis>resources</emphasis> section.</para>
    </section>
    <section>
      <title>Agents</title>
      <para>There are three types of agents supporting the polling mechanism, the
                    <literal>compute agent</literal>, the <literal>central agent</literal>, and the <literal>IPMI agent</literal>. Under
                    the hood, all the types of polling agents are the same
                    <literal>ceilometer-polling</literal> agent, except that they load different polling
                    plug-ins (pollsters) from different namespaces to gather data. The following
                    subsections give further information regarding the architectural and
                    configuration details of these components.</para>
      <para>Running <command>ceilometer-agent-compute</command> is exactly the same as:</para>
      <screen language="console">$ ceilometer-polling --polling-namespaces compute</screen>
      <para>Running <command>ceilometer-agent-central</command> is exactly the same as:</para>
      <screen language="console">$ ceilometer-polling --polling-namespaces central</screen>
      <para>Running <command>ceilometer-agent-ipmi</command> is exactly the same as:</para>
      <screen language="console">$ ceilometer-polling --polling-namespaces ipmi</screen>
      <para>In addition to loading all the polling plug-ins registered in the
                    specified namespaces, the <literal>ceilometer-polling</literal> agent can also specify the
                    polling plug-ins to be loaded by using the <literal>pollster-list</literal> option:</para>
      <screen language="console">$ ceilometer-polling --polling-namespaces central \
        --pollster-list image image.size storage.*</screen>
      <note>
        <para>HA deployment is NOT supported if the <literal>pollster-list</literal> option is
                        used.</para>
      </note>
      <section>
        <title>Compute agent</title>
        <para>This agent is responsible for collecting resource usage data of VM
                        instances on individual compute nodes within an OpenStack deployment.
                        This mechanism requires a closer interaction with the hypervisor,
                        therefore a separate agent type fulfills the collection of the related
                        meters, which is placed on the host machines to retrieve this
                        information locally.</para>
        <para>A Compute agent instance has to be installed on each and every compute
                        node, installation instructions can be found in the
                        <link xlink:href="https://docs.openstack.org/ceilometer/pike/install/install-compute.html#install-compute">Install and Configure Compute Services</link>
                        section in the Installation Tutorials and Guides.</para>

        <para>The list of supported hypervisors can be found in
                        <xref linkend="telemetry-supported-hypervisors"/>. The Compute agent uses the API of the
                        hypervisor installed on the compute hosts. Therefore, the supported meters may
                        be different in case of each virtualization back-end, as each inspection tool
                        provides a different set of meters.</para>
        <para>The list of collected meters can be found in <xref linkend="telemetry-compute-meters"/>.
                        The support column provides the information about which meter is available for
                        each hypervisor supported by the Telemetry service.</para>
      </section>
      <section>
        <title>Central agent</title>
        <para>This agent is responsible for polling public REST APIs to retrieve additional
                        information on OpenStack resources not already surfaced via notifications,
                        and also for polling hardware resources over SNMP.</para>
        <para>Some of the services polled with this agent are:</para>
        <itemizedlist>
          <listitem>
            <para>OpenStack Networking</para>
          </listitem>
          <listitem>
            <para>OpenStack Object Storage</para>
          </listitem>
          <listitem>
            <para>OpenStack Block Storage</para>
          </listitem>
          <listitem>
            <para>Hardware resources via SNMP</para>
          </listitem>
        </itemizedlist>
        <para>To install and configure this service use the
              <link xlink:href="https://docs.openstack.org/ceilometer/pike/install/install-base-rdo.html#install-rdo">Install and configure for Red Hat Enterprise Linux and CentOS</link>
                        section in the Installation Tutorials and Guides.</para>

      </section>
      <section xml:id="telemetry-ipmi-agent">
        <title>IPMI agent</title>
        <para>This agent is responsible for collecting IPMI sensor data and Intel Node
                        Manager data on individual compute nodes within an OpenStack deployment.
                        This agent requires an IPMI capable node with the ipmitool utility installed,
                        which is commonly used for IPMI control on various Linux distributions.</para>
        <para>An IPMI agent instance could be installed on each and every compute node
                        with IPMI support, except when the node is managed by the Bare metal
                        service and the <literal>conductor.send_sensor_data</literal> option is set to <literal>true</literal>
                        in the Bare Metal service. It is no harm to install this agent on a
                        compute node without IPMI or Intel Node Manager support, as the agent
                        checks for the hardware and if none is available, returns empty data. It
                        is suggested that you install the IPMI agent only on an IPMI capable
                        node for performance reasons.</para>
        <para>The list of collected meters can be found in
                        <xref linkend="telemetry-bare-metal-service"/>.</para>
        <note>
          <para>Do not deploy both the IPMI agent and the Bare metal service on one
                            compute node. If <literal>conductor.send_sensor_data</literal> is set, this
                            misconfiguration causes duplicated IPMI sensor samples.</para>
        </note>
      </section>
      <section>
        <title>Send samples to Telemetry</title>
        <note>
          <para>Sample pushing via the API is deprecated in Ocata. Measurement data should
                            be pushed directly into <link xlink:href="http://gnocchi.xyz/rest.html">gnocchi’s API</link>.</para>
        </note>
        <para>While most parts of the data collection in the Telemetry service are
                        automated, Telemetry provides the possibility to submit samples via the
                        REST API to allow users to send custom samples into this service.</para>
        <para>This option makes it possible to send any kind of samples without the
                        need of writing extra code lines or making configuration changes.</para>
        <para>The samples that can be sent to Telemetry are not limited to the actual
                        existing meters. There is a possibility to provide data for any new,
                        customer defined counter by filling out all the required fields of the
                        POST request.</para>
        <para>If the sample corresponds to an existing meter, then the fields like
                        <literal>meter-type</literal> and meter name should be matched accordingly.</para>
        <para>The required fields for sending a sample using the command-line client
                        are:</para>
        <itemizedlist>
          <listitem>
            <para>ID of the corresponding resource. (<literal>--resource-id</literal>)</para>
          </listitem>
          <listitem>
            <para>Name of meter. (<literal>--meter-name</literal>)</para>
          </listitem>
          <listitem>
            <para>Type of meter. (<literal>--meter-type</literal>)</para>
            <para>Predefined meter types:</para>
            <itemizedlist>
              <listitem>
                <para>Gauge</para>
              </listitem>
              <listitem>
                <para>Delta</para>
              </listitem>
              <listitem>
                <para>Cumulative</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>Unit of meter. (<literal>--meter-unit</literal>)</para>
          </listitem>
          <listitem>
            <para>Volume of sample.  (<literal>--sample-volume</literal>)</para>
          </listitem>
        </itemizedlist>
        <para>To send samples to Telemetry using the command-line client, the
                        following command should be invoked:</para>
        <screen language="console">$ ceilometer sample-create -r 37128ad6-daaa-4d22-9509-b7e1c6b08697 \
  -m memory.usage --meter-type gauge --meter-unit MB --sample-volume 48
+-------------------+--------------------------------------------+
| Property          | Value                                      |
+-------------------+--------------------------------------------+
| message_id        | 6118820c-2137-11e4-a429-08002715c7fb       |
| name              | memory.usage                               |
| project_id        | e34eaa91d52a4402b4cb8bc9bbd308c1           |
| resource_id       | 37128ad6-daaa-4d22-9509-b7e1c6b08697       |
| resource_metadata | {}                                         |
| source            | e34eaa91d52a4402b4cb8bc9bbd308c1:openstack |
| timestamp         | 2014-08-11T09:10:46.358926                 |
| type              | gauge                                      |
| unit              | MB                                         |
| user_id           | 679b0499e7a34ccb9d90b64208401f8e           |
| volume            | 48.0                                       |
+-------------------+--------------------------------------------+</screen>
      </section>
    </section>
  </section>
</section>
