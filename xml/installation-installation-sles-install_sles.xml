<?xml version="1.0"?>
 <!DOCTYPE section [
  <!ENTITY % entities SYSTEM "entities.ent"> %entities;
 ]>
<section xml:id="install_sles"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Using the &lcm; to Deploy &slsa; Compute Nodes</title>
 <para>
  The method used for deploying &slsa; compute nodes using Cobbler on the
  &lcm; uses legacy BIOS.
 </para>
 <note>
  <para>
   UEFI and Secure boot are not supported on &slsa; &comp;.
  </para>
 </note>
 <section>
  <title>Deploying legacy BIOS &slsa; &comp; nodes</title>
  <para>
   The installation process for legacy BIOS &slsa; &comp; nodes is similar to
   that described in <xref linkend="install_kvm"/> with some additional requirements:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The standard &slsa; ISO (SLE-12-SP3-Server-DVD-x86_64-GM-DVD1.iso) must be
     accessible as <literal>~/sles12sp3.iso</literal>. Rename the ISO or
     create a symbolic link:
    </para>
<screen>mv SLE-12-SP3-Server-DVD-x86_64-GM-DVD1.iso ~/sles12sp3.iso</screen>
   </listitem>
   <listitem>
    <para>
     You must identify the node(s) on which you want to install &slsa;, by
     adding the key/value pair <literal>distro-id: sles12sp3-x86_64</literal>
     to server details in <literal>servers.yml</literal>. If there are any
     network interface or disk layout differences in the new server compared to
     the servers already in the model, you may also need to update
     <literal>net_interfaces.yml</literal>,
     <literal>server_roles.yml</literal>, <literal>disk_compute.yml</literal>
     and <literal>control_plane.yml</literal>. For more information on
     configuration of the Input Model for &slsa;, see <xref
     linkend="sles_compute_model"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     Run the playbook <filename>config-processor-run.yml</filename> to check
     for errors in the updated model.
    </para>
   </listitem>
   <listitem>
    <para>
     Run the <filename>ready-deployment.yml</filename> playbook to build the
     new <filename>scratch</filename> directory.
    </para>
   </listitem>
   <listitem>
    <para>
     Record the management network IP address that is used for the new
     server. It will be used in the installation process.
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section xml:id="sles_uefi_overview">
  <title>Deploying UEFI &slsa; compute nodes</title>
  <para>
   Deploying UEFI nodes has been automated in the &lcm; and requires the
   following to be met:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     All of your nodes using &slsa; must already be installed, either manually
     or via Cobbler.
    </para>
   </listitem>
   <listitem>
    <para>
     Your input model should be configured for your &slsa; nodes, per the
     instructions at <xref linkend="sles_compute_model"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     You should have run the configuration processor and the
     <filename>ready-deployment.yml</filename> playbook.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Execute the following steps to re-image one or more nodes after you have run
   the <filename>ready-deployment.yml</filename> playbook.
  </para>
  <procedure>
   <step>
    <para>
     Run the following playbook, ensuring that you specify only your UEFI
     &slsa; nodes using the nodelist. This playbook will reconfigure Cobbler
     for the nodes listed.
    </para>
    <screen>&prompt.ardana;cd ~/scratch/ansible/next/ardana/ansible
&prompt.ardana;ansible-playbook prepare-sles-grub2.yml -e nodelist=node1[,node2,node3]</screen>
   </step>
   <step>
    <para>
     Re-image the node(s), ensuring that you only specify your UEFI &slsa;
     nodes using the nodelist.
    </para>
    <screen>&prompt.ardana;cd ~/openstack/ardana/ansible
&prompt.ardana;ansible-playbook -i hosts/localhost bm-reimage.yml \
-e nodelist=node1[,node2,node3]</screen>
   </step>
   <step>
    <para>
     Back up the <filename>grub.cfg-*</filename> files in
     <filename>/srv/tftpboot/</filename> as they will be overwritten when
     running the cobbler-deploy playbook on the next step. You will need these
     files if you need to reimage the nodes in the future.
    </para>
   </step>
   <step>
    <para>
     Run the <filename>cobbler-deploy.yml</filename> playbook, which will reset
     Cobbler back to the default values:
    </para>
    <screen>&prompt.ardana;cd ~/openstack/ardana/ansible
&prompt.ardana;ansible-playbook -i hosts/localhost cobbler-deploy.yml</screen>
   </step>
  </procedure>
  <section>
   <title>UEFI Secure Boot</title>
   <para>
    Secure Boot is a method used to restrict binary execution for booting the
    system. With this option enabled, system BIOS will only allow boot loaders
    with trusted cryptographic signatures to be executed, thus preventing
    malware from hiding embedded code in the boot chain. Each boot loader
    launched during the boot process is digitally signed and that signature is
    validated against a set of trusted certificates embedded in the UEFI BIOS.
    Secure Boot is completely implemented in the BIOS and does not require
    special hardware.
   </para>
   <para>Thus Secure Boot is:</para>
   <itemizedlist>
    <listitem>
     <para>
      Intended to prevent boot-sector malware or kernel code injection.
     </para>
    </listitem>
    <listitem>
     <para>Hardware-based code signing.</para>
    </listitem>
    <listitem>
     <para>Extension of the UEFI BIOS architecture.</para>
    </listitem>
    <listitem>
     <para>
      Optional with the ability to enable or disable it through the BIOS.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    In Boot Options of RBSU, <guimenu>Boot Mode</guimenu> needs to be set to
    <literal>UEFI Mode</literal> and <guimenu>UEFI Optimized Boot</guimenu>
    should be <literal>Enabled</literal>>.
   </para>
   <para>
    Secure Boot is enabled at <menuchoice><guimenu>System
    Configuration</guimenu>
         <guimenu>BIOS/Platform Configuration (RBSU)</guimenu> <guimenu>Server
         Security</guimenu> <guimenu>Secure Boot Configuration</guimenu>
         <guimenu>Secure Boot Enforcement</guimenu></menuchoice>.
   </para>
  </section>
 </section>
</section>
