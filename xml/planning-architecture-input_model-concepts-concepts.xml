<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="concepts" version="5.1">
 <title>Concepts</title>
 <para>
  An &kw-hos-phrase; cloud is defined by a declarative model that is described
  in a series of configuration objects. These configuration objects are
  represented in YAML files which together constitute the various example
  configurations provided as templates with this release. These examples can be
  used nearly unchanged, with the exception of necessary changes to IP
  addresses and other site and hardware-specific identifiers. Alternatively,
  the examples may be customized to meet site requirements.
 </para>
 <para>
  The following diagram shows the set of configuration objects and their
  relationships. All objects have a name that you may set to be something
  meaningful for your context. In the examples these names are provided in
  capital letters as a convention. These names have no significance to
  &kw-hos;, rather it is the relationships between them that define the
  configuration.
 </para>
 <informalfigure>
  <mediaobject>
   <imageobject role="fo">
    <imagedata fileref="media-inputmodel-HPE_InputModel_Flow_40.png" width="75%"/>
   </imageobject>
   <imageobject role="html">
    <imagedata fileref="media-inputmodel-HPE_InputModel_Flow_40.png"/>
   </imageobject>
  </mediaobject>
 </informalfigure>
 <para>
  The configuration processor reads and validates the input model described in
  the YAML files discussed above, combines it with the service definitions
  provided by &kw-hos; and any persisted state information about the current
  deployment to produce a set of Ansible variables that can be used to deploy
  the cloud. It also produces a set of information files that provide details
  about the configuration.
 </para>
 <para>
  The relationship between the file systems on the &kw-hos; deployment server
  and the configuration processor is shown in the following diagram. Below the
  line are the directories that you, the cloud administrator, edit to declare
  the cloud configuration. Above the line are the directories that are
  internal to the &lcm; such as Ansible playbooks and variables.
 </para>
 <informalfigure>
  <mediaobject>
   <imageobject role="fo">
    <imagedata fileref="media-inputmodel-hphelionopenstack_directories.png" width="75%"/>
   </imageobject>
   <imageobject role="html">
    <imagedata fileref="media-inputmodel-hphelionopenstack_directories.png"/>
   </imageobject>
  </mediaobject>
 </informalfigure>
 <para>
  The input model is read from the
  <filename>~/openstack/my_cloud/definition</filename> directory. Although the
  supplied examples use separate files for each type of object in the model,
  the names and layout of the files have no significance to the configuration
  processor, it simply reads all of the .yml files in this directory. Cloud
  administrators are therefore free to use whatever structure is best for their
  context. For example, you may decide to maintain separate files or
  sub-directories for each physical rack of servers.
 </para>
 <para>
  As mentioned, the examples use the conventional upper casing for object
  names, but these strings are used only to define the relationship between
  objects. They have no specific significance to the configuration processor.
 </para>
 <xi:include href="planning-architecture-input_model-concepts-cloud.xml"/>
 <xi:include href="planning-architecture-input_model-concepts-controlplanes.xml"/>
 <xi:include href="planning-architecture-input_model-concepts-services.xml"/>
 <xi:include href="planning-architecture-input_model-concepts-serverroles.xml"/>
 <xi:include href="planning-architecture-input_model-concepts-diskmodel.xml"/>
 <xi:include href="planning-architecture-input_model-concepts-memorymodel.xml"/>
 <xi:include href="planning-architecture-input_model-concepts-cpumodel.xml"/>
 <xi:include href="planning-architecture-input_model-concepts-servers.xml"/>
 <xi:include href="planning-architecture-input_model-concepts-servergroups.xml"/>
 <xi:include href="planning-architecture-input_model-concepts-networking.xml"/>
 <xi:include href="planning-architecture-input_model-concepts-configuration_data.xml"/>
</section>
