<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="using_git">
 <title>Using Git for Configuration Management</title>
 <para>
  In &kw-hos-phrase;, a local git repository is used to track configuration
  changes and the configuration processor (CP) uses this repository. The
  introduction of a git workflow also means that your configuration history is
  maintained, making rollbacks easier as well as keeping a record of previous
  configuration settings.
 </para>
 <para>
  The git repository is installed by the lifecycle manager on the lifecycle
  manager node.
 </para>
 <para>
  The git repository provides a way for you to merge changes that you pull down
  as <quote>upstream</quote> (that is, from HP) updates, and allows you to
  manage your own configuration changes.
 </para>
 <bridgehead renderas="sect4">Initialization on a new deployment</bridgehead>
 <para>
  On a system new to &kw-hos-phrase;, the lifecycle manager will prepare a git
  repository under <literal>~/helion</literal>. The lifecycle manager
  provisioning runs the <literal>hlm-init-deployer</literal> script
  automatically - this calls <literal>ansible-playbook -i hosts/localhost
  git-00-initialise.yml</literal>.
 </para>
 <para>
  As a result, the <literal>~/helion</literal> directory is initialized as a
  git repo (if it is empty). It is initialized with four empty branches:
 </para>
 <variablelist>
  <varlistentry>
   <term>hos</term>
   <listitem>
    <para>
     This holds the upstream source code corresponding to the contents of the
     <literal>~/helion</literal> directory on a pristine fresh installation.
     Every source code release that is downloaded from HPE is applied as a
     fresh commit to this branch. This branch contains no customization by the
     end user.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>site</term>
   <listitem>
    <para>
     This branch begins life as a copy of the first 'hos' drop. It is onto this
     branch that you commit your configuration changes. It's the branch most
     visible to the end user.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>ansible</term>
   <listitem>
    <para>
     This branch contains the variable definitions generated by the CP that our
     main ansible playbooks need. This includes the
     <literal>verb_hosts</literal> file that describes to ansible what servers
     are playing what roles. The <literal>ready-deployment</literal> playbook
     takes this output and assembles a <literal>~/scratch</literal> directory
     containing the ansible playbooks together with the variable definitions in
     this branch. The result is a working ansible directory
     <literal>~/scratch/ansible/next/hos/ansible</literal> from which the main
     deployment playbooks may be successfully run.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>cp-persistent</term>
   <listitem>
    <para>
     This branch contains the persistent state that the CP needs to maintain.
     That state is mostly the assignment of IP addresses and roles to
     particular servers. Some operational procedures may involve editing the
     contents of this branch: for example, retiring a machine from service or
     repurposing it.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <para>
  Two temporary branches are created and populated at run time:
 </para>
 <variablelist>
  <varlistentry>
   <term>staging-ansible</term>
   <listitem>
    <para>
     This branch hosts the most recent commit that will be appended to the
     ansible branch.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>staging-cp-persistent</term>
   <listitem>
    <para>
     This branch hosts the most recent commit that will be appended to the
     cp-persistent branch.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <note>
  <para>
   The information above provides insight into the workings of the
   configuration processor and the git repository. However, in practice you can
   simply follow the steps below to make configuration changes.
  </para>
 </note>
 <section xml:id="updating-configuration-including-default-config">
  <title>Updating any configuration, including the default configuration</title>
  <para>
   When you need to make updates to a configuration you must:
  </para>
  <procedure>
   <step>
    <para>
     Check out the <literal>site</literal> branch. You may already be on that
     branch. If so, git will tell you that and the command will leave you
     there.
    </para>
    <screen>git checkout site</screen>
   </step>
   <step>
    <para>
     Edit the YAML file or files that contain the configuration you want to
     change.
    </para>
   </step>
   <step>
    <para>
     Commit the changes to the <literal>site</literal> branch.
    </para>
<screen>
git add -A
git commit -m "your commit message goes here in quotes"
</screen>
    <para>
     If you want to add a single file to your git repository, you can use the
     command below, as opposed to using <command>git add -A</command>:
    </para>
<screen>git add PATH_TO_FILE</screen>
    <para>
     For example, if you made a change to your <command>servers.yml</command>
     file and wanted to only commit that change, you would use this command:
    </para>
<screen>git add ~/hestepon/my_cloud/definition/data/servers.yml</screen>
   </step>
   <step>
    <para>
     To produce the required configuration processor output from those changes.
     Review the output files manually if required, run the configuration
     processor:
    </para>
<screen>
cd ~/hestepon/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml
</screen>
   </step>
   <step>
    <para>
     Ready the deployment area
    </para>
    <screen>ansible-playbook -i hosts/localhost ready-deployment.yml</screen>
   </step>
   <step>
    <para>
     Run the deployment playbooks from the resulting scratch directory.
    </para>
<screen>
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts site.yml
</screen>
   </step>
  </procedure>
 </section>
</section>
