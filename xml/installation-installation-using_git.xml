<?xml version="1.0"?>
<!DOCTYPE chapter [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<chapter xml:id="using_git"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Using Git for Configuration Management</title>
<!-- FIXME: Comment from DITA original: "untested" -->
 <para>
  In &kw-hos-phrase;, a local git repository is used to track configuration
  changes; the Configuration Processor (CP) uses this repository. Use of a git
  workflow means that your configuration history is maintained, making
  rollbacks easier and keeping a record of previous configuration settings.
 </para>
 <para>
  The git repository is installed by the &lcm; on the &lcm; node.
 </para>
 <para>
  The git repository provides a way for you to merge changes that you pull down
  as <quote>upstream</quote> updates (that is, updates from &vendor;). It also
  allows you to manage your own configuration changes.
 </para>
 <section>
  <title>Initialization on a new deployment</title>
  <para>
   On a system new to &kw-hos-phrase;, the &lcm; will prepare a git repository
   under <literal>~/openstack</literal>. The &lcm; provisioning runs the
   <literal>ardana-init-deployer</literal> script automatically. This calls
   <literal>ansible-playbook -i hosts/localhost git-00-initialise.yml</literal>.
  </para>
  <para>
   As a result, the <literal>~/openstack</literal> directory is initialized as
   a git repo (if it is empty). It is initialized with four empty branches:
  </para>
  <variablelist>
   <varlistentry>
    <term>ardana</term>
    <listitem>
     <para>
      This holds the upstream source code corresponding to the contents of the
      <literal>~/openstack</literal> directory on a pristine installation.
      Every source code release that is downloaded from &vendor; is applied as
      a fresh commit to this branch. This branch contains no customization by
      the end user.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>site</term>
    <listitem>
     <para>
      This branch begins life as a copy of the first <literal>ardana</literal>
      drop. It is onto this branch that you commit your configuration changes.
      It is the branch most visible to the end user.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ansible</term>
    <listitem>
     <para>
      This branch contains the variable definitions generated by the CP that
      our main ansible playbooks need. This includes the
      <literal>verb_hosts</literal> file that describes to ansible what servers
      are playing what roles. The <literal>ready-deployment</literal> playbook
      takes this output and assembles a <literal>~/scratch</literal> directory
      containing the ansible playbooks together with the variable definitions
      in this branch. The result is a working ansible directory
      <literal>~/scratch/ansible/next/ardana/ansible</literal> from which the
      main deployment playbooks may be successfully run.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>cp-persistent</term>
    <listitem>
     <para>
      This branch contains the persistent state that the CP needs to maintain.
      That state is mostly the assignment of IP addresses and roles to
      particular servers. Some operational procedures may involve editing the
      contents of this branch: for example, retiring a machine from service or
      repurposing it.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   Two temporary branches are created and populated at run time:
  </para>
  <variablelist>
   <varlistentry>
    <term>staging-ansible</term>
    <listitem>
     <para>
      This branch hosts the most recent commit that will be appended to the
      Ansible branch.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>staging-cp-persistent</term>
    <listitem>
     <para>
      This branch hosts the most recent commit that will be appended to the
      cp-persistent branch.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <note>
   <para>
    The information above provides insight into the workings of the
    configuration processor and the git repository. However, in practice you
    can simply follow the steps below to make configuration changes.
   </para>
  </note>
 </section>
<!-- FIXME: The following was commented in the original DITA. -->
<!-- <section>
  <title>When receiving a new &productname; drop</title>

  <p>When you are ready to deploy a new deployer image, you must merge any configuration changes
    into your own previous config; this is a manual step, although the standard git tools may be
    brought to bear to achieve this. </p>
  <p>Behind the scenes, the deployer provisioning runs the following playbooks: <ol>
      <li>ansible-playbook -i hosts/localhost</li>
      <li>deployer-init.yml ansible-playbook</li>
      <li>-i hosts/localhost git-01-receive-new.yml</li>
    </ol> The third playbook puts the new content directly onto the 'hos' branch. After it runs,
    you will notice a new commit on the 'hos' branch with the latest upstream deployer content
    on it. This looks much like the content of the ~/openstack directory as it was prior to the
    introduction of the git workflow. The hos branch will be merged to the site branch; if there
    are differences, the merge will require your manual review and commit. </p>
  <p>The ~/openstack repo will be checked out to the 'site' branch and the results of the merge
    left in place for your review. You may now edit your configuration until you are happy with
    it on the 'site' branch in ~/openstack repository. Note that the deployer simply copies a
    configuration unconditionally to the ~/openstack/my_cloud/definition
directory and commits it
    there. You must commit any configuration changes prior to continuing; the
    "config-processor-run.yml" script will abort with a message to that effect if that condition
    is not met. As a result of this step, the 'site' branch gets a configuration under the
    my_cloud/definition subdirectory. </p>
  <p>
    <b>Run the configuration processor</b>
  </p>
  <p>Once you have committed configuration settings, you must run the configuration processor,
    which takes as input your configuration, and also any persistent data saved from a previous
    run. (That data contains things such as the allocation of roles to servers, etc.) It
    produces as output a set of Ansible variable settings (amongst other input to the Ansible
    playbooks); and may update its persistent state. </p>
  <p>To run the configuration processor, you must execute
    <codeblock>ansible-playbook -i hosts/localhost config-proessor-run.yml </codeblock> However,
    the CP persistent state and the Ansible outputs now reside on different branches, not
    immediately visible to you. If the config processor run was unsuccessful, you may continue
    to edit and commit to your 'site' branch. An " (dash dash note for comments issue replace with dashes later )amend" commit is acceptable here. </p>
  <p><b>Result</b>
  </p>
  <p>A scratch directory is prepared to run the config processor in (~/scratch/cp). The site
    configuration is checked out into this directory. Atop this is laid any saved persistent
    state for the config processor, which is taken from the head of the 'cp-persistent' branch.
    Updated CP persistent data is temorarily stashed to the 'staging-cp-persistent' branch;
    Ansible output to the 'staging-ansible' branch. The reason for this is that, until a
    deployment actually occurs, there is no guarantee that any additional CP state accruing will
    gain any measure of real-world semantics by being used for a deployment. We always reset the
    inputs to the CP to the last *deployed* persistent state. </p>
</section>
<section>
  <title>Prepare and run a deployment</title>
  <p>A deployment area is prepared to run an update or a deploy from. At this point we consider
    the staged output from the CP to be 'live' - promoting the commits to the long-lived
    'ansible' and 'cp-persistent' branches. </p>
  <p><b>User experience</b>
  </p>
  <p>The user readies a deployment area by running ansible-playbook -i hosts/localhost
    ready-deployment.yml from the ~/openstack/ardana/ansible directory. This will prepare a scratch
    directory with the appropriate contents in it under "~/scratch/ansible/next/ardana/ansible".
    The deployment may be continued via: cd ~/scratch/ansible/next/ardana/ansible ansible-playbook
    -i hosts/verb_hosts site.yml </p>
  <p><b>Technical details</b>
  </p>

  <p>The tip of the "staging-ansible" and "staging-cp-persistent" branches are laid down upon
    the "ansible" and "cp-persistent" branches; the former pair are then deleted. The tip of
    "site", "ansible", and "cp-persistent" are tagged with a time-stamped tag to indicate when
    the deployment was readied. Two working areas are laid out underneath ~/scratch/ansible. The
    "next/" directory holds the latest deployment tree. Alongside this, the "last/" directory
    holds the previous tree - that is, the one constructed from the previous timestamps. The
    thinking behind this is that, while we currently don't use the former Ansible state for
    upgrades, that any topology change will require Ansible to know where services _used_ to run
    in order to successfully find and disable them. At the moment, the best use of this
    directory is as a convenient tree to run "diff" from. </p>
 </section>-->
 <section xml:id="updating-configuration-including-default-config">
  <title>Updating any configuration, including the default configuration</title>
  <para>
   When you need to make updates to a configuration you must:
  </para>
  <procedure>
   <step>
    <para>
     Check out the <literal>site</literal> branch. You may already be on that
     branch. If so, git will tell you that and the command will leave you
     there.
    </para>
<screen>git checkout site</screen>
   </step>
   <step>
    <para>
     Edit the YAML file or files that contain the configuration you want to
     change.
    </para>
   </step>
   <step>
    <para>
     Commit the changes to the <literal>site</literal> branch.
    </para>
<screen>
git add -A
git commit -m "your commit message goes here in quotes"
</screen>
    <para>
     If you want to add a single file to your git repository, you can use the
     command below, as opposed to using <command>git add -A</command>.
    </para>
<screen>git add PATH_TO_FILE</screen>
    <para>
     For example, if you made a change to your <command>servers.yml</command>
     file and wanted to only commit that change, you would use this command:
    </para>
<screen>git add ~/openstack/my_cloud/definition/data/servers.yml</screen>
   </step>
   <step>
    <para>
     To produce the required configuration processor output from those changes.
     Review the output files manually if required, run the configuration
     processor:
    </para>
<screen>
cd ~/openstack/ardana/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml
</screen>
   </step>
   <step>
    <para>
     Ready the deployment area
    </para>
<screen>ansible-playbook -i hosts/localhost ready-deployment.yml</screen>
   </step>
   <step>
    <para>
     Run the deployment playbooks from the resulting scratch directory.
    </para>
<screen>
cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts site.yml
</screen>
   </step>
  </procedure>
 </section>
</chapter>
