<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xml:id="install_rhel"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Using the &lcm; to Deploy &rhla; Compute Nodes</title>
 <para>
  The method used for deploying &rhla; compute nodes using Cobbler on the
  &lcm; will depend on whether your &rhla; nodes are using legacy
  BIOS or UEFI. We provide steps for both.
 </para>
 <section>
  <title>Deploying legacy BIOS &rhla; compute nodes</title>
  <para>
   The installation process for &rhla; nodes is almost identical to that of
   &hlinux; nodes as described in <xref linkend="install_kvm"/>.
   The key differences are:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The standard &rhla; 7.3 iso must be placed in the <literal>ardana</literal>
     home directory on the deployer node before you begin the installation
     procedure. The file must be named <filename>rhel7.iso</filename>.
    </para>
   </listitem>
   <listitem>
    <para>
     You must identify the node(s) on which you want to install &rhla;, by adding
     the key/value pair <literal>distro-id: rhel73-x86_64</literal> to server
     details in <filename>servers.yml</filename>. You will also need to update
     <filename>net_interfaces.yml</filename>,
     <filename>server_roles.yml</filename>,
     <filename>disk_compute.yml</filename>, and
     <filename>control_plane.yml</filename>. For more information about
     configuration of the Input Model for &rhla;, see
     <xref linkend="rhel_compute_model"/>.
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section>
  <title>Deploying UEFI &rhla; compute nodes</title>
  <para>
   Before you attempt to use the &lcm; to install &rhla; on UEFI
   nodes, you should install any &hlinux; nodes or any &rhla; on
   legacy BIOS nodes first.
  </para>
  <para>
   Execute the following steps to re-image one or more nodes after you have run
   the <literal>ready-deployment.yml</literal> playbook:
  </para>
  <procedure>
   <step>
    <para>
     Prior to beginning these steps, your input model should be configured
     for your &rhla; nodes, per the instructions at <xref linkend="rhel_compute_model"/>.
    </para>
   </step>
   <step>
    <para>
     Run the following playbook, which will extract the
     <filename>grubx64.efi</filename> file which will be needed when imaging
     your &rhla; UEFI nodes.
    </para>
<screen>cd ~/openstack/ardana/ansible
ansible-playbook prepare-rhel-loader.yml</screen>
   </step>
   <step>
    <para>
     Run the following playbook, ensuring that you specify only your UEFI &rhla;
     nodes using the nodelist. This playbook will reconfigure Cobbler for the
     nodes listed.
    </para>
<screen>cd ~/openstack/ardana/ansible
ansible-playbook prepare-rhel-grub2.yml -e nodelist=node1[,node2,node3]</screen>
   </step>
   <step>
    <para>
     Re-image the node(s), ensuring that you only specify your UEFI &rhla; nodes
     using the nodelist.
    </para>
<screen>cd ~/openstack/ardana/ansible
ansible-playbook -i hosts/localhost bm-reimage.yml -e nodelist=node1[,node2,node3]</screen>
   </step>
   <step>
    <para>
     Make backups of the <filename>grub.cfg-*</filename> and
     <filename>grubx64.efi</filename> files in
     <filename>/srv/tftpboot/grub</filename> as they will be overwritten when
     running the <literal>cobbler-deploy</literal> playbook on the next step.
     You will need these files if you need to reimage the nodes in the future.
    </para>
   </step>
   <step>
    <para>
     Run the <literal>cobbler-deploy</literal> playbook, which will reset
     Cobbler back to the default values:
    </para>
<screen>cd ~/openstack/ardana/ansible
ansible-playbook -i hosts/localhost cobbler-deploy.yml</screen>
   </step>
  </procedure>
  <para>
   <emphasis role="bold">UEFI Secure Boot</emphasis>
  </para>
  <para>
   Secure Boot is a method used to restrict binaries execution for booting the
   system. With this option enabled, system BIOS will only allow boot loaders
   with trusted cryptographic signatures to be executed, thus enable preventing
   malware from hiding embedded code in the boot chain. Each boot loader
   launched during the boot process is digitally signed and that signature is
   validated against a set of trusted certificates embedded in the UEFI BIOS.
   Secure Boot is completely implemented in the BIOS and does not require
   special hardware.
  </para>
  <para>
   Thus Secure Boot is:
  </para>
  <orderedlist>
   <listitem>
    <para>
     Intended to prevent boot-sector malware or kernel code injection.
    </para>
   </listitem>
   <listitem>
    <para>
     Hardware-based code signing.
    </para>
   </listitem>
   <listitem>
    <para>
     Extension of the UEFI BIOS architecture.
    </para>
   </listitem>
   <listitem>
    <para>
     Optional with the ability to enable or disable it through the BIOS.
    </para>
   </listitem>
  </orderedlist>
  <para>
   In Boot Options of RBSU, <guimenu>Boot Mode</guimenu> needs to be set to
   <guimenu>UEFI Mode</guimenu> and <guimenu>UEFI Optimized Boot</guimenu>
   should be <guimenu>Enabled</guimenu>.
  </para>
  <para>
   Secure Boot is enabled using
   <menuchoice><guimenu>System Configuration</guimenu>
    <guimenu>BIOS/Platform Configuration (RBSU)</guimenu>
    <guimenu>Server Security</guimenu><guimenu>Secure Boot Configuration</guimenu>
    <guimenu>Secure Boot Enforcement</guimenu>
   </menuchoice>.
  </para>
 </section>
</section>
