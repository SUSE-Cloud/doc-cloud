<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1" xml:id="account-reaper">
  <title>Account reaper</title>
  <para>The purpose of the account reaper is to remove data from the deleted accounts.</para>
  <para>A reseller marks an account for deletion by issuing a <literal>DELETE</literal> request
            on the account’s storage URL. This action sets the <literal>status</literal> column of
            the <literal>account_stat</literal> table in the account database and replicas to
            <literal>DELETED</literal>, marking the account’s data for deletion.</para>
  <para>Typically, a specific retention time or undelete are not provided.
            However, you can set a <literal>delay_reaping</literal> value in the
            <literal>[account-reaper]</literal> section of the <literal>account-server.conf</literal> file to
            delay the actual deletion of data. At this time, to undelete you have to update
            the account database replicas directly, set the status column to an
            empty string and update the put_timestamp to be greater than the
            delete_timestamp.</para>
  <note>
    <para>It is on the development to-do list to write a utility that performs
                this task, preferably through a REST call.</para>
  </note>
  <para>The account reaper runs on each account server and scans the server
            occasionally for account databases marked for deletion. It only fires up
            on the accounts for which the server is the primary node, so that
            multiple account servers aren’t trying to do it simultaneously. Using
            multiple servers to delete one account might improve the deletion speed
            but requires coordination to avoid duplication. Speed really is not a
            big concern with data deletion, and large accounts aren’t deleted often.</para>
  <para>Deleting an account is simple. For each account container, all objects
            are deleted and then the container is deleted. Deletion requests that
            fail will not stop the overall process but will cause the overall
            process to fail eventually (for example, if an object delete times out,
            you will not be able to delete the container or the account). The
            account reaper keeps trying to delete an account until it is empty, at
            which point the database reclaim process within the db_replicator will
            remove the database files.</para>
  <para>A persistent error state may prevent the deletion of an object or
            container. If this happens, you will see a message in the log, for example:</para>
  <screen language="console">Account &lt;name&gt; has not been reaped since &lt;date&gt;</screen>
  <para>You can control when this is logged with the <literal>reap_warn_after</literal> value in the
            <literal>[account-reaper]</literal> section of the <literal>account-server.conf</literal> file.
            The default value is 30 days.</para>
</section>
