<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1" xml:id="authentication-and-authorization">
  <title>Authentication and authorization</title>
  <para>Networking uses the Identity service as the default authentication
            service. When the Identity service is enabled, users who submit requests
            to the Networking service must provide an authentication token in
            <literal>X-Auth-Token</literal> request header. Users obtain this token by
            authenticating with the Identity service endpoint. For more information
            about authentication with the Identity service, see <link xlink:href="https://developer.openstack.org/api-ref/identity/v2/">OpenStack Identity
                service API v2.0
                Reference</link>.
            When the Identity service is enabled, it is not mandatory to specify the
            project ID for resources in create requests because the project ID is
            derived from the authentication token.</para>
  <para>The default authorization settings only allow administrative users
            to create resources on behalf of a different project. Networking uses
            information received from Identity to authorize user requests.
            Networking handles two kind of authorization policies:</para>
  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">Operation-based</emphasis> policies specify access criteria for specific
                    operations, possibly with fine-grained control over specific
                    attributes.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">Resource-based</emphasis> policies specify whether access to specific
                    resource is granted or not according to the permissions configured
                    for the resource (currently available only for the network resource).
                    The actual authorization policies enforced in Networking might vary
                    from deployment to deployment.</para>
    </listitem>
  </itemizedlist>
  <para>The policy engine reads entries from the <literal>policy.json</literal> file. The
            actual location of this file might vary from distribution to
            distribution. Entries can be updated while the system is running, and no
            service restart is required. Every time the policy file is updated, the
            policies are automatically reloaded. Currently the only way of updating
            such policies is to edit the policy file. In this section, the terms
            <emphasis>policy</emphasis> and <emphasis>rule</emphasis> refer to objects that are specified in the same way
            in the policy file. There are no syntax differences between a rule and a
            policy. A policy is something that is matched directly from the
            Networking policy engine. A rule is an element in a policy, which is
            evaluated. For instance in <literal>"create_subnet":
"rule:admin_or_network_owner"</literal>, <emphasis>create_subnet</emphasis> is a
            policy, and <emphasis>admin_or_network_owner</emphasis> is a rule.</para>
  <para>Policies are triggered by the Networking policy engine whenever one of
            them matches a Networking API operation or a specific attribute being
            used in a given operation. For instance the <literal>create_subnet</literal> policy is
            triggered every time a <literal>POST /v2.0/subnets</literal> request is sent to the
            Networking server; on the other hand <literal>create_network:shared</literal> is
            triggered every time the <emphasis>shared</emphasis> attribute is explicitly specified (and
            set to a value different from its default) in a <literal>POST /v2.0/networks</literal>
            request. It is also worth mentioning that policies can also be related
            to specific API extensions; for instance
            <literal>extension:provider_network:set</literal> is triggered if the attributes
            defined by the Provider Network extensions are specified in an API
            request.</para>
  <para>An authorization policy can be composed by one or more rules. If more
            rules are specified then the evaluation policy succeeds if any of the
            rules evaluates successfully; if an API operation matches multiple
            policies, then all the policies must evaluate successfully. Also,
            authorization rules are recursive. Once a rule is matched, the rule(s)
            can be resolved to another rule, until a terminal rule is reached.</para>
  <para>The Networking policy engine currently defines the following kinds of
            terminal rules:</para>
  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">Role-based rules</emphasis> evaluate successfully if the user who submits
                    the request has the specified role. For instance <literal>"role:admin"</literal> is
                    successful if the user who submits the request is an administrator.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">Field-based rules</emphasis> evaluate successfully if a field of the
                    resource specified in the current request matches a specific value.
                    For instance <literal>"field:networks:shared=True"</literal> is successful if the
                    <literal>shared</literal> attribute of the <literal>network</literal> resource is set to true.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">Generic rules</emphasis> compare an attribute in the resource with an
                    attribute extracted from the userâ€™s security credentials and
                    evaluates successfully if the comparison is successful. For instance
                    <literal>"tenant_id:%(tenant_id)s"</literal> is successful if the project identifier
                    in the resource is equal to the project identifier of the user
                    submitting the request.</para>
    </listitem>
  </itemizedlist>
  <para>This extract is from the default <literal>policy.json</literal> file:</para>
  <itemizedlist>
    <listitem>
      <para>A rule that evaluates successfully if the current user is an
                    administrator or the owner of the resource specified in the request
                    (project identifier is equal).</para>
      <screen language="none">{
 "admin_or_owner": "role:admin",
 "tenant_id:%(tenant_id)s",
 "admin_or_network_owner": "role:admin",
 "tenant_id:%(network_tenant_id)s",
 "admin_only": "role:admin",
 "regular_user": "",
 "shared":"field:networks:shared=True",
 "default":</screen>
    </listitem>
    <listitem>
      <para>The default policy that is always evaluated if an API operation does
                    not match any of the policies in <literal>policy.json</literal>.</para>
      <screen language="none">"rule:admin_or_owner",
"create_subnet": "rule:admin_or_network_owner",
"get_subnet": "rule:admin_or_owner",
"rule:shared",
"update_subnet": "rule:admin_or_network_owner",
"delete_subnet": "rule:admin_or_network_owner",
"create_network": "",
"get_network": "rule:admin_or_owner",</screen>
    </listitem>
    <listitem>
      <para>This policy evaluates successfully if either <emphasis>admin_or_owner</emphasis>, or
                    <emphasis>shared</emphasis> evaluates successfully.</para>
      <screen language="none">"rule:shared",
"create_network:shared": "rule:admin_only"</screen>
    </listitem>
    <listitem>
      <para>This policy restricts the ability to manipulate the <emphasis>shared</emphasis>
                    attribute for a network to administrators only.</para>
      <screen language="none"> ,
 "update_network": "rule:admin_or_owner",
"delete_network": "rule:admin_or_owner",
"create_port": "",
"create_port:mac_address": "rule:admin_or_network_owner",
"create_port:fixed_ips":</screen>
    </listitem>
    <listitem>
      <para>This policy restricts the ability to manipulate the <emphasis>mac_address</emphasis>
                    attribute for a port only to administrators and the owner of the
                    network where the port is attached.</para>
      <screen language="none">  "rule:admin_or_network_owner",
 "get_port": "rule:admin_or_owner",
 "update_port": "rule:admin_or_owner",
  "delete_port": "rule:admin_or_owner"
}</screen>
    </listitem>
  </itemizedlist>
  <para>In some cases, some operations are restricted to administrators only.
            This example shows you how to modify a policy file to permit project to
            define networks, see their resources, and permit administrative users to
            perform all other operations:</para>
  <screen language="none">{
        "admin_or_owner": "role:admin", "tenant_id:%(tenant_id)s",
        "admin_only": "role:admin", "regular_user": "",
        "default": "rule:admin_only",
        "create_subnet": "rule:admin_only",
        "get_subnet": "rule:admin_or_owner",
        "update_subnet": "rule:admin_only",
        "delete_subnet": "rule:admin_only",
        "create_network": "",
        "get_network": "rule:admin_or_owner",
        "create_network:shared": "rule:admin_only",
        "update_network": "rule:admin_or_owner",
        "delete_network": "rule:admin_or_owner",
        "create_port": "rule:admin_only",
        "get_port": "rule:admin_or_owner",
        "update_port": "rule:admin_only",
        "delete_port": "rule:admin_only"
}</screen>
</section>
