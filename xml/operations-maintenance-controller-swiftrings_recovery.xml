<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="swiftrings_recovery">
 <title>Swift Rings Recovery</title>
 <para>
  To recover your Swift rings in the event of a disaster, follow the procedure
  that applies to your situation: either recover the rings from one Swift node
  if possible, or use the SSH backup that you have set up.
 </para>
 <para>
  To recover your Swift rings in the event of a disaster, follow the procedure
  that applies to your situation: either recover the rings from one Swift node
  if possible, or use the SSH backup that you have set up.
 </para>
 <section>
  <title>Restore from the Swift deployment backup</title>
  <para>
   See <xref linkend="topic_gbz_13t_mt"/>.
  </para>
 </section>
 <section>
  <title>Restore from the SSH Freezer backup</title>
  <para>
   In the very specific use case where you lost all system disks of all object
   nodes, and Swift proxy nodes are corrupted, you can recover the rings
   because a copy of the Swift rings is stored in Freezer. This means that
   Swift data is still there (the disks used by Swift needs to be still
   accessible).
  </para>
  <para>
   Recover the rings with these steps.
  </para>
  <orderedlist>
   <listitem>
    <para>
     Log in to a node that has the freezer-agent installed.
    </para>
   </listitem>
   <listitem>
    <para>
     Become root:
    </para>
<screen>sudo su</screen>
   </listitem>
   <listitem>
    <para>
     Create the temporary directory to restore your files to:
    </para>
<screen>mkdir /tmp/swift_builder_dir_restore/</screen>
   </listitem>
   <listitem>
    <para>
     Create a restore file with the following content:
    </para>
<screen>cat &lt;&lt; EOF &gt; ./restore_config.ini
[default]
action = restore
storage = ssh
compression = bzip2
restore_abs_path = /tmp/swift_builder_dir_restore/
ssh_key = /etc/freezer/ssh_key
ssh_host = &lt;freezer_ssh_host&gt;
ssh_port = &lt;freezer_ssh_port&gt;
ssh_user name = &lt;freezer_ssh_user name&gt;
container = &lt;freezer_ssh_base_rid&gt;/freezer_swift_backup_name = freezer_swift_builder_backup
hostname = &lt;hostname of the old first Swift-Proxy (SWF-PRX[0])&gt;
EOF</screen>
   </listitem>
   <listitem>
    <para>
     Edit the file and repave all &lt;tags&gt; with the right information.
    </para>
<screen>vim ./restore_config.ini</screen>
    <para>
     You will also need to put the SSH key used to do the backups in
     /etc/freezer/ssh_key and remember to set the right permissions: 600.
    </para>
   </listitem>
   <listitem>
    <para>
     Execute the restore job:
    </para>
<screen>freezer-agent --config ./restore_config.ini</screen>
    <para>
     You now have the Swift rings in
     <literal>/tmp/swift_builder_dir_restore/</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     If the SWF-PRX[0] is already deployed, copy the contents of the restored
     directory (<literal>/tmp/swift_builder_dir_restore/<replaceable>CLOUD_NAME</replaceable>/<replaceable>CONTROL_PLANE_NAME</replaceable>/builder_dir/</literal>) to
     <literal>/etc/swiftlm/<replaceable>CLOUD_NAME</replaceable>/<replaceable>CONTROL_PLANE_NAME</replaceable>/builder_dir/</literal> on the SWF-PRX[0] Then from
     the &lcm; run:
    </para>
<screen>&prompt.sudo;cp -pr /tmp/swift_builder_dir_restore/<replaceable>CLOUD_NAME</replaceable>/<replaceable>CONTROL_PLANE_NAME</replaceable>/builder_dir/* \
    /etc/swiftlm/<replaceable>CLOUD_NAME</replaceable>/<replaceable>CONTROL_PLANE_NAME</replaceable>/builder_dir/</screen>
    <para>For example</para>
<screen>&prompt.sudo;cp -pr /tmp/swift_builder_dir_restore/entry-scale-kvm/control-plane-1/builder_dir/* \
    /etc/swiftlm/entry-scale-kvm/control-plane-1/builder_dir/</screen>
<screen>&prompt.ardana;cd ~/scratch/ansible/next/ardana/ansible
&prompt.ardana;ansible-playbook -i hosts/verb_hosts swift-reconfigure.yml</screen>
   </listitem>
   <listitem>
    <para>
     If the SWF-ACC[0] is<emphasis role="bold"> not </emphasis>deployed, from
     the &lcm; run these playbooks:
    </para>
<screen>&prompt.ardana;cd ~/scratch/ansible/next/ardana/ansible
&prompt.ardana;ansible-playbook -i hosts/verb_hosts guard-deployment.yml
&prompt.ardana;ansible-playbook -i hosts/verb_hosts osconfig-run.yml --limit &lt;SWF-ACC[0]-hostname&gt;</screen>
   </listitem>
   <listitem>
    <para>
     Copy the contents of the restored directory
     (<literal>/tmp/swift_builder_dir_restore/<replaceable>CLOUD_NAME</replaceable>/<replaceable>CONTROL_PLANE_NAME</replaceable>/builder_dir/</literal>) to
     <literal>/etc/swiftlm/<replaceable>CLOUD_NAME</replaceable>/<replaceable>CONTROL_PLANE_NAME</replaceable>/builder_dir/</literal> on the SWF-ACC[0] You will
     have to create the directories :
     <literal>/etc/swiftlm/<replaceable>CLOUD_NAME</replaceable>/<replaceable>CONTROL_PLANE_NAME</replaceable>/builder_dir/</literal>
    </para>
<screen>&prompt.sudo;cp -pr /tmp/swift_builder_dir_restore/<replaceable>CLOUD_NAME</replaceable>/<replaceable>CONTROL_PLANE_NAME</replaceable>/builder_dir/* \
    /etc/swiftlm/<replaceable>CLOUD_NAME</replaceable>/<replaceable>CONTROL_PLANE_NAME</replaceable>/builder_dir/</screen>
    <para>For example</para>
<screen>&prompt.sudo;cp -pr /tmp/swift_builder_dir_restore/entry-scale-kvm/control-plane-1/builder_dir/* \
    /etc/swiftlm/entry-scale-kvm/control-plane-1/builder_dir/</screen>
   </listitem>
   <listitem>
    <para>
     From the &lcm;, run the <filename>ardana-deploy.yml</filename>
     playbook:
    </para>
<screen>&prompt.ardana;cd ~/scratch/ansible/next/ardana/ansible
&prompt.ardana;ansible-playbook -i hosts/verb_hosts ardana-deploy.yml</screen>
   </listitem>
  </orderedlist>
 </section>
</section>
