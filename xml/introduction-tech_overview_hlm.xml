<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>

<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="tech_overview_hlm">
 <title>&kw-hos-tm;: &lcm; Overview</title>
 <section>
  <title>Lifecycle management</title>
  <para>
   Performing software installation and configuration activity can be time
   consuming, complex and often error prone. To help with this process,
   &kw-hos-phrase; provides lifecycle management tools as a way to simplify and
   accelerate the process of installing and performing on-going lifecycle
   operations for OpenStack clouds. The goal is to provide flexible, yet
   easy-to-use tools that will reduce the time taken to deploy a cloud while
   minimizing the errors that can occur in a manual process. The lifecycle
   management tools use the Ansible open source automation engine for deploying
   and configuring the OpenStack Software.
  </para>
 </section>
 <section>
  <title>Ansible</title>
  <para>
   Ansible is an IT automation engine that can be used for automating cloud
   provisioning, configuration management, application deployment, intraservice
   orchestration, and many other IT needs. Being designed for multi-tier
   deployments, Ansible models IT infrastructure by describing how systems
   inter-relate, rather than just managing one system at a time. Ansible uses
   no agents and no additional custom security infrastructure, so it is easy to
   deploy. HPE created a set of Ansible scripts known as
   <literal>Playbooks</literal> to install, configure, maintain and update
   &kw-hos-phrase;. These playbooks are collectively known as the
   <emphasis role="bold">&lcm;</emphasis>.
  </para>
  <para>
   During installation of &kw-hos-phrase;, the core OpenStack services, such as
   compute, networking, orchestration, storage, identity, etc. are installed
   automatically, and by default. These services are integrated and work
   together out of the box. Rather than configuring each service individually
   and configuring their interaction, the &lcm; provides
   scripts that perform the integrations for you.
  </para>
 </section>
 <section>
  <title>Example Configurations</title>
  <para>
   &kw-hos-phrase; clouds are defined through a set of configuration files in a
   simple text-based format called YAML. These files are collectively referred
   to as the &kw-hos; input model. Rather than needing to define a cloud from
   scratch every time, &kw-hos-phrase; includes a series of starting point
   examples that reflect some of the more common cloud configurations in use
   today. When deploying an initial &kw-hos-phrase; cloud, you can choose to
   start with one of the supplied examples that is closest to your desired
   configuration and modify it with the specific configuration data for your
   environment.
  </para>
 </section>
 <section>
  <title>Cobbler</title>
  <para>
   Cobbler is a Linux installation server that allows for rapid setup of
   network installation environments. It glues together and automates many
   associated Linux tasks so you do not have to hop between many various
   commands and applications when deploying new systems, and, in some cases,
   changing existing ones. Cobbler can help with provisioning, managing DNS and
   DHCP, package updates, power management, configuration management
   orchestration, and much more. &lcm; utilizes Cobbler as
   an included and optional baremetal deployer.
  </para>
  <para>
   Before the installation of OpenStack, each server needs to have the basic
   &hlinux; installed along with SSH and security certificates.
   &productname; uses Cobbler, IPMI and baremetal Ansible playbooks to
   accomplish this. When Cobbler is deployed, it utilizes the baremetal
   information specified in the servers model. The MAC and IP address specified
   for each node on the baremetal/PXE installation network is loaded into
   Cobbler. Once Cobbler has been configured, the baremetal playbooks are used
   to re-image each of the servers that are being provisioned. Each server uses
   PXE to boot into the Cobbler installer, which lays down the OS and security
   certificates. The servers are then rebooted to the new OS image on the
   internal hard disks and are ready for the final installation phase.
  </para>
 </section>
 <section>
  <title>Configuration Processor</title>
  <para>
   The configuration processor reads and validates the input model described in
   the YAML files. It combines this information with the service definitions
   provided by &kw-hos; and any persisted state information about the current
   deployment and then generates the data that is used by the Asible Playbooks
   to deploy the cloud. It also produces a set of information files that
   provide details about the configuration.
  </para>
  <para>
   Once the configuration processor has been run successfully, a staging area
   is created and populated with the playbooks and configuration files required
   for the final deployment.
  </para>
 </section>
 <section>
  <title>Installing and Configuring OpenStack Services</title>
  <para>
   There are two major phases to the final deployment:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Configuring the OS
    </para>
   </listitem>
   <listitem>
    <para>
     Installing OpenStack services
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The OS Configuration phase installs and configures services such as
   networking, iptables, NTP and root disk layouts. This phase also transitions
   hostnames and implements a common <literal>/etc/hosts</literal> file. The
   OpenStack install phase runs a deploy playbook for each service. Based on
   the server role, these playbooks would also configure additional disks for
   services like nova, cinder, and swift. As each service is installed, the
   appropriate &o_monitor; alarm definitions are also created. The &o_monitor; alarm
   definitions can be modified and added to.
  </para>
 </section>
 <section>
  <title>Upgrade</title>
  <para>
   &kw-hos; uses &lcm; for hotfixes, patches, updates and
   upgrades. the &lcm; ensures that intermediate upgrade states are
   persisted, even if upgrade is aborted and that persisted states are reused
   when upgrade is retried
  </para>
 </section>
 <section>
  <title>Summary of the Deployment Process</title>
  <itemizedlist>
   <listitem>
    <para>
     Setup the physical infrastructure
    </para>
   </listitem>
   <listitem>
    <para>
     Define the Input Model
    </para>
   </listitem>
   <listitem>
    <para>
     Install the Operating System
    </para>
   </listitem>
   <listitem>
    <para>
     Run the Configuration Processor
    </para>
   </listitem>
   <listitem>
    <para>
     Install and configure OpenStack
    </para>
   </listitem>
  </itemizedlist>
 </section>
</section>
