<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Data retrieval</title>
  <warning>
    <para>Accessing meters through the v2 API of Ceilometer is deprecated in Ocata and
                has been unmaintained for a few cycles prior. We recommend storing metric
                data in a time-series optimized database such as <link xlink:href="http://gnocchi.xyz/">Gnocchi</link> and event data in
                <link xlink:href="https://docs.openstack.org/panko/latest/">Panko</link>.</para>
  </warning>
  <para>The Telemetry service offers several mechanisms from which the persisted
            data can be accessed. As described in <xref linkend="telemetry-system-architecture"/> and
            in <xref linkend="telemetry-data-collection"/>, the collected information can be stored in
            one or more database back-ends, which are hidden by the Telemetry RESTful API.</para>
  <note>
    <para>It is highly recommended not to access the database directly and
                read or modify any data in it. The API layer hides all the changes
                in the actual database schema and provides a standard interface to
                expose the samples, alarms and so forth.</para>
  </note>
  <section>
    <title>Telemetry v2 API</title>
    <para>The Telemetry service provides a RESTful API, from which the collected
                samples and all the related information can be retrieved, like the list
                of meters, alarm definitions and so forth.</para>
    <para>The Telemetry API URL can be retrieved from the service catalog provided
                by OpenStack Identity, which is populated during the installation
                process. The API access needs a valid token and proper permission to
                retrieve data, as described in telemetry-users-roles-projects.</para>
    <para>Further information about the available API endpoints can be found in
                the <link xlink:href="https://docs.openstack.org/pike/api/">OpenStack Pike API Reference Documentation</link>.</para>
    <section xml:id="query">
      <title>Query</title>
      <para>The API provides some additional functionalities, like querying the
                    collected data set. For the samples and alarms API endpoints, both
                    simple and complex query styles are available, whereas for the other
                    endpoints only simple queries are supported.</para>
      <para>After validating the query parameters, the processing is done on the
                    database side in the case of most database back-ends in order to achieve
                    better performance.</para>
      <para>
        <emphasis role="bold">Simple query</emphasis>
      </para>
      <para>Many of the API endpoints accept a query filter argument, which should
                    be a list of data structures that consist of the following items:</para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>field</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>op</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>value</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>type</literal>
          </para>
        </listitem>
      </itemizedlist>
      <para>Regardless of the endpoint on which the filter is applied on, it will
                    always target the fields of the <link xlink:href="https://docs.openstack.org/ceilometer/pike/webapi/v2.html#Sample">Sample type</link>.</para>
      <para>Several fields of the API endpoints accept shorter names than the ones
                    defined in the reference. The API will do the transformation internally
                    and return the output with the fields that are listed in the <link xlink:href="https://docs.openstack.org/ceilometer/pike/webapi/v2.html">API reference</link>.
                    The fields are the following:</para>
      <itemizedlist>
        <listitem>
          <para><literal>project_id</literal>: project</para>
        </listitem>
        <listitem>
          <para><literal>resource_id</literal>: resource</para>
        </listitem>
        <listitem>
          <para><literal>user_id</literal>: user</para>
        </listitem>
      </itemizedlist>
      <para>When a filter argument contains multiple constraints of the above form,
                    a logical <literal>AND</literal> relation between them is implied.</para>
      <para>
        <emphasis role="bold">Complex query</emphasis>
      </para>
      <para>The filter expressions of the complex query feature operate on the
                    fields of <literal>Sample</literal>, <literal>Alarm</literal> and <literal>AlarmChange</literal> types. The following
                    comparison operators are supported:</para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>=</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>!=</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>&lt;</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>&lt;=</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>&gt;</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>&gt;=</literal>
          </para>
        </listitem>
      </itemizedlist>
      <para>The following logical operators can be used:</para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>and</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>or</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>not</literal>
          </para>
        </listitem>
      </itemizedlist>
      <note>
        <para>The <literal>not</literal> operator has different behavior in MongoDB and in the
                        SQLAlchemy-based database engines. If the <literal>not</literal> operator is
                        applied on a non existent metadata field then the result depends on
                        the database engine. In case of MongoDB, it will return every sample
                        as the <literal>not</literal> operator is evaluated true for every sample where the
                        given field does not exist. On the other hand the SQL-based database
                        engine will return an empty result because of the underlying
                        <literal>join</literal> operation.</para>
      </note>
      <para>Complex query supports specifying a list of <literal>orderby</literal> expressions.
                    This means that the result of the query can be ordered based on the
                    field names provided in this list. When multiple keys are defined for
                    the ordering, these will be applied sequentially in the order of the
                    specification. The second expression will be applied on the groups for
                    which the values of the first expression are the same. The ordering can
                    be ascending or descending.</para>
      <para>The number of returned items can be bounded using the <literal>limit</literal> option.</para>
      <para>The <literal>filter</literal>, <literal>orderby</literal> and <literal>limit</literal> fields are optional.</para>
      <note>
        <para>As opposed to the simple query, complex query is available via a
                        separate API endpoint. For more information see the <link xlink:href="https://docs.openstack.org/ceilometer/pike/webapi/v2.html#v2-web-api">Telemetry v2 Web API
                            Reference</link>.</para>
      </note>
    </section>
    <section>
      <title>Statistics</title>
      <para>The sample data can be used in various ways for several purposes, like
                    billing or profiling. In external systems the data is often used in the
                    form of aggregated statistics. The Telemetry API provides several
                    built-in functions to make some basic calculations available without any
                    additional coding.</para>
      <para>Telemetry supports the following statistics and aggregation functions:</para>
      <variablelist>
        <varlistentry>
          <term>
            <literal>avg</literal>
          </term>
          <listitem>
            <para>Average of the sample volumes over each period.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>cardinality</literal>
          </term>
          <listitem>
            <para>Count of distinct values in each period identified by a key
                                specified as the parameter of this aggregate function. The supported
                                parameter values are:</para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>project_id</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>resource_id</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>user_id</literal>
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>
      <note>
        <para>The <literal>aggregate.param</literal> option is required.</para>
      </note>
      <variablelist>
        <varlistentry>
          <term>
            <literal>count</literal>
          </term>
          <listitem>
            <para>Number of samples in each period.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>max</literal>
          </term>
          <listitem>
            <para>Maximum of the sample volumes in each period.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>min</literal>
          </term>
          <listitem>
            <para>Minimum of the sample volumes in each period.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>stddev</literal>
          </term>
          <listitem>
            <para>Standard deviation of the sample volumes in each period.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>sum</literal>
          </term>
          <listitem>
            <para>Sum of the sample volumes over each period.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>The simple query and the statistics functionality can be used together
                    in a single API request.</para>
    </section>
  </section>
  <section>
    <title>Telemetry command-line client and SDK</title>
    <para>The Telemetry service provides a command-line client, with which the
                collected data is available just as the alarm definition and retrieval
                options. The client uses the Telemetry RESTful API in order to execute
                the requested operations.</para>
    <para>To be able to use the <command>ceilometer</command> command, the
                python-ceilometerclient package needs to be installed and configured
                properly. For details about the installation process, see the <link xlink:href="https://docs.openstack.org/project-install-guide/telemetry/ocata/">Telemetry
                    chapter</link>
                in the Installation Tutorials and Guides.</para>
    <note>
      <para>The Telemetry service captures the user-visible resource usage data.
                    Therefore the database will not contain any data without the
                    existence of these resources, like VM images in the OpenStack Image
                    service.</para>
    </note>
    <para>Similarly to other OpenStack command-line clients, the <literal>ceilometer</literal>
                client uses OpenStack Identity for authentication. The proper
                credentials and <literal>--auth_url</literal> parameter have to be defined via command
                line parameters or environment variables.</para>
    <para>This section provides some examples without the aim of completeness.
                These commands can be used for instance for validating an installation
                of Telemetry.</para>
    <para>To retrieve the list of collected meters, the following command should
                be used:</para>
    <screen language="console"><?dbsuse-fo font-size="8pt"?>$ ceilometer meter-list
+------------------------+------------+------+------------------------------------------+----------------------------------+----------------------------------+
| Name                   | Type       | Unit | Resource ID                              | User ID                          | Project ID                       |
+------------------------+------------+------+------------------------------------------+----------------------------------+----------------------------------+
| cpu                    | cumulative | ns   | bb52e52b-1e42-4751-b3ac-45c52d83ba07     | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| cpu                    | cumulative | ns   | c8d2e153-a48f-4cec-9e93-86e7ac6d4b0b     | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| cpu_util               | gauge      | %    | bb52e52b-1e42-4751-b3ac-45c52d83ba07     | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| cpu_util               | gauge      | %    | c8d2e153-a48f-4cec-9e93-86e7ac6d4b0b     | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.device.read.bytes | cumulative | B    | bb52e52b-1e42-4751-b3ac-45c52d83ba07-hdd | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.device.read.bytes | cumulative | B    | bb52e52b-1e42-4751-b3ac-45c52d83ba07-vda | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.device.read.bytes | cumulative | B    | c8d2e153-a48f-4cec-9e93-86e7ac6d4b0b-hdd | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.device.read.bytes | cumulative | B    | c8d2e153-a48f-4cec-9e93-86e7ac6d4b0b-vda | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| ...                                                                                                                                                         |
+------------------------+------------+------+------------------------------------------+----------------------------------+----------------------------------+</screen>
    <para>The <command>ceilometer</command> command was run with <literal>admin</literal> rights, which means
                that all the data is accessible in the database. For more information
                about access right see telemetry-users-roles-projects. As it can be seen
                in the above example, there are two VM instances existing in the system, as
                there are VM instance related meters on the top of the result list. The
                existence of these meters does not indicate that these instances are running at
                the time of the request. The result contains the currently collected meters per
                resource, in an ascending order based on the name of the meter.</para>
    <para>Samples are collected for each meter that is present in the list of
                meters, except in case of instances that are not running or deleted from
                the OpenStack Compute database. If an instance no longer exists and
                there is a <literal>time_to_live</literal> value set in the <literal>ceilometer.conf</literal>
                configuration file, then a group of samples are deleted in each
                expiration cycle. When the last sample is deleted for a meter, the
                database can be cleaned up by running ceilometer-expirer and the meter
                will not be present in the list above anymore. For more information
                about the expiration procedure see <xref linkend="telemetry-expiry"/>.</para>
    <para>The Telemetry API supports simple query on the meter endpoint. The query
                functionality has the following syntax:</para>
    <screen language="console">--query &lt;field1&gt;&lt;operator1&gt;&lt;value1&gt;;...;&lt;field_n&gt;&lt;operator_n&gt;&lt;value_n&gt;</screen>
    <para>The following command needs to be invoked to request the meters of one
                VM instance:</para>
    <screen language="console"><?dbsuse-fo font-size="8pt"?>$ ceilometer meter-list --query resource=bb52e52b-1e42-4751-b3ac-45c52d83ba07
+-------------------------+------------+-----------+--------------------------------------+----------------------------------+----------------------------------+
| Name                    | Type       | Unit      | Resource ID                          | User ID                          | Project ID                       |
+-------------------------+------------+-----------+--------------------------------------+----------------------------------+----------------------------------+
| cpu                     | cumulative | ns        | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| cpu_util                | gauge      | %         | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| cpu_l3_cache            | gauge      | B         | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.ephemeral.size     | gauge      | GB        | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.read.bytes         | cumulative | B         | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.read.bytes.rate    | gauge      | B/s       | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.read.requests      | cumulative | request   | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.read.requests.rate | gauge      | request/s | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.root.size          | gauge      | GB        | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.write.bytes        | cumulative | B         | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.write.bytes.rate   | gauge      | B/s       | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.write.requests     | cumulative | request   | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| disk.write.requests.rate| gauge      | request/s | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| instance                | gauge      | instance  | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| instance:m1.tiny        | gauge      | instance  | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| memory                  | gauge      | MB        | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
| vcpus                   | gauge      | vcpu      | bb52e52b-1e42-4751-b3ac-45c52d83ba07 | b6e62aad26174382bc3781c12fe413c8 | cbfa8e3dfab64a27a87c8e24ecd5c60f |
+-------------------------+------------+-----------+--------------------------------------+----------------------------------+----------------------------------+</screen>
    <para>As it was described above, the whole set of samples can be retrieved
                that are stored for a meter or filtering the result set by using one of
                the available query types. The request for all the samples of the
                <literal>cpu</literal> meter without any additional filtering looks like the following:</para>
    <screen language="console"><?dbsuse-fo font-size="8pt"?>$ ceilometer sample-list --meter cpu
+--------------------------------------+-------+------------+------------+------+---------------------+
| Resource ID                          | Meter | Type       | Volume     | Unit | Timestamp           |
+--------------------------------------+-------+------------+------------+------+---------------------+
| c8d2e153-a48f-4cec-9e93-86e7ac6d4b0b | cpu   | cumulative | 5.4863e+11 | ns   | 2014-08-31T11:17:03 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu   | cumulative | 5.7848e+11 | ns   | 2014-08-31T11:17:03 |
| c8d2e153-a48f-4cec-9e93-86e7ac6d4b0b | cpu   | cumulative | 5.4811e+11 | ns   | 2014-08-31T11:07:05 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu   | cumulative | 5.7797e+11 | ns   | 2014-08-31T11:07:05 |
| c8d2e153-a48f-4cec-9e93-86e7ac6d4b0b | cpu   | cumulative | 5.3589e+11 | ns   | 2014-08-31T10:27:19 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu   | cumulative | 5.6397e+11 | ns   | 2014-08-31T10:27:19 |
| ...                                                                                                 |
+--------------------------------------+-------+------------+------------+------+---------------------+</screen>
    <para>The result set of the request contains the samples for both instances
                ordered by the timestamp field in the default descending order.</para>
    <para>The simple query makes it possible to retrieve only a subset of the
                collected samples. The following command can be executed to request the
                <literal>cpu</literal> samples of only one of the VM instances:</para>
    <screen language="console"><?dbsuse-fo font-size="8pt"?>$ ceilometer sample-list --meter cpu --query resource=bb52e52b-1e42-4751-
  b3ac-45c52d83ba07
+--------------------------------------+------+------------+------------+------+---------------------+
| Resource ID                          | Name | Type       | Volume     | Unit | Timestamp           |
+--------------------------------------+------+------------+------------+------+---------------------+
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu  | cumulative | 5.7906e+11 | ns   | 2014-08-31T11:27:08 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu  | cumulative | 5.7848e+11 | ns   | 2014-08-31T11:17:03 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu  | cumulative | 5.7797e+11 | ns   | 2014-08-31T11:07:05 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu  | cumulative | 5.6397e+11 | ns   | 2014-08-31T10:27:19 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu  | cumulative | 5.6207e+11 | ns   | 2014-08-31T10:17:03 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu  | cumulative | 5.3831e+11 | ns   | 2014-08-31T08:41:57 |
| ...                                                                                                |
+--------------------------------------+------+------------+------------+------+---------------------+</screen>
    <para>As it can be seen on the output above, the result set contains samples
                for only one instance of the two.</para>
    <para>The <command>ceilometer query-samples</command> command is used to execute rich
                queries. This command accepts the following parameters:</para>
    <variablelist>
      <varlistentry>
        <term>
          <literal>--filter</literal>
        </term>
        <listitem>
          <para>Contains the filter expression for the query in the form of:
                            <literal>{complex_op: [{simple_op: {field_name: value}}]}</literal>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--orderby</literal>
        </term>
        <listitem>
          <para>Contains the list of <literal>orderby</literal> expressions in the form of:
                            <literal>[{field_name: direction}, {field_name: direction}]</literal>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--limit</literal>
        </term>
        <listitem>
          <para>Specifies the maximum number of samples to return.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>For more information about complex queries see
                <xref linkend="query"/>.</para>
    <para>As the complex query functionality provides the possibility of using
                complex operators, it is possible to retrieve a subset of samples for a
                given VM instance. To request for the first six samples for the <literal>cpu</literal>
                and <literal>disk.read.bytes</literal> meters, the following command should be invoked:</para>
    <screen language="none"><?dbsuse-fo font-size="8pt"?>$ ceilometer query-samples --filter '{"and": \
  [{"=":{"resource":"bb52e52b-1e42-4751-b3ac-45c52d83ba07"}},{"or":[{"=":{"counter_name":"cpu"}}, \
  {"=":{"counter_name":"disk.read.bytes"}}]}]}' --orderby '[{"timestamp":"asc"}]' --limit 6
+--------------------------------------+-----------------+------------+------------+------+---------------------+
| Resource ID                          | Meter           | Type       | Volume     | Unit | Timestamp           |
+--------------------------------------+-----------------+------------+------------+------+---------------------+
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | disk.read.bytes | cumulative | 385334.0   | B    | 2014-08-30T13:00:46 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu             | cumulative | 1.2132e+11 | ns   | 2014-08-30T13:00:47 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu             | cumulative | 1.4295e+11 | ns   | 2014-08-30T13:10:51 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | disk.read.bytes | cumulative | 601438.0   | B    | 2014-08-30T13:10:51 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | disk.read.bytes | cumulative | 601438.0   | B    | 2014-08-30T13:20:33 |
| bb52e52b-1e42-4751-b3ac-45c52d83ba07 | cpu             | cumulative | 1.4795e+11 | ns   | 2014-08-30T13:20:34 |
+--------------------------------------+-----------------+------------+------------+------+---------------------+</screen>
    <para>Ceilometer also captures data as events, which represents the state of a
                resource. Refer to <literal>/telemetry-events</literal> for more information regarding
                Events.</para>
    <para>To retrieve a list of recent events that occurred in the system, the
                following command can be executed:</para>
    <screen language="console"><?dbsuse-fo font-size="8pt"?>$ ceilometer event-list
+--------------------------------------+---------------+----------------------------+-----------------------------------------------------------------+
| Message ID                           | Event Type    | Generated                  | Traits                                                          |
+--------------------------------------+---------------+----------------------------+-----------------------------------------------------------------+
| dfdb87b6-92c6-4d40-b9b5-ba308f304c13 | image.create  | 2015-09-24T22:17:39.498888 | +---------+--------+-----------------+                          |
|                                      |               |                            | |   name  |  type  |      value      |                          |
|                                      |               |                            | +---------+--------+-----------------+                          |
|                                      |               |                            | | service | string | image.localhost |                          |
|                                      |               |                            | +---------+--------+-----------------+                          |
| 84054bc6-2ae6-4b93-b5e7-06964f151cef | image.prepare | 2015-09-24T22:17:39.594192 | +---------+--------+-----------------+                          |
|                                      |               |                            | |   name  |  type  |      value      |                          |
|                                      |               |                            | +---------+--------+-----------------+                          |
|                                      |               |                            | | service | string | image.localhost |                          |
|                                      |               |                            | +---------+--------+-----------------+                          |
| 2ec99c2c-08ee-4079-bf80-27d4a073ded6 | image.update  | 2015-09-24T22:17:39.578336 | +-------------+--------+--------------------------------------+ |
|                                      |               |                            | |     name    |  type  |                value                 | |
|                                      |               |                            | +-------------+--------+--------------------------------------+ |
|                                      |               |                            | |  created_at | string |         2015-09-24T22:17:39Z         | |
|                                      |               |                            | |     name    | string |    cirros-0.3.5-x86_64-uec-kernel    | |
|                                      |               |                            | |  project_id | string |   56ffddea5b4f423496444ea36c31be23   | |
|                                      |               |                            | | resource_id | string | 86eb8273-edd7-4483-a07c-002ff1c5657d | |
|                                      |               |                            | |   service   | string |           image.localhost            | |
|                                      |               |                            | |    status   | string |                saving                | |
|                                      |               |                            | |   user_id   | string |   56ffddea5b4f423496444ea36c31be23   | |
|                                      |               |                            | +-------------+--------+--------------------------------------+ |
+--------------------------------------+---------------+----------------------------+-----------------------------------------------------------------+</screen>
    <note>
      <para>In Liberty, the data returned corresponds to the role and user. Non-admin
                    users will only return events that are scoped to them. Admin users will
                    return all events related to the project they administer as well as
                    all unscoped events.</para>
    </note>
    <para>Similar to querying meters, additional filter parameters can be given to
                retrieve specific events:</para>
    <screen language="console"><?dbsuse-fo font-size="8pt"?>$ ceilometer event-list -q 'event_type=compute.instance.exists;instance_type=m1.tiny'
+--------------------------------------+-------------------------+----------------------------+----------------------------------------------------------------------------------+
| Message ID                           | Event Type              | Generated                  | Traits                                                                           |
+--------------------------------------+-------------------------+----------------------------+----------------------------------------------------------------------------------+
| 134a2ab3-6051-496c-b82f-10a3c367439a | compute.instance.exists | 2015-09-25T03:00:02.152041 | +------------------------+----------+------------------------------------------+ |
|                                      |                         |                            | |          name          |   type   |                  value                   | |
|                                      |                         |                            | +------------------------+----------+------------------------------------------+ |
|                                      |                         |                            | | audit_period_beginning | datetime |           2015-09-25T02:00:00            | |
|                                      |                         |                            | |  audit_period_ending   | datetime |           2015-09-25T03:00:00            | |
|                                      |                         |                            | |        disk_gb         | integer  |                    1                     | |
|                                      |                         |                            | |      ephemeral_gb      | integer  |                    0                     | |
|                                      |                         |                            | |          host          |  string  |          localhost.localdomain           | |
|                                      |                         |                            | |      instance_id       |  string  |   2115f189-c7f1-4228-97bc-d742600839f2   | |
|                                      |                         |                            | |     instance_type      |  string  |                 m1.tiny                  | |
|                                      |                         |                            | |    instance_type_id    | integer  |                    2                     | |
|                                      |                         |                            | |      launched_at       | datetime |           2015-09-24T22:24:56            | |
|                                      |                         |                            | |       memory_mb        | integer  |                   512                    | |
|                                      |                         |                            | |       project_id       |  string  |     56ffddea5b4f423496444ea36c31be23     | |
|                                      |                         |                            | |       request_id       |  string  | req-c6292b21-bf98-4a1d-b40c-cebba4d09a67 | |
|                                      |                         |                            | |        root_gb         | integer  |                    1                     | |
|                                      |                         |                            | |        service         |  string  |                 compute                  | |
|                                      |                         |                            | |         state          |  string  |                  active                  | |
|                                      |                         |                            | |       tenant_id        |  string  |     56ffddea5b4f423496444ea36c31be23     | |
|                                      |                         |                            | |        user_id         |  string  |     0b3d725756f94923b9d0c4db864d06a9     | |
|                                      |                         |                            | |         vcpus          | integer  |                    1                     | |
|                                      |                         |                            | +------------------------+----------+------------------------------------------+ |
+--------------------------------------+-------------------------+----------------------------+----------------------------------------------------------------------------------+</screen>
    <note>
      <para>As of the Liberty release, the number of items returned will be
                    restricted to the value defined by <literal>default_api_return_limit</literal> in the
                    <literal>ceilometer.conf</literal> configuration file. Alternatively, the value can
                    be set per query by passing the <literal>limit</literal> option in the request.</para>
    </note>
    <section>
      <title>Telemetry Python bindings</title>
      <para>The command-line client library provides python bindings in order to use
                    the Telemetry Python API directly from python programs.</para>
      <para>The first step in setting up the client is to create a client instance
                    with the proper credentials:</para>
      <screen language="python"><?dbsuse-fo font-size="8pt"?>&gt;&gt;&gt; import ceilometerclient.client
&gt;&gt;&gt; cclient = ceilometerclient.client.get_client(VERSION, username=USERNAME, password=PASSWORD, tenant_name=PROJECT_NAME, auth_url=AUTH_URL)</screen>
      <para>The <literal>VERSION</literal> parameter can be <literal>1</literal> or <literal>2</literal>, specifying the API
                    version to be used.</para>
      <para>The method calls look like the following:</para>
      <screen language="python">&gt;&gt;&gt; cclient.meters.list()
 [&lt;Meter ...&gt;, ...]

&gt;&gt;&gt; cclient.samples.list()
 [&lt;Sample ...&gt;, ...]</screen>
      <para>For further details about the python-ceilometerclient package, see the
                    <link xlink:href="https://docs.openstack.org/python-ceilometerclient/pike/">Python bindings to the OpenStack Ceilometer
                        API</link>
                    reference.</para>
    </section>
  </section>
</section>
