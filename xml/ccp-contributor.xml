<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>

<!DOCTYPE chapter [
 <!ENTITY % entities SYSTEM "entity-decl.ent"> %entities;
 <!ENTITY % entitydecl SYSTEM "entity-decl.ent"> %entitydecl;
]>
<chapter xml:id="ccp-contributor" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Developer Documentation</title>
 <info>
  <productname>&productname;</productname>
  <productnumber>10</productnumber>
 </info>

<para>
  In this section, you will find documentation relevant to developing
  Containerized SUSE OpenStack Cloud.
</para>
<section xml:id="contributing">
  <title>Contributor Guidelines</title>
  <section xml:id="submodules">
    <title>Submodules</title>
    <para>
      This repository uses submodules. The following guidelines apply
      only to the socok8s project and repository. If your contribution
      affects other projects, please check those practices before
      contributing to them.
    </para>
  </section>
  <section xml:id="before-submitting-code">
    <title>Before submitting code</title>
    <para>
      This is a fast moving project. Please contact us before starting
      to work on it.
    </para>
    <para>
      If you are willing to submit code, please remember the following
      rules:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          All code should fit with our <xref linkend="codeguidelines"/>.
        </para>
      </listitem>
      <listitem>
        <para>
          All code is required to go through our <xref linkend="reviews"/>.
        </para>
      </listitem>
      <listitem>
        <para>
          Documentation should be provided with the code directly. See
          also <xref linkend="documentation"/>.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="bug_reporting">
    <title>Bug reporting process</title>
    <para>
      File bugs as Github issues.
    </para>
    <para>
      When submitting a bug or working on a bug, please observe the
      following criteria:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The description clearly states or describes the original
          problem or root cause of the problem.
        </para>
      </listitem>
      <listitem>
        <para>
          The description clearly states the expected outcome of the
          user action.
        </para>
      </listitem>
      <listitem>
        <para>
          Include historical information about how the problem was
          identified.
        </para>
      </listitem>
      <listitem>
        <para>
          Include any relevant logs or user configuration information,
          either directly or through a pastebin.
        </para>
      </listitem>
      <listitem>
        <para>
          If the issue is a bug that needs fixing in a branch other than
          master, please note the associated branch within the issue.
        </para>
      </listitem>
      <listitem>
        <para>
          The provided information should be totally self-contained.
          External access to web services/sites should not be needed.
        </para>
      </listitem>
      <listitem>
        <para>
          Steps to reproduce the problem if possible.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="reviews">
    <title>Review process</title>
    <para>
      Any new code will be reviewed before it is merged into our
      repositories.
    </para>
    <para>
      Two approving reviews are required before merging a pull request.
    </para>
    <para>
      Any patch can be refused by the community if it does not match the
      <xref linkend="codeguidelines"/>.
    </para>
  </section>
  <section xml:id="upstream-communication-channels">
    <title>Upstream communication channels</title>
    <para>
      Most of this project is a thin wrapper around the Airship,
      OpenStack Helm, OpenStack LOCI upstream projects.
    </para>
    <para>
      A developer should monitor the
      <emphasis role="strong">OpenStack-discuss</emphasis>
      <link xlink:href="http://lists.openstack.org/cgi-bin/mailman/listinfo">openstack
      mailing lists</link>, and the
      <emphasis role="strong">Airship-discuss</emphasis>
      <link xlink:href="http://lists.airshipit.org/cgi-bin/mailman/listinfo">airship
      mailing lists</link>
    </para>
    <para>
      Please contact us on freenode IRC, in the #openstack-helm or
      #airshipit channels.
    </para>
  </section>
</section>
<section xml:id="code_rules">
  <title>Code rules</title>
  <section xml:id="codeguidelines">
    <title>General Guidelines for Submitting Code</title>
    <itemizedlist>
      <listitem>
        <para>
          Write good commit messages. We follow the OpenStack <link
          xlink:href="https://wiki.openstack.org/wiki/GitCommitMessages">Git
          Commit Good Practice</link> guide. If you have any questions
          regarding how to write good commit messages, please review the
          upstream OpenStack documentation.
        </para>
      </listitem>
      <listitem>
        <para>
          All patch sets should adhere to the <xref
          linkend="ansiblestyleguide"/> listed here and follow the <link
          xlink:href="http://docs.ansible.com/playbooks_best_practices.html">Ansible
          best practices</link>.
        </para>
      </listitem>
      <listitem>
        <para>
          Refactoring work should never include additional
          <literal>rider</literal> features. Features that may pertain to
          something that was refactored should be raised as an issue and
          submitted in prior or subsequent patches.
        </para>
      </listitem>
      <listitem>
        <para>
          All patches including code, documentation and release notes
          should be built and tested locally first.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="documentation">
    <title>Documentation with Code</title>
    <para>
      Documentation is a critical part of ensuring that the deployers of
      this project are appropriately informed about:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          How to use project tooling effectively to deploy
          OpenStack.
        </para>
      </listitem>
      <listitem>
        <para>
          How to implement the right configuration to meet the needs of
          their specific use case.
        </para>
      </listitem>
      <listitem>
        <para>
          Changes in the project over time which may affect an existing
          deployment.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      To meet these needs developers must submit
      <xref linkend="codecomments"/> and documentation with any code
      submissions.
    </para>
    <para>
      All forms of documentation should comply with the guidelines
      provided in the
      <link xlink:href="https://docs.openstack.org/contributor-guide/">OpenStack
      Documentation Contributor Guide</link>, with particular attention
      to the following sections:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Writing style
        </para>
      </listitem>
      <listitem>
        <para>
          RST formatting conventions
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="codecomments">
    <title>Code Comments</title>
    <para>
      Code comments for variables should be used to explain the purpose
      of the variable.
    </para>
    <para>
      Code comments for Bash/Python3 scripts should give guidance to the
      purpose of the code. This is important to provide context for
      reviewers before the patch has merged, and for later modifications
      to remind the contributors what the purpose was and why it was
      done that way.
    </para>
  </section>
  <section xml:id="ansiblestyleguide">
    <title>Ansible Style Guide</title>
    <para>
      When creating tasks and other roles for use in Ansible, create
      them using the YAML dictionary format.
    </para>
    <para>
      Example YAML dictionary format:
    </para>
    <screen>- name: The name of the tasks
   module_name:
     thing1: &quot;some-stuff&quot;
     thing2: &quot;some-other-stuff&quot;
   tags:
     - some-tag
     - some-other-tag</screen>
    <para>
      Example what <emphasis role="strong">NOT</emphasis> to do:
    </para>
    <screen>- name: The name of the tasks
  module_name: thing1=&quot;some-stuff&quot; thing2=&quot;some-other-stuff&quot;
  tags: some-tag</screen>
    <screen>- name: The name of the tasks
  module_name: &gt;
    thing1=&quot;some-stuff&quot;
    thing2=&quot;some-other-stuff&quot;
  tags: some-tag</screen>
    <para>
      Usage of the &quot;&gt;&quot; and &quot;|&quot; operators should
      be limited to Ansible conditionals and command modules such as the
      Ansible <literal>shell</literal> or <literal>command</literal>.
    </para>
  </section>
</section>
<section xml:id="testing">
  <title>Testing</title>
  <para>
    Code is tested using Travis and SUSE CI.
  </para>
  <section xml:id="bash-linting">
    <title>Bash Linting</title>
    <para>
      Bash coding conventions are tested using shellcheck.
    </para>
  </section>
  <section xml:id="ansible-linting">
    <title>Ansible Linting</title>
    <para>
      Ansible convention are tested using <literal>ansible-lint</literal>, with
      the exception of:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Allow warning 204, which means lines longer than 120
          characters are enabled.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="helm-chart-values-linting">
    <title>Helm chart values linting</title>
    <para>
      No test is implemented yet. Patches are welcomed.
    </para>
  </section>
</section>
<section xml:id="periodic-work">
  <title>Periodic work</title>
  <para>
    This repository actively freezes the upstream code into
    <filename>vars/manifest.yml</filename>. It is necessary to regularly
    refresh the versions inside this file.
  </para>
  <para>
    Similarly, we are using submodules, which also need a regular
    version updates.
  </para>
  <para>
    Updating the manifest and the submodules are manual operations.
    There is no code available to bump the versions yet.
  </para>
</section>
<section xml:id="airship-developer-guide">
  <title>Airship Developer Guide</title>
  <section xml:id="testing-upstream-patches">
    <title>Testing upstream patches</title>
    <para>
      Carrying your own patches has been described as a user story on
      the page <xref linkend="sec.custom-patches"/>.
    </para>
  </section>
  <section xml:id="build-your-own-images">
    <title>Build your own images</title>
    <para>
      Carrying your own images has been described as a user story on the
      page <xref linkend="sec.own-images"/>.
    </para>
  </section>
  <section xml:id="point-to-your-own-images-in-airship">
    <title>Point to your own images in airship</title>
    <para>
      This has been described in a user story on the page
      <xref linkend="useownimages"/>.
    </para>
  </section>
</section>
</chapter>
