<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<!---->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="topic15050">
 <title>Ceilometer Metering Setting Role-based Access Control</title>
<!---->
 <para>
  Role Base Access Control (RBAC) is a technique that limits access to
  resources based on a specific set of roles associated with each user's
  credentials.
 </para>
 <para>
  Keystone has a set of users that are associated with each project. Each user
  has one or more roles. After a user has authenticated with Keystone using a
  valid set of credentials, Keystone will augment that request with the Roles
  that are associated with that user. These roles are added to the Request
  Header under the X-Roles attribute and are presented as a comma-separated
  list.
 </para>

 <section xml:id="display_users">
  <title>Displaying All Users</title>
  <para>
   To discover the list of users available in the system, an administrator can
   run the following command using the Keystone command-line interface:
  </para>
<screen>&prompt.ardana;source ~/service.osrc
&prompt.ardana;openstack user list</screen>
  <para>
   The output should resemble this response, which is a list of all the users
   currently available in this system.
  </para>
<screen>+----------------------------------+-----------------------------------------+----+
|                id                |    name      | enabled |       email        |
+----------------------------------+-----------------------------------------+----+
| 1c20d327c92a4ea8bb513894ce26f1f1 |   admin      |   True  | admin.example.com  |
| 0f48f3cc093c44b4ad969898713a0d65 | ceilometer   |   True  | nobody@example.com |
| 85ba98d27b1c4c8f97993e34fcd14f48 |   cinder     |   True  | nobody@example.com |
| d2ff982a0b6547d0921b94957db714d6 |    demo      |   True  |  demo@example.com  |
| b2d597e83664489ebd1d3c4742a04b7c |    ec2       |   True  | nobody@example.com |
| 2bd85070ceec4b608d9f1b06c6be22cb |   glance     |   True  | nobody@example.com |
| 0e9e2daebbd3464097557b87af4afa4c |    heat      |   True  | nobody@example.com |
| 0b466ddc2c0f478aa139d2a0be314467 |  neutron     |   True  | nobody@example.com |
| 5cda1a541dee4555aab88f36e5759268 |    nova      |   True  | nobody@example.com ||
| 5cda1a541dee4555aab88f36e5759268 |    nova      |   True  | nobody@example.com |
| 1cefd1361be8437d9684eb2add8bdbfa |   swift      |   True  | nobody@example.com |
| f05bac3532c44414a26c0086797dab23 | user20141203213957|True| nobody@example.com |
| 3db0588e140d4f88b0d4cc8b5ca86a0b | user20141205232231|True| nobody@example.com |
+----------------------------------+-----------------------------------------+----+</screen>
 </section>
 <section xml:id="display_roles">
  <title>Displaying All Roles</title>
  <para>
   To see all the roles that are currently available in the deployment, an
   administrator (someone with the admin role) can run the following command:
  </para>
<screen>&prompt.ardana;source ~/service.osrc
&prompt.ardana;openstack role list</screen>
  <para>
   The output should resemble the following response:
  </para>
<screen>+----------------------------------+-------------------------------------+
|                id                |                 name                |
+----------------------------------+-------------------------------------+
| 507bface531e4ac2b7019a1684df3370 |            ResellerAdmin            |
| 9fe2ff9ee4384b1894a90878d3e92bab |               _member_              |
| e00e9406b536470dbde2689ce1edb683 |                admin                |
| aa60501f1e664ddab72b0a9f27f96d2c |           heat_stack_user           |
| a082d27b033b4fdea37ebb2a5dc1a07b |               service               |
| 8f11f6761534407585feecb5e896922f |            swiftoperator            |
+----------------------------------+-------------------------------------+</screen>
 </section>
 <section xml:id="assign_role">
  <title>Assigning a Role to a User</title>
  <para>
   In this example, we want to add the role
   <emphasis role="bold">ResellerAdmin</emphasis> to the demo user who has the
   ID <emphasis role="bold">d2ff982a0b6547d0921b94957db714d6</emphasis>.
  </para>
  <procedure>
   <step>
    <para>
     Determine which Project/Tenant the user belongs to.
    </para>
<screen>&prompt.ardana;source ~/service.osrc
&prompt.ardana;openstack user show d2ff982a0b6547d0921b94957db714d6</screen>
    <para>
     The response should resemble the following output:
    </para>
<screen>+---------------------+----------------------------------+
| Field               | Value                            |
+---------------------+----------------------------------+
| domain_id           | default                          |
| enabled             | True                             |
|    id               | d2ff982a0b6547d0921b94957db714d6 |
| name                | admin                            |
| options             | {}                               |
| password_expires_at | None                             |
+---------------------+----------------------------------+</screen>
   </step>
   <step>
    <para>
     We need to link the ResellerAdmin Role to a Project/Tenant. To start,
     determine which tenants are available on this deployment.
    </para>
<screen>&prompt.ardana;source ~/service.osrc
&prompt.ardana;openstack project list</screen>
    <para>
     The response should resemble the following output:
    </para>
<screen>+----------------------------------+-------------------------------+--+
|                id                |        name       | enabled |
+----------------------------------+-------------------------------+--+
| 4a8f4207a13444089a18dc524f41b2cf |       admin       |   True  |
| 00cbaf647bf24627b01b1a314e796138 |        demo       |   True  |
| 8374761f28df43b09b20fcd3148c4a08 |        gf1        |   True  |
| 0f8a9eef727f4011a7c709e3fbe435fa |        gf2        |   True  |
| 6eff7b888f8e470a89a113acfcca87db |        gf3        |   True  |
| f0b5d86c7769478da82cdeb180aba1b0 |        jaq1       |   True  |
| a46f1127e78744e88d6bba20d2fc6e23 |        jaq2       |   True  |
| 977b9b7f9a6b4f59aaa70e5a1f4ebf0b |        jaq3       |   True  |
| 4055962ba9e44561ab495e8d4fafa41d |        jaq4       |   True  |
| 33ec7f15476545d1980cf90b05e1b5a8 |        jaq5       |   True  |
| 9550570f8bf147b3b9451a635a1024a1 |      service      |   True  |
+----------------------------------+-------------------------------+--+</screen>
   </step>
   <step>
    <para>
     Now that we have all the pieces, we can assign the ResellerAdmin role to
     this User on the Demo project.
    </para>
<screen>&prompt.ardana;openstack role add --user d2ff982a0b6547d0921b94957db714d6 --project 00cbaf647bf24627b01b1a314e796138 507bface531e4ac2b7019a1684df3370</screen>
    <para>
     This will produce no response if everything is correct.
    </para>
   </step>
   <step>
    <para>
     Validate that the role has been assigned correctly. Pass in the user and
     tenant ID and request a list of roles assigned.
    </para>
<screen>&prompt.ardana;openstack role list --user d2ff982a0b6547d0921b94957db714d6 --project 00cbaf647bf24627b01b1a314e796138</screen>
    <para>
     Note that all members have the <emphasis>_member_</emphasis> role as a
     default role in addition to any other roles that have been assigned.
    </para>
<screen>+----------------------------------+---------------+----------------------------------+----------------------------------+
|                id                |      name     |             user_id              | tenant_id             |
+----------------------------------+---------------+----------------------------------+----------------------------------+
| 507bface531e4ac2b7019a1684df3370 | ResellerAdmin | d2ff982a0b6547d0921b94957db714d6 | 00cbaf647bf24627b01b1a314e796138 |
| 9fe2ff9ee4384b1894a90878d3e92bab |    _member_   | d2ff982a0b6547d0921b94957db714d6 | 00cbaf647bf24627b01b1a314e796138 |
+----------------------------------+---------------+----------------------------------+----------------------------------+</screen>
   </step>
  </procedure>
 </section>
 <section xml:id="create_role">
  <title>Creating a New Role</title>
  <para>
   In this example, we will create a Level 3 Support role called
   <emphasis role="bold">L3Support</emphasis>.
  </para>
  <procedure>
   <step>
    <para>
     Add the new role to the list of roles.
    </para>
<screen>&prompt.ardana;openstack role create L3Support</screen>
    <para>
     The response should resemble the following output:
    </para>
<screen>+----------+----------------------------------+
| Property |              Value               |
+----------+----------------------------------+
|    id    | 7e77946db05645c4ba56c6c82bf3f8d2 |
|   name   |            L3Support             |
+----------+----------------------------------+</screen>
   </step>
   <step>
    <para>
     Now that we have the new role's ID, we can add that role to the Demo user
     from the previous example.
    </para>
<screen>&prompt.ardana;openstack role add --user d2ff982a0b6547d0921b94957db714d6  --project 00cbaf647bf24627b01b1a314e796138 7e77946db05645c4ba56c6c82bf3f8d2</screen>
    <para>
     This will produce no response if everything is correct.
    </para>
   </step>
   <step>
    <para>
     Verify that the user Demo has both the ResellerAdmin and L3Support roles.
    </para>
<screen>&prompt.ardana;openstack role list --user d2ff982a0b6547d0921b94957db714d6 --project 00cbaf647bf24627b01b1a314e796138</screen>
   </step>
   <step>
    <para>
     The response should resemble the following output. Note that this user has
     the L3Support role, the ResellerAdmin role, and the default member role.
    </para>
<screen>+----------------------------------+---------------+----------------------------------+----------------------------------+
|                id                |      name     |             user_id              |            tenant_id             |
+----------------------------------+---------------+----------------------------------+----------------------------------+
| 7e77946db05645c4ba56c6c82bf3f8d2 |   L3Support   | d2ff982a0b6547d0921b94957db714d6 | 00cbaf647bf24627b01b1a314e796138 |
| 507bface531e4ac2b7019a1684df3370 | ResellerAdmin | d2ff982a0b6547d0921b94957db714d6 | 00cbaf647bf24627b01b1a314e796138 |
| 9fe2ff9ee4384b1894a90878d3e92bab |    _member_   | d2ff982a0b6547d0921b94957db714d6 | 00cbaf647bf24627b01b1a314e796138 |
+----------------------------------+---------------+----------------------------------+----------------------------------+</screen>
   </step>
  </procedure>
 </section>
 <section xml:id="access_policies">
  <title>Access Policies</title>
  <para>
   Before introducing RBAC, Ceilometer had very simple access control. There
   were two types of user: admins and users. Admins will be able to access any
   API and perform any operation. Users will only be able to access non-admin
   APIs and perform operations only on the Project/Tenant where they belonged.
  </para>
 </section>
 <section xml:id="newfile">
  <title>New RBAC Policy File</title>
  <para>
   This is the policy file for Ceilometer without RBAC
   (<emphasis role="bold">etc/ceilometer/policy.json</emphasis>)
  </para>
<screen>{
  "context_is_admin": "role:admin"
}</screen>
  <para>
   With the RBAC-enhanced code it is possible to control access to each API
   command. The new policy file (<emphasis>rbac_policy.json</emphasis>) looks
   like this.
  </para>
<screen>{
    "context_is_admin": "role:admin",
    "telemetry:get_samples": "rule:context_is_admin",
    "telemetry:get_sample": "rule:context_is_admin",
    "telemetry:query_sample": "rule:context_is_admin",
    "telemetry:create_samples": "rule:context_is_admin",
    "telemetry:compute_statistics": "rule:context_is_admin",
    "telemetry:get_meters": "rule:context_is_admin",
    "telemetry:get_resource": "rule:context_is_admin",
    "telemetry:get_resources": "rule:context_is_admin",
    "telemetry:get_alarm": "rule:context_is_admin",
    "telemetry:query_alarm": "rule:context_is_admin",
    "telemetry:get_alarm_state": "rule:context_is_admin",
    "telemetry:get_alarms": "rule:context_is_admin",
    "telemetry:create_alarm": "rule:context_is_admin",
    "telemetry:set_alarm": "rule:service_role",
    "telemetry:delete_alarm": "rule:context_is_admin",
    "telemetry:alarm_history": "rule:context_is_admin",
    "telemetry:change_alarm_state": "rule:context_is_admin",
    "telemetry:query_alarm_history": "rule:context_is_admin"
}</screen>
  <para>
   Note that the API action names are namespaced using the
   <emphasis role="bold">telemetry:</emphasis> prefix. This avoids potential
   confusion if other services have policies with the same name.
  </para>
 </section>
 <section xml:id="apply_policy">
  <title>Applying Policies to Roles</title>
  <para>
   Copy the <emphasis role="bold">rbac_policy.json</emphasis> file over the
   <emphasis role="bold">policy.json</emphasis> file and make any required
   changes.
  </para>
 </section>
 <section xml:id="apply-a-policy-to-multiple-roles">
  <title>Apply a policy to multiple roles</title>
  <para>
   For example, the ResellerAdmin role could also be permitted to access
   <emphasis role="bold">compute_statistics</emphasis>. This change would
   require the following changes in the
   <emphasis role="bold">rbac_policy.json</emphasis> policy file:
  </para>
<screen>{
    "context_is_admin": "role:admin",
    "i_am_reseller": "role:ResellerAdmin",
    "telemetry:get_samples": "rule:context_is_admin",
    "telemetry:get_sample": "rule:context_is_admin",
    "telemetry:query_sample": "rule:context_is_admin",
    "telemetry:create_samples": "rule:context_is_admin",
    "telemetry:compute_statistics": "rule:context_is_admin or rule:i_am_reseller",
    ...
}</screen>
  <para>
   After a policy change has been made all the API services will need to be
<!---->
   restarted
<!---->
   .
  </para>
 </section>
 <section xml:id="apply-a-policy-to-a-non-default-role-only">
  <title>Apply a policy to a non-default role only</title>
  <para>
   Another example: assign the L3Support role to the
   <emphasis role="bold">get_meters</emphasis> API and exclude all other roles.
  </para>
<screen>{
    "context_is_admin": "role:admin",
    "i_am_reseller": "role:ResellerAdmin",
    "l3_support": "role:L3Support",
    "telemetry:get_samples": "rule:context_is_admin",
    "telemetry:get_sample": "rule:context_is_admin",
    "telemetry:query_sample": "rule:context_is_admin",
    "telemetry:create_samples": "rule:context_is_admin",
    "telemetry:compute_statistics": "rule:context_is_admin or rule:i_am_reseller",
    "telemetry:get_meters": "rule:l3_support",
    ...
}</screen>
 </section>
 <section xml:id="write_policy">
  <title>Writing a Policy</title>
  <para>
   The Policy Engine capabilities are as expressible using a set of rules and
   guidelines. For a complete reference, please see the
   <link xlink:href="https://github.com/openstack/oslo.policy/blob/master/oslo_policy/policy.py">OSLO
   policy documentation</link>.
  </para>
  <para>
   Policies can be expressed in one of two forms: A list of lists, or a string
   written in the new policy language.
  </para>
  <para>
   In the list-of-lists representation, each check inside the innermost list is
   combined with an <emphasis role="bold">and</emphasis> conjunction - for that
   check to pass, <emphasis role="bold">all</emphasis> the specified checks
   must pass. These innermost lists are then combined as with an
   <emphasis role="bold">or</emphasis> conjunction.
  </para>
  <para>
   As an example, take the following rule, expressed in the list-of-lists
   representation:
  </para>
<screen>[["role:admin"], ["project_id:%(project_id)s", "role:projectadmin"]]</screen>
  <para>
   In the policy language, each check is specified the same way as in the
   list-of-lists representation: a simple [a:b] pair that is matched to the
   correct class to perform that check.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     User's Role
    </para>
<screen>role:admin</screen>
   </listitem>
   <listitem>
    <para>
     Rules already defined on policy
    </para>
<screen>rule:admin_required</screen>
   </listitem>
   <listitem>
    <para>
     Against a URL (URL checking must return TRUE to be valid)
    </para>
<screen>http://my-url.org/check</screen>
   </listitem>
   <listitem>
    <para>
     User attributes (obtained through the token: user_id, domain_id,
     project_id)
    </para>
<screen>project_id:%(target.project.id)s</screen>
   </listitem>
   <listitem>
    <para>
     Strings
    </para>
<screen>&lt;variable&gt;:'xpto2035abc'
'myproject':&lt;variable&gt;</screen>
   </listitem>
   <listitem>
    <para>
     Literals
    </para>
<screen>project_id:xpto2035abc
domain_id:20
True:%(user.enabled)s</screen>
   </listitem>
  </itemizedlist>
  <para>
   Conjunction operators are also available, allowing for more flexibility in
   crafting policies. So, in the policy language, the previous check in
   list-of-lists becomes:
  </para>
<screen>role:admin or (project_id:%(project_id)s and role:projectadmin)</screen>
  <para>
   The policy language also has the NOT operator, allowing for richer policy
   rules:
  </para>
<screen>project_id:%(project_id)s and not role:dunce</screen>
  <para>
   Attributes sent along with API calls can be used by the policy engine (on
   the right side of the expression), by using the following syntax:
  </para>
<screen>&lt;some_value&gt;:%(user.id)s</screen>
  <para>
   <emphasis role="bold">Note</emphasis>: two special policy checks should be
   mentioned; the policy check <emphasis role="bold">@</emphasis> will
   <emphasis role="bold">always accept</emphasis> an access, and the policy
   check <emphasis role="bold">!</emphasis> will <emphasis role="bold">always
   reject</emphasis> an access.
  </para>
 </section>
</section>
