<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="stop_restart">
 <title>Bringing Down Your Cloud: Services Down Method</title>
 <para>
  If you have a planned maintenance and need to bring down your entire cloud,
  follow the steps below to safely do so. Be mindful that this method will
  bring down all of your services. If you wish to use a method utilizing
  rolling reboots where your cloud services will continue running then see
  <xref linkend="rebootNodes"/>.
 </para>
 <para>
  To perform backups prior to these steps, visit the backup and
  restore pages first at <xref linkend="bura_overview"/>.
 </para>
 <section xml:id="idg-all-operations-maintenance-reboot_cloud_down-xml-7">
  <title>Gracefully Bringing Down and Restarting Your Cloud Environment</title>
  <para>
   You will do the following steps from your &lcm;.
  </para>
  <procedure>
   <step>
    <para>
     Log in to your &lcm;.
    </para>
   </step>
   <step>
    <para>
     Gracefully shut down your cloud by running the
     <literal>ardana-stop.yml</literal> playbook:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts ardana-stop.yml</screen>
   </step>
   <step>
    <para>
     Shut down your nodes. You should shut down your controller nodes last and
     bring them up first after the maintenance.
    </para>
    <para>
     There are multiple ways you can do this:
    </para>
    <substeps>
     <step>
      <para>
       You can SSH to each node and use <literal>sudo reboot -f</literal> to
       reboot the node.
      </para>
     </step>
     <step>
      <para>
       From the &lcm;, you can use the
       <literal>bm-power-down.yml</literal> and
       <literal>bm-power-up.yml</literal> playbooks.
      </para>
     </step>
     <step>
      <para>
       You can shut down the nodes and then physically restart them either via a
       power button or the IPMI.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Perform the necessary maintenance.
    </para>
   </step>
   <step>
    <para>
     After the maintenance is complete, power your &lcm; back up
     and then SSH to it.
    </para>
   </step>
   <step>
    <para>
     Determine the current power status of the nodes in your environment:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts bm-power-status.yml</screen>
   </step>
   <step>
    <para>
     If necessary, power up any nodes that are not already powered up, ensuring
     that you power up your controller nodes first. You can target specific
     nodes with the <literal>-e nodelist=&lt;node_name&gt;</literal> switch.
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts bm-power-up.yml [-e nodelist=&lt;node_name&gt;]</screen>
   <note>
    <para>
     Obtain the <literal>&lt;node_name&gt;</literal> by using the
     <command>sudo cobbler system list</command> command from the &lcm;.
    </para>
   </note>
   </step>
   <step>
    <para>
     Bring the databases back up:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts galera-bootstrap.yml</screen>
   </step>
   <step>
    <para>
     Gracefully bring up your cloud services by running the
     <literal>ardana-start.yml</literal> playbook:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts ardana-start.yml</screen>
   </step>
   <step>
    <para>
     Pause for a few minutes and give the cloud environment time to come up
     completely and then verify the status of the individual services using
     this playbook:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts ardana-status.yml</screen>
   </step>
   <step>
    <para>
     If any services did not start properly, you can run playbooks for the
     specific services having issues.
    </para>
    <para>
     For example:
    </para>
    <para>
     If RabbitMQ fails, run:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts rabbitmq-start.yml</screen>
    <para>
     You can check the status of RabbitMQ afterwards with this:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts rabbitmq-status.yml</screen>
    <para>
     If the recovery had failed, you can run:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts rabbitmq-disaster-recovery.yml</screen>
    <para>
     Each of the other services have playbooks in the
     <literal>~/scratch/ansible/next/ardana/ansible</literal> directory in the
     format of <literal>&lt;service&gt;-start.yml</literal> that you can run.
     One example, for the compute service, is
     <literal>nova-start.yml</literal>.
    </para>
   </step>
   <step>
    <para>
     Continue checking the status of your &kw-hos-phrase; cloud services until
     there are no more failed or unreachable nodes:
    </para>
<screen>cd ~/scratch/ansible/next/ardana/ansible
ansible-playbook -i hosts/verb_hosts ardana-status.yml</screen>
   </step>
  </procedure>
 </section>
</section>
