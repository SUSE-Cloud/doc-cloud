<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [ <!ENTITY % entities SYSTEM "entities.ent"> %entities; ]>
<!-- Copyright FUJITSU LIMITED 2017 -->
<section>
 <title><phrase>SUSE OpenStack Cloud Monitoring</phrase> Architecture and Components</title>
 <para>
  The following illustration provides an overview of the main components of
  <phrase>SUSE OpenStack Cloud Monitoring</phrase> and their interaction:
 </para>
 <informalfigure>
  <mediaobject>
   <imageobject role="fo">
    <imagedata fileref="images-cmm-architecture.png" width="75%" format="PNG"/>
   </imageobject>
   <imageobject role="html">
    <imagedata fileref="images-cmm-architecture.png"/>
   </imageobject>
   <textobject><phrase>cmm-architecture.png</phrase>
   </textobject>
  </mediaobject>
 </informalfigure>
 <bridgehead renderas="sect4">OpenStack</bridgehead>
 <para>
  <phrase>SUSE OpenStack Cloud Monitoring</phrase> relies on OpenStack as
  technology for building cloud computing platforms for public and private
  clouds. OpenStack consists of a series of interrelated projects delivering
  various components for a cloud infrastructure solution and allowing for the
  deployment and management of Infrastructure as a Service (IaaS) platforms.
 </para>
 <bridgehead renderas="sect4">Monitoring Service</bridgehead>
 <para>
  The Monitoring Service is the central <phrase>SUSE OpenStack Cloud
  Monitoring</phrase> component. It is responsible for receiving, persisting,
  and processing monitoring and log data, as well as providing the data to the
  users.
 </para>
 <para>
  The Monitoring Service relies on Monasca, an open source Monitoring as a
  Service solution. It uses Monasca for high-speed metrics querying and
  integrates the Threshold Engine (streaming alarm engine) and the Notification
  Engine of Monasca.
 </para>
 <para>
  The Monitoring Service consists of the following components:
 </para>
 <para>
  <itemizedlist>
   <listitem>
    <para>
     <emphasis role="bold">Monitoring API</emphasis>
    </para>
    <para>
     A RESTful API for monitoring. It is primarily focused on the following
     areas:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Metrics: Store and query massive amounts of metrics in real time.
      </para>
     </listitem>
     <listitem>
      <para>
       Statistics: Provide statistics for metrics.
      </para>
     </listitem>
     <listitem>
      <para>
       Alarm Definitions: Create, update, query, and delete alarm definitions.
      </para>
     </listitem>
     <listitem>
      <para>
       Alarms: Query and delete the alarm history.
      </para>
     </listitem>
     <listitem>
      <para>
       Notification Methods: Create and delete notification methods and
       associate them with alarms. Users can be notified directly when alarms
       are triggered, for example, via email.
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Message Queue</emphasis>
    </para>
    <para>
     A component that primarily receives published metrics from the Monitoring
     API, alarm state transition messages from the Threshold Engine, and log
     data from the Log API. The data is consumed by other components, such as
     the Persister, the Notification Engine, and the Log Persister. The Message
     Queue is also used to publish and consume other events in the system. It
     is based on Kafka, a high-performance, distributed, fault-tolerant, and
     scalable message queue with durability built-in. For administrating the
     Message Queue, <phrase>SUSE OpenStack Cloud Monitoring</phrase> uses
     Zookeeper, a centralized service for maintaining configuration
     information, naming, providing distributed synchronization, and providing
     group services.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Persister</emphasis>
    </para>
    <para>
     A Monasca component that consumes metrics and alarm state transitions from
     the Message Queue and stores them in the Metrics and Alarms Database
     (InfluxDB).
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Notification Engine</emphasis>
    </para>
    <para>
     A Monasca component that consumes alarm state transition messages from the
     Message Queue and sends notifications for alarms, such as emails.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Threshold Engine</emphasis>
    </para>
    <para>
     A Monasca component that computes thresholds on metrics and publishes
     alarms to the Message Queue when they are triggered. The Threshold Engine
     is based on Apache Storm, a free and open distributed real-time
     computation system.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Metrics and Alarms Database</emphasis>
    </para>
    <para>
     An InfluxDB database used for storing metrics and the alarm history.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Config Database</emphasis>
    </para>
    <para>
     A MariaDB database used for storing configuration information, alarm
     definitions, and notification methods.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Log API</emphasis>
    </para>
    <para>
     A RESTful API for log management. It gathers log data from the Log Agents
     and forwards it to the Message Queue.
    </para>
    <para>
     The <phrase>SUSE OpenStack Cloud Monitoring</phrase> log management is
     based on Logstash, a tool for receiving, processing, and publishing all
     kinds of logs. It provides a powerful pipeline for querying and analyzing
     logs. Elasticsearch is used as the back-end datastore, and Kibana as the
     front-end tool for retrieving and visualizing the log data.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Log Transformer</emphasis>
    </para>
    <para>
     A Logstash component that consumes the log data from the Message Queue,
     performs transformation and aggregation operations on the data, and
     publishes the data that it creates back to the Message Queue.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Log Metrics</emphasis>
    </para>
    <para>
     A Monasca component that consumes log data from the Message Queue, filters
     the data according to severity, and generates metrics for specific
     severities, for example, for errors or warnings. The generated metrics are
     published to the Message Queue and can be further processed by the
     Threshold Engine like any other metrics.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Log Persister </emphasis>
    </para>
    <para>
     A Logstash component that consumes the transformed and aggregated log data
     from the Message Queue and stores it in the Log Database.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Kibana Server</emphasis>
    </para>
    <para>
     A Web browser-based analytics and search interface to the Log Database.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Log Database</emphasis>
    </para>
    <para>
     An Elasticsearch database for storing the log data.
    </para>
   </listitem>
  </itemizedlist>
 </para>
 <bridgehead renderas="sect4">Horizon Plugin</bridgehead>
 <para>
  <phrase>SUSE OpenStack Cloud Monitoring</phrase> comes with a plugin for the
  OpenStack Horizon dashboard. The plugin extends the main dashboard in
  OpenStack with a view for monitoring. This enables <phrase>SUSE OpenStack
  Cloud Monitoring</phrase> users to access the monitoring functions from a
  central Web-based graphical user interface. For details, refer to the
  <ulink url="http://docs.openstack.org/developer/horizon/"> OpenStack Horizon
  documentation </ulink>.
 </para>
 <para>
  Based on OpenStack Horizon, the monitoring data is visualized on a
  comfortable and easy-to-use dashboard which fully integrates with the
  following applications:
  <itemizedlist>
   <listitem>
    <para>
     Grafana (for metrics data). An open source application for visualizing
     large-scale measurement data.
    </para>
   </listitem>
   <listitem>
    <para>
     Kibana (for log data). An open source analytics and visualization platform
     designed to work with Elasticsearch.
    </para>
   </listitem>
  </itemizedlist>
 </para>
 <bridgehead renderas="sect4">Metrics Agent</bridgehead>
 <para>
  A Metrics Agent is required for retrieving metrics data from the host on
  which it runs and sending the metrics data to the Monitoring Service. The
  agent supports metrics from a variety of sources as well as a number of
  built-in system and service checks.
 </para>
 <para>
  A Metrics Agent can be installed on each virtual or physical server to be
  monitored.
 </para>
 <para>
  The agent functionality is fully integrated into the source code base of the
  Monasca project. For details, refer to the
  <ulink url="https://wiki.openstack.org/wiki/Monasca"> Monasca Wiki </ulink>.
 </para>
 <bridgehead renderas="sect4">Log Agent</bridgehead>
 <para>
  A Log Agent is needed for collecting log data from the host on which it runs
  and forwarding the log data to the Monitoring Service for further processing.
  It can be installed on each virtual or physical server from which log data is
  to be retrieved.
 </para>
 <para>
  The agent functionality is fully integrated into the source code base of the
  Monasca project. For details, refer to the
  <ulink url="https://wiki.openstack.org/wiki/Monasca"> Monasca Wiki </ulink>.
 </para>
</section>
