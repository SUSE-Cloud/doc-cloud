<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<chapter xml:id="administering-heat" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
 <title>Heat Administration Guide</title>
 <section xml:id="introduction" xml:base="introduction">
  <title>Introduction</title>
  <para>
   The OpenStack Orchestration service, a tool for orchestrating clouds,
   automatically configures and deploys resources in stacks. The deployments
   can be simple, such as deploying WordPress on SUSE Linux with an SQL back end,
   or complex, such as starting a server group that auto scales by starting and
   stopping using real-time CPU loading information from the Telemetry service.
  </para>
  <para>
   Orchestration stacks are defined with templates, which are non-procedural
   documents. Templates describe tasks in terms of resources, parameters,
   inputs, constraints, and dependencies. When the Orchestration service was
   originally introduced, it worked with AWS CloudFormation templates, which
   are in the JSON format.
  </para>
  <para>
   The Orchestration service also runs Heat Orchestration Template (HOT)
   templates that are written in YAML. YAML is a terse notation that loosely
   follows structural conventions (colons, returns, indentation) that are
   similar to Python or Ruby. Therefore, it is easier to write, parse, grep,
   generate with tools, and maintain source-code management systems.
  </para>
  <para>
   Orchestration can be accessed through a CLI and RESTful queries. The
   Orchestration service provides both an OpenStack-native REST API and a
   CloudFormation-compatible Query API. The Orchestration service is also
   integrated with the OpenStack dashboard to perform stack functions through a
   web interface.
  </para>
  <para>
   For more information about using the Orchestration service through the
   command line, see the
   <link xlink:href="https://docs.openstack.org/python-openstackclient/pike/">OpenStack
   Command-Line Interface Reference</link>.
  </para>
 </section>
 <section xml:id="orchestration-auth-model" xml:base="auth-model">
  <title>Orchestration authorization model</title>
  <para>
   The Orchestration authorization model defines the authorization process for
   requests during deferred operations. A common example is an auto-scaling
   group update. During the auto-scaling update operation, the Orchestration
   service requests resources of other components (such as servers from Compute
   or networks from Networking) to extend or reduce the capacity of an
   auto-scaling group.
  </para>
  <para>
   The Orchestration service provides the following authorization models:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Password authorization
    </para>
   </listitem>
   <listitem>
    <para>
     OpenStack Identity trusts authorization
    </para>
   </listitem>
  </itemizedlist>
  <section xml:id="password-authorization">
   <title>Password authorization</title>
   <para>
    The Orchestration service supports password authorization. Password
    authorization requires that a user pass a username and password to the
    Orchestration service. Encrypted password are stored in the database, and
    used for deferred operations.
   </para>
   <para>
    Password authorization involves the following steps:
   </para>
   <procedure>
    <step>
     <para>
      A user requests stack creation, by providing a token and username and
      password. The Dashboard or python-heatclient requests the token on the
      user’s behalf.
     </para>
    </step>
    <step>
     <para>
      If the stack contains any resources that require deferred operations,
      then the orchestration engine fails its validation checks if the user did
      not provide a valid username and password.
     </para>
    </step>
    <step>
     <para>
      The username and password are encrypted and stored in the Orchestration
      database.
     </para>
    </step>
    <step>
     <para>
      Orchestration creates a stack.
     </para>
    </step>
    <step>
     <para>
      Later, the Orchestration service retrieves the credentials and requests
      another token on behalf of the user. The token is not limited in scope
      and provides access to all the roles of the stack owner.
     </para>
    </step>
   </procedure>
  </section>
  <section xml:id="openstack-identity-trusts-authorization">
   <title>OpenStack Identity trusts authorization</title>
   <para>
    A trust is an OpenStack Identity extension that enables delegation, and
    optionally impersonation through the OpenStack Identity service. The key
    terminology is <emphasis>trustor</emphasis> (the user delegating) and
    <emphasis>trustee</emphasis> (the user being delegated to).
   </para>
   <para>
    To create a trust, the <emphasis>trustor</emphasis> (in this case, the user
    creating the stack in the Orchestration service) provides the OpenStack
    Identity service with the following information:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      The ID of the <emphasis>trustee</emphasis> (who you want to delegate to,
      in this case, the Orchestration service user).
     </para>
    </listitem>
    <listitem>
     <para>
      The roles to be delegated. Configure roles through the
      <literal>heat.conf</literal> file. Ensure the configuration contains
      whatever roles are required to perform the deferred operations on the
      user’s behalf. For example, launching an OpenStack Compute instance in
      response to an auto-scaling event.
     </para>
    </listitem>
    <listitem>
     <para>
      Whether to enable impersonation.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The OpenStack Identity service provides a <emphasis>trust ID</emphasis>,
    which is consumed by <emphasis>only</emphasis> the trustee to obtain a
    <emphasis>trust scoped token</emphasis>. This token is limited in scope,
    such that the trustee has limited access to those roles delegated. In
    addition, the trustee has effective impersonation of the trustor user if it
    was selected when creating the trust. For more information, see Identity
    management.
   </para>
   <para>
    Trusts authorization involves the following steps:
   </para>
   <procedure>
    <step>
     <para>
      A user creates a stack through an API request (only the token is
      required).
     </para>
    </step>
    <step>
     <para>
      The Orchestration service uses the token to create a trust between the
      stack owner (trustor) and the Orchestration service user (trustee). The
      service delegates a special role (or roles) as defined in the
      <emphasis>trusts_delegated_roles</emphasis> list in the Orchestration
      configuration file. By default, the Orchestration service sets all the
      roles from trustor available for trustee. Deployers might modify this
      list to reflect a local RBAC policy. For example, to ensure that the heat
      process can access only those services that are expected while
      impersonating a stack owner.
     </para>
    </step>
    <step>
     <para>
      Orchestration stores the encrypted <emphasis>trust ID</emphasis> in the
      Orchestration database.
     </para>
    </step>
    <step>
     <para>
      When a deferred operation is required, the Orchestration service
      retrieves the <emphasis>trust ID</emphasis> and requests a trust scoped
      token which enables the service user to impersonate the stack owner
      during the deferred operation. Impersonation is helpful, for example, so
      the service user can launch Compute instances on behalf of the stack
      owner in response to an auto-scaling event.
     </para>
    </step>
   </procedure>
  </section>
  <section xml:id="authorization-model-configuration">
   <title>Authorization model configuration</title>
   <para>
    Initially, the password authorization model was the default authorization
    model. Since the Kilo release, the Identity trusts authorization model is
    enabled for the Orchestration service by default.
   </para>
   <para>
    To enable the password authorization model, change the following parameter
    in the <literal>heat.conf</literal> file:
   </para>
<screen language="ini"><![CDATA[deferred_auth_method=password]]></screen>
   <para>
    To enable the trusts authorization model, change the following two
    parameters in the <literal>heat.conf</literal> file.
   </para>
   <para>
    Specify the authentication method for the deferred Orchestration actions.
    This parameter triggers creating <emphasis>trust ID</emphasis> and stores
    it in the Orchestration database:
   </para>
<screen language="ini"><![CDATA[deferred_auth_method=trusts]]></screen>
   <para>
    Allow reauthentication with the trust scoped token issued by using the
    stored <emphasis>trust ID</emphasis> for long running tasks:
   </para>
<screen language="ini"><![CDATA[reauthentication_auth_method=trusts]]></screen>
   <para>
    To specify the trustor roles that it delegates to trustee during
    authorization, specify the <literal>trusts_delegated_roles</literal>
    parameter in the <literal>heat.conf</literal> file. If
    <literal>trusts_delegated_roles</literal> is not defined, then all the
    trustor roles are delegated to trustee.
   </para>
   <note>
    <para>
     The trustor delegated roles must be pre-configured in the OpenStack
     Identity service before using them in the Orchestration service.
    </para>
   </note>
  </section>
 </section>
</chapter>
