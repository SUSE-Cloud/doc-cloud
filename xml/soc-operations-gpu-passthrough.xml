<?xml version="1.0"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entity-decl.ent"> %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="gpu-passthrough">
 <title>GPU passthrough</title>
 <para>
  &productname; GPU passthrough functionality provides the nova instance direct access to the GPU device for
    better performance. This section demonstrates the steps to pass through a Nvidia GPU card
    supported by &productname;.
 
 </para>
 <section xml:id="crow-pci-passthrough">
  <title>Leveraging PCI Passthrough</title>
  <para>
   Two parts are necessary to leverage PCI passthrough on a &cloud;
   &productnumber; &compnode;: preparing the &compnode;, preparing &o_comp; and
   &o_img;.
  </para>
  <orderedlist>
   <listitem>
    <para xml:id="crow-pci-passthrough-prep-node">
     <emphasis role="bold">Preparing the &compnode;</emphasis>
    </para>
    <procedure>
     <step>
      <para>
       There should be no kernel drivers or binaries with direct access to the
       PCI device. If there are kernel modules, they should be blacklisted.
      </para>
      <para>
       For example, it is common to have a <literal>nouveau</literal> driver
       from when the node was installed. This driver is a graphics driver for
       Nvidia-based GPUs. It must be blacklisted as shown in this example.
      </para>
<screen>&prompt.root;echo 'blacklist nouveau' &gt;&gt; /etc/modprobe.d/nouveau-default.conf</screen>
      <para>
       The file location and its contents are important, the name of the file is your choice. Other
       drivers can be
        blacklisted in the same manner, possibly including Nvidia drivers.
      </para>
     </step>
     <step>
      <para>
       On the host, <literal>iommu_groups</literal> is necessary and may
       already be enabled. To check if IOMMU is enabled:
      </para>
<screen>&prompt.root;virt-host-validate
.....
QEMU: Checking if IOMMU is enabled by kernel
: WARN (IOMMU appears to be disabled in kernel. Add intel_iommu=on to kernel cmdline arguments)
.....</screen>
      <para>
       To modify the kernel cmdline as suggested in the warning, edit the file
       <filename>/etc/default/grub</filename> and append
       <literal>intel_iommu=on</literal> to the
       <literal>GRUB_CMDLINE_LINUX_DEFAULT</literal> variable. Then run
       <literal>update-bootloader</literal>.
      </para>
      <para>
       A reboot will be required for <literal>iommu_groups</literal> to be
       enabled.
      </para>
     </step>
     <step>
      <para>
       After the reboot, check that IOMMU is enabled:
      </para>
<screen>&prompt.root;virt-host-validate
.....
QEMU: Checking if IOMMU is enabled by kernel
: PASS
.....</screen>
     </step>
     <step>
      <para>
       Confirm IOMMU groups are available by finding the group associated with
       your PCI device (for example Nvidia GPU):
      </para>
<screen>&prompt.root;lspci -nn | grep -i nvidia
84:00.0 3D controller [0302]: NVIDIA Corporation GV100GL [Tesla V100 PCIe 16GB] [10de:1db4] (rev a1)
</screen>
      <para>
        In this example, <literal>84:00.0</literal> is the address of the PCI device. The vendorID
        is <literal>10de</literal>. The product ID is <literal>1db4</literal>.
      </para>
     </step>
     <step>
      <para>
       Confirm that the devices are available for passthrough:
      </para>
<screen>&prompt.root;ls -ld /sys/kernel/iommu_groups/*/devices/*84:00.?/
drwxr-xr-x 3 root root 0 Nov 19 17:00 /sys/kernel/iommu_groups/56/devices/0000:84:00.0/</screen>
      <note>
       <para>
       With PCI passthrough, only an entire IOMMU group can be passed. Parts of the group cannot be passed.
       In this example, the IOMMU group is <literal>56</literal>.
       </para>
      </note>
     </step>
    </procedure>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Preparing &o_comp; and &o_img; for passthrough</emphasis>
    </para>
    <para>
      Information about configuring &o_comp; is available in the documentation at
      <link
      xlink:href="https://docs.openstack.org/nova/rocky/admin/pci-passthrough.html"/>.
      Services like <literal>nova-compute</literal>, <literal>nova-scheduler</literal>
      and <literal>nova-api</literal> must be configured.
     </para>
     <note>
       <para>
         We suggest user to create new <filename>nova.conf</filename> file
         specific to pci passthrough usage under<literal>/etc/nova/nova.conf.d</literal>
         instead of modifying the existing <filename>nova.conf</filename> to avoid any side effects
         caused from the <literal>chef-client.service</literal>. For example, <filename>100-nova.conf</filename> or
         <filename>101-nova-placement.conf</filename>. Note that this new file, for example,
         <filename>102-nova-pcipassthru.conf</filename> will not be recorded in any nova
         proposal and under manipulation by the <literal>chef-client.service</literal>.
         Ensure you have backups in case of any future incidents.
       </para>
     </note>
     <para>Here's an <emphasis role="bold">example</emphasis> of the configuration of a single PCI device being
       passthrough to the nova instance:</para>
    <orderedlist>
    <listitem>
    <para>
    <emphasis role="bold">Configure the Compute Host</emphasis>
    </para>
    <procedure>
    <step>
    <para>Login to the compute host and change directory to <filename>/etc/nova/nova.conf.d</filename> and
    list all the files:
    </para>
<screen>&prompt.root;cd /etc/nova/nova.conf.d/
ls -al
</screen>
    </step>
    <step>
    <para>Create a new nova configuration file under this folder and name the file appropriately in lexicographic
    increasing order. For example: <filename>102-nova-pcipassthru.conf </filename>.
    </para>
    </step>
    <step>
    <para>
    Add the following configuration entries to the file and the values for these entries are specific to your
    compute node as obtained in Preparing the Compute Node step <xref linkend="crow-pci-passthrough-prep-node"/>.
    The configuration entries specify the PCI device using whitelisting and the PCI alias for the device. Example:
    </para>
<screen>&prompt.root;cat /etc/nova/nova.conf.d/102-nova-pcipassthru.conf
[pci]
passthrough_whitelist = [{ "address": "0000:84:00.0" }]
alias = { "vendor_id":"10de", "product_id":"1db4", "device_type":"type-PCI", "name":"a1" }

</screen>
    <para>
    The example above shows how to configure a PCI alias a1 to request a PCI device with a <literal>vendor_id</literal>
    of <literal>10de</literal> and a
    <literal>product_id</literal> of <literal>1db4</literal>.
    </para>
    </step>
    <step>
    <para>Once the file is updated, restart nova compute on the compute node:</para>
    <screen>&prompt.root;systemctl restart openstack-nova-compute
    </screen>
    </step>
    </procedure>
    </listitem>
    <listitem>
    <para>
    <emphasis role="bold">Configure the Controller nodes</emphasis>
    </para>
    <procedure>
    <step>
    <para>
    Follow the following steps for all the controller nodes. Login to the controller host and
    change directory to <filename>/etc/nova/nova.conf.d</filename> and list all the files under that folder:
    </para>
<screen>&prompt.root;cd /etc/nova/nova.conf.d/
ls -al
</screen>
    </step>
    <step>
    <para>Create a new nova configuration file under this folder and name the file appropriately in lexicographic
    increasing order. For example: <filename>102-nova-pcipassthru.conf </filename>.
    </para>
    </step>
    <step>
    <para>
    Add the following configuration entries to the file and the configuration entries for controller nodes
    only specify PCI alias for the device from the compute host. For example:
    </para>
<screen>&prompt.root;cat /etc/nova/nova.conf.d/102-nova-pcipassthru.conf
[pci]
alias = { "vendor_id":"10de", "product_id":"1db4", "device_type":"type-PCI", "name":"a1" }
</screen>
    <para>
    The example above shows how to configure a PCI alias a1 to request a PCI device with a <literal>vendor_id</literal>
    of <literal>10de</literal> and a
    <literal>product_id</literal> of <literal>1db4</literal>.
    </para>
    </step>
    <step>
    <para>Once the file is updated, restart nova api on the controller node:</para>
<screen>&prompt.root;systemctl restart openstack-nova-api
</screen>
    </step>
    </procedure>
    </listitem>

    <listitem><para>
    <emphasis role="bold">Flavor Creation</emphasis>
    </para>
    <para>
    Login into the controller node and create a new flavor or update an existing flavor with the property
    <literal>"pci_passthrough:alias"</literal>. For example:
    </para>
<screen>&prompt.root;source .openrc
openstack flavor create --ram 8192 --disk 100 --vcpu 8 gpuflavor
openstack flavor set gpuflavor --property "pci_passthrough:alias"="a1:1"
</screen>
    <para>
    In the property, <literal>"pci_passthrough:alias"="a1:1"</literal>, <literal>a1</literal> before the <literal>:</literal>
    references the alias name as provided in the
    configuration entries while the number <literal>1</literal> after the <literal>:</literal> tells nova that a single GPU
    should be assigned.
    </para>
    </listitem>
    <listitem>
    <para>
    <emphasis role="bold">Boot an instance with the flavor created in previous step</emphasis>
    </para>
    <para>
      Make sure the VM becomes <literal>ACTIVE</literal>. Login into the virtual instance and verify that GPU is seen
      from the guest
      by running the <command>lspci</command> command on the guest.
    </para>
    </listitem>
    </orderedlist>
    </listitem>
  </orderedlist>
   <para>Few additional <emphasis role="bold"> examples</emphasis></para>
   <orderedlist>
     <listitem>
       <para>Example 1: Multiple compute hosts</para>
       <para>Compute host x:</para>
<screen>
[pci]
passthrough_whitelist = [{"address": "0000:84:00.0"}]
alias = {"vendor_id": "10de", "name": "a1", "device_type": "type-PCI", "product_id": "1db4"}
</screen>
       <para>Compute host y:</para>
<screen>
[pci]
passthrough_whitelist = [{"address": "0000:85:00.0"}]
alias = {"vendor_id": "10de", "name": "a1", "device_type": "type-PCI", "product_id": "1db4"}
</screen>
       <para>Controller nodes:</para>
<screen>
[pci]
alias = {"vendor_id": "10de", "name": "a1", "device_type": "type-PCI", "product_id": "1db4"}
</screen>

      </listitem>
       <listitem>
       <para>Example 2: Multiple PCI devices on the same host </para>
         <para>Compute host z:</para>
<screen>
[pci]
passthrough_whitelist = [{"vendor_id": "10de", "product_id": "1db4"}, {"vendor_id": "10de", "product_id":
"1db1"}]
alias = {"vendor_id": "10de", "name": "a2", "device_type": "type-PCI", "product_id": "1db1"}
alias = {"vendor_id": "10de", "name": "a1", "device_type": "type-PCI", "product_id": "1db4"}
</screen>
         <para>Controller nodes:</para>
<screen>
[pci]
alias = {"vendor_id": "10de", "name": "a2", "device_type": "type-PCI", "product_id": "1db1"}
alias = {"vendor_id": "10de", "name": "a1", "device_type": "type-PCI", "product_id": "1db4"}
</screen>
         <para>In order to pass both the devices to the instance, you can set the
         <literal>"pci_passthrough:alias"="a1:1,a2:1"</literal>
         </para>
<screen>&prompt.root;source .openrc
openstack flavor create --ram 8192 --disk 100 --vcpu 8 gpuflavor2
openstack flavor set gpuflavor2 --property "pci_passthrough:alias"="a1:1,a2:1"
</screen>
     </listitem>
   </orderedlist>
 </section>
</chapter>
