<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xml:id="provisioning_rhel"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Provisioning RHEL Yourself</title>
 <para>
  This article outlines the steps needed to manually provision a RHEL node so
  that it can be added to a new or existing &kw-hos-phrase; cloud.
 </para>
 <section>
  <title>Install RHEL 7.2</title>
  <para>
   Install RHEL 7.2 using the standard iso
   (RHEL-7.2-20151030.0-Server-x86_64-dvd1.iso)
  </para>
 </section>
 <section>
  <title>Assign a static IP</title>
  <procedure>
   <step>
    <para>
     Use the <literal>ip addr</literal> command to find out what network
     devices are on your system:
    </para>
<screen>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: <emphasis role="bold">eno1</emphasis>: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP qlen 1000
    link/ether <emphasis role="bold">f0:92:1c:05:89:70</emphasis> brd ff:ff:ff:ff:ff:ff
    inet 10.13.111.178/26 brd 10.13.111.191 scope global eno1
       valid_lft forever preferred_lft forever
    inet6 fe80::f292:1cff:fe05:8970/64 scope link
       valid_lft forever preferred_lft forever
3: eno2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP qlen 1000
    link/ether f0:92:1c:05:89:74 brd ff:ff:ff:ff:ff:ff</screen>
   </step>
   <step>
    <para>
     Identify the one that matches the MAC address of your server and edit the
     corresponding config file in
     <literal>/etc/sysconfig/network-scripts</literal>.
    </para>
<screen>vi /etc/sysconfig/network-scripts/<emphasis role="bold">ifcfg-eno1</emphasis> </screen>
   </step>
   <step>
    <para>
     Edit the <literal>IPADDR</literal> and <literal>NETMASK</literal> values
     to match your environment. Note that the <literal>IPADDR</literal> is used
     in the corresponding stanza in <literal>servers.yml</literal>. You may
     also need to set <literal>BOOTPROTO</literal> to <literal>none</literal>.
    </para>
<screen>TYPE=Ethernet
<emphasis role="bold">BOOTPROTO=none</emphasis>
DEFROUTE=yes
PEERDNS=yes
PEERROUTES=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes
IPV6_FAILURE_FATAL=no
NAME=eno1
UUID=36060f7a-12da-469b-a1da-ee730a3b1d7c
DEVICE=eno1
ONBOOT=yes
<emphasis role="bold">NETMASK=255.255.255.192</emphasis>
<emphasis role="bold">IPADDR=10.13.111.14</emphasis></screen>
   </step>
   <step>
    <para>
     [OPTIONAL] Reboot your RHEL node and ensure that it can be accessed from
     the lifecycle manager.
    </para>
   </step>
  </procedure>
 </section>
 <section>
  <title>Add <systemitem class="username">stack</systemitem> user and home directory</title>
<screen>useradd -m stack
passwd stack</screen>
 </section>
 <section>
<!-- FIXME: "(to) sudo" as a verb?? - sknorr, 2018-01-25 -->
  <title>Allow user <systemitem class="username">stack</systemitem> to <command>sudo</command> without password</title>
  <para>
   There are a number of different ways to achieve this - here is one
   possibility using the pre-existing
   <systemitem class="groupname">wheel</systemitem> group.
  </para>
  <procedure>
   <step>
    <para>
     Add the <literal>stack</literal> user to the <literal>wheel</literal>
     group.
    </para>
<screen>usermod -aG wheel stack</screen>
   </step>
   <step>
    <para>
     Run the <literal>visudo</literal> command
    </para>
   </step>
   <step>
    <para>
     Uncomment the line specifying <literal>NOPASSWD: ALL</literal> for the
     <literal>wheel</literal> group.
    </para>
<screen>## Allows people in group wheel to run all commands
%wheel  ALL=(ALL)       ALL

## Same thing without a password
<emphasis role="bold">%wheel ALL=(ALL)       NOPASSWD: ALL</emphasis></screen>
   </step>
   <step>
    <para>
     To facilitate using ssh from the deployer and running a command via sudo,
     comment out the lines for <literal>requiretty</literal> and
     <literal>!visiblepw</literal>
    </para>
<screen>#
# Disable "ssh hostname sudo &lt;cmd&gt;", because it will show the password in clear.
#         You have to run "ssh -t hostname sudo &lt;cmd&gt;".
#
<emphasis role="bold">#</emphasis>Defaults    requiretty

#
# Refuse to run if unable to disable echo on the tty. This setting should also be
# changed in order to be able to use sudo without a tty. See requiretty above.
#
<emphasis role="bold">#</emphasis>Defaults   !visiblepw</screen>
   </step>
  </procedure>
 </section>
 <section>
  <title>Set up yum repository</title>
  <para>
   You need to set up a yum repository, either external or local, containing a
   &kw-hos; supported RHEL distro. You must have a full repository including
   ResilientStorage and HighAvailability addons. One possible method for
   setting up a local repository is outlined in this section.
  </para>
  <procedure>
   <step>
    <para>
     Mount the RHEL iso and expand it
    </para>
<screen>mkdir /tmp/localrhel
mount -o loop rhel7.iso /mnt
cd /mnt
tar cvf - . | (cd /tmp/localrhel ; tar xvf -)
cd /
umount /mnt</screen>
   </step>
   <step>
    <para>
     Create a repo file <literal>/etc/yum.repos.d/localrhel.repo</literal>
    </para>
<screen>[localrhel]
name=localrhel
baseurl=file:///tmp/localrhel
enabled=1
gpgcheck=0

[localrhel-1]
name=localrhel-1
baseurl=file:///tmp/localrhel/addons/ResilientStorage
enabled=1
gpgcheck=0

[localrhel-2]
name=localrhel-2
baseurl=file:///tmp/localrhel/addons/HighAvailability
enabled=1
gpgcheck=0</screen>
   </step>
   <step>
    <para>
     Run <literal> yum clean all</literal>.
    </para>
   </step>
  </procedure>
 </section>
 <section>
  <title>Add Required Packages</title>
  <para>
   As documented in the
   <!-- FIXME: <xref keyref="install_entryscale_kvm/thirdparty"/> -->
   section of
   <!-- FIXME: <xref keyref="install_entryscale_kvm"/> -->,
   you will need to add some extra packages that are required. Ensure that
   <package>openssh-server</package>, <package>python</package>, and
   <package>rsync</package> are installed.
  </para>
 </section>
 <section>
  <title>Set up passwordless SSH access</title>
  <para>
   Once you have started your installation using the lifecycle manager, or if
   you are adding a RHEL node to an existing cloud, you need to copy the
   deployer public key to the RHEL node. One way of doing this is to copy the
   <filename>/home/stack/.ssh/authorized_keys</filename> from another node in
   the cloud to the same location on the RHEL node. If you are installing a new
   cloud, this file will be available on the nodes after running the
   <filename>bm-reimage.yml</filename> playbook.
  </para>
  <important>
   <para>
    Ensure that there is global read access to the file
    <filename>/home/stack/.ssh/authorized_keys</filename>.
   </para>
  </important>
  <para>
   Now test passwordless ssh from the deployer and check your ability to
   remotely execute sudo commands:
  </para>
<screen>ssh stack@<replaceable>IP_OF_RHEL_NODE</replaceable> "sudo tail -5 /var/log/messages"</screen>
 </section>
</section>
