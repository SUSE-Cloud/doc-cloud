<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entities.ent"> %entities;
]>
<section xml:id="ironic-provisioning"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Provisioning Bare-Metal Nodes with Flat Network Model</title>
 <warning>
  <para>
   Providing bare-metal resources to an untrusted third party is not advised
   as a malicious user can potentially modify hardware firmware.
  </para>
 </warning>
 <important>
  <para>
   The steps outlined in <xref linkend="ironic-tls"/>
   <emphasis>must</emphasis> be performed.
  </para>
 </important>
 <para>
  A number of drivers are available to provision and manage bare-metal
  machines. The drivers are named based on the deployment mode and the power
  management interface. &kw-hos; has been tested with the following drivers:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    agent_ilo
   </para>
  </listitem>
  <listitem>
   <para>
    agent_ipmi
   </para>
  </listitem>
  <listitem>
   <para>
    pxe_ilo
   </para>
  </listitem>
  <listitem>
   <para>
    pxe_ipmi
   </para>
  </listitem>
 </itemizedlist>
 <para>
  <phrase vendor="hpe">For &hpe; servers, <literal>agent_ipmitool</literal> and
  <literal>agent_ilo</literal> drivers are supported.</phrase>
 </para>
 <para>
  Before you start, you should be aware that:
 </para>
 <orderedlist>
  <listitem>
   <para>
    Node Cleaning is enabled for all the drivers in &kw-hos-phrase;.
   </para>
  </listitem>
  <listitem>
   <para>
    Node parameter settings must have matching flavors in terms of
    <literal>cpus</literal>, <literal>local_gb</literal>, and
    <literal>memory_mb</literal>, <literal>boot_mode</literal> and
    <literal>cpu_arch</literal>.
   </para>
  </listitem>
  <listitem>
   <para>
    It is advisable that nodes enrolled for ipmitool drivers are pre-validated
    in terms of BIOS settings, in terms of boot mode, prior to setting
    capabilities.
   </para>
  </listitem>
  <listitem>
   <para>
    Network cabling and interface layout should also be pre-validated in any
    given particular boot mode or configuration that is registered.
   </para>
  </listitem>
  <listitem>
   <para>
    The use of <literal>agent_</literal> drivers is predicated upon &o_img;
    images being backed by a &swift; image store, specifically the need for the
    temporary file access features. Using the file system as a &o_img; back-end
    image store means that the <literal>agent_</literal> drivers cannot be
    used.
   </para>
  </listitem>
  <listitem>
   <para>
    Manual Cleaning (RAID) and Node inspection is supported by ilo drivers
    (<literal>agent_ilo</literal> and <literal>pxe_ilo)</literal>
   </para>
  </listitem>
 </orderedlist>
 <section xml:id="sec.ironic-provision.image">
  <title>Supplied Images</title>
  <para>
   As part of the &productname; Entry-scale &o_iron; Cloud installation, &o_iron;
   Python Agent (IPA) images are supplied and loaded into &o_img;. To see the
   images that have been loaded, execute the following commands on the deployer
   node:
  </para>
<screen>$ source ~/service.osrc
glance image-list</screen>
  <para>
   This will produce output like the following example, showing three images
   that have been added by &o_iron;:
  </para>
<screen>
+------------------+--------------------------+
| ID               | Name                     |
+------------------+--------------------------+
| <replaceable>DEPLOY_UUID</replaceable>      | ir-deploy-iso            |
| <replaceable>KERNEL_UUID</replaceable>      | ir-deploy-kernel         |
| <replaceable>RAMDISK_UUID</replaceable>     | ir-deploy-ramdisk        |
+------------------+--------------------------+
</screen>
  <para>
   The <literal>ir-deploy-ramdisk</literal> image is a traditional boot ramdisk
   used by the <literal>agent_ipmitool</literal>,
   <literal>pxe_ipmitool</literal>, and <literal>pxe_ilo</literal> drivers
   while <literal>ir-deploy-iso</literal> is an ISO image that is supplied as
   virtual media to the host when using the <literal>agent_ilo</literal>
   driver.
  </para>
 </section>
 <section xml:id="sec.ironic-provision.provision">
  <title>Provisioning a Node</title>
  <para>
   The information required to provision a node varies slightly depending on
   the driver used. In general the following details are required.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Network access information and credentials to connect to the management
     interface of the node.
    </para>
   </listitem>
   <listitem>
    <para>
     Sufficient properties to allow for &o_comp; flavor matching.
    </para>
   </listitem>
   <listitem>
    <para>
     A deployment image to perform the actual deployment of the guest operating
     system to the bare-metal node.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   A combination of the <literal>ironic node-create</literal> and
   <literal>ironic node-update</literal> commands are used for registering a
   node's characteristics with the &o_iron; service. In particular,
   <literal>ironic node-update &lt;nodeid&gt;
   <replaceable>add</replaceable></literal> and <literal>ironic node-update
   &lt;nodeid&gt; <replaceable>replace</replaceable></literal> can be used to
   modify the properties of a node after it has been created while
   <literal>ironic node-update &lt;nodeid&gt;
   <replaceable>remove</replaceable></literal> will remove a property.
  </para>
 </section>
 <section xml:id="sec.ironic-provision.create-ilo">
  <title>Creating a Node Using <command>agent_ilo</command></title>
  <para>
   If you want to use a boot mode of BIOS as opposed to UEFI, then you need to
   ensure that the boot mode has been set correctly on the iLO:
  </para>
  <para>
   While the iLO driver can automatically set a node to boot in UEFI mode via
   the <literal>boot_mode</literal> defined capability, it cannot set BIOS boot
   mode once UEFI mode has been set.
  </para>
  <para>
   Use the <literal>ironic node-create</literal> command to specify the
   <literal>agent_ilo</literal> driver, network access and credential
   information for the iLO, properties of the node and the &o_img; ID of the
   supplied ISO IPA image. Note that memory size is specified in megabytes while
   disk size is specified in gigabytes.
  </para>
<screen>
ironic node-create -d agent_ilo -i ilo_address=<replaceable>IP_ADDRESS</replaceable> -i \
  ilo_username=Administrator -i ilo_password=<replaceable>PASSWORD</replaceable> \
  -p cpus=2 -p cpu_arch=x86_64 -p memory_mb=64000 -p local_gb=99 \
  -i ilo_deploy_iso=<replaceable>DEPLOY_UUID</replaceable>
</screen>
  <para>
   This will generate output similar to the following:
  </para>
<screen>
+--------------+---------------------------------------------------------------+
| Property     | Value                                                         |
+--------------+---------------------------------------------------------------+
| uuid         | <replaceable>NODE_UUID</replaceable>                                                     |
| driver_info  | {u'ilo_address': u'<replaceable>IP_ADDRESS</replaceable>', u'ilo_password': u'******',   |
|              | u'ilo_deploy_iso': u'<replaceable>DEPLOY_UUID</replaceable>',                            |
|              | u'ilo_username': u'Administrator'}                            |
| extra        | {}                                                            |
| driver       | agent_ilo                                                     |
| chassis_uuid |                                                               |
| properties   | {u'memory_mb': 64000, u'local_gb': 99, u'cpus': 2,            |
|              | u'cpu_arch': u'x86_64'}                                       |
| name         | None                                                          |
+--------------+---------------------------------------------------------------+
</screen>
  <para>
   Now update the node with <literal>boot_mode</literal> and
   <literal>boot_option</literal> properties:
  </para>
<screen>
ironic node-update <replaceable>NODE_UUID</replaceable> add \
  properties/capabilities="boot_mode:bios,boot_option:local"
 </screen>
  <para>
   The <literal>ironic node-update</literal> command returns details for all of
   the node's characteristics.
  </para>
<screen>
<?dbsuse-fo font-size="0.70em"?>
+------------------------+------------------------------------------------------------------+
| Property               | Value                                                            |
+------------------------+------------------------------------------------------------------+
| target_power_state     | None                                                             |
| extra                  | {}                                                               |
| last_error             | None                                                             |
| updated_at             | None                                                             |
| maintenance_reason     | None                                                             |
| provision_state        | available                                                        |
| clean_step             | {}                                                               |
| uuid                   | <replaceable>NODE_UUID</replaceable>                                                        |
| console_enabled        | False                                                            |
| target_provision_state | None                                                             |
| provision_updated_at   | None                                                             |
| maintenance            | False                                                            |
| inspection_started_at  | None                                                             |
| inspection_finished_at | None                                                             |
| power_state            | None                                                             |
| driver                 | agent_ilo                                                        |
| reservation            | None                                                             |
| properties             | {u'memory_mb': 64000, u'cpu_arch': u'x86_64', u'local_gb': 99,   |
|                        | u'cpus': 2, u'capabilities': u'boot_mode:bios,boot_option:local'}|
| instance_uuid          | None                                                             |
| name                   | None                                                             |
| driver_info            | {u'ilo_address': u'10.1.196.117', u'ilo_password': u'******',    |
|                        | u'ilo_deploy_iso': u'<replaceable>DEPLOY_UUID</replaceable>',                               |
|                        | u'ilo_username': u'Administrator'}                               |
| created_at             | 2016-03-11T10:17:10+00:00                                        |
| driver_internal_info   | {}                                                               |
| chassis_uuid           |                                                                  |
| instance_info          | {}                                                               |
+------------------------+------------------------------------------------------------------+
</screen>
 </section>
 <section xml:id="sec.ironic-provision.create-ipmi">
  <title>Creating a Node Using <command>agent_ipmi</command></title>
  <para>
   Use the <literal>ironic node-create</literal> command to specify the
   <literal>agent_ipmi</literal> driver, network access and credential
   information for the iLO, properties of the node and the &o_img; IDs of the
   supplied kernel and ramdisk images. Note that memory size is specified in
   megabytes while disk size is specified in gigabytes.
  </para>
<screen>
<?dbsuse-fo font-size="0.70em"?>
ironic node-create -d <emphasis role="bold">agent_ipmitool</emphasis> \
-i ipmi_address=<replaceable>IP_ADDRESS</replaceable> \
-i ipmi_username=Administrator -i ipmi_password=<replaceable>PASSWORD</replaceable> \
-p cpus=2 -p memory_mb=64000 -p local_gb=99 -p cpu_arch=x86_64 \
-i deploy_kernel=<replaceable>KERNEL_UUID</replaceable> \
-i deploy_ramdisk=<replaceable>RAMDISK_UUID</replaceable>
</screen>
  <para>
   This will generate output similar to the following:
  </para>
<screen>
<?dbsuse-fo font-size="0.70em"?>
+--------------+-----------------------------------------------------------------------+
| Property     | Value                                                                 |
+--------------+-----------------------------------------------------------------------+
| uuid         | <replaceable>NODE2_UUID</replaceable>                                                            |
| driver_info  | {u'deploy_kernel': u'<replaceable>KERNEL_UUID</replaceable>',                                    |
|              | u'ipmi_address': u'<replaceable>IP_ADDRESS</replaceable>', u'ipmi_username': u'Administrator',   |
|              | u'ipmi_password': u'******',                                          |
|              | u'deploy_ramdisk': u'<replaceable>RAMDISK_UUID</replaceable>'}                                   |
| extra        | {}                                                                    |
| driver       | agent_ipmitool                                                        |
| chassis_uuid |                                                                       |
| properties   | {u'memory_mb': 64000, u'cpu_arch': u'x86_64', u'local_gb': 99,        |
|              | u'cpus': 2}                                                           |
| name         | None                                                                  |
+--------------+-----------------------------------------------------------------------+
</screen>
  <para>
   Now update the node with <literal>boot_mode</literal> and
   <literal>boot_option</literal> properties:
  </para>
<screen>
ironic node-update <replaceable>NODE_UUID</replaceable> add \
  properties/capabilities="boot_mode:bios,boot_option:local"
</screen>
  <para>
   The <literal>ironic node-update</literal> command returns details for all of
   the node's characteristics.
  </para>
<screen>
<?dbsuse-fo font-size="0.70em"?>
+------------------------+-----------------------------------------------------------------+
| Property               | Value                                                           |
+------------------------+-----------------------------------------------------------------+
| target_power_state     | None                                                            |
| extra                  | {}                                                              |
| last_error             | None                                                            |
| updated_at             | None                                                            |
| maintenance_reason     | None                                                            |
| provision_state        | available                                                       |
| clean_step             | {}                                                              |
| uuid                   | <replaceable>NODE2_UUID</replaceable>                                                      |
| console_enabled        | False                                                           |
| target_provision_state | None                                                            |
| provision_updated_at   | None                                                            |
| maintenance            | False                                                           |
| inspection_started_at  | None                                                            |
| inspection_finished_at | None                                                            |
| power_state            | None                                                            |
| driver                 | agent_ipmitool                                                  |
| reservation            | None                                                            |
| properties             | {u'memory_mb': 64000, u'cpu_arch': u'x86_64',                   |
|                        | u'local_gb': 99, u'cpus': 2,                                    |
|                        | u'capabilities': u'boot_mode:bios,boot_option:local'}           |
| instance_uuid          | None                                                            |
| name                   | None                                                            |
| driver_info            | {u'ipmi_password': u'******', u'ipmi_address': u'<replaceable>IP_ADDRESS</replaceable>',   |
|                        | u'ipmi_username': u'Administrator', u'deploy_kernel':           |
|                        | u'<replaceable>KERNEL_UUID</replaceable>',                                                 |
|                        | u'deploy_ramdisk': u'<replaceable>RAMDISK_UUID</replaceable>'}                             |
| created_at             | 2016-03-11T14:19:18+00:00                                       |
| driver_internal_info   | {}                                                              |
| chassis_uuid           |                                                                 |
| instance_info          | {}                                                              |
+------------------------+-----------------------------------------------------------------+
</screen>
  <para>
   For more information on node enrollment, see the &ostack; documentation at
   <link xlink:href="http://docs.openstack.org/developer/ironic/deploy/install-guide.html#enrollment"/>.
  </para>
 </section>
 <section xml:id="sec.ironic-provision.flavor">
  <title>Creating a Flavor</title>
  <para>
   Nova uses flavors when fulfilling requests for bare-metal nodes. The Nova
   scheduler attempts to match the requested flavor against the properties of
   the created &o_iron; nodes. So an administrator needs to set up flavors that
   correspond to the available bare-metal nodes using the command
   <command>nova flavor-create</command>:
  </para>
<screen>
<?dbsuse-fo font-size="0.70em"?>
nova flavor-create bmtest auto 64000  99 2

+----------------+--------+--------+------+-----------+------+-------+-------------+-----------+
| ID             | Name   | Mem_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+----------------+--------+--------+------+-----------+------+-------+-------------+-----------+
| 645de0...b1348 | bmtest | 64000  | 99   | 0         |      | 2     | 1.0         | True      |
+----------------+--------+--------+------+-----------+------+-------+-------------+-----------+
</screen>
  <para>
   To see a list of all the available flavors, run <command>nova
   flavor-list</command>:
  </para>
<screen>
<?dbsuse-fo font-size="0.70em"?>
nova flavor-list

+-------------+--------------+--------+------+-----------+------+-------+--------+-----------+
| ID          | Name         | Mem_MB | Disk | Ephemeral | Swap | VCPUs |  RXTX  | Is_Public |
|             |              |        |      |           |      |       | Factor |           |
+-------------+--------------+--------+------+-----------+------+-------+--------+-----------+
| 1           | m1.tiny      | 512    | 1    | 0         |      | 1     | 1.0    | True      |
| 2           | m1.small     | 2048   | 20   | 0         |      | 1     | 1.0    | True      |
| 3           | m1.medium    | 4096   | 40   | 0         |      | 2     | 1.0    | True      |
| 4           | m1.large     | 8192   | 80   | 0         |      | 4     | 1.0    | True      |
| 5           | m1.xlarge    | 16384  | 160  | 0         |      | 8     | 1.0    | True      |
| 6           | m1.baremetal | 4096   | 80   | 0         |      | 2     | 1.0    | True      |
| 645d...1348 | bmtest       | 64000  | 99   | 0         |      | 2     | 1.0    | True      |
+-------------+--------------+--------+------+-----------+------+-------+--------+-----------+
</screen>
  <para>
   Now set the CPU architecture and boot mode and boot option capabilities:
  </para>
<screen>
nova flavor-key 645de08d-2bc6-43f1-8a5f-2315a75b1348 set cpu_arch=x86_64
nova flavor-key 645de08d-2bc6-43f1-8a5f-2315a75b1348 set capabilities:boot_option="local"
nova flavor-key 645de08d-2bc6-43f1-8a5f-2315a75b1348 set capabilities:boot_mode="bios"
</screen>
  <para>
   For more information on flavor creation, see the &ostack; documentation at
   <link xlink:href="http://docs.openstack.org/developer/ironic/deploy/install-guide.html#flavor-creation"/>.
  </para>
 </section>
 <section xml:id="sec.ironic-provision.net">
  <title>Creating a Network Port</title>
  <para>
   Register the MAC addresses of all connected physical network interfaces
   intended for use with the bare-metal node.
  </para>
<screen>ironic port-create -a 5c:b9:01:88:f0:a4 -n ea7246fd-e1d6-4637-9699-0b7c59c22e67</screen>
 </section>
 <section xml:id="sec.ironic-provision.glance-image">
  <title>Creating a &o_img; Image</title>
  <para>
   You can create a whole disk image with
   <link xlink:href="https://github.com/openstack/diskimage-builder">diskimage-builder</link>
   using a command similar to the following:
  </para>
<screen>DIB_RELEASE=trusty disk-image-create -o ubuntu-trusty.qcow2 vm ubuntu</screen>
  <para>
   Then load the image into &o_img;:
  </para>
<screen>
glance image-create --name='ubuntu' --disk-format=qcow2 \
  --container-format=bare --file ~/ubuntu.qcow2

+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum         | 45a4a06997e64f7120795c68beeb0e3c     |
| container_format | bare                                 |
| created_at       | 2016-02-17T10:42:14Z                 |
| disk_format      | qcow2                                |
| id               | <emphasis role="bold">17e4915a-ada0-4b95-bacf-ba67133f39a7</emphasis> |
| min_disk         | 0                                    |
| min_ram          | 0                                    |
| name             | ubuntu                               |
| owner            | 821b7bb8148f439191d108764301af64     |
| protected        | False                                |
| size             | 372047872                            |
| status           | active                               |
| tags             | []                                   |
| updated_at       | 2016-02-17T10:42:23Z                 |
| virtual_size     | None                                 |
| visibility       | private                              |
+------------------+--------------------------------------+

</screen>
  <para>
   This image will subsequently be used to boot the bare-metal node.
  </para>
 </section>
 <section xml:id="sec.ironic-provision.key">
  <title>Generating a Key Pair</title>
  <para>
   Create a key pair that you will use when you login to the newly booted node:
  </para>
<screen>
nova keypair-add <emphasis role="bold">ironic_kp</emphasis> &gt; ironic_kp.pem
</screen>
 </section>
 <section xml:id="sec.ironic-provision.neutron-id">
  <title>Determining the &o_netw; Network ID</title>
<screen>
<?dbsuse-fo font-size="0.70em"?>
neutron net-list

+---------------+----------+----------------------------------------------------+
| id            | name     | subnets                                            |
+---------------+----------+----------------------------------------------------+
| <emphasis role="bold">c0102...1ca8c </emphasis>| flat-net | 709ee2a1-4110-4b26-ba4d-deb74553adb9 192.3.15.0/24 |
+---------------+----------+----------------------------------------------------+
</screen>
 </section>
 <section xml:id="sec.ironic-provision.boot">
  <title>Booting the Node</title>
  <para>
   Before booting, it is advisable to power down the node:
  </para>
<screen>
ironic node-set-power-state ea7246fd-e1d6-4637-9699-0b7c59c22e67 off
</screen>
  <para>
   You can now boot the bare-metal node with the information compiled in the
   preceding steps, using the &o_netw; network ID, the whole disk image ID, the
   matching flavor and the key name:
  </para>
<screen>
nova boot --nic net-id=c010267c-9424-45be-8c05-99d68531ca8c \
  --image 17e4915a-ada0-4b95-bacf-ba67133f39a7 \
  --flavor 645de08d-2bc6-43f1-8a5f-2315a75b1348 \
  --key-name ironic_kp ubuntu
</screen>
  <para>
   This command returns information about the state of the node that is booting:
  </para>
<screen>
+--------------------------------------+------------------------+
| Property                             | Value                  |
+--------------------------------------+------------------------+
| OS-EXT-AZ:availability_zone          |                        |
| OS-EXT-SRV-ATTR:host                 | -                      |
| OS-EXT-SRV-ATTR:hypervisor_hostname  | -                      |
| OS-EXT-SRV-ATTR:instance_name        | instance-00000001      |
| OS-EXT-STS:power_state               | 0                      |
| OS-EXT-STS:task_state                | scheduling             |
| OS-EXT-STS:vm_state                  | building               |
| OS-SRV-USG:launched_at               | -                      |
| OS-SRV-USG:terminated_at             | -                      |
| accessIPv4                           |                        |
| accessIPv6                           |                        |
| adminPass                            | adpHw3KKTjHk           |
| config_drive                         |                        |
| created                              | 2016-03-11T11:00:28Z   |
| flavor                               | bmtest (645de...b1348) |
| hostId                               |                        |
| id                                   | a9012...3007e          |
| image                                | ubuntu (17e49...f39a7) |
| key_name                             | ironic_kp              |
| metadata                             | {}                     |
| name                                 | ubuntu                 |
| os-extended-volumes:volumes_attached | []                     |
| progress                             | 0                      |
| security_groups                      | default                |
| status                               | BUILD                  |
| tenant_id                            | d53bcaf...baa60dd      |
| updated                              | 2016-03-11T11:00:28Z   |
| user_id                              | e580c64...4aaf990      |
+--------------------------------------+------------------------+
</screen>
  <para>
   The boot process can take up to 10 minutes.
   Monitor the progress with the iLO console or with <literal>nova
   list</literal>, <literal>nova show &lt;nova_node_id&gt;</literal>, and
   <literal>ironic node-show &lt;ironic_node_id&gt;</literal> commands.
  </para>
<screen>
<?dbsuse-fo font-size="0.70em"?>
nova list

+---------------+--------+--------+------------+-------------+----------------------+
| ID            | Name   | Status | Task State | Power State | Networks             |
+---------------+--------+--------+------------+-------------+----------------------+
| a9012...3007e | ubuntu | BUILD  | spawning   | NOSTATE     | flat-net=192.3.15.12 |
+---------------+--------+--------+------------+-------------+----------------------+
</screen>
  <para>
   During the boot procedure, a login prompt will appear for &slsa;:
  </para>
  <para>
   Ignore this login screen and wait for the login screen of your target
   operating system to appear:
  </para>
  <para>
   If you now run the command <command>nova list</command>, it should show
   the node in the running state:
  </para>
<screen>
<?dbsuse-fo font-size="0.70em"?>
nova list
+---------------+--------+--------+------------+-------------+----------------------+
| ID            | Name   | Status | Task State | Power State | Networks             |
+---------------+--------+--------+------------+-------------+----------------------+
| a9012...3007e | ubuntu | ACTIVE | -          | Running     | flat-net=<emphasis role="bold">192.3.15.14</emphasis> |
+---------------+--------+--------+------------+-------------+----------------------+
</screen>
  <para>
   You can now log in to the booted node using the key you generated earlier.
   (You may be prompted to change the permissions of your private key files, so
   that they are not accessible by others).
  </para>
<screen>ssh ubuntu@192.3.15.14 -i ironic_kp.pem</screen>
 </section>
 <section xml:id="sec.ironic-provision.dib">
  <title>Creating &o_img; Images Using <command>diskimage-builder</command> (DIB)</title>
  <para>
   The following sections show you how to create your own images using KIWI,
   the command line utility to build Linux system appliances. For information
   on installing KIWI, see <link
   xlink:href="https://suse.github.io/kiwi/installation.html"/>.
  </para>
 </section>
 <!-- FIXME: no SUSE instructions here - sknorr, 2018-01-03 -->
 <section vendor="hpe" xml:id="sec.ironic-provision.rhel">
  <title>Creating BIOS Images for &rhla;</title>
  <procedure>
   <step>
    <para>
     Install <literal>dib-utils</literal>:
    </para>
<screen>pip install dib-utils</screen>
   </step>
   <step xml:id="li2">
    <para>
     Download the qcow2 guest image from the &rhla; portal and define
     <literal>DIB_LOCAL_IMAGE</literal>:
    </para>
<screen>export DIB_LOCAL_IMAGE=/home/stack/rhel-guest-image-7.2-20151102.0.x86_64.qcow2</screen>
   </step>
   <step>
    <para>
     Create a local Yum repository and define
     <literal>DIB_YUM_REPO_CONF</literal> to be the path to the repository:
    </para>
<screen>export DIB_YUM_REPO_CONF = <replaceable>PATH_TO_REPO_FILE</replaceable></screen>
   </step>
   <step xml:id="li4">
    <para>
     Use <literal>disk-image-create</literal> to create the image:
    </para>
<screen>cd diskimage-builder/bin
./disk-image-create  -o rhel.qcow2 vm dhcp-all-interfaces  rhel7
</screen>
   </step>
  </procedure>
 </section>
 <section xml:id="sec.ironic-provision.ubuntu">
  <title>Creating BIOS Images for Ubuntu</title>
<screen>
DIB_RELEASE=trusty ./disk-image-create  -o ubuntu.qcow2 vm dhcp-all-interfaces \
  ubuntu</screen>
 </section>
 <section xml:id="sec.ironic-provision.uefi">
  <title>Creating UEFI Images</title>
  <para>
   To create UEFI images, you will need to setup sudo to not prompt for
   passwords and configure web-proxy. After you have configured
   <command>sudo</command> and <command>web-proxy</command>, follow these
   steps:
  </para>
  <procedure>
   <step>
    <para>
     Clone the <command>diskimage-builder</command> Git repository:
    </para>
<screen>
git clone https://git.gozer.hpcloud.net/openstack/diskimage-builder.git \
  -b feature/v2</screen>
   </step>
   <step>
    <para>
     Apply the patch to your cloned <literal>diskimage-builder</literal>
     repository
     (<link xlink:href="https://review.openstack.org/#/c/391850/6"/>) and then
     clone the <command>diskimage-builder</command> utilities
     (<literal>dib-utils</literal>) repository:
    </para>
<screen>
cd diskimage-builder/
git fetch git://git.openstack.org/openstack/diskimage-builder \
refs/changes/50/391850/6 &amp;&amp; git cherry-pick FETCH_HEAD
cd ..
git clone https://git.gozer.hpcloud.net/openstack/dib-utils.git</screen>
   </step>
   <step>
    <para>
     Add execute permissions for <literal>disk-image-create</literal>:
    </para>
<screen>chmod a+x /root/diskimage-builder/diskimage_builder/lib/disk-image-create</screen>
   </step>
   <step>
    <para>
     Export your path to include diskimage-builder utilities:
    </para>
<screen>
<?dbsuse-fo font-size="0.70em"?>
export PATH=/root/diskimage-builder/diskimage_builder/lib:/root/dib-utils/bin:$PATH</screen>
   </step>
   <step>
    <para>
     Verify that the diskimage-build utilities are in your cloned path by
     locating <literal>dib-run-parts</literal>:
    </para>
<screen>which dib-run-parts
/root/dib-utils/bin/dib-run-parts</screen>
   </step>
   <step>
    <para>
     Verify that the diskimage-build is in your cloned path by locating
     <literal>disk-image-create</literal>:
    </para>
<screen>which disk-image-create
/root/diskimage-builder/diskimage_builder/lib/disk-image-create</screen>
   </step>
   <step>
    <para>
     Install diskimage-builder:
    </para>
<screen>cd diskimage-builder/
python setup.py install</screen>
   </step>
   <step>
    <para>
     Export the <literal>diskimage-builder</literal> lib files:
    </para>
<screen>export _LIB=/root/diskimage-builder/diskimage_builder/lib</screen>
   </step>
   <step>
    <para>
     Create the UEFI Image.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       To create an Ubuntu UEFI image:
      </para>
<screen>DIB_RELEASE=trusty DIB_UEFI_SUPPORT=true disk-image-create -o \
  ubuntu-trusty-uefi.qcow2 vm ubuntu dhcp-all-interfaces</screen>
     </listitem>
     <listitem>
      <para>
       To create a Fedora UEFI image:
      </para>
<screen>DIB_UEFI_SUPPORT=true disk-image-create -o fedora-uefi.qcow2 vm \
  fedora dhcp-all-interfaces</screen>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     For information about OS support, see the
     <command>diskimage-builder</command> User Guide at
     <link xlink:href="https://docs.openstack.org/diskimage-builder/latest/user_guide/supported_distros.html"/>.
    </para>
   </step>
  </procedure>
 </section>
</section>
