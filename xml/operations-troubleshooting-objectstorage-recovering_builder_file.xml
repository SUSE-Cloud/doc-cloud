<?xml version="1.0"?>
<!DOCTYPE section [
 <!ENTITY % entities SYSTEM "entity-decl.ent"> %entities;
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="topic_gbz_13t_mt">
 <title>Recovering Swift Builder Files</title>
 <para>
  When you execute the deploy process for a system, a copy of the builder files
  are stored on the following nodes and directories:
 </para>
 <procedure>
  <step>
   <para>
    On the Swift ring building node, the primary reference copy is stored in
    the
    <literal>/etc/swiftlm/&lt;cloud-name&gt;/&lt;control-plane-name&gt;/builder_dir/</literal>
    directory.
   </para>
  </step>
  <step>
   <para>
    On the next node after the Swift ring building node, a backup copy is
    stored in the
    <literal>/etc/swiftlm/&lt;cloud-name&gt;/&lt;control-plane-name&gt;/builder_dir/</literal>
    directory.
   </para>
  </step>
 </procedure>
 <para>
  If a copy of the builder files are found on the ring building node (to identify the Swift ring
  building node, see <xref linkend="topic_rtc_s3t_mt"/>) in the directory
  <literal>/etc/swiftlm/&lt;cloud-name&gt;/&lt;control-plane-name&gt;/builder_dir</literal>,
  then no further recover action is needed. If not, then you need to copy the
  files from an intact Swift node onto the primary Swift ring building node.
 </para>
 <para>
  If you have no intact <literal>/etc/swiftlm</literal> directory on any Swift
  node, you may be able to restore from a backup. See
  <xref linkend="recovering_controller_nodes"/>.
 </para>
 <para>
  To restore builder files on the primary ring builder node from a backup stored
  on another member of the ring, use the following process:
 </para>
 <procedure>
  <step>
   <para>
    Log in to the Swift ring building server (To identify the Swift ring
    building server, see <xref linkend="topic_rtc_s3t_mt"/>).
   </para>
  </step>
  <step>
   <para>
    Create the <literal>/etc/swiftlm/<replaceable>CLOUD_NAME</replaceable>/<replaceable>CONTROL_PLANE_NAME</replaceable>/builder_dir</literal>
    directory structure with these commands:
   </para>
   <para>
    Replace <replaceable>CLOUD_NAME</replaceable> with the name of your cloud
    and <replaceable>CONTROL_PLANE_NAME</replaceable> with the name of your
    control plane.
   </para>
<screen>&prompt.sudo;mkdir -p /etc/swiftlm/&lt;CLOUD_NAME&gt;/&lt;CONTROL_PLANE_NAME&gt;/builder_dir/
&prompt.sudo;chown -R ardana.ardana /etc/swiftlm/</screen>
  </step>
  <step>
   <para>
    Log in to a Swift node where an intact
    <literal>/etc/swiftlm/deploy_dir</literal> directory exists.
   </para>
  </step>
  <step>
   <para>
    Copy the builder files to the Swift ring building node. In the example
    below we use scp to transfer the files, where
    <literal>swpac-c1-m1-mgmt</literal> is the ring building node,
    <literal>cloud1</literal> is the cloud, and <literal>cp1</literal> is the
    control plane name:
   </para>
<screen>&prompt.ardana;scp -r /etc/swiftlm/cloud1/cp1/builder_dir/* swpac-ccp-c1-m1-mgmt:/etc/swiftlm/cloud1/cp1/builder_dir/</screen>
  </step>
  <step>
   <para>
    If you are only recovering the ring builder files onto an existing
    controller node, and not restoring the node itself along with the
    entire software stack, then log in to the &clm; and run the following
    playbook to replicate the builder files across all Swift nodes:
   </para>
<screen>&prompt.ardana;cd ~/scratch/ansible/next/ardana/ansible
&prompt.ardana;ansible-playbook -i hosts/verb_hosts swift-reconfigure.yml</screen>
   <para>
    Otherise, this step will take place automatically as you continue with
    the restoration of your controller node.
   </para>
  </step>
 </procedure>
</section>
