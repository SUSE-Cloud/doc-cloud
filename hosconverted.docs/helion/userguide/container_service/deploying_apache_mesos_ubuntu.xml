<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="deploying_apache_mesos_ubuntu">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Deploying an Apache Mesos Cluster on
    Ubuntu</title>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section id="prereqs">
      <title>Prerequisites</title>
      <p>These steps assume the following have been completed:</p>
      <ul>
        <li>The Magnum service has been installed. For more information see: <xref
            keyref="install_magnum"/></li>
        <li>Deploying an Apache Mesos Cluster  requires the Fedora Atomic image prepared
          specifically for the OpenStack Newton release. You can download the
            <b>ubuntu-mesos-newton.qcow2</b> image from <xref
            href="https://fedorapeople.org/groups/magnum/" format="html"/>
        </li>
      </ul>
    </section>
    <section id="create_cluster">
      <title>Creating the Cluster</title>
      <p>The following example is created using Kubernetes Container Orchestration Engine (COE)
        running on Fedora Atomic guest OS on <keyword keyref="kw-hos"/> VMs.</p>
      <p>
        <ol>
          <li>As <b>stack</b> user, login to the lifecycle manager.</li>
          <li>Source openstack admin credentials. <codeblock>$ source service.osrc</codeblock>
          </li>
          <li>If you haven't already, download Fedora Atomic image, prepared for Openstack Newton
            release. <note>The https_proxy is only needed if your environment requires a
              proxy.</note>
            <codeblock>$ https_proxy=http://proxy.yourcompany.net:8080 wget https://fedorapeople.org/groups/magnum/ubuntu-mesos-newton.qcow2</codeblock>
          </li>
          <li>Create a Glance image.
            <codeblock>
$ glance image-create --name ubuntu-mesos-newton --visibility public --disk-format qcow2 --os-distro ubuntu --container-format bare --file ubuntu-mesos-newton.qcow2 --progress
[=============================>] 100%
+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum         | 97cc1fdb9ca80bf80dbd6842aab7dab5     |
| container_format | bare                                 |
| created_at       | 2017-04-21T19:40:20Z                 |
| disk_format      | qcow2                                |
| id               | d6a4e6f9-9e34-4816-99fe-227e0131244f |
| min_disk         | 0                                    |
| min_ram          | 0                                    |
| name             | ubuntu-mesos-newton                  |
| os_distro        | ubuntu                               |
| owner            | 2f5b83ab49d54aaea4b39f5082301d09     |
| protected        | False                                |
| size             | 753616384                            |
| status           | active                               |
| tags             | []                                   |
| updated_at       | 2017-04-21T19:40:32Z                 |
| virtual_size     | None                                 |
| visibility       | public                               |
+------------------+--------------------------------------+</codeblock>
          </li>
          <li>Create a Nova keypair.
            <codeblock>$ test -f ~/.ssh/id_rsa.pub || ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
$ nova keypair-add --pub-key ~/.ssh/id_rsa.pub testkey</codeblock>
          </li>
          <li>Create a Magnum cluster template. <codeblock>$ magnum cluster-template-create --name my-mesos-template \
                                 --image-id d6a4e6f9-9e34-4816-99fe-227e0131244f \
                                 --keypair-id testkey \
                                 --external-network-id ext-net \
                                 --dns-nameserver 8.8.8.8 \
                                 --flavor-id m1.small \
                                 --docker-volume-size 5 \
                                 --network-driver docker \
                                 --coe mesos \
                                 --http-proxy http://proxy.yourcompany.net:8080/ \
                                 --https-proxy http://proxy.yourcompany.net:8080/</codeblock>
            <note>
              <ol>
                <li>Use the <b>image_id</b> from <codeph>glance image-create</codeph> command output
                  in the previous step.</li>
                <li>Use your organization's DNS server. If the <keyword keyref="kw-hos"/> public
                  endpoint is configured with the hostname, this server should provide resolution
                  for this hostname.</li>
                <li>The proxy is only needed if public internet (e.g. https://discovery.etcd.io/,
                  https://gcr.io/, etc) is not accessible without proxy</li>
              </ol>
            </note>
          </li>
          <li>Create cluster. The command below will create a minimalistic cluster consisting of a
            single Kubernetes Master (kubemaster) and single Kubernetes Node (worker, kubeminion).
            <codeblock>$ magnum cluster-create --name my-mesos-cluster --cluster-template my-mesos-template --node-count 1 --master-count 1</codeblock>
          </li>
          <li>Immediately after issuing <codeph>cluster-create</codeph> command, cluster status
            should turn to <b>CREATE_IN_PROGRESS</b> and stack_id assigned.
            <codeblock>$ magnum cluster-show my-mesos-cluster
+---------------------+--------------------------------------+
| Property            | Value                                |
+---------------------+--------------------------------------+
| status              | CREATE_IN_PROGRESS                   |
| cluster_template_id | be354919-fa6c-4db8-9fd1-69792040f095 |
| uuid                | b1493402-8571-4683-b81e-ddc129ff8937 |
| stack_id            | 50aa20a6-bf29-4663-9181-cf7ba3070a25 |
| status_reason       | -                                    |
| created_at          | 2017-04-21T19:50:34+00:00            |
| name                | my-mesos-cluster                     |
| updated_at          | -                                    |
| discovery_url       | -                                    |
| api_address         | -                                    |
| coe_version         | -                                    |
| master_addresses    | []                                   |
| create_timeout      | 60                                   |
| node_addresses      | []                                   |
| master_count        | 1                                    |
| container_version   | -                                    |
| node_count          | 1                                    |
+---------------------+--------------------------------------+</codeblock>
          </li>
          <li> You can monitor cluster creation progress by listing the resources of the Heat stack.
            Use the <codeph>stack_id</codeph> value from the <codeph>magnum cluster-status</codeph>
            output above in the following command:
            <codeblock>$ heat resource-list -n2 50aa20a6-bf29-4663-9181-cf7ba3070a25
WARNING (shell) "heat resource-list" is deprecated, please use "openstack stack resource list" instead
+------------------------------+--------------------------------------+-----------------------------------+-----------------+----------------------+-------------------------------+
| resource_name                | physical_resource_id                 | resource_type                     | resource_status | updated_time         | stack_name                    |
+------------------------------+--------------------------------------+-----------------------------------+-----------------+----------------------+-------------------------------+
| add_proxy_master             | 10394a74-1503-44b4-969a-44258c9a7be1 | OS::Heat::SoftwareConfig          | CREATE_COMPLETE | 2017-04-21T19:50:33Z | my-mesos-cluster-w2trq7m46qus |
| add_proxy_master_deployment  |                                      | OS::Heat::SoftwareDeploymentGroup | INIT_COMPLETE   | 2017-04-21T19:50:33Z | my-mesos-cluster-w2trq7m46qus |
...</codeblock>
          </li>
          <li>The cluster is complete when all resources show <b>CREATE_COMPLETE</b>.
            <codeblock>$ magnum cluster-show my-mesos-cluster               
+---------------------+--------------------------------------+
| Property            | Value                                |
+---------------------+--------------------------------------+
| status              | CREATE_COMPLETE                      |
| cluster_template_id | 9e942bfa-2c78-4837-82f5-6bea88ba1bf9 |
| uuid                | 9d7bb502-8865-4cbd-96fa-3cd75f0f6945 |
| stack_id            | 339a72b4-a131-47c6-8d10-365e6f6a18cf |
| status_reason       | Stack CREATE completed successfully  |
| created_at          | 2017-04-24T20:54:31+00:00            |
| name                | my-mesos-cluster                     |
| updated_at          | 2017-04-24T20:59:18+00:00            |
| discovery_url       | -                                    |
| api_address         | 172.31.0.10                          |
| coe_version         | -                                    |
| master_addresses    | ['172.31.0.10']                      |
| create_timeout      | 60                                   |
| node_addresses      | ['172.31.0.5']                       |
| master_count        | 1                                    |
| container_version   | 1.9.1                                |
| node_count          | 1                                    |
+---------------------+--------------------------------------+</codeblock>
          </li>
          <li> Verify that <xref href="https://mesosphere.github.io/marathon/" format="html"
                    scope="external">Marathon</xref> web console is available at
                  http://${MASTER_IP}:8080/, and <xref
                    href="http://mesos.apache.org/documentation/latest/" format="html"
                    scope="external">Mesos</xref> UI is available at http://${MASTER_IP}:5050/
            <codeblock>$ https_proxy=http://proxy.yourcompany.net:8080 curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.2.0/bin/linux/amd64/kubectl
$ chmod +x ./kubectl
$ sudo mv ./kubectl /usr/local/bin/kubectl</codeblock>
          </li>
          <li>Create sample Mesos
            application.<codeblock>$ mkdir my_mesos_cluster
 
$ cd my_mesos_cluster/
 
~/my_mesos_cluster$ cat > sample.json &lt;&lt;-EOF
{
  "id": "sample",
  "cmd": "python3 -m http.server 8080",
  "cpus": 0.5,
  "mem": 32.0,
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "python:3",
      "network": "BRIDGE",
      "portMappings": [
        { "containerPort": 8080, "hostPort": 0 }
      ]
    }
  }
}
EOF
 
~/my_mesos_cluster$ curl -s -X POST -H "Content-Type: application/json"  http://172.31.0.10:8080/v2/apps -d@sample.json | json_pp
{
   "dependencies" : [],
   "healthChecks" : [],
   "user" : null,
   "mem" : 32,
   "requirePorts" : false,
   "tasks" : [],
   "cpus" : 0.5,
   "upgradeStrategy" : {
      "minimumHealthCapacity" : 1,
      "maximumOverCapacity" : 1
   },
   "maxLaunchDelaySeconds" : 3600,
   "disk" : 0,
   "constraints" : [],
   "executor" : "",
   "cmd" : "python3 -m http.server 8080",
   "id" : "/sample",
   "labels" : {},
   "ports" : [
      0
   ],
   "storeUrls" : [],
   "instances" : 1,
   "tasksRunning" : 0,
   "tasksHealthy" : 0,
   "acceptedResourceRoles" : null,
   "env" : {},
   "tasksStaged" : 0,
   "tasksUnhealthy" : 0,
   "backoffFactor" : 1.15,
   "version" : "2017-04-25T16:37:40.657Z",
   "uris" : [],
   "args" : null,
   "container" : {
      "volumes" : [],
      "docker" : {
         "portMappings" : [
            {
               "containerPort" : 8080,
               "hostPort" : 0,
               "servicePort" : 0,
               "protocol" : "tcp"
            }
         ],
         "parameters" : [],
         "image" : "python:3",
         "forcePullImage" : false,
         "network" : "BRIDGE",
         "privileged" : false
      },
      "type" : "DOCKER"
   },
   "deployments" : [
      {
         "id" : "6fbe48f0-6a3c-44b7-922e-b172bcae1be8"
      }
   ],
   "backoffSeconds" : 1
}</codeblock>
          </li>
          <li>Wait for sample application to start. Use REST API or Marathon web console to monitor
            status:
            <codeblock>~/my_mesos_cluster$ curl -s http://172.31.0.10:8080/v2/apps/sample | json_pp
{
   "app" : {
      "deployments" : [],
      "instances" : 1,
      "tasks" : [
         {
            "id" : "sample.7fdd1ee4-29d5-11e7-9ee0-02427da4ced1",
            "stagedAt" : "2017-04-25T16:37:40.807Z",
            "version" : "2017-04-25T16:37:40.657Z",
            "ports" : [
               31827
            ],
            "appId" : "/sample",
            "slaveId" : "21444bc5-3eb8-49cd-b020-77041e0c88d0-S0",
            "host" : "10.0.0.9",
            "startedAt" : "2017-04-25T16:37:42.003Z"
         }
      ],
      "upgradeStrategy" : {
         "maximumOverCapacity" : 1,
         "minimumHealthCapacity" : 1
      },
      "storeUrls" : [],
      "requirePorts" : false,
      "user" : null,
      "id" : "/sample",
      "acceptedResourceRoles" : null,
      "tasksRunning" : 1,
      "cpus" : 0.5,
      "executor" : "",
      "dependencies" : [],
      "args" : null,
      "backoffFactor" : 1.15,
      "ports" : [
         10000
      ],
      "version" : "2017-04-25T16:37:40.657Z",
      "container" : {
         "volumes" : [],
         "docker" : {
            "portMappings" : [
               {
                  "servicePort" : 10000,
                  "protocol" : "tcp",
                  "hostPort" : 0,
                  "containerPort" : 8080
               }
            ],
            "forcePullImage" : false,
            "parameters" : [],
            "image" : "python:3",
            "privileged" : false,
            "network" : "BRIDGE"
         },
         "type" : "DOCKER"
      },
      "constraints" : [],
      "tasksStaged" : 0,
      "env" : {},
      "mem" : 32,
      "disk" : 0,
      "labels" : {},
      "tasksHealthy" : 0,
      "healthChecks" : [],
      "cmd" : "python3 -m http.server 8080",
      "backoffSeconds" : 1,
      "maxLaunchDelaySeconds" : 3600,
      "versionInfo" : {
         "lastConfigChangeAt" : "2017-04-25T16:37:40.657Z",
         "lastScalingAt" : "2017-04-25T16:37:40.657Z"
      },
      "uris" : [],
      "tasksUnhealthy" : 0
   }
}</codeblock>
          </li>
          <li>Verify that deployed application is responding on automatically assigned port on
            floating IP address of worker
            node.<codeblock>~/my_mesos_cluster$ curl http://172.31.0.5:31827
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
&lt;html>
&lt;head>
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8">
&lt;title>Directory listing for /&lt;/title>
...</codeblock>
          </li>
          <li>If LBaaS v2 is enabled in <keyword keyref="kw-hos"/> environment, a new load balancer
            can be created to perform request rotation between several masters. Please refer to
              <xref keyref="configure_lbaas"/>for more information on LBaaS v2 support.</li>
        </ol>
      </p>
    </section>

  </body>
</topic>
