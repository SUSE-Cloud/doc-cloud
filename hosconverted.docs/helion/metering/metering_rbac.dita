<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: not edited-->
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd" >
<topic xml:lang="en-us" id="topic15050">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Ceilometer Metering Setting Role-based
    Access Control</title>
  <prolog>
    <metadata>
      <othermeta name="layout" content="default"/>
      <othermeta name="product-version" content="HPE Helion Openstack"/>
      <othermeta name="product-version" content="HPE Helion Openstack 1.1"/>
      <othermeta name="product-version1" content="HPE Helion Openstack"/>
      <othermeta name="product-version2" content="HPE Helion Openstack 1.1"/>
    </metadata>
  </prolog>
  <body><!--not tested-->
    <p conkeyref="HOS-conrefs/applies-to"/>
    <p>Role Base Access Control (RBAC) is a technique that limits access to resources based on a
      specific set of roles associated with each user's credentials.</p>
    <p>Keystone has a set of users that are associated with each project. Each user has one or more
      roles. After a user has authenticated with Keystone using a valid set of credentials, Keystone
      will augment that request with the Roles that are associated with that user. These roles are
      added to the Request Header under the X-Roles attribute and are presented as a comma-separated
      list.</p>
    <ul>
      <li>
        <xref type="section" href="#topic15050/display_users">Displaying All Users</xref>
      </li>
      <li>
        <xref type="section" href="#topic15050/display_roles">Displaying All Roles</xref>
      </li>
      <li>
        <xref type="section" href="#topic15050/assign_role">Assigning a Role to a User</xref>
      </li>
      <li>
        <xref type="section" href="#topic15050/create_role">Creating a New Role</xref>
      </li>
      <li>
        <xref type="section" href="#topic15050/access_policies">Ceilometer Access Policies</xref>
        <ul>
          <li>
            <xref type="section" href="#topic15050/newfile">New RBAC Policy File</xref>
          </li>
          <li>
            <xref type="section" href="#topic15050/apply_policy">Applying Policies to Roles</xref>
          </li>
          <li>
            <xref type="section" href="#topic15050/write_policy">Writing a Policy</xref>
          </li>
        </ul>
      </li>
    </ul>
    <section id="display_users">
      <title>Displaying All Users</title>
      <p>To discover the list of users available in the system, an administrator can run the
        following command using the Keystone command-line interface:</p>
      <codeblock>keystone user-list</codeblock>
      <p>The output should resemble this response, which is a list of all the users currently
        available in this system.</p>
      <codeblock>+----------------------------------+-----------------------------------------+----+
|                id                |    name      | enabled |       email        |
+----------------------------------+-----------------------------------------+----+
| 1c20d327c92a4ea8bb513894ce26f1f1 |   admin      |   True  | admin.example.com  |
| 0f48f3cc093c44b4ad969898713a0d65 | ceilometer   |   True  | nobody@example.com |
| 85ba98d27b1c4c8f97993e34fcd14f48 |   cinder     |   True  | nobody@example.com |
| d2ff982a0b6547d0921b94957db714d6 |    demo      |   True  |  demo@example.com  |
| b2d597e83664489ebd1d3c4742a04b7c |    ec2       |   True  | nobody@example.com |
| 99afb00e498a487eb83c96c9bd209586 |    gf1       |   True  |   gf@helion.com    |
| 42d13c0df38a47989639b5fe99976f26 |    gf2       |   True  |   gf@helion.com    |
| 2b95b2600dc741958eae15057ff7e89b |    gf3       |   True  |   gf@helion.com    |
| 2bd85070ceec4b608d9f1b06c6be22cb |   glance     |   True  | nobody@example.com |
| 0e9e2daebbd3464097557b87af4afa4c |    heat      |   True  | nobody@example.com |
| 9f7fd03c90904d83ae73ef1b40a6baf0 |    jaq1      |   True  |   jaq@helion.com   |
| 7a73e59a100342099c59278a392f582a |    jaq2      |   True  |   jaq@helion.com   |
| 72e404eab90f41c6a181b9602e0fa777 |    jaq3      |   True  |   jaq@helion.com   |
| b149fe9c5f0e421e8349efc52f4b0451 |    jaq4      |   True  |   jaq@helion.com   |
| 0e54dab3c76349c5ab50f196a979b4c0 |    jaq5      |   True  |   jaq@helion.com   |
| 0b466ddc2c0f478aa139d2a0be314467 |  neutron     |   True  | nobody@example.com |
| 5cda1a541dee4555aab88f36e5759268 |    nova      |   True  | nobody@example.com ||
| 5cda1a541dee4555aab88f36e5759268 |    nova      |   True  | nobody@example.com |
| 1cefd1361be8437d9684eb2add8bdbfa |   swift      |   True  | nobody@example.com |
| f05bac3532c44414a26c0086797dab23 | user20141203213957|True| nobody@example.com |
| 3db0588e140d4f88b0d4cc8b5ca86a0b | user20141205232231|True| nobody@example.com |
+----------------------------------+-----------------------------------------+----+</codeblock>
    </section>
    <section id="display_roles">
      <title>Displaying All Roles</title>
      <p>To see all the roles that are currently available in the deployment, an administrator
        (someone with the admin role) can run the following command:</p>
      <codeblock>keystone role-list</codeblock>
      <p>The output should resemble the following response:</p>
      <codeblock>+----------------------------------+-------------------------------------+
|                id                |                 name                |
+----------------------------------+-------------------------------------+
| 507bface531e4ac2b7019a1684df3370 |            ResellerAdmin            |
| 9fe2ff9ee4384b1894a90878d3e92bab |               _member_              |
| e00e9406b536470dbde2689ce1edb683 |                admin                |
| aa60501f1e664ddab72b0a9f27f96d2c |           heat_stack_user           |
| a082d27b033b4fdea37ebb2a5dc1a07b |               service               |
| 8f11f6761534407585feecb5e896922f |            swiftoperator            |
+----------------------------------+-------------------------------------+</codeblock>
    </section>
    <section id="assign_role">
      <title>Assigning a Role to a User</title>
      <p>In this example, we want to add the role <b>ResellerAdmin</b> to the demo user who has the
        ID <b>d2ff982a0b6547d0921b94957db714d6</b>.</p>
      <ol>
        <li>Determine which Project/Tenant the user belongs
            to.<codeblock>keystone user-get d2ff982a0b6547d0921b94957db714d6</codeblock><p>The
            response should resemble the following
          output:</p><codeblock>+----------+----------------------------------+
| Property |              Value               |
+----------+----------------------------------+
|  email   |         demo@example.com         |
| enabled  |               True               |
|    id    | d2ff982a0b6547d0921b94957db714d6 |
|   name   |               demo               |
| username |               demo               |
+----------+----------------------------------+</codeblock></li>
        <li>We need to link the ResellerAdmin Role to a Project/Tenant. To start, determine which
          tenants are available on this
            deployment.<codeblock>keystone tenant-list</codeblock><p>The
            response should resemble the following
          output:</p><codeblock>+----------------------------------+-------------------------------+--+
|                id                |        name       | enabled |
+----------------------------------+-------------------------------+--+
| 4a8f4207a13444089a18dc524f41b2cf |       admin       |   True  |
| 00cbaf647bf24627b01b1a314e796138 |        demo       |   True  |
| 8374761f28df43b09b20fcd3148c4a08 |        gf1        |   True  |
| 0f8a9eef727f4011a7c709e3fbe435fa |        gf2        |   True  |
| 6eff7b888f8e470a89a113acfcca87db |        gf3        |   True  |
| f0b5d86c7769478da82cdeb180aba1b0 |        jaq1       |   True  |
| a46f1127e78744e88d6bba20d2fc6e23 |        jaq2       |   True  |
| 977b9b7f9a6b4f59aaa70e5a1f4ebf0b |        jaq3       |   True  |
| 4055962ba9e44561ab495e8d4fafa41d |        jaq4       |   True  |
| 33ec7f15476545d1980cf90b05e1b5a8 |        jaq5       |   True  |
| 9550570f8bf147b3b9451a635a1024a1 |      service      |   True  |
+----------------------------------+-------------------------------+--+</codeblock></li>
        <li>Now that we have all the pieces, we can assign the ResellerAdmin role to this User on
          the Demo
            project.<codeblock>keystone user-role-add --user-id d2ff982a0b6547d0921b94957db714d6 --role-id 507bface531e4ac2b7019a1684df3370 --tenant-id 00cbaf647bf24627b01b1a314e796138</codeblock><p>This
            will produce no response if everything is correct.</p></li>
        <li>Validate that the role has been assigned correctly. Pass in the user and tenant ID and
          request a list of roles
            assigned.<codeblock>keystone user-role-list --user-id d2ff982a0b6547d0921b94957db714d6 --tenant-id 00cbaf647bf24627b01b1a314e796138</codeblock><p>Note
            that all members have the <i>_member_</i> role as a default role in addition to any
            other roles that have been
          assigned.</p><codeblock>+----------------------------------+---------------+----------------------------------+----------------------------------+
|                id                |      name     |             user_id              | tenant_id             |
+----------------------------------+---------------+----------------------------------+----------------------------------+
| 507bface531e4ac2b7019a1684df3370 | ResellerAdmin | d2ff982a0b6547d0921b94957db714d6 | 00cbaf647bf24627b01b1a314e796138 |
| 9fe2ff9ee4384b1894a90878d3e92bab |    _member_   | d2ff982a0b6547d0921b94957db714d6 | 00cbaf647bf24627b01b1a314e796138 |
+----------------------------------+---------------+----------------------------------+----------------------------------+</codeblock></li>
      </ol>
    </section>
    <section id="create_role">
      <title>Creating a New Role</title>
      <p>In this example, we will create a Level 3 Support role called <b>L3Support</b>.</p>
      <ol>
        <li>Add the new role to the list of
            roles.<codeblock>keystone role-create --name L3Support</codeblock><p>The
            response should resemble the following
          output:</p><codeblock>+----------+----------------------------------+
| Property |              Value               |
+----------+----------------------------------+
|    id    | 7e77946db05645c4ba56c6c82bf3f8d2 |
|   name   |            L3Support             |
+----------+----------------------------------+</codeblock></li>
        <li>Now that we have the new role's ID, we can add that role to the Demo user from the
          previous
            example.<codeblock>keystone user-role-add --user-id d2ff982a0b6547d0921b94957db714d6 --role-id 7e77946db05645c4ba56c6c82bf3f8d2 --tenant-id 00cbaf647bf24627b01b1a314e796138</codeblock><p>This
            will produce no response if everything is correct.</p></li>
        <li>Verify that the user Demo has both the ResellerAdmin and L3Support
          roles.<codeblock>keystone user-role-list --user-id d2ff982a0b6547d0921b94957db714d6 --tenant-id 00cbaf647bf24627b01b1a314e796138</codeblock></li>
        <li>The response should resemble the following output. Note that this user has the L3Support
          role, the ResellerAdmin role, and the default member
          role.<codeblock>+----------------------------------+---------------+----------------------------------+----------------------------------+
|                id                |      name     |             user_id              |            tenant_id             |
+----------------------------------+---------------+----------------------------------+----------------------------------+
| 7e77946db05645c4ba56c6c82bf3f8d2 |   L3Support   | d2ff982a0b6547d0921b94957db714d6 | 00cbaf647bf24627b01b1a314e796138 |
| 507bface531e4ac2b7019a1684df3370 | ResellerAdmin | d2ff982a0b6547d0921b94957db714d6 | 00cbaf647bf24627b01b1a314e796138 |
| 9fe2ff9ee4384b1894a90878d3e92bab |    _member_   | d2ff982a0b6547d0921b94957db714d6 | 00cbaf647bf24627b01b1a314e796138 |
+----------------------------------+---------------+----------------------------------+----------------------------------+</codeblock></li>
      </ol>
    </section>
    <section id="access_policies">
      <title>Access Policies</title>
      <p>Before introducing RBAC, Ceilometer had very simple access control. There were two types of
        user: admins and users. Admins will be able to access any API and perform any operation.
        Users will only be able to access non-admin APIs and perform operations only on the
        Project/Tenant where they belonged.</p>
    </section>
    <section id="newfile">
      <title>New RBAC Policy File</title>
      <p>This is the policy file for Ceilometer without RBAC (<b>etc/ceilometer/policy.json</b>)</p>
      <codeblock>{
  "context_is_admin": "role:admin"
}</codeblock>
      <p>With the RBAC-enhanced code it is possible to control access to each API command. The new
        policy file (<i>rbac_policy.json</i>) looks like this.</p>
      <codeblock>{
    "context_is_admin": "role:admin",
    "telemetry:get_samples": "rule:context_is_admin",
    "telemetry:get_sample": "rule:context_is_admin",
    "telemetry:query_sample": "rule:context_is_admin",
    "telemetry:create_samples": "rule:context_is_admin",
    "telemetry:compute_statistics": "rule:context_is_admin",
    "telemetry:get_meters": "rule:context_is_admin",
    "telemetry:get_resource": "rule:context_is_admin",
    "telemetry:get_resources": "rule:context_is_admin",
    "telemetry:get_alarm": "rule:context_is_admin",
    "telemetry:query_alarm": "rule:context_is_admin",
    "telemetry:get_alarm_state": "rule:context_is_admin",
    "telemetry:get_alarms": "rule:context_is_admin",
    "telemetry:create_alarm": "rule:context_is_admin",
    "telemetry:set_alarm": "rule:service_role",
    "telemetry:delete_alarm": "rule:context_is_admin",
    "telemetry:alarm_history": "rule:context_is_admin",
    "telemetry:change_alarm_state": "rule:context_is_admin",
    "telemetry:query_alarm_history": "rule:context_is_admin"
}</codeblock>
      <p>Note that the API action names are namespaced using the <b>telemetry:</b> prefix. This
        avoids potential confusion if other services have policies with the same name.</p>
    </section>
    <section id="apply_policy">
      <title>Applying Policies to Roles</title>
      <p>Copy the <b>rbac_policy.json</b> file over the <b>policy.json</b> file and make any
        required changes.</p>
    </section>
    <section id="apply-a-policy-to-multiple-roles">
      <title>Apply a policy to multiple roles</title>
      <p>For example, the ResellerAdmin role could also be permitted to access
          <b>compute_statistics</b>. This change would require the following changes in the
          <b>rbac_policy.json</b> policy file:</p>
      <codeblock>{
    "context_is_admin": "role:admin",
    "i_am_reseller": "role:ResellerAdmin",
    "telemetry:get_samples": "rule:context_is_admin",
    "telemetry:get_sample": "rule:context_is_admin",
    "telemetry:query_sample": "rule:context_is_admin",
    "telemetry:create_samples": "rule:context_is_admin",
    "telemetry:compute_statistics": "rule:context_is_admin or rule:i_am_reseller",
    ...
}</codeblock>
      <!-- LINKTODO Find correct link target -->
      <p>After a policy change has been made all the API services will need to be <!--<xref
        href="metering_components.dita#topic4362/centralagent" type="section"
        >-->restarted<!--</xref>-->.</p>
    </section>
    <section id="apply-a-policy-to-a-non-default-role-only">
      <title>Apply a policy to a non-default role only</title>
      <p>Another example: assign the L3Support role to the <b>get_meters</b> API and exclude all
        other roles.</p>
      <codeblock>{
    "context_is_admin": "role:admin",
    "i_am_reseller": "role:ResellerAdmin",
    "l3_support": "role:L3Support",
    "telemetry:get_samples": "rule:context_is_admin",
    "telemetry:get_sample": "rule:context_is_admin",
    "telemetry:query_sample": "rule:context_is_admin",
    "telemetry:create_samples": "rule:context_is_admin",
    "telemetry:compute_statistics": "rule:context_is_admin or rule:i_am_reseller",
    "telemetry:get_meters": "rule:l3_support",
    ...
}</codeblock>
    </section>
    <section id="write_policy">
      <title>Writing a Policy</title>
      <p>The Policy Engine capabilities are as expressible using a set of rules and guidelines. For
        a complete reference, please see the <xref
          href="https://github.com/openstack/oslo.policy/blob/master/oslo_policy/policy.py"
          scope="external" format="html">OSLO policy documentation</xref>.</p>
      <p>Policies can be expressed in one of two forms: A list of lists, or a string written in the
        new policy language.</p>
      <p>In the list-of-lists representation, each check inside the innermost list is combined with
        an <b>and</b> conjunction - for that check to pass, <b>all</b> the specified checks must
        pass. These innermost lists are then combined as with an <b>or</b> conjunction.</p>
      <p>As an example, take the following rule, expressed in the list-of-lists representation:</p>
      <codeblock>[["role:admin"], ["project_id:%(project_id)s", "role:projectadmin"]]</codeblock>
      <p>In the policy language, each check is specified the same way as in the list-of-lists
        representation: a simple [a:b] pair that is matched to the correct class to perform that
        check.</p>
      <ul>
        <li>
          <p>User's Role</p>
          <codeblock>role:admin</codeblock>
        </li>
        <li>
          <p>Rules already defined on policy</p>
          <codeblock>rule:admin_required</codeblock>
        </li>
        <li>
          <p>Against a URL (URL checking must return TRUE to be valid)</p>
          <codeblock>http://my-url.org/check</codeblock>
        </li>
        <li>
          <p>User attributes (obtained through the token: user_id, domain_id, project_id)</p>
          <codeblock>project_id:%(target.project.id)s</codeblock>
        </li>
        <li>
          <p>Strings</p>
          <codeblock>&lt;variable&gt;:'xpto2035abc'
'myproject':&lt;variable&gt;</codeblock>
        </li>
        <li>
          <p>Literals</p>
          <codeblock>project_id:xpto2035abc
domain_id:20
True:%(user.enabled)s</codeblock>
        </li>
      </ul>
      <p>Conjunction operators are also available, allowing for more flexibility in crafting
        policies. So, in the policy language, the previous check in list-of-lists becomes:</p>
      <codeblock>role:admin or (project_id:%(project_id)s and role:projectadmin)</codeblock>
      <p>The policy language also has the NOT operator, allowing for richer policy rules:</p>
      <codeblock>project_id:%(project_id)s and not role:dunce</codeblock>
      <p>Attributes sent along with API calls can be used by the policy engine (on the right side of
        the expression), by using the following syntax:</p>
      <codeblock>&lt;some_value&gt;:%(user.id)s</codeblock>
      <p>
        <b>Note</b>: two special policy checks should be mentioned; the policy check <b>@</b> will
          <b>always accept</b> an access, and the policy check <b>!</b> will <b>always reject</b> an
        access.</p>
    </section>
  </body>
</topic>
