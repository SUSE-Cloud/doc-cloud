<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: not edited-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="concepts">
    <title><ph conkeyref="HOS-conrefs/product-title"/>Concepts</title>
    <body><!--not tested-->
        <p conkeyref="HOS-conrefs/applies-to"/>
        
      
    <p>An <keyword keyref="kw-hos-phrase"/> cloud is defined by a declarative model that is described in a
        series of configuration objects. These configuration objects are represented in YAML files
        which together constitute the various example configurations provided as templates with this
        release. These examples can be used nearly unchanged, with the exception of necessary
        changes to IP addresses and other site and hardware-specific identifiers. Alternatively, the
        examples may be customized to meet site requirements.</p>
    <p>The following diagram shows the set of configuration objects and their relationships. All
        objects have a name that you may set to be something meaningful for your context. In the
        examples these names are provided in capital letters as a convention. These names have no
        significance to <keyword keyref="kw-hos"/>, rather it is the relationships between them that
        define the configuration.</p>
        
        
        <p audience="EXTERNAL"><image href="../../../../media/inputmodel/hphelionopenstack_concepts.png"/></p>

        
        
    <p audience="INTERNAL"><image href="../../../../media/inputmodel/HPE_InputModel_Flow_40.png"/></p>
    <!--<p><xref href="../../../../media/inputmodel/hphelionopenstack_concepts_lg.png" scope="external"
        format="html">Download a high-res version</xref></p>-->
    <p>The configuration processor reads and validates the input model described in the YAML files
        discussed above, combines it with the service definitions provided by <keyword keyref="kw-hos"/>
        and any persisted state information about the current deployment to produce a set of Ansible
        variables that can be used to deploy the cloud. It also produces a set of information files
        that provide details about the configuration.</p>
    <p>The relationship between the file systems on the <keyword keyref="kw-hos"/> deployment server and
        the configuration processor is shown in the following diagram. Below the line are the
        directories that you, the cloud administrator, interact with. Above the line are the
        directories that are maintained by <keyword keyref="kw-hos"/>.</p>
    <p><image href="../../../../media/inputmodel/hphelionopenstack_directories.png"/></p>
    <p><xref href="../../../../media/inputmodel/hphelionopenstack_directories_lg.png" scope="external"
        format="html">Download a high-res version</xref></p>
    <p>The input model is read from the <codeph>~/helion/my_cloud/definition</codeph> directory.
        Although the supplied examples use separate files for each type of object in the model, the
        names and layout of the files have no significance to the configuration processor, it simply
        reads all of the .yml files in this directory. Cloud administrators are therefore free to
        use whatever structure is best for their context. For example, you may decide to maintain
        separate files or sub-directories for each physical rack of servers.</p>
    <p>As mentioned, the examples use the conventional upper casing for object names, but these
        strings are used only to define the relationship between objects. They have no specific
        significance to the configuration processor.</p>

    </body>
</topic>
