<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: not edited-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="concept_controlplanes">
    <title><ph conkeyref="HOS-conrefs/product-title"/>Control Planes</title>
    <body><!--not tested-->
        <p conkeyref="HOS-conrefs/applies-to"/>
        


    <p><i>A control-plane runs one or more <uicontrol>services</uicontrol> distributed across
        <uicontrol>clusters</uicontrol> and <uicontrol>resource groups</uicontrol></i>.</p>
        
    <p><i>A control-plane uses servers with a particular
        <uicontrol>server-role</uicontrol></i>.</p>
        
    <p>A <uicontrol>control-plane</uicontrol> provides the operating environment for a set of
        <uicontrol>services</uicontrol>; normally consisting of a set of shared services (MySQL,
        RabbitMQ, HA Proxy, Apache, etc), OpenStack control services (API, schedulers, etc) and the
        <uicontrol>resources</uicontrol> they are managing (compute, storage, etc).</p>
        
    <p>A simple cloud may have a single <uicontrol>control-plane</uicontrol> which runs all of the
        <uicontrol>services</uicontrol>. A more complex cloud may have multiple
        <uicontrol>control-planes</uicontrol> to allow for more than one instance of some services. 
        <!--(Note that 
        <keyword keyref="kw-hos-phrase"/> only supports a single control-plane). -->
        
        <ph audience="INTERNAL">(Note that support for multiple control-planes is a non-core feature in <keyword keyref="kw-hos-phrase"/> 
        and not covered by the examples).</ph>
        
        
        Services that need to consume
        (use) another service (such as Neutron consuming MySQL, Nova consuming Neutron) always use
        the service within the same <uicontrol>control-plane</uicontrol><!-- before looking in any
        related <uicontrol>control-planes</uicontrol>-->.
        In addition a control-plane can describe which services can be consumed from other control-planes.
        It is one of the functions of the
        configuration processor to resolve these relationships and make sure that each
        consumer/service is provided with the configuration details to connect to the appropriate
        provider/service.</p>
        
    <p>Each <uicontrol>control-plane</uicontrol> is structured as <uicontrol>clusters</uicontrol>
        and <uicontrol>resources</uicontrol>. The <uicontrol>clusters</uicontrol> are typically used
        to host the OpenStack services that manage the cloud such as API servers, database servers,
        Neutron agents, and Swift proxies, while the <uicontrol>resources</uicontrol> are used to
        host the scale-out OpenStack services such as Nova-Compute or Swift-Object services. This is
        a representation convenience rather than a strict rule, for example it is possible to run
        the Swift-Object service in the management cluster in a smaller-scale cloud that is not
        designed for scale-out object serving.</p>
    <p>A cluster can contain one or more <uicontrol>servers</uicontrol> and you can have one or
        more <uicontrol>clusters</uicontrol> depending on the capacity and scalability needs of the
        cloud that you are building. Spreading services across multiple
        <uicontrol>clusters</uicontrol> provides greater scalability, but it requires a greater
        number of physical servers. A common pattern for a large cloud is to run high data volume
        services such as monitoring and logging in a separate cluster. A cloud with a high object
        storage requirement will typically also run the Swift service in its own cluster.</p>
    <p>Clusters in this context are a mechanism for grouping service components in physical
        servers, but all instances of a component in a <uicontrol>control-plane</uicontrol> work
        collectively. For example, if HA Proxy is configured to run on multiple clusters within the
        same <uicontrol>control-plane</uicontrol> then all of those instances will work as a single
        instance of the ha-proxy service.</p>
    <p>Both <uicontrol>clusters</uicontrol> and <uicontrol>resources</uicontrol> define the type
        (via a list of <uicontrol>server-roles</uicontrol>) and number of servers (min and max or
        count) they require.</p>
    <p>The <uicontrol>control-plane</uicontrol> can also define a list of failure-zones
        (<uicontrol>server-groups</uicontrol>) from which to allocate servers.</p>

    </body>
</topic>
