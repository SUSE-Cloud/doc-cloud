<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: not edited-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="third_party_service_integration">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Third-party Service Integration</title>
<abstract><shortdesc outputclass="hdphidden">This documentation details the support <keyword keyref="kw-hos-phrase"/>
        provides for the integration of 3rd-party components with a <keyword keyref="kw-hos"/>
        platform deployment, whether that is a completely separate service or a plugin/driver to an
        existing service in the <keyword keyref="kw-hos"/> stack. The 3rd-party mechanism supports the integration of a
        range of different types of content..</shortdesc></abstract>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>



  </body>

  <topic id="d1e13">
    <title>Introduction</title>
    <body>
      <p><keyword keyref="kw-hos"/> provides great  flexibility when deploying your cloud, including:
        <ol>
          <li>The ability to subset the services or service components to be deployed.</li>
          <li>Control of the distribution of services across the control plane and the rest of the cloud.</li>
          <li>Network topology definition.</li>
          <li>Disk layout specification.</li>
          <li>Customization using configuration files.</li>
        </ol>

        
        <keyword keyref="kw-hos-phrase"/>
        extends this flexibility by supporting the integration of 3rd-party components with a <keyword keyref="kw-hos"/>
        platform deployment, whether that is a completely separate service or a plugin/driver to an
        existing service in the <keyword keyref="kw-hos"/> stack. The 3rd-party mechanism supports the integration of a
        range of different types of content: </p>
      <ol>
        <li>
          <b>Packages:</b> Addition of 3rd-party packages not available in <keyword keyref="kw-hos"/> repos onto a separate
          repo on the Helion lifecycle mananger node, e.g. Debian packages or RHEL rpms. After import, these packages are
          automatically available for installation on any target cloud node. </li>
        <li>
          <b>Python venv content:</b>
          <keyword keyref="kw-hos"/> services are deployed as separate python virtual environments
          (venvs). The third-party mechanism supports the import of 3rd-party python code for two
          use cases: <ol>
            <li> The patching of an existing <keyword keyref="kw-hos"/> venv, e.g. adding a plugin
              to the <keyword keyref="kw-hos"/> neutron venv.</li>
            <li> Creation of a new venv, where this venv can optionally be derived from an existing
                <keyword keyref="kw-hos"/> venv. </li>
          </ol></li>
        <li>
          <b>Service Definitions:</b> <keyword keyref="kw-hos"/> services and service components are defined in a series of
          yaml files, which describe various aspects of a service, such as endpoints (VIP and
          otherwise), relationships with other services (e.g. requires rabbitmq) and whether creds
          need to be allocated <!-- TODO REF: insert docs.hpcloud reference? -->. This data is ultimately
          used to generate Ansible variables for consumption by the playbooks. The 3rd-party
          mechanism allows for the definition of new services or service components, where
          relationships between each other and with <keyword keyref="kw-hos"/>-supplied services can be defined. These
          service definitions will be processed along with the set of <keyword keyref="kw-hos"/> service definitions to
          produce Ansible vars, which can be utilised by imported 3rd-party Ansible
            playbooks.<b> </b>
        </li>
        <li>
          <b>Ansible:</b> Addition of 3rd-party playbook and roles for the deployment and
          configuration of 3rd-party components. These playbooks can be integrated with all of the
          standard Helion lifecycle manager lifecycle operations, such as deployment, upgrade and reconfiguration.</li>
        <li>
          <b>Other application content:</b>
          <ph> A third-party service integration may require additional content to be deployed to a
            node, where that content is not packaged as a deb/rpm, or the content is not a python
            plugin to be patched in an existing <keyword keyref="kw-hos"/> service venv or python code for a new venv. Helion lifecycle manager
            provides a generic mechanism for packaging such content and delivering it to target
            nodes (coupled with the use of Helion lifecycle manager Ansible modules in the 3rd-party Ansible playbooks).
            For example, this mechanism can be used to deliver a Java-based application to target
            cloud nodes.</ph>
          <b> </b>
        </li>
        <li>
          <b>Centralized Logging profiles</b>: Third-party services log files can be added to the
          centralised logging service provided by <keyword keyref="kw-hos"/>. This service also manages the logrorate
          policy for services that register with it. To configure your third-party service with
          centralised logging, a logging profile must be added.<b> </b>
        </li>
        <li>
          <b><keyword keyref="kw-hos"/> service configuration:</b> Some <keyword keyref="kw-hos"/> services (currently, just Neutron) provide an
          interface for injecting 3rd-party customisations of the deployment of that service, which
          includes the addition of configuration data to certain selected configuration files.</li>
      </ol>
      <p>The import of any combination of the above content types can be used in support of a
        particular 3rd-party integration. The remainder of this document details the main steps for
        using the import mechanism and how each of the content types is prepared in advance of
        running the import.</p>
    </body>
  </topic>
  
  <topic id="d1e112">
    <title>Using the 3rd-party Import mechanism</title>
    <body>
      <p>The Helion lifecycle manager 3rd-party import mechanism allows the import of various types of content into the
        <keyword keyref="kw-hos"/> platform in advance of a deployment. In the general use case, the 3rd-party content is
        imported after the lifecycle manager has been initialised (i.e. after <codeph>hos-init.bash</codeph> has been
        executed). The general procedure for importing 3rd-party content is as follows:</p>
      <ol>
        <li> Ensure that the lifecycle manager has been initialised:
          <codeblock>~/hos-4.0.0/hos-init.bash</codeblock></li>
        <li>Prepare 3rd-party content for import on the deployer. <ol>
            <li> Create a top-level directory on the lifecycle manager under
                <codeph>~/third-party</codeph> and create sub-directories under that, according to
              the different third-party content being imported, e.g.:
              <codeblock>third-party/
└── myservice
    ├── ansible
    ├── logging        
    ├── other
    ├── pkgs
    ├── services
    └── venvs</codeblock></li>
            <li> Populate each sub-directory with your 3rd-party content; details on the layout for
              each content type are detailed below.Note that the third-party area can also be
              populated with <keyword keyref="kw-hos"/> extensions content shipped with <keyword
                keyref="kw-hos"/>, e.g. for a <keyword keyref="kw-hos"/>-DCN deployment: <codeblock>cp -r ~/helion/hos_extensions/dcn ~/third-party/</codeblock>
              <b>Note:</b> Additional content (outside of that provided with <keyword
                keyref="kw-hos"/> extensions) must be added to the third-party area for a <keyword
                keyref="kw-hos"/>-DCN deployment. <!--Full details on how to set up
              <keyword keyref="kw-hos"/> with DCN see – TODO REF):-->
              <ph> </ph>
            </li>
          </ol></li>
        <li> Run the 3rd-party import playbook: <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost third-party-import.yml</codeblock><ol>
            <li> Note that RHEL artefacts (rpms or any updates against RHEL venvs – <keyword
                keyref="kw-hos"/> provides a different set of service venvs for hlinux and RHEL) are
              not imported by default. If this is required, run the third-party-import playbook as
              follows:
              <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost third-party-import.yml -e third_party_rhel_enabled</codeblock></li>
          </ol></li>
        <li>Proceed with the cloud deployment as per normal:<ol>
            <li>Prepare configuration input files to describe your target cloud (which may include
              references to imported 3rd-party services) and commit those changes via git.</li>
            <li>Provision your baremetal nodes.</li>
            <li> Run the configuration processor:
              <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost config-processor-run.yml -e encrypt="" -e rekey=""</codeblock></li>
            <li> Ready the deployment:
              <codeblock>ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
            <li> Deploy your cloud (which now includes 3rd-party components):
              <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts site.yml</codeblock></li>
          </ol></li>
      </ol>
      <p>The following sections provide details on how to supply the different types of third-party
        content for import. The following assumes that you have created a top-level directory (named
        according to your particular 3rd-party integration) under the third-party area on the
        deployer, e.g. as follows:</p>
      <codeblock>third-party
└── myservice</codeblock>
      <p>Further sub-directories are created under the directory specific to a third-party
        integration, e.g. <codeph>third-party/myservice</codeph>, according to different types of
        content required.</p>
    </body>
    <topic id="d1e272">
      <title>Debian/RHEL packages</title>
      <body>
        <p>The third-party import mechanism supports the import of both Debian packages and RHEL
          packages, as shown in the diagram below:</p>
        <p>
          <image keyref="debian_rhel_import"/>
        </p>
        <p>To prepare third-party packages for import, the following steps are required:</p>
        <ol>
          <li>Create a <codeph>pkgs</codeph> directory under your specific top-level third-party
            import directory, with further sub-directories, depending on the OS support required:
              <codeph>debian </codeph>or <codeph>rhel.</codeph>
          </li>
          <li>Populate the debian sub-directory with the full set of debian packages required for
            the third-party service, including any dependencies.</li>
          <li>Populate the rhel sub-directory with the full set of RHEL packages required for the
            third-party service, including any dependencies.</li>
        </ol>
        <p>A sample layout of third-party packages ready for import is shown below:</p>
        <codeblock>third-party/myservice/pkgs
├── debian
│   ├── pkg1.deb
│   └── pkg2.deb
└── rhel
    ├── pkg1.rpm
    └── pkg2.rpm</codeblock>
        <p>The third-party-import playbook will scan for packages under all directories matching the
            pattern <codeph>~/third/*/pkgs/debian</codeph> or <codeph>~/third/*/pkgs/rhel</codeph>
          and populate the 3rd-party apt repo (separate to the base <keyword keyref="kw-hos"/> apt repo) with deb packages
          and populate the 3rd-party yum repo (separate to the <keyword keyref="kw-hos"/> yum repo, if present) with rpm
          packages. The third-party apt and yum repo packages will then be available for
          installation in subsequent deployments of cloud nodes, typically carried out by imported
          3rd-party Ansible playbooks.</p>
      </body>
    </topic>
    <topic id="d1e329">
      <title>Venvs</title>
      <body>
        <p>The third-party import mechanism supports both the patching of existing <keyword keyref="kw-hos"/> venvs and
          the creation of new venvs. An example of the patching of an existing <keyword keyref="kw-hos"/> neutron venv is
          illustrated below:</p>
        <p>
          <image keyref="hos_neutron_venv"/>
        </p>
        <p>To prepare content for the update or creation of a new venv, the following steps are
          required:</p>
        <ol>
          <li>Create an appropriately-named sub-directory under the venvs directory for each
            separate set of python content to be imported, e.g. <codeph>pluginA</codeph> or
              <codeph>serviceA</codeph> in the example below.</li>
          <li>For each of these sub-directories:<ol>
              <li>Populate one or all of the debs, src or whls directories with the source
                content.</li>
              <li>Populate the pip-deps directory with any pip requirements, arising from the
                above.</li>
              <li>Create <codeph>services.yml</codeph></li>
            </ol></li>
        </ol>
        <p>A sample directory layout for the patching of an existing <keyword keyref="kw-hos"/> venv with plugin code and
          for the creation of a new venv is as follows:</p>
        <codeblock>third-party/myservice/venvs
├── pluginA
│   ├── debs
│   ├── pip-deps
│   ├── services.yml
│   ├── src
│   └── whls
└── serviceA
    ├── debs
    ├── pip-deps
    ├── services.yml
    ├── src
    └── whls</codeblock>
        <p>For both cases, the content provided can be in three forms, each placed in specifically
          named sub-directories:</p>
        <ul>
          <li>
            <b>debs:</b> A set ot Debian packages containing python code, which will be extracted,
            converted into a wheel and installed into the destination venv. <!--TODO: More detail on the
            exact layout of this deb file?--></li>
          <li>
            <b>src:</b> A set of source tarballs, which are installed directly into the destination
            venv.</li>
          <li>
            <b>whls:</b> A set of wheels, which are installed directly into the destination
            venv.</li>
        </ul>
        <p>Python wheels are the preferred format for this content as they lower install time and
          have no install-time dependencies.</p>
        <p>For the above installations, additional pip dependencies may be required. The third-party
          import mechanism will scan the pip-deps sub-directory to satisfy such requirements.</p>
        <p>The nature of the destination venv referred to above depends on the services.yml file,
          which must be present. To patch an existing <keyword keyref="kw-hos"/> venv, such as neutron, the services.yml is
          defined as follows:</p>
        <codeblock>services:
  - name: neutron</codeblock>
        <p>The result of this is to create a new Neutron venv, updated with content from the 
          debs, src or whls (and pip-deps) directories. After the third-party import has been completed,
          subsequent calls to install the Neutron venv will install this updated venv rather than
          the original venv supplied with <keyword keyref="kw-hos"/>.</p>
        <p>An example services.yml for the creation of a new venv is as follows:</p>
        <codeblock>services:
  - name: myserviceA
    parent: nova-client</codeblock>
        <p>In this case a new venv is created called "myserviceA", which is based off an existing
          <keyword keyref="kw-hos"/> nova-client venv. This additionally has content installed into it from the debs, src
          or whls directories. After the third-party import has been completed, this new venv is
          available for installation. Additional third-party playbooks will be required to install
          this venv.</p>
      </body>
    </topic>
    <topic id="d1e439">
      <title>Service Definitions</title>
      <body>
        <p>To deploy a cloud with Helion lifecycle manager, the cloud operator must prepare an input model that
          describes the cloud configuration in terms of which services (OpenStack and supporting)
          run on which server nodes, how sets of server nodes are configured in terms of network
          configuration and disk layout, the overall network layout and much more (an overview of
          the input model can be found <xref keyref="input_model">here</xref>). The input model refers to a
            <codeph>service</codeph>, where a service is defined a collection of
            <codeph>service-components</codeph> that provide a particular feature; for example nova
          provides the compute service and consists of the following service-components: nova-api,
          nova-scheduler, nova-conductor, nova-novncproxy, and nova-compute.</p>
        
        <p>A service may comprise of
          just one service-component, such as rabbitmq or mysql. A service-component represents the
          smallest unit of deployment for Helion lifecycle manager. A cloud operator describes the desired cloud
          deployment in terms of the selection layout of service components across groups, known as
            <codeph>clusters</codeph>
          <codeph>. </codeph> A service and its constituent service components are typically defined
          in separate yaml files (Note: the convention is to use separate files for general
          readability and organisation, but this is not strictly required); the full set of <keyword keyref="kw-hos"/>
          services and service components can be viewed on the lifecycle manager under the
          <codeph>~/helion/hos/services</codeph> directory. For example, the list of yaml files defining the nova
          service and its constituent service-components (in <keyword keyref="kw-hos-phrase"/>) is as follows: </p>
        <codeblock>~/helion/hos/services$ ls -l nova
total 60
-rw-r--r-- 1 stack stack 3301 Jul 13 07:41 api.yml
-rw-r--r-- 1 stack stack 1516 Jul 13 07:41 compute.yml
-rw-r--r-- 1 stack stack  767 Jul 13 07:41 conductor.yml
-rw-r--r-- 1 stack stack  716 Jul 13 07:41 console_auth.yml
-rw-r--r-- 1 stack stack  777 Jul 13 07:41 esx_compute_proxy.yml
-rw-r--r-- 1 stack stack  764 Jul 13 07:41 ironic_compute_proxy.yml
-rw-r--r-- 1 stack stack  809 Jul 13 07:41 ironic_compute.yml
-rw-r--r-- 1 stack stack  778 Jul 13 07:41 ironic_scheduler.yml
-rw-r--r-- 1 stack stack 1342 Jul 13 07:41 kvm_compute.yml
-rw-r--r-- 1 stack stack  769 Jul 13 07:41 new_esx_compute_proxy.yml
-rw-r--r-- 1 stack stack 1197 Jul 13 07:41 nova-client.yml
-rw-r--r-- 1 stack stack  813 Jul 13 07:41 nova-metadata.yml
-rw-r--r-- 1 stack stack 2907 Jul 13 07:41 nova.yml
-rw-r--r-- 1 stack stack 1002 Jul 13 07:41 novncproxy.yml
-rw-r--r-- 1 stack stack  767 Jul 13 07:41 scheduler.yml</codeblock>
        
        <p> The third-party import mechanism supports the import of third-party defined services and
          service components, as shown in the following diagram: </p>
        <p>
          <image keyref="import_mechanisms"/>
        </p>
        <p> To set up third-party services for import, place the set of yaml files under the
          services sub-directory, e.g.: </p>
        <codeblock>third-party/myservice/services
└── serviceA
    ├── serviceA-client.yml
    ├── serviceA-plugin.yml
    ├── serviceA-server.yml
    └── serviceA.yml</codeblock>
        
        <p>When the third-party-import playbook has completed, the above third-party service
          definitions will have been added to the existing set of <keyword keyref="kw-hos"/> services under
          <codeph>~/helion/hos/services</codeph> and committed to git (on the site branch). Here is a sample git log
          entry for the addition of a set of third-party service definitions:</p>
        
        <codeblock>commit 21103bd725e3613b341d06dee9d3eed6ce0aafc7
Author: Helion git user &lt;helion@hpe.com&gt;
Date:   Wed Jul 13 09:46:19 2016 +0000
    Third-party services import</codeblock>
        
        <p>For details on the creation of the service definitions files, please refer to the
          separate guide on the "Implementing a new service in Helion lifecycle manager"</p>
      </body>
    </topic>
    
    
    <topic id="d1e519">
      <title>Ansible Playbooks and Roles</title>
      <body>
        <p>Helion lifecycle manager supports the import of third-party Ansible playbooks roles, as illustrated in the
          following diagram:</p>
        <p>
          <image keyref="ansible_playbook_roles"/>
        </p>
        <p>To prepare third-party Ansible content for import, carry out the following steps:</p>
        <ol>
          <li>Implement the set of playbooks and roles, as per the guide: <ph>"Implementing a new
              service in Helion lifecycle manager"</ph>
          </li>
          <li>
            <ph>Add <codeph>hooks</codeph> for the integration third-party playbooks with Helion lifecycle manager
              lifecycle operations.</ph>
          </li>
          <li>
            <ph>Create a symlinks yaml file to indicate which configuration files will be exposed
              for customer edit in the my_cloud/config area.</ph>
          </li>
          <li>
            <ph>Copy the full set of playbooks, roles, hooks and config dir to the
                <codeph>ansible</codeph> sub-directory for this particular integration.</ph>
            <ph> </ph>
          </li>
        </ol>
        <p>
          <ph>A sample layout of Ansible content ready for import is as follows:</ph>
        </p>
        <codeblock>.
├── config
│   └── myservice-symlinks.yml
├── hooks.d
│   └── myservice
│       ├── post-nova-deploy.yml
│       ├── post-nova-reconfigure.yml
│       ├── post-nova-stop.yml
│       └── pre-monasca-agent-deploy.yml
├── myservice-deploy.yml
├── myservice-reconfigure.yml
├── myservice-start.yml
├── myservice-stop.yml
└── roles
    ├── myservice-client
    │   ├── defaults
    │   │   └── main.yml
    │   └── tasks
    │       ├── configure.yml
    │       ├── install.yml
    │       ├── start.yml
    │       └── stop.yml
    ├── myservice-plugin
    │   ├── defaults
    │   │   └── main.yml
    │   └── tasks
    │       ├── configure.yml
    │       ├── install.yml
    │       ├── start.yml
    │       └── stop.yml
    └── myservice-server
        ├── defaults
        │   └── main.yml
        ├── tasks
        │   ├── configure.yml
        │   ├── install.yml
        │   ├── start.yml
        │   └── stop.yml
        └── templates
            └── server.conf.j2</codeblock>
        <p>
          <ph>When the third-party-import playbook has completed, the above set of playbooks, roles
            and hooks are added to <codeph>~/helion/hos/ansible</codeph> on the lifecycle manager and committed to
            git (on the site branch).</ph> Here is a sample git log entry representing the import of
          some third-party Ansible content: </p>
        
        <codeblock>commit 9ca9b47f6d2840b48624ffa94fb6b8a072466811
Author: Helion git user &lt;helion@hpe.com&gt;
Date:   Wed Jul 13 09:46:21 2016 +0000
    Third-party Ansible import</codeblock>
        
        <p>For details on the implementation of ansible playbooks and roles for Helion lifecycle manager, please refer to
          the separate guide on the "Implementing a new service in Helion lifecycle manager".</p>
        
        <p>In addition to adding the set of third-party Ansible playbooks and roles, the third-party
          top-level playbooks must be integrated with top-level Helion lifecycle manager playbooks for all supported
          lifecycle operations, such as deploy, upgrade and so on. The next section details how that
          is achieved. The final section on Ansible details how to set up symlinks for third-party
          configuration templates.</p>
      </body>
      <topic id="d1e608">
        <title>Helion lifecycle manager Ansible Hook Mechanism</title>
        <body>
          <p>To fully integrate your third-party playbooks, you must use the Helion lifecycle manager mechanism for
              <codeph>hooking</codeph> third-party playbooks into the major Helion lifecycle manager lifecycle operations
            so that, for example, when a deployment is run, it includes your playbooks for deploying
            a third-party service. Helion lifecycle manager supports the integration of third-party level playbooks with
            the following Helion lifecycle manager lifecycle operations:</p>
          <ul>
            <li>deploy: hlm-deploy.yml (invoked via site.yml)</li>
            <li>reconfigure: hlm-reconfigure.yml</li>
            <li>upgrade: hlm-upgrade.yml</li>
            <li>start: hlm-start.yml</li>
            <li>status: hlm-status.yml</li>
            <li>stop: hlm-stop.yml</li>
          </ul>
          <p>To hook into Helion lifecycle manager lifecycle operations, you must define a set of hook playbooks under
            the hooks.d directory within your Ansible content, where those playbooks follow a
            specific naming convention:</p>
          <codeblock>hooks.d/&lt;custom&gt;/pre-&lt;action&gt;.yml
hooks.d/&lt;custom&gt;/pre-&lt;service&gt;-&lt;action&gt;.yml
hooks.d/&lt;custom&gt;/post-&lt;service&gt;-&lt;action&gt;.yml
hooks.d/&lt;custom&gt;/post-&lt;action&gt;.yml</codeblock>
          <p>where:</p>
          <ul>
            <li>
              <b>custom: </b> Any named directory under hooks.d for the placement of hook playbooks.
              Any duplicate hooks targeting the same action or service-action combination will be
              alphabetically sorted according to this name to determine the ultimate ordering. </li>
            <li>
              <b>action: </b>Refers to the top-level operation that Helion lifecycle manager is executing, e.g. deploy or
              reconfigure. </li>
            <li>
              <b>service: </b>Refers to the name of a <keyword keyref="kw-hos"/> service as per its naming in the Helion lifecycle manager
              top-level playbooks (hlm-deploy.yml, hlm-reconfigure.yml, etc.), e.g nova, glance,
              swift, etc.</li>
          </ul>
          
          <note type="note">To integrate into <codeph>hlm-status.yml</codeph>, your hook needs to be called <codeph>post-status.yml</codeph>.</note>

          <p>The set of hooks in the above sample Ansible content layout are:</p>
          <codeblock>.
├── hooks.d
│   └── myservice
│       ├── post-nova-deploy.yml
│       ├── post-nova-reconfigure.yml
│       ├── post-nova-stop.yml
│       └── post-nova-start.yml</codeblock>
          <p>Based on the above, the <codeph>post-nova-deploy.yml</codeph> playbook will be invoked as part of a
            <codeph>site.yml</codeph> execution and is guaranteed to run after the <codeph>nova-deploy.yml</codeph> part of the
            overall run. Similarly, a run of <codeph>hlm-reconfigure.yml</codeph> will execute
            <codeph>post-nova-reconfigure.yml</codeph> after <codeph>nova-reconfigure.yml</codeph>.</p>
          <p>When the third-party-import playbook has completed, the full contents of the Ansible
            directory will be merged with the existing ~/<codeph>helion/hos/ansible</codeph> area on
            the lifecycle manager. The Ansible hooks are not processed until the ready-deployment
            playbook has been run, after which the inclusion of the hooks will be apparent in the
            Helion lifecycle manager playbooks in the scratch area, i.e. under <codeph>/scratch/ansible/next/helion/hos</codeph>. For
            example, from the above hooks specification, <codeph>hlm-deploy.yml</codeph> is rendered as follows:</p>
          
          <codeblock># Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Top-level HLM deploy playbook
#
# Automatically managed by Ansible and will be overwritten on each
# deploy ready.
---
# Regather facts on all hosts in case of configuration changes that haven't
# been reflected in the fact cache
- include: hlm-refresh-facts.yml
- include: sosreport-deploy.yml
- include: upgrade-bootstrap.yml
# pre deploy Third party hooks
# deploy services and Third party hooks
# HLM-1259: when disabling the monasca part of the deployment,
# edit ~/.ansible.cfg and change the [default] / library setting
# as outlined in that file.
- include: monasca-agent-deploy.yml
- include: tls-deploy.yml
- include: clients-deploy.yml
- include: percona-deploy.yml
- include: rabbitmq-deploy.yml
- include: FND-CLU-deploy.yml
- include: FND-AP2-deploy.yml
- include: memcached-deploy.yml
- include: keystone-deploy.yml
- include: barbican-deploy.yml
- include: zookeeper-deploy.yml
- include: monasca-deploy.yml
- include: hlm-ux-services-deploy.yml
# ops console depends on kafka, installed by monasca
- include: ops-console-deploy.yml
- include: spark-deploy.yml
- include: monasca-transform-deploy.yml
- include: swift-deploy.yml
- include: glance-deploy.yml
- include: neutron-deploy.yml
- include: ironic-deploy.yml
- include: vsa-deploy.yml
- include: cmc-deploy.yml
- include: nova-deploy.yml
- include: hooks.d/myservice/post-nova-deploy.yml
- include: cinder-deploy.yml
- include: octavia-deploy.yml
- include: designate-deploy.yml
...</codeblock>
          <p>where the inclusion of <codeph>hooks.d/myservice/post-nova-deploy.yml</codeph> is after <codeph>nova-deploy.yml</codeph>
            Typically, these hook playbooks simply call out to other third-party playbooks,
            e.g.:</p>
          <codeblock>stack@hlm:~/scratch/ansible/next/hos/ansible$ cat hooks.d/myservice/post-nova-deploy.yml
#
# (c) Copyright 2017 Hewlett Packard Enterprise Development Company LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# Post nova-deploy logic goes here, can include anothe playbook.

- include: "{{ playbook_dir }}/myservice-deploy.yml"</codeblock>
          <p>The nett result is that the <codeph>myservice</codeph> deployment is carried out after
            nova has been deployed. Similarly, hlm-reconfigure.yml, hlm-upgrade.yml, hlm-start.yml
            and hlm-stop.yml are generated to contain any hooks, if they have been defined.</p>
        </body>
      </topic>
      <topic id="d1e719">
        <title>Configuration file symlinks</title>
        <body>
          <p>In deploying <keyword keyref="kw-hos"/>, customers may want to modify some of the configuration files supplied
            by <keyword keyref="kw-hos"/>. To facilitate this, the <codeph>~/helion/my_cloud/config</codeph> area on the lifecycle
            manager contains a set of symlinks to configuration file templates for the various
            services in <keyword keyref="kw-hos"/>. To customise, the customer edits these files directly and commits to
            git (see <xref keyref="using_git">Using GIT</xref> ) and those
            configuration changes will be persisted and used for all future deployments and
            upgrades.</p>
          <p>If you have third-party configuration templates that you would like to expose for
            customer modification in the same way, you must create a symlinks yaml definition and
            place it in a config directory in your ansible area, e.g. <codeph>config/myservice-symlinks.yaml</codeph> as
            shown in the sample Ansible layout above. This yaml file is simply a list of paths to
            configuration templates to be mapped to the name that each will appear as in the
            <codeph>~/helion/my_cloud/config</codeph> area. Configuration templates are typically grouped by service
            under <codeph>~/helion/my_cloud/config</codeph>. A sample symlinks specification is as follows:</p>
          <codeblock># (c) Copyright 2017 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# The following relative symlinks are created under the
# my_cloud/config directory.
---
symlinks:
  "myservice/server.conf.j2": "roles/myservice-server/templates/server.conf.j2"</codeblock>
          
          <p>When the above file is parsed by the third-party-import playbook, a
            <codeph>~/helion/my_cloud/myservice/server.conf.j2</codeph> symlink will be added to point to the
            configuration template under the myservice-server role.</p>
        </body>
      </topic>
    </topic>
    
    <topic id="d1e741">
      <title>Other Application Content</title>
      <body>
        <p>
          <ph>It is not uncommon for a third-party service integration to require additional content
            to be deployed to a node, where that content is not packaged as a deb/rpm or is a python
            application that could be deployed into a venv. Helion lifecycle manager provides a generic mechanism for
            packaging such content and delivering it to target nodes (coupled with the use of Helion lifecycle manager
            Ansible modules in the 3rd-party Ansible playbooks). For example, this mechanism can be
            used to deliver a Java-based application to target Cloud nodes. Helion lifecycle manager packages this
            content and makes it available in the same repo used for serving out python venvs, as
            shown in the diagram below: </ph>
        </p>
        <p>
          <ph>
            <image keyref="other_application_content"/>
          </ph>
        </p>
        <p>
          <ph>To prepare such content to be packaged, you should follow these steps:</ph>
        </p>
        <ol>
          <li>Create an appropriately-named sub-directory under the <codeph>other</codeph> directory
            for each separate set of application content to be imported.</li>
          <li>For each of these sub-directories, populate with the set of application content; this
            does not need to confirm to any particular layout.</li>
        </ol>
        
        <p>A sample layout for other application content that is be imported is as follows:</p>
        <codeblock>third-party/myservice/other
└── serviceA
    ├── serviceA-part1.tgz
    └── serviceA-part2.tgz</codeblock>
        <p>When the third-party-import playbook has been completed, the above content is bundled
          into a single package and made available on the venv repo of the lifecycle manager node.
          An example playbook task for delivering this bundled package to a target cloud node is as
          follows:</p>
        <codeblock>- name: serviceA-server | install | Install myserviceA package
  become: yes
  install_package:
    name: serviceA
    service: serviceA
    state: present
    activate: act_on
  register: serviceA_install_result</codeblock>
      </body>
    </topic>
    <topic id="d1e800">
      <title>Centralized Logging Profiles</title>
      <body>
        <p><keyword keyref="kw-hos"/> provides a centralised logging service, which collects log files for all <keyword keyref="kw-hos"/> services
          and stores them in a centralized elasticsearch store, where they can then be viewed,
          searched and analyzed via a Kibana interface. To configure a third-party service for this
          centralized logging service, you must add a logging profile yaml file under the logging
          directory, e.g.:</p>
        <codeblock>third-party/myservice/logging/
└── myservice-clr.yml</codeblock>
        <p>Note that in addition to configuring a service for centralized logging, the above profile
          also defines the logrotate policy for the service. For details on creating a logging
          profile and general info on the centralized logging service, please see the documentation <xref keyref="centralized_logging">here</xref>.
          <!--TODO REF
          (centralized logging docs supplied by Logging team, see <xref format="html" scope="external"
            href="http://jira.hpcloud.net/browse/LOG-791">LOG-791</xref>)-->.</p>
      </body>
    </topic>
    <topic id="d1e825">
      <title><keyword keyref="kw-hos"/> Service Configuration</title>
      <body>
        <p>
          <ph>Some <keyword keyref="kw-hos"/> services provide an interface for injecting third-party customizations of the
            deployment of that service, which includes the addition of configuration data to certain
            selected configuration files. The specifics of what can be customized depends on the
            service. The general model is that a third-party service definition can declare that it
            provides data (<codeph>provides-data</codeph> relationship) to another service or
            service-component, where that data could be the name of one or more plugins/drivers, a
            chunk of additional configuration content or any other settings that exposed by the peer
            service/service-component. Currently, only the <keyword keyref="kw-hos"/> neutron service provides such an
            interface. <!--Details on what can be configured and how it is used can be found <xref href="../../networking/DCN-integration.dita">here</xref>.-->
            
          </ph>
        </p>
      </body>
    </topic>
  </topic>
  <topic id="d1e839">
    <title>Upgrade</title>
    <body>
      <p>After deploying <keyword keyref="kw-hos"/> integrated with a third-party service, there are two main upgrade
        scenarios: </p>
      <ol>
        <li> <keyword keyref="kw-hos"/> upgrade (major, minor, patch or hotfix) </li>
        <li>Upgrade of third-party content independent of a <keyword keyref="kw-hos"/> upgrade.</li>
      </ol>
    </body>
    <topic id="d1e861">
      <title><keyword keyref="kw-hos"/> Upgrade</title>
      <body>
        <p>
          <ph>After deploying <keyword keyref="kw-hos"/> integrated with a third-party service, the </ph>following steps
          must be carried for any upgrade of <keyword keyref="kw-hos"/> (major, minor, patch, hotfix): </p>
        <ol>
          <li> Update the lifecycle manager: <codeblock>~/hos-4.x.y/hos-init.bash</codeblock></li>
          <li>If required, update third-party content, e.g. contents under <codeph>~/third-party/myservice</codeph>.
            If the third-party integration involves the patching of a venv and the upgrade involves
            a change in OpenStack release (e.g. Mitaka to Newton), then an update of the plugin code
            used to patch the venv may be required.</li>
          <li> Run the 3rd-party import playbook:
            <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost third-party-import.yml</codeblock>
            If the third-party integration involves the patching of a Neutron venv (and Neutron has
            since changed in this upgrade), then the import playbook step will reapply that plugin
            to the latest <keyword keyref="kw-hos"/> Neutron venv supplied in the upgrade kit. </li>
          <li>Proceed with a cloud upgrade as per normal:<ol>
              <li> Run the configuration processor:
                <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost config-processor-run.yml -e encrypt="" -e rekey=""</codeblock></li>
              <li> Ready the deployment:
                <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
              <li> Upgrade the cloud.
                <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts hlm-upgrade.yml</codeblock></li>
            </ol></li>
        </ol>
        <p>It is critical to re-run a third-party import after the hos-init step and before an
          upgrade is started. Omitting the import leaves you in danger of overwriting a previously
          patched and deployed venv with the latest one supplied in the <keyword keyref="kw-hos"/> upgrade kit. For this
          reason, <codeph>hos-init.bash</codeph> will display a warning message when it detects that third-party
          content has been previously supplied.</p>
      </body>
    </topic>
    <topic id="d1e951">
      <title>Third-party content Upgrade</title>
      <body>
        <p>It is also possible to update third-party content independently of a <keyword keyref="kw-hos"/> upgrade, e.g.
          update the plugin used to patch the <keyword keyref="kw-hos"/> Neutron venv. To update third-party content, the
          following steps apply:</p>
        <ol>
          <li> Update the relevant third-party content under <codeph>~/third-party</codeph>, e.g.
            <codeph>~/third-party/myservice</codeph> </li>
          <li> Run the 3rd-party import playbook:
            <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost third-party-import.yml</codeblock>
            If the third-party update involves the change of a Neutron plugin, the latest <keyword keyref="kw-hos"/>
            Neutron venv will be selected and patched with the latest third-party content. This is
            guaranteed to be selected over the previous patched venv in a subsequent upgrade. </li>
          <li> Proceed with a cloud upgrade as per normal: <ol>
              <li> Run the configuration processor:
                <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost config-processor-run.yml -e encrypt="" -e rekey=""</codeblock></li>
              <li> Ready the deployment:
                <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
              <li> Upgrade the cloud.
                <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts hlm-upgrade.yml</codeblock></li>
            </ol> Note that the above steps includes running the config-processor and a
            ready-deployment step. While this is not specifically required for all types of
            third-party update (e.g. only changing a venv), it is safest to run the full set of
            steps to guarantee that all third-party changes are pulled into the next
            deployment/upgrade.</li>
        </ol>

      </body>
    </topic>
  </topic>


</topic>
