<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: not edited-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="tech_overview">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Overview</title>



  <abstract><shortdesc outputclass="hdphidden"><keyword keyref="kw-hos-phrase"/> is the latest OpenStack-based
      infrastructure-as-a-service cloud platform release from Hewlett Packard Enterprise. It is
      based on the OpenStack Newton release and implements core services and features of Newton
      while providing new installation and management features.</shortdesc></abstract>
  <body>


    <p conkeyref="HOS-conrefs/applies-to"/>

    <p><keyword keyref="kw-hos-phrase"/> is the latest OpenStack-based infrastructure-as-a-service 
      (IaaS) cloud platform release from Hewlett Packard Enterprise. It is based on the OpenStack Newton
      release and implements core services and features of Newton while providing new installation
      and management features.</p>

    <section><title>Installation, Configuration, and Management</title>
      <p>With the release of <keyword keyref="kw-hos-phrase"/> comes an easy installation and
        configuration workflow. Installation of the basic cloud requires that you run a handful of
        commands, or use the new installation GUI to step through installation in a wizard-like
        fashion.</p>
      <p>OpenStack services are installed during the installation process, so there is no need to
        install and configure them individually. Instead, in <keyword keyref="kw-hos-phrase"/>,
        configuration, including which services to install, how many nodes you will have, what their
        individual roles will be, what storage will be used, which networks will handle which
        traffic, and installation and configuration of the underlying operating system on each node
        is declared in configuration objects stored in YAML files. </p>
      <p>These files allow customization, and <keyword keyref="kw-hos-phrase"/> ships with complete
        sets describing a few common configurations. You may base your deployment on one of these
        templates and customize from there if you wish.</p>
      <p>This installation and configuration is made possible by <keyword keyref="kw-hos-phrase"/>,
        the configuration processor, a set of Python scripts that consume the data stored in the
        configuration YAML files and output Ansible variables used to configure networks, services,
        servers, and the other applications upon which the cloud runs.</p>
      <p>As you will read in the <keyword keyref="kw-hos-phrase"/>
        <xref keyref="input_model">Input Model</xref> topic, the configuration processor reads and
        validates the input model described in the YAML files discussed above, combines it with the
        service definitions provided by <keyword keyref="kw-hos"/> and any persisted state
        information about the current deployment to produce a set of Ansible variables that can be
        used to deploy the cloud. It also produces a set of information files that provide details
        about the configuration. Reading this document you will gain a thorough understanding of how
          <keyword keyref="kw-hos-phrase"/> allows you to deploy and manage your cloud via this
        comprehensive "wrapper" around cloud configuration.</p>
      <p>The example configurations that ship with <keyword keyref="kw-hos-phrase"/> are described
        in <xref keyref="example_configurations"><keyword keyref="kw-hos-phrase"/>: Example
          Configurations</xref></p>
      <!--      <p>
        <ul id="ul_ykn_41q_5t">
          <li><xref keyref="entryscale_kvm_vsa">Entry-scale KVM with VSA model</xref></li>
          <li><xref keyref="entryscale_esx">Entry-scale ESX model</xref></li>
          <li><xref keyref="entryscale_swift">Entry-scale Swift model</xref></li>
          <li><xref keyref="entryscale_ceph">Entry-scale KVM with Ceph model</xref></li>
          <li><xref keyref="midscale_kvm_vsa">Mid-scale KVM with VSA model</xref></li>
        </ul>
      </p>-->
      <table conkeyref="example_configurations/table_examples">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry/>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section><title>Post-deployment Reconfiguration and Management</title>
      <p>In addition to initial installation and deployment, the addition of the configuration
        processor means that you can reconfigure your cloud easily after deployment. Note that due
        to its combination of deployment and lifecycle-management features, we may use the terms
        deployer and lifecycle manager interchangeably throughout the <keyword
          keyref="kw-hos-phrase"/> documentation to refer to the features described in this
        document.</p>
      <p>By executing pre-written, supplied Ansible playbooks in the form of a single command, you
        may perform management tasks such as those below, along with many others.</p>
      <ul>
        <li>start, stop, and get the status of OpenStack services</li>
        <li>add and remove controller, compute, and storage nodes </li>
        <li>back up or restore control plane nodes </li>
        <li>migrate Cinder volumes</li>
        <li>get Ceph status</li>
        <li>start and stop logging</li>
        <li>erase nodes to baremetal</li>
        <li>re-image nodes</li>
        <li>reconfigure Swift to add or replace drives</li>
        <li>validate Swift drives against the storage model declared</li>
      </ul>
      <p>While the internal management of OpenStack services and the configuration of their
        functionality still occurs via the service APIs and follows the methodology outlined by
        OpenStack, the high-level management of the services themselves and their interaction with
        the cloud is accomplished via the Ansible playbooks mentioned here.</p>
    </section>
    
    <section>
      <title>Configuration Versioning</title>
      <p>In <keyword keyref="kw-hos-phrase"/>, the YAML files that define your cloud configuration
        are stored in a local git repository that is installed along with the cloud. The cloud
        deployment Ansible playbooks look in the appropriate git directories and execute changes
        when run. This allows you to keep an historical record of configuration changes as well as
        help you identify issues that arise later.</p>
    </section>

    <!-- <section><title>What's New in Documentation</title>
    </section>-->
  </body>
</topic>
