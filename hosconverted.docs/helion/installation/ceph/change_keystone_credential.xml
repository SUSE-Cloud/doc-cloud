<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="config_ceph">
    <title><ph conkeyref="HOS-conrefs/product-title"/>Change Keystone Credential for RGW</title>
    <abstract>
        <shortdesc outputclass="hdphidden">RADOS Gateway (RGW) in <keyword keyref="kw-hos-tm"/>
            <keyword keyref="kw-hos-version"/> authenticates with keystone by passing the service
            name and password whereas in  <keyword keyref="kw-hos-phrase-30"/> , it was using admin
            token to authenticate.</shortdesc>
    </abstract>
    <body>
        <!--not tested-->
        <p conkeyref="HOS-conrefs/applies-to"/>
        <p> RADOS Gateway (RGW) in <keyword keyref="kw-hos-tm"/>
            <keyword keyref="kw-hos-version"/> authenticates with keystone by passing the service
            name and password whereas in <keyword keyref="kw-hos-phrase-30"/> it was using admin
            token to authenticate.</p>
        <p><b>Procedure to change the keystone credentials for RGW</b></p>
        <p>Perform the following steps:</p>
        <p>
            <ol id="ol_jxp_drp_nx">
                <li>Login to the lifecyle-manager. Create a new file in the
                        <b>change_credentials</b>
                    folder.<codeblock>touch ~/helion/change_credentials/private_data_metadata_ceph.yml</codeblock></li>
                <li>Copy the <b>ceph-radosgw</b> snippet which is beneath the
                        <codeph>keystone_rgw_password</codeph> from
                        <codeph>~/helion/my_cloud/info/private_data_metadata.yml</codeph> to
                        <codeph>~/helion/change_credentials/private_data_metadata_ceph.yml</codeph>(which
                    will be similar to the following snippet) and add a value section beneath the
                        <codeph>keystone_rgw_password</codeph> to update the password. You can also
                    generate a new random password by not adding the value
                        field.<codeblock>keystone_rgw_password:
  value: &lt;new-keystone-rgw-password&gt;
  metadata:
  - clusters:
    - rgw
    component: ceph-radosgw
    consumes: keystone-api
    consuming-cp: control-plane-1
    cp: control-plane-1
  version: '2.0'</codeblock><note>If
                        you have specified a password value in your credential change file, you can
                        encrypt it using an ansible-vault. If you encrypt with the ansible-vault,
                        make sure that you use the encryption key you have already used when running
                        the configuration processor. To encrypt a file using ansible-vault, execute
                        the folllowing
                        command:<codeblock>ansible-vault encrypt private_data_metadata_ceph.yml</codeblock></note>
                    <note type="warning">Make sure to provide the encryption key when prompted.
                        Suppose you have specified a wrong ansible-vault password, the following
                        error message occurs when you execute the configuration processor
                        playbook.<codeblock>################################################## Reading Persistent State ##################################################

################################################################################
# The configuration processor failed.
# PersistentStateCreds: User-supplied creds file test1.yml was not parsed properly
################################################################################</codeblock></note></li>
                <li>Run the following playbooks to notify the
                        config-processor.<codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml
rm ~/helion/change_credentials/private_data_metadata_ceph.yml
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock><note>Remove
                        the files that is placed in the <codeph>helion/change_credentials</codeph>
                        after running the configuration processor. This avoids duplication of
                        passwords. The new and old password is stored in the configuration
                        processor's persistent state.</note><p>If you have entered a wrong password,
                        the following output appears after running the configuration processor. For
                        example, in the following output 'blah' is not the valid password.</p><p>
                        <codeblock>################################################################################
# The configuration processor completed with warnings.
# PersistentStateCreds: User-supplied password name 'blah' is not valid
################################################################################</codeblock>
                    </p><p>A failure to correctly parse the credentials change file will result in
                        the configuration processor erroring out with a message as
                        follows:<codeblock>################################################## Reading Persistent State ##################################################

################################################################################
# The configuration processor failed.
# PersistentStateCreds: User-supplied creds file test1.yml was not parsed properly
################################################################################</codeblock></p></li>
                <li> Run the following playbook to change the
                    password.<codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts ceph-reconfigure-credentials-change.yml</codeblock></li>
            </ol>
        </p>
    </body>
</topic>
