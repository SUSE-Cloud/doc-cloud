<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: not edited-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="ironic_multi_control_plane">
    <title><ph conkeyref="HOS-conrefs/product-title"/>Ironic in Multiple Control Plane</title>
    <body>
        <!--not tested-->
        <p conkeyref="HOS-conrefs/applies-to"/>
      
      <section>
        
        <p><keyword keyref="kw-hos-phrase"/> introduces the concept of multiple control planes and multiple regions - see the 
          Input Model documentation for the relevant <xref keyref="concept_controlplanes_regions">concepts</xref> and 
        <xref keyref="configobj_multiple_control_planes">configuration objects</xref>. 
          
          This document covers the use of an Ironic region in a multiple control plane cloud model in <keyword keyref="kw-hos"/>.                                  
        </p>
      </section>
      
      <section>
        <title>Networking for Baremetal in Multiple Control Plane</title>
        
        
        <p><b>IRONIC-FLAT-NET</b> is the network configuration for baremetal control plane.</p>
        
        <p>You need to set the environment variable <b>OS_REGION_NAME</b> to the ironic region in baremetal control plane. This will setup the 
          ironic flat networking in neutron.</p>
        
<codeblock>export OS_REGION_NAME=&lt;ironic_region></codeblock>        
        
        <note type="note">You can obtain the value for  <codeph>ironic_region</codeph>  by checking the endpoint for ironic in the keystone endpoint list.</note>
        
        <p>To see details of the  <codeph>IRONIC-FLAT-NETWORK</codeph> created during configuration, use the following command:
<codeblock>
neutron net-list
</codeblock>        
        </p>
        
        
        
      </section>

  <section>
    <title>Architecture of Multiple Control Plane with Ironic</title>
    
    <image href="../../../media/ironic/ironic_multi_control_plane.png"/>
  </section>

  <section>
    <title>Handling Optional Swift Service</title>
    
    <p>Swift is very resource-intensive and as a result, it is now optional in the <keyword keyref="kw-hos"/> control plane. 
    A number of services depend on Swift, and if it is not present, they must provide a fallback strategy. 
    Fore example, Glance can use the filesystem in place of Swift for its backend store.  
    </p>
    
    <p>In Ironic, agent-based drivers require Swift - if it is not present, it is necessary to disable access to this Ironic  feature in the
    control plane. The <codeph>enable_agent_driver</codeph> flag has been added to the ironic configuration data and can have valuse of <codeph>true</codeph>
      or <codeph>false</codeph>. Setting this flag to <codeph>false</codeph> will disable swift configurations and the agent based drivers in
      the ironic control plane.</p>
    
  </section>
      
      <section>
        <title>Instance Provisioning</title>
        
        <p>In a multiple control plane cloud setup, changes for glance container name in the swift namespace of <codeph>ironic-conductor.conf</codeph> 
          introduces a conflict with the one in <codeph>glance-api.conf</codeph>. Provisioning with agent based drivers requires the 
          container name to be the same in ironic and glance. Hence, on instance provisioning with agent based drivers (swift enabled), 
          the agent is not able to fetch the images from glance store and fails at that point.</p>
        
        <p>You can resolve this issue using the following steps:</p>
        
        <ol>
          <li>Copy the value of <codeph>swift_store_container</codeph> from the file <codeph>/opt/stack/service/glance-api/etc/glance-api.conf</codeph></li>
          <li>Login to the lifecycle manager and use the value for <codeph>swift_container</codeph> in glance namespace of <codeph>~/scratch/ansible/next/hos/ansible/roles/ironic-common/templates/ironic-conductor.conf.j2</codeph></li>
          <li>Run the following playbook:
<codeblock>
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts ironic-reconfigure.yml 
</codeblock>          
          </li>
        </ol>
        
        
      </section>

  </body>
</topic>
