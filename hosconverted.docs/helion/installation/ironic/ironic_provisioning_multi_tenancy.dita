<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="ironic-provisioning-multi-tenancy">
    <title><ph conkeyref="HOS-conrefs/product-title"/>Provisioning Baremetal Nodes with
        Multi-Tenancy</title>
    <body>
        <section>
            <title>Baremetal Nodes with Multi-Tenancy</title>
            <p>
                <ol>
                    <li>Create a network and a subnet
                        <codeblock>$ neutron net-create guest-net-1 
Created a new network:
+---------------------------+--------------------------------------+
| Field                     | Value                                |
+---------------------------+--------------------------------------+
| admin_state_up            | True                                 |
| availability_zone_hints   |                                      |
| availability_zones        |                                      |
| created_at                | 2017-06-10T02:49:56Z                 |
| description               |                                      |
| id                        | 256d55a6-9430-4f49-8a4c-cc5192f5321e |
| ipv4_address_scope        |                                      |
| ipv6_address_scope        |                                      |
| mtu                       | 1500                                 |
| name                      | guest-net-1                          |
| project_id                | 57b792cdcdd74d16a08fc7a396ee05b6     |
| provider:network_type     | vlan                                 |
| provider:physical_network | physnet1                             |
| provider:segmentation_id  | 1152                                 |
| revision_number           | 2                                    |
| router:external           | False                                |
| shared                    | False                                |
| status                    | ACTIVE                               |
| subnets                   |                                      |
| tags                      |                                      |
| tenant_id                 | 57b792cdcdd74d16a08fc7a396ee05b6     |
| updated_at                | 2017-06-10T02:49:57Z                 |
+---------------------------+--------------------------------------+
 
$ neutron  subnet-create guest-net-1 200.0.0.0/24 
Created a new subnet:
+-------------------+----------------------------------------------+
| Field             | Value                                        |
+-------------------+----------------------------------------------+
| allocation_pools  | {"start": "200.0.0.2", "end": "200.0.0.254"} |
| cidr              | 200.0.0.0/24                                 |
| created_at        | 2017-06-10T02:53:08Z                         |
| description       |                                              |
| dns_nameservers   |                                              |
| enable_dhcp       | True                                         |
| gateway_ip        | 200.0.0.1                                    |
| host_routes       |                                              |
| id                | 53accf35-ae02-43ae-95d8-7b5efed18ae9         |
| ip_version        | 4                                            |
| ipv6_address_mode |                                              |
| ipv6_ra_mode      |                                              |
| name              |                                              |
| network_id        | 256d55a6-9430-4f49-8a4c-cc5192f5321e         |
| project_id        | 57b792cdcdd74d16a08fc7a396ee05b6             |
| revision_number   | 2                                            |
| service_types     |                                              |
| subnetpool_id     |                                              |
| tenant_id         | 57b792cdcdd74d16a08fc7a396ee05b6             |
| updated_at        | 2017-06-10T02:53:08Z                         |
+-------------------+----------------------------------------------+</codeblock>
                    </li>
                    <li>Review glance image list
                        <codeblock>$ glance image-list
+--------------------------------------+--------------------------+
| ID                                   | Name                     |
+--------------------------------------+--------------------------+
| 73205fb7-64f1-4243-8d0f-a0dd2e493c9d | cirros-0.3.4-x86_64      |
| 83eecf9c-d675-4bf9-a5d5-9cf1fe9ee9c2 | ir-deploy-iso-HOS5.0     |
| db3d131f-2fb0-4189-bb8d-424ee0886e4c | ir-deploy-kernel-HOS5.0  |
| 304cae15-3fe5-4f1c-8478-c65da5092a2c | ir-deploy-ramdisk-HOS5.0 |
+--------------------------------------+--------------------------+
</codeblock>
                    </li>
                    <li>Create Ironic node <codeblock>$ ironic --ironic-api-version 1.22 node-create -d agent_ipmitool -n test-node-1 -i ipmi_address=192.168.9.69 -i ipmi_username=ilo_user -i ipmi_password=XXXXXXXX --network-interface neutron -p  memory_mb=4096 -p cpu_arch=x86_64 -p local_gb=80 -p cpus=2 -p capabilities=boot_mode:bios,boot_option:local -p root_device='{"name":"/dev/sda"}' -i deploy_kernel=db3d131f-2fb0-4189-bb8d-424ee0886e4c -i deploy_ramdisk=304cae15-3fe5-4f1c-8478-c65da5092a2c
 
+-------------------+-------------------------------------------------------------------+
| Property          | Value                                                             |
+-------------------+-------------------------------------------------------------------+
| chassis_uuid      |                                                                   |
| driver            | agent_ipmitool                                                    |
| driver_info       | {u'deploy_kernel': u'db3d131f-2fb0-4189-bb8d-424ee0886e4c',       |
|                   | u'ipmi_address': u'192.168.9.69', u'ipmi_username': u'gozer',     |
|                   | u'ipmi_password': u'******', u'deploy_ramdisk':                   |
|                   | u'304cae15-3fe5-4f1c-8478-c65da5092a2c'}                          |
| extra             | {}                                                                |
| name              | test-node-1                                                       |
| network_interface | neutron                                                           |
| properties        | {u'cpu_arch': u'x86_64', u'root_device': {u'name': u'/dev/sda'},  |
|                   | u'cpus': 2, u'capabilities': u'boot_mode:bios,boot_option:local', |
|                   | u'memory_mb': 4096, u'local_gb': 80}                              |
| resource_class    | None                                                              |
| uuid              | cb4dda0d-f3b0-48b9-ac90-ba77b8c66162                              |
+-------------------+-------------------------------------------------------------------+
                        </codeblock>
                        <p>ipmi_address, ipmi_username and ipmi_password are iLo access parameters
                            for baremetal Ironic node. Adjust memory_mb, cpus, local_gb to your node
                            size requirements. They also need to be reflected in flavor setting (see
                            below). Use capabilities boot_mode:bios for baremetal nodes operating in
                            Legacy BIOS mode. For UEFI baremetal nodes, use boot_mode:uefi lookup
                            deploy_kernel and deploy_ramdisk in glance image list output above.
                                <note type="important">Since we are using Ironic API version 1.22,
                                node is created initial state <b>enroll</b>. It needs to be
                                explicitly moved to <b>available</b> state. This behavior changed in
                                API version 1.11</note>
                        </p>
                    </li>
                    <li>Create port <codeblock>$ ironic --ironic-api-version 1.22 port-create --address f0:92:1c:05:6c:40 --node cb4dda0d-f3b0-48b9-ac90-ba77b8c66162 -l switch_id=e8:f7:24:bf:07:2e -l switch_info=hp59srv1-a-11b -l port_id="Ten-GigabitEthernet 1/0/34" --pxe-enabled true
+-----------------------+-----------------------------------------------------------------------+
| Property              | Value                                                                 |
+-----------------------+-----------------------------------------------------------------------+
| address               | f0:92:1c:05:6c:40                                                     |
| extra                 | {}                                                                    |
| local_link_connection | {u'switch_info': u'hp59srv1-a-11b', u'port_id': u'Ten-GigabitEthernet |
|                       | 1/0/34', u'switch_id': u'e8:f7:24:bf:07:2e'}                          |
| node_uuid             | cb4dda0d-f3b0-48b9-ac90-ba77b8c66162                                  |
| pxe_enabled           | True                                                                  |
| uuid                  | a49491f3-5595-413b-b4a7-bb6f9abec212                                  |
+-----------------------+-----------------------------------------------------------------------+</codeblock>
                        <ul>
                            <li>for --address, use MAC of 1st NIC of ironic baremetal node, which
                                will be used for PXE boot</li>
                            <li>for --node, use ironic node uuid (see above)</li>
                            <li>for -l switch_id, use switch management interface MAC address. It
                                can be retrieved by pinging switch management IP and looking up MAC
                                address in 'arp -l -n' command output.</li>
                            <li>for -l switch_info, use switch_id from data/ironic/ironic_config.yml
                                file. If you have several switch config definitions, use the right
                                switch your baremetal node is connected to.</li>
                            <li>for -l port_id, use port ID on the switch</li>
                        </ul>
                    </li>
                    <li>Move ironic node to manage and then available state
                        <codeblock>$ ironic node-set-provision-state test-node-1 manage
$ ironic node-set-provision-state test-node-1 provide</codeblock>
                    </li>
                    <li>Once node is successfully moved to available state, it's resources should be
                        included into Nova hypervisor statistics
                        <codeblock>$ nova hypervisor-stats
+----------------------+-------+
| Property             | Value |
+----------------------+-------+
| count                | 1     |
| current_workload     | 0     |
| disk_available_least | 80    |
| free_disk_gb         | 80    |
| free_ram_mb          | 4096  |
| local_gb             | 80    |
| local_gb_used        | 0     |
| memory_mb            | 4096  |
| memory_mb_used       | 0     |
| running_vms          | 0     |
| vcpus                | 2     |
| vcpus_used           | 0     |
+----------------------+-------+</codeblock>
                    </li>
                    <li>Prepare a keypair, which will be used for logging into the node
                        <codeblock>$ nova keypair-add ironic_kp > ironic_kp.pem</codeblock>
                    </li>
                    <li>Obtain user image and upload it to glance. Please refer to OpenStack
                        documentation on user image creation: <xref
                            href="https://docs.openstack.org/project-install-guide/baremetal/draft/configure-glance-images.html"
                            format="html" scope="external"
                            >https://docs.openstack.org/project-install-guide/baremetal/draft/configure-glance-images.html</xref>.
                            <note>Deployed images are already populated by <keyword keyref="kw-hos"
                            /> installer.</note>
                        <codeblock>$ glance image-create --name='Ubuntu Trusty 14.04' --disk-format=qcow2 --container-format=bare --file ~/ubuntu-trusty.qcow2  
+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum         | d586d8d2107f328665760fee4c81caf0     |
| container_format | bare                                 |
| created_at       | 2017-06-13T22:38:45Z                 |
| disk_format      | qcow2                                |
| id               | 9fdd54a3-ccf5-459c-a084-e50071d0aa39 |
| min_disk         | 0                                    |
| min_ram          | 0                                    |
| name             | Ubuntu Trusty 16.04                  |
| owner            | 57b792cdcdd74d16a08fc7a396ee05b6     |
| protected        | False                                |
| size             | 371508736                            |
| status           | active                               |
| tags             | []                                   |
| updated_at       | 2017-06-13T22:38:55Z                 |
| virtual_size     | None                                 |
| visibility       | private                              |
+------------------+--------------------------------------+
 
$ glance image-list
+--------------------------------------+--------------------------+
| ID                                   | Name                     |
+--------------------------------------+--------------------------+
| 73205fb7-64f1-4243-8d0f-a0dd2e493c9d | cirros-0.3.4-x86_64      |
| 83eecf9c-d675-4bf9-a5d5-9cf1fe9ee9c2 | ir-deploy-iso-HOS5.0     |
| db3d131f-2fb0-4189-bb8d-424ee0886e4c | ir-deploy-kernel-HOS5.0  |
| 304cae15-3fe5-4f1c-8478-c65da5092a2c | ir-deploy-ramdisk-HOS5.0 |
| 9fdd54a3-ccf5-459c-a084-e50071d0aa39 | Ubuntu Trusty 14.04      |
+--------------------------------------+--------------------------+</codeblock>
                    </li>
                    <li>Create a baremetal flavor and set flavor keys specifying requested node
                        size, architecture and boot mode. A flavor can be re-used for several nodes
                        having the same size, architecture and boot mode <codeblock>$ nova flavor-create m1.ironic auto 4096 80 2
+--------------------------------------+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| ID                                   | Name      | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+--------------------------------------+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| ab69881b-0d5a-497d-93ae-6e28694c87bf | m1.ironic | 4096      | 80   | 0         |      | 2     | 1.0         | True      |
+--------------------------------------+-----------+-----------+------+-----------+------+-------+-------------+-----------+
 
$ nova flavor-key ab69881b-0d5a-497d-93ae-6e28694c87bf set cpu_arch=x86_64
$ nova flavor-key ab69881b-0d5a-497d-93ae-6e28694c87bf set capabilities:boot_option="local"
$ nova flavor-key ab69881b-0d5a-497d-93ae-6e28694c87bf set capabilities:boot_mode="bios"</codeblock>
                        <p>Parameters must match parameters of ironic node above. Use
                                <codeph>capabilities:boot_mode="bios"</codeph> for Legacy BIOS
                            nodes. For UEFI nodes, use
                                <codeph>capabilities:boot_mode="uefi"</codeph></p>
                    </li>
                    <li>Boot the node <codeblock>$ nova boot --flavor m1.ironic --image 9fdd54a3-ccf5-459c-a084-e50071d0aa39 --key-name ironic_kp --nic net-id=256d55a6-9430-4f49-8a4c-cc5192f5321e test-node-1         
+--------------------------------------+------------------------------------------------------------+
| Property                             | Value                                                      |
+--------------------------------------+------------------------------------------------------------+
| OS-DCF:diskConfig                    | MANUAL                                                     |
| OS-EXT-AZ:availability_zone          |                                                            |
| OS-EXT-SRV-ATTR:host                 | -                                                          |
| OS-EXT-SRV-ATTR:hypervisor_hostname  | -                                                          |
| OS-EXT-SRV-ATTR:instance_name        |                                                            |
| OS-EXT-STS:power_state               | 0                                                          |
| OS-EXT-STS:task_state                | scheduling                                                 |
| OS-EXT-STS:vm_state                  | building                                                   |
| OS-SRV-USG:launched_at               | -                                                          |
| OS-SRV-USG:terminated_at             | -                                                          |
| accessIPv4                           |                                                            |
| accessIPv6                           |                                                            |
| adminPass                            | XXXXXXXXXXXX                                               |
| config_drive                         |                                                            |
| created                              | 2017-06-14T21:25:18Z                                       |
| flavor                               | m1.ironic (ab69881b-0d5a-497d-93ae-6e28694c87bf)           |
| hostId                               |                                                            |
| id                                   | f1a8c63e-da7b-4d9a-8648-b1baa6929682                       |
| image                                | Ubuntu Trusty 14.04 (9fdd54a3-ccf5-459c-a084-e50071d0aa39) |
| key_name                             | ironic_kp                                                  |
| metadata                             | {}                                                         |
| name                                 | test-node-1                                                |
| os-extended-volumes:volumes_attached | []                                                         |
| progress                             | 0                                                          |
| security_groups                      | default                                                    |
| status                               | BUILD                                                      |
| tenant_id                            | 57b792cdcdd74d16a08fc7a396ee05b6                           |
| updated                              | 2017-06-14T21:25:17Z                                       |
| user_id                              | cc76d7469658401fbd4cf772278483d9                           |
+--------------------------------------+------------------------------------------------------------+</codeblock>
                        <p>
                            <ul>
                                <li>for --image, use ID of user image created at previous step</li>
                                <li>for --nic net-id, use id of tenant network created at the
                                    beginning</li>
                            </ul>
                            <note>During the node provisioning, the following is happening in the
                                background: <p>Neutron connects to switch management interfaces and
                                    assigns provisioning VLAN to baremetal node port on the switch.
                                    Ironic powers up the node using iLo interface. Node is booting
                                    IPA image via PXE. IPA image is writing provided user image onto
                                    specified root device (/dev/sda) and powers node down. Neutron
                                    connects to switch management interfaces and assigns tenant VLAN
                                    to baremetal node port on the switch. A VLAN ID is selected from
                                    provided range. Ironic powers up the node using iLo interface.
                                    Node is booting user image from disk.</p>
                            </note>
                        </p>
                    </li>
                    <li>Once provisioned, node will join the private tenant network. Access to
                        private network from other networks is defined by switch configuration.</li>
                </ol>
            </p>
        </section>
    </body>
</topic>
