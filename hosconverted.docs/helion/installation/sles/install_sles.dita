<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="install_sles">
    <title><ph conkeyref="HOS-conrefs/product-title"/>Using the Lifecycle Manager to Deploy SLES
        Compute Nodes</title>
    <body>
        <p conkeyref="HOS-conrefs/applies-to"/>
        <p>The method used for deploying SLES compute nodes using Cobbler on the lifecycle manager
            uses legacy BIOS. 
            <note>UEFI and Secure boot are currently not supported on SLES compute.</note>
        </p>

        <section>
            <title>Deploying legacy BIOS SLES compute nodes</title>
            <p>The installation process for SLES nodes is almost identical to that of HPE Linux
                nodes as described in the topic for <xref keyref="install_entryscale_kvm"
                    >Installation for Helion Entry-scale KVM Cloud"</xref>. The key differences are: 
                <ul>
                    <li>The standard SLES ISO (SLE-12-SP2-Server-DVD-x86_64-GM-DVD1.iso) must be
                        accessible via <codeph>/home/stack/sles12.iso</codeph>. Rename the ISO or
                        create a symbolic link.
                        <codeblock>mv SLE-12-SP2-Server-DVD-x86_64-GM-DVD1.iso /home/stack/sles12.iso</codeblock>
                    </li>
                    <li>The contents of the SLES SDK ISO (SLE-12-SP2-SDK-DVD-x86_64-GM-DVD1.iso)
                        must be mounted or copied to
                            <codeph>/opt/hlm_packager/hlm/sles12/zypper/SDK/</codeph>. If you choose
                        to mount the ISO, we recommend creating an <codeph>/etc/fstab</codeph> entry
                        to ensure the ISO is mounted after a reboot.</li>
                    <li> You must identify the node(s) on which you want to install SLES, by adding
                        the key/value pair <codeph>distro-id: sles12sp2-x86_64</codeph> to server
                        details in <codeph>servers.yml</codeph>. You will also need to update
                            <codeph>net_interfaces.yml</codeph>, <codeph>server_roles.yml</codeph>,
                            <codeph>disk_compute.yml</codeph> and
                        <codeph>control_plane.yml</codeph>. For more information on configuration of
                        the Input Model for SLES, see <xref keyref="sles_compute_model"> SLES
                            Compute Model</xref>. </li>
                    <li><keyword keyref="kw-hos"/> playbooks currently do not take care of the SDK,
                        therefore it needs to be added manually. The following command needs to be
                        run on every SLES compute
                            node:<pre>deployer_ip=192.168.10.254
zypper addrepo --no-gpgcheck --refresh http://$deployer_ip:79/hlm/sles12/zypper/SDK SLES-SDK</pre><p>There
                            is no need to add OS repo as in case of <xref keyref="provisioning_sles"
                            />, because SLES already comes with OS repo
                            populated after a Cobbler managed install.</p></li>
                </ul></p>
        </section>
        
       <!--
        
       Removing for SLES since we don't know if there is support for UEFI and Secure Boot.
       
       Once tested, the UEFI and Secure Boot content might be able to be added back.
                

        <section>
            <title>Deploying UEFI SLES compute nodes</title>
            <sectiondiv id="sles_uefi_overview">
                <p><keyword keyref="kw-hos-phrase-30"/> required a manual procedure if you wanted to
                    use the lifecycle manager to install SLES 12 SP2 on UEFI nodes as described in
                    the article <xref
                        href="https://docs.hpcloud.com/hos-3.x/#helion/installation/rhel/install_rhel_compute.html"
                        scope="external" format="html">here</xref>. This procedure has been
                    automated in the <keyword keyref="kw-hos-phrase"/> lifecycle manager. </p>
            </sectiondiv>
            <p>Before you attempt to use the lifecycle manager to install SLES on UEFI nodes, you
                should install any Linux for HPE Helion nodes or any SLES on legacy BIOS nodes
                first.</p>
            <p> Execute the following steps to re-image one or more nodes after you have run the
                    <codeph>ready-deployment.yml</codeph> playbook: <ol>
                    <li>Prior to beginning these steps, the following must be true:
                        <ul
                            id="ul_eqk_vng_zx">
                            <li>All of your nodes using Linux for HPE Helion (controller, VSA, etc
                                nodes) must already be installed, either manually for via
                                Cobbler.</li>
                            <li>Your input model should be configured for your SLES nodes, per the
                                instructions at <xref keyref="sles_compute_model"> SLES Compute
                                    Model</xref>.</li>
                            <li>You should have run the configuration processor and the
                                    <codeph>ready-deployment.yml</codeph> playbook.</li>
                        </ul></li>
                    <li>Run the following playbook, which will extract the
                            <codeph>grubx64.efi</codeph> file which will be needed when imaging your
                        SLES UEFI nodes. <b outputclass="highlightThis">This section needs SLES yml files and examples</b>
                        <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook prepare-rhel-loader.yml</codeblock></li>
                    <li>Run the following playbook, ensuring that you specify only your UEFI SLES
                        nodes using the nodelist. This playbook will reconfigure Cobbler for the
                        nodes
                        listed.<codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook prepare-rhel-grub2.yml -e nodelist=node1[,node2,node3]</codeblock></li>
                    <li>Re-image the node(s), ensuring that you only specify your UEFI SLES nodes
                        using the
                        nodelist.<codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost bm-reimage.yml -e nodelist=node1[,node2,node3]</codeblock></li>
                    <li>Make backups of the <codeph>grub.cfg-*</codeph> and
                            <codeph>grubx64.efi</codeph> files in <codeph>/srv/tftp/grub/</codeph>
                        as they will be overwritten when running the cobbler-deploy playbook on the
                        next step. You will need these files if you need to reimage the nodes in the
                        future.</li>
                    <li>Run the <codeph>cobbler-deploy</codeph> playbook, which will reset Cobbler
                        back to the default
                        values:<codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost cobbler-deploy.yml</codeblock></li>
                </ol>
            </p>
         

                
            <p><b>UEFI Secure Boot</b></p>
            <p>Secure Boot is a method used to restrict binaries execution for
                booting the system. With this option enabled, system BIOS will only allow boot
                loaders with trusted cryptographic signatures to be executed, thus enable
                preventing malware from hiding embedded code in the boot chain. Each boot loader
                launched during the boot process is digitally signed and that signature is
                validated against a set of trusted certificates embedded in the UEFI BIOS.
                Secure Boot is completely implemented in the BIOS and does not require special
                hardware.</p>
            <p>Thus Secure Boot is: </p>
            <ol>
                <li>Intended to prevent boot-sector malware or kernel code injection.</li>
                <li>Hardware-based code signing.</li>
                <li>Extension of the UEFI BIOS architecture.</li>
                <li>Optional with the ability to enable or disable it through the BIOS.</li>
            </ol>
            <p>In Boot Options of RBSU, <codeph>Boot Mode</codeph> needs to be set to
                <codeph>UEFI Mode</codeph> and <codeph>UEFI Optimized Boot</codeph> should
                be <codeph>Enabled</codeph>. </p>
            <p> Secure Boot is enabled at
                <codeblock>System Configuration > BIOS/Platform Configuration (RBSU) > Server Security > Secure Boot Configuration > Secure Boot Enforcement
                </codeblock>
            </p>
            
            
            
        </section>


        -->

    </body>
</topic>
