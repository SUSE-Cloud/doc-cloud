<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: not edited-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="using_git">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Using Git for Configuration Management</title>
  <body>
    <!--not tested-->
    <p conkeyref="HOS-conrefs/applies-to"/>
    <p>In <keyword keyref="kw-hos-phrase"/>, a local git repository is used to track configuration
      changes and the configuration processor (CP) uses this repository. The introduction of a git
      workflow also means that your configuration history is maintained, making rollbacks easier as
      well as keeping a record of previous configuration settings.</p>
    <p>The git repository is installed by the lifecycle manager on the lifecycle manager node.</p>

    <p>The git repository provides a way for you to merge changes that you pull down as "upstream"
      (i.e. from HP) updates, and allows you to manage your own configuration changes. </p>
    <section>
      <title>Initialization on a new deployment</title>
      <p>On a system new to <keyword keyref="kw-hos-phrase"/>, the lifecycle manager will prepare a
        git repository under <codeph>~/helion</codeph>. The lifecycle manager provisioning runs the
          <codeph>hlm-init-deployer</codeph> script automatically - this calls
          <codeph>ansible-playbook -i hosts/localhost git-00-initialise.yml</codeph>.</p>
      <p>As a result, the <codeph>~/helion</codeph> directory is initialized as a git repo (if it's
        empty). It is initialized with four empty branches: <dl>
          <dlentry>
            <dt>hos</dt>
            <dd>This holds the upstream source code corresponding to the contents of the
                <codeph>~/helion</codeph> directory on a pristine fresh installation. Every source
              code release that is downloaded from HPE is applied as a fresh commit to this branch.
              This branch contains no customization by the end user.</dd>
          </dlentry>
          <dlentry>
            <dt>site</dt>
            <dd>This branch begins life as a copy of the first 'hos' drop. It is onto this branch
              that you commit your configuration changes. It's the branch most visible to the end
              user.</dd>
          </dlentry>
          <dlentry>
            <dt>ansible</dt>
            <dd>This branch contains the variable definitions generated by the CP that our main
              ansible playbooks need. This includes the <codeph>verb_hosts</codeph> file that
              describes to ansible what servers are playing what roles. The
                <codeph>ready-deployment</codeph> playbook takes this output and assembles a
                <codeph>~/scratch</codeph> directory containing the ansible playbooks together with
              the variable definitions in this branch. The result is a working ansible directory
                <codeph>~/scratch/ansible/next/hos/ansible</codeph> from which the main deployment
              playbooks may be successfully run. </dd>
          </dlentry>
          <dlentry>
            <dt>cp-persistent</dt>
            <dd>This branch contains the persistent state that the CP needs to maintain. That state
              is mostly the assignment of IP addresses and roles to particular servers. Some
              operational procedures may involve editing the contents of this branch: for example,
              retiring a machine from service or repurposing it.</dd>
          </dlentry>
        </dl>Two temporary branches are created and populated at run time: <dl>
          <dlentry>
            <dt>staging-ansible</dt>
            <dd>This branch hosts the most recent commit that will be appended to the ansible
              branch.</dd>
          </dlentry>
          <dlentry>
            <dt>staging-cp-persistent</dt>
            <dd>This branch hosts the most recent commit that will be appended to the cp-persistent
              branch.</dd>
          </dlentry>
        </dl>
        <note>The information above provides insight into the workings of the configuration
          processor and the git repository. However, in practice you can simply follow the steps
          below to make configuration changes.</note>
      </p>
    </section>
    <!--    <section>
      <title>When receiving a new Helion drop</title>
   
      <p>When you are ready to deploy a new deployer image, you must merge any configuration changes
        into your own previous config; this is a manual step, although the standard git tools may be
        brought to bear to achieve this. </p>
      <p>Behind the scenes, the deployer provisioning runs the following playbooks: <ol>
          <li>ansible-playbook -i hosts/localhost</li>
          <li>deployer-init.yml ansible-playbook</li>
          <li>-i hosts/localhost git-01-receive-new.yml</li>
        </ol> The third playbook puts the new content directly onto the 'hos' branch. After it runs,
        you will notice a new commit on the 'hos' branch with the latest upstream deployer content
        on it. This looks much like the content of the ~/helion directory as it was prior to the
        introduction of the git workflow. The hos branch will be merged to the site branch; if there
        are differences, the merge will require your manual review and commit. </p>
      <p>The ~/helion repo will be checked out to the 'site' branch and the results of the merge
        left in place for your review. You may now edit your configuration until you are happy with
        it on the 'site' branch in ~/helion repository. Note that the deployer simply copies a
        configuration unconditionally to the ~/helion/my_cloud/definition directory and commits it
        there. You must commit any configuration changes prior to continuing; the
        "config-processor-run.yml" script will abort with a message to that effect if that condition
        is not met. As a result of this step, the 'site' branch gets a configuration under the
        my_cloud/definition subdirectory. </p>
      <p>
        <b>Run the configuration processor</b>
      </p>
      <p>Once you have committed configuration settings, you must run the configuration processor,
        which takes as input your configuration, and also any persistent data saved from a previous
        run. (That data contains things such as the allocation of roles to servers, etc.) It
        produces as output a set of ansible variable settings (amongst other input to the ansible
        playbooks); and may update its persistent state. </p>
      <p>To run the configuration processor, you must execute
        <codeblock>ansible-playbook -i hosts/localhost config-proessor-run.yml </codeblock> However,
        the CP persistent state and the ansible outputs now reside on different branches, not
        immediately visible to you. If the config processor run was unsuccessful, you may continue
        to edit and commit to your 'site' branch. An " (dash dash note for comments issue replace with dashes later )amend" commit is acceptable here. </p>
      <p><b>Result</b>
      </p>
      <p>A scratch directory is prepared to run the config processor in (~/scratch/cp). The site
        configuration is checked out into this directory. Atop this is laid any saved persistent
        state for the config processor, which is taken from the head of the 'cp-persistent' branch.
        Updated CP persistent data is temorarily stashed to the 'staging-cp-persistent' branch;
        ansible output to the 'staging-ansible' branch. The reason for this is that, until a
        deployment actually occurs, there is no guarantee that any additional CP state accruing will
        gain any measure of real-world semantics by being used for a deployment. We always reset the
        inputs to the CP to the last *deployed* persistent state. </p>
    </section>
    <section>
      <title>Prepare and run a deployment</title>
      <p>A deployment area is prepared to run an update or a deploy from. At this point we consider
        the staged output from the CP to be 'live' - promoting the commits to the long-lived
        'ansible' and 'cp-persistent' branches. </p>
      <p><b>User experience</b>
      </p>
      <p>The user readies a deployment area by running ansible-playbook -i hosts/localhost
        ready-deployment.yml from the ~/helion/hlm/ansible directory. This will prepare a scratch
        directory with the appropriate contents in it under "~/scratch/ansible/next/hlm/ansible".
        The deployment may be continued via: cd ~/scratch/ansible/next/hlm/ansible ansible-playbook
        -i hosts/verb_hosts site.yml </p>
      <p><b>Technical details</b>
      </p>
      
      <p>The tip of the "staging-ansible" and "staging-cp-persistent" branches are laid down upon
        the "ansible" and "cp-persistent" branches; the former pair are then deleted. The tip of
        "site", "ansible", and "cp-persistent" are tagged with a time-stamped tag to indicate when
        the deployment was readied. Two working areas are laid out underneath ~/scratch/ansible. The
        "next/" directory holds the latest deployment tree. Alongside this, the "last/" directory
        holds the previous tree - that is, the one constructed from the previous timestamps. The
        thinking behind this is that, whilst we currently don't use the former ansible state for
        upgrades, that any topology change will require ansible to know where services _used_ to run
        in order to successfully find and disable them. At the moment, the best use of this
        directory is as a convenient tree to run "diff" from. </p>
    </section>-->
    <section id="updating-configuration-including-default-config">
      <title>Updating any configuration, including the default configuration</title>
      <sectiondiv id="steps"><p>When you need to make updates to a configuration you must <ol>
            <li>Check out the <b>site</b> branch. You may already be on that branch. If so, git will
              tell you that and the command will leave you
              there.<codeblock>git checkout site</codeblock>
            </li>
            <li>Edit the YAML file or files that contain the configuration you want to change. </li>
            <li>Commit the changes to the <b>site</b> branch. <codeblock>git add -A
git commit -m "your commit message goes here in quotes"</codeblock>
              <p>If you want to add a single file to your git repository, you can use the command
                below, as opposed to using <codeph>git add -A</codeph>:
                <codeblock>git add PATH_TO_FILE</codeblock></p>
              <p>For example, if you made a change to your <codeph>servers.yml</codeph> file and
                wanted to only commit that change, you would use this command:
                <codeblock>git add ~/helion/my_cloud/definition/data/servers.yml</codeblock></p></li>
            <li> Run the configuration
              processor:<codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml
</codeblock>
              to produce the required configuration processor output from those changes. Review the
              output files manually if required.</li>
            <li>Ready the deployment area
              <codeblock>ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
            <li>Run the deployment playbooks from the resulting scratch directory.
              <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts site.yml
</codeblock>
            </li>
          </ol>
        </p>
      </sectiondiv>
    </section>
  </body>
</topic>
