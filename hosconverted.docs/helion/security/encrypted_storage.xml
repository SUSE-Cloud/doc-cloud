<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: ready for edit (Nancy)-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="password_encryption">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Encryption of Passwords and Sensitive
    Data</title>
  <body>
    <!--not tested-->
    <p conkeyref="HOS-conrefs/applies-to"/>
    <p> In <keyword keyref="kw-hos-phrase"/>, sensitive connection data is encrypted. The passwords
      that are encrypted include: <ul>
        <li>Inter-service passwords generated by the configuration processor (Keystone, MySQL,
          RabbitMQ and Vertica passwords) </li>
        <li>Secret keys generated by the configuration processor (MySQL cluster-id, erlang cookie
          for RabbitMQ, Horizon secret key, Keystone admin token) </li>
        <li>User-supplied passwords (iLO passwords, Block Storage backend passwords) </li>
      </ul>
    </p>

    <section>
      <table frame="all" rowsep="1" colsep="1" id="table_b5t_qwp_rt">
        <tgroup cols="4">
          <colspec colname="c1" colnum="1"/>
          <colspec colname="c2" colnum="2"/>
          <colspec colname="c3" colnum="3"/>
          <colspec colname="c4" colnum="4"/>
          <thead>
            <row>
              <entry>What is encrypted</entry>
              <entry>Encryption mechanism</entry>
              <entry>Is password changeable</entry>
              <entry>Is encryption key changeable</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Inter-service passwords and secret keys generated by the configuration
                processor (Keystone, MySQL, RabbitMQ and Vertica passwords) </entry>
              <entry>Uses PyCrypto libraries &amp; Ansible vault for encryption</entry>
              <entry>No</entry>
              <entry><p>Yes</p><p>Passphrase for the encryption key will be prompted when running
                  Ansible playbook. Can also use command </p> ask-ansible-pass</entry>
            </row>
            <row>
              <entry>User supplied passwords (iLO passwords, Block Storage backend passwords) </entry>
              <entry> OpenSSL</entry>
              <entry>Yes</entry>
              <entry>
                <p>Yes</p>
                <p>The environment variable HOS_USER_PASSWORD_ENCRYPT_KEY must contain the key used
                  to encrypt those passwords.</p>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table> Other protected data: <ul>
        <li>The SSH private key used by Ansible to connect to client nodes from the lifecycle
          manager is protected with a passphrase. </li>
        <li>The Swift swift-hash prefix and suffix values are
          encrypted<!--, or will be when the relevant patches land -->. </li>
        <li>All of the Ansible variables generated by the configuration processor are encrypted and
          held in Ansible Vault. </li>
      </ul>
      <p>However, if a user wants to change the encryption keys then that can be done for all
        categories of password and secret-keys listed below, and the processes are documented.</p>
      <p>The ssh private key passphrase needs to be entered once before any Ansible plays are run
        against the cloud.</p><p>The configuration processor encryption key will be prompted for
        when the relevant Ansible play is run. Once the configuration processor output has been
        encrypted, all subsequent Ansible plays need to have --ask-ansible-pass added to the command
        line to ensure that the encryption key which is needed by Ansible is prompted for. </p>
      <p>Finally, if user-supplied passwords have been encrypted (this process uses the OpenSSL
        library) then the environment variable HOS_USER_PASSWORD_ENCRYPT_KEY must contain the key
        used to encrypt those passwords.</p><p>In the case where the HOS_USER_PASSWORD_ENCRYPT_KEY
        environment variable is either null, the empty string, or not defined, then no encryption
        will be performed on your passwords when using the hosencrypt.py script.</p>
      <p> The generated passwords are stored in Ansible inputs generated by the configuration
        processor and also in the persistent state information maintained by the configuration
        processor.</p>
    </section>
    <section id="protection"><title>Protecting sensitive data on the lifecycle manager</title>
      <p> There are a number of mechanisms that can be used to protect sensitive data such as
        passwords, some Ansible inputs, and the SSH key used by Ansible on the lifecycle manager.
        See the installation documents for details. Please remember the need to guard against
        exposure of your environment variables, which may happen through observation over the
        shoulder.</p>
      <p>There are instructions included in the installation documents that show how to encrypt your
        data using the <codeph>hosencrypt.py</codeph> script. You may want to change the encryption
        keys used to protect your sensitive data in the future and this shows you how:</p>
      <ul>
        <li><b>SSH keys</b> - Run the command below to change the passphrase used to protect the
          key: <codeblock>ssh-keygen -f id_rsa -p</codeblock></li>
        <li><b>configuration processor Key</b> - If you wish to change an encryption password that
          you have already used when running the configuration processor then enter the existing
          password at the first prompt and the new password at the second prompt when running the
          configuration processor playbook. See <xref
            href="../installation/installing_kvm.dita#install_kvm/encrypt">Encrypting Password
            during configuration processor</xref> for more details.</li>
        <li><b>iLO passwords, VSA password if encrypted with <codeph>hosencrypt.py</codeph></b> -
          Rerun the utility specifying a new encryption key when prompted. You will need to enter
          the plain text passwords at the password prompt.</li>
      </ul>
    </section>
    <section>
      <title>Interacting with Encrypted Files</title>
      <p>Once you have enabled encryption in your environment you may have a need to interact with
        these encrypted files at a later time. This section will show you how.</p>
      <p><b>hosencrypt.py script password encryption</b></p>
      <p>If you used the <codeph>hosencrypt.py</codeph> script to encrypt your iLO or other
        passwords and have a need to view them later, you can do so with these steps.</p>
      <p>You will want to ensure that the <codeph>HOS_USER_PASSWORD_ENCRYPT_KEY</codeph> environment
        variable is set prior to running these commands:</p>
      <codeblock>export HOS_USER_PASSWORD_ENCRYPT_KEY="&lt;encryption_key>"</codeblock>
      <p>To view an encrypted password, you can use this command below which will promot you for the
        encrypted password value. It will then output the decrypted value:</p>
      <codeblock>./hosencrypt.py -d</codeblock>
      <p><b>Configuration processor encryption key</b></p>
      <p>If you have used the encryption options available with the configuration processor, which
        uses Ansible vault, you can do so with these commands. Each of these commands will prompt
        you for the password you used when setting the encryption initially.</p>
      <p>To view an encrypted file in read-only mode, use this command:</p>
      <codeblock>ansible-vault view &lt;filename></codeblock>
      <p>To edit an encrypted file, use this command. This allows you to edit a decrypted version of
        the file without the need to decrypt and re-encrypt it:</p>
      <codeblock>ansible-vault edit &lt;filename></codeblock>
      <p>For other available commands, use the help file:</p>
      <codeblock>ansible-vault -h</codeblock>
    </section>
  </body>
</topic>
