<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<!--Edit status: not edited-->
<topic id="x509_certificate_auth">
    <title>Configuring Keystone and Horizon to use X509 Client Certificates</title>
    <body>
        <section id="section_and_l2p_hx">
            <title>Overview</title>
            <p>The Keystone service supports X.509 SSL cerificate authentication and authorization
                for accessing the Horizon dashboard in <keyword keyref="kw-hos-phrase"/>. This
                feature is disabled by default, and must be manually configured and enabled by
                running a number of Ansible playbooks.<note>Enabling client SSL certificate
                    authentication and authorization for the Horizon dashboard is a non-core feature
                    in <keyword keyref="kw-hos-phrase"/>. More information on core and non-core
                    features can be found in the release notes here <xref
                        href="../releasenotes50.dita"/>
                </note></p>
            <p/>
            <p/>
        </section>
        <section id="section_ttr_l2p_hx">
            <title>Keystone configuration</title>
            <p>To configure and enable X.509 SSL authentication and authorization support for the
                Keystone service, perform the following steps.</p>
            <p/>
            <p>
                <ol id="ol_pby_lfp_hx">
                    <li>Create a new configuration file named <codeph>x509auth.yml</codeph> and
                        place it in any directory in your deployer node. For example, perform the
                        following command to create the file in the <codeph>/tmp/</codeph>
                        directory:<codeblock>touch /tmp/x509auth.yml</codeblock></li>
                    <li>Edit the new file to include the following text. Note that YAML files are
                        whitespace-sensitive. Please preserve the indentation format of the
                        following
                            text.<codeblock>keystone_x509auth_conf:
    identity_provider:
        id: intermediateca
        description: This is the trusted issuer HEX Id.
    mapping:
        id: x509_mapping1
        rules_file: /tmp/x509auth_mapping.json
    protocol:
        id: x509
    remote_id: intermediateca
    ca_file: /tmp/cacert.pem</codeblock><p/><p>The
                            preceding example sets a number of configuration parameters for the
                            X.509/Keystone configuration. The following are detailed descriptions of
                            each parameter.<ul id="ul_t2r_wgp_hx">
                                <li><b>identity_provider</b> This section identifies and describes
                                    an outside identity provider.<ul id="ul_s4w_php_hx">
                                        <li><b>id</b>: Any unique, readable string that identifies
                                            the identitiy provider.</li>
                                        <li><b>description</b>: A description of the identity
                                            provider.</li>
                                    </ul></li>
                                <li><b>mapping</b>: This section describes a JSON-format file that
                                    maps X.509 client certificate attributes to a local Keystone
                                        user.<ul id="ul_whh_rhp_hx">
                                        <li><b>id</b>: Any unique, readable string that identifies
                                            the user-certificate mapping.</li>
                                        <li><b>rules_file</b>: The filepath to a JSON file that
                                            contains the client certificate attributes mapping.</li>
                                    </ul></li>
                                <li><b>protocol</b>: This section sets the cryptographic protocol to
                                    be used.<ul id="ul_cbr_shp_hx">
                                        <li><b>id</b>: The cryptographic protocol used for the
                                            certificate-based authentication/authorization.</li>
                                    </ul></li>
                                <li><b>remote_id</b>: By default, this field expects the client
                                    certificate's issuer's common name (CN) as a value. The expected
                                    value is set in the <codeph>keystone.conf</codeph> file, where
                                    the default setting
                                    is:<codeblock>remote_id_attribute = SSL_CLIENT_I_DN_CN</codeblock></li>
                                <li><b>ca_file</b>: The file that contains the client certificate's
                                    related intermediary and root CA certificates.</li>
                            </ul></p><p/><p>Note: In the <codeph>/tmp/x509auth.yml</codeph> file,
                            the <codeph>ca_file</codeph> value should be a file that contains both
                            the root and signing CA certificates (often found in
                                <codeph>/home/pki/cacert.pem</codeph>).</p></li>
                    <li>Create a JSON-formatted mapping file. You will need to edit the
                            <codeph>x509auth.yml</codeph> file you created in <b>Step 2</b> to
                        reference this file in the <b>mapping</b>â†’ <b>rules_file</b> parameter. You
                        can create the file with the following example
                        command:<codeblock>touch /tmp/x509auth_mapping.json</codeblock></li>
                    <li>Edit the JSON file you created in <b>Step 3</b> to include the following
                        content.
                        <codeblock>[
                 {
                     "local": [
                         {
                            "user": {
                                "name": "{0}",
                                "domain": {
                                    "name": "{1}"
                                },
                                "type": "local"
                            }
                         }
                    ],
                    "remote": [
                        {
                            "type": "SSL_CLIENT_S_DN_CN"
                        },
                        {
                            "type": "SSL_CLIENT_S_DN_O"
                        },
                        {
                            "type": "SSL_CLIENT_I_DN",
                            "any_one_of": [
                            ]
                        }
                    ]
                }
]</codeblock><p/><p/></li>
                    <li>Enter the distinguished name(s) (DN) of the certificate issuer(s) that
                        issued your client certificates into the <b>any_one_of</b> field in the
                            <b>remote</b> block. The <b>any_one_of</b> field is a comma-separated
                        list of all certificate issuers that you want the Keystone service to trust.
                        <p/>All DNs in the <b>any_one_of</b> field must adhere to the following
                            format.<ul id="ul_cm3_pzy_3x">
                            <li>A descending list of DN elements, with each element separated by a
                                forward slash (/).</li>
                        </ul><p/><p>The following is an example of a properly formatted DN for a
                            certificate issuer named "intermedia".</p><p>
                            <codeblock>/C=US/ST=California/O=HPE/OU=Engineering/CN=intermediateca/emailAddress=intermediateca@hpe.com</codeblock>
                        </p><p/><p>The following example file illustrates an
                                <codeph>x509auth_mapping.json</codeph> file with the "intermedia"
                            certificate issuer added to the <b>any_one_of</b> field. Note that the
                            DN string is in
                            quotes.<codeblock>[
                 {
                     "local": [
                         {
                            "user": {
                                "name": "{0}",
                                "domain": {
                                    "name": "{1}"
                                },
                                "type": "local"
                            }
                         }
                    ],
                    "remote": [
                        {
                            "type": "SSL_CLIENT_S_DN_CN"
                        },
                        {
                            "type": "SSL_CLIENT_S_DN_O"
                        },
                        {
                            "type": "SSL_CLIENT_I_DN",
                            "any_one_of": [
                                "/C=US/ST=California/O=HPE/OU=Engineering/CN=intermediateca/emailAddress=intermediateca@hpe.com"
                            ]
                        }
                    ]
                }
]</codeblock></p><p/><p/><p>The
                            Keystone service will trust all client certificates issued by any of the
                            certificate issuers listed in the <b>any_one_of</b> field.</p><p/></li>
                    <li>Run the following commands to enable the new X.509/Keystone
                        settings.<codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml -e@/tmp/x509auth.yml</codeblock></li>
                </ol>
            </p>
            <p/>
            <p/>
        </section>
        <section id="section_p5j_4lq_mx">
            <title>HAProxy Configuration</title>
            <p>Because of the experimental nature of the HAProxy feature, it is important to
                minimize the risk of impacting other services. If you have implemented, or wish to
                implement the HAProxy feature alongside client SSL certificate login to the Horizon
                dashboard in your cloud, please complete the following steps to make the necessary
                manual configuration changes.</p>
            <p>
                <note>You must perform the Keystone configuration steps in the previous section
                    before performing the following HAProxy configuration changes.</note>
                <ol id="ol_kmc_vlq_mx">
                    <li>Locate and open the
                            <codeph>~/helion/hos/ansible/roles/haproxy/templates/haproxy.cfg</codeph>
                        file.</li>
                    <li>Locate the following line in the <codeph>haproxy.cfg</codeph>
                            file.<codeblock>listen {{ network.vip }}-{{ port }}</codeblock><p>Enter
                            the following codeblock in the open space immediately preceding the
                                <codeph>listen {{ network.vip }}-{{ port }}</codeph>
                            line.</p><codeblock>{%- if service == 'KEY_API' and port == '5000' %}
    {% set bind_defaults = 'ca-file /etc/ssl/private/cacert.pem verify optional' %}
{%- endif %}</codeblock><p>After
                            entering the preceding code, your <codeph>haproxy.cfg</codeph> file
                            should look like the following
                        example.</p><codeblock>
{%- if network.terminate_tls is defined and network.terminate_tls and port == '80' %}
    {% set port = '443' %}
{%- endif %}
 
{%- if service == 'KEY_API' and port == '5000' %}
    {% set bind_defaults = 'ca-file /etc/ssl/private/cacert.pem verify optional' %}
{%- endif %}
 
listen {{ network.vip }}-{{ port }}
    {%- set options = network.vip_options | default(vip_options_defaults) %}
      {%- if options > 0 %}
        {%- for option in options %}
    {{ option }}
        {%- endfor %}
      {%- endif %}
    bind {{ network.vip }}:{{ port }} {% if network.terminate_tls is defined and network.terminate_tls %} ssl crt {{ frontend_server_cert_directory }}/{{ network.cert_file }} {{ bind_defaults }} {% endif %}</codeblock></li>
                    <li>Commit the changes to your local git
                        repository.<codeblock>git add -A
git commit -m "Added HAProxy configuration changes"</codeblock></li>
                    <li>Run the configuration processor and ready-deployment Ansible
                        playbooks.<codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock></li>
                    <li>Implement the HAProxy configuration changes.
                        <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts FND-CLU-reconfigure.yml</codeblock></li>
                </ol>
            </p>
        </section>
        <section id="section_mqr_m2p_hx">
            <title>Create CA and client certificates</title>
            <p>An X.509 client certificate can be issued from any certificate authority (CA). You
                can use the openssl command-line tool to generate certificate signing requests
                (CSRs). Once a CA has signed your CSR, the CA will return a signed certificate that
                you can use to authenticate to Horizon.</p>
            <p>Read more about openssl here: <xref href="https://www.openssl.org/" format="html"
                    scope="external"/></p>
            <p>
                <note>Your cloud's load balancer will reject any self-signed client SSL
                    certificates. Ensure that all client certificates are signed by a certificate
                    authority that your cloud recognizes.</note>
            </p>
            <p/>
        </section>
        <section id="section_qjc_42p_hx">
            <title>Horizon configuration</title>
            <p>Complete the following steps to configure Horizon to support SSL certificate
                authorization and authentication.<ol id="ol_xd5_rwp_hx">
                    <li>Edit the
                            <codeph>~/helion/hos/ansible/roles/HZN-WEB/defaults/main.yml</codeph>
                        file and set the following parameter to
                        <codeph>True</codeph>.<codeblock>horizon_websso_enabled: True</codeblock></li>
                    <li>Locate the last line in the
                            <codeph>~/helion/hos/ansible/roles/HZN-WEB/defaults/main.yml</codeph>
                        file. The default configuration for this line should look like the following.<codeblock>horizon_websso_choices:
  - {protocol: saml2, description: "ADFS Credentials"}</codeblock><p>
                            <ul id="ul_jg3_g2r_mx">
                                <li>If your cloud <b>does not</b> have ADFS enabled, then replace
                                    the preceding <codeph>horizon_websso_choices:</codeph> parameter
                                    with the
                                    following.<codeblock>- {protocol: x509, description: "X.509 SSL Certificate"}</codeblock><p/>The
                                    resulting block should look like the
                                    following.<codeblock>horizon_websso_choices:
    - {protocol: x509, description: "X.509 SSL Certificate"}</codeblock><p/></li>
                                <li>If your cloud <b>does</b> have ADFS enabled, then simply add the
                                    following parameter to the
                                        <codeph>horizon_websso_choices:</codeph> section. Do not
                                    replace the default parameter, simply add the following line to
                                    the existing
                                    block.<codeblock>- {protocol: saml2, description: "ADFS Credentials"}</codeblock>If
                                    your cloud has ADFS enabled, the final block of your
                                        <codeph>~/helion/hos/ansible/roles/HZN-WEB/defaults/main.yml</codeph>
                                    should have the following
                                    entries.<codeblock>horizon_websso_choices:
    - {protocol: x509, description: "X.509 SSL Certificate"}
    - {protocol: saml2, description: "ADFS Credentials"}</codeblock></li>
                            </ul>
                        </p></li>
                    <li>Run the following commands to add your changes to the local git repository,
                        and reconfigure the Horizon service, enabling the changes made in <b>Step
                            1</b>:<codeblock>cd ~/helion
git add -A
git commit -m "my commit message"
cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost config-processor-run.yml
ansible-playbook -i hosts/localhost ready-deployment.yml
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts horizon-reconfigure.yml</codeblock></li>
                </ol></p>
        </section>
        <section id="section_chx_42p_hx">
            <title>Browser configuration</title>
            <p>To enable your web browser to present a certificate to the Horizon dashboard upon
                login, you first need to import the certificate. <ol id="ol_oyb_rxp_hx">
                    <li>Import the desired certificate into your web browser's certificate store.
                        The steps to complete this action will vary from browser to browser. Please
                        refer to your browser's documentation for specific instructions.</li>
                    <li>After importing the certificate, verify that it appears in your browser's
                        certificate manager.</li>
                </ol></p>
            <p/>
            <p>The following image displays an example certificate as it appears in a browser's
                certificate manager.</p>
            <p/>
            <p>
                <image placement="break" href="../../media/security/cert_dn_example.png"
                    id="image_gx4_gyp_hx"/>
            </p>
            <p/>
            <p/>
        </section>
        <section id="section_u54_p2p_hx">
            <title>User accounts</title>
            <p>For the Keystone service to use X.509 certificates to grant users access to Horizon,
                there must be a Keystone user account associated with each certificate. Keystone
                associates user accounts with certificates by matching the common name (CN) and
                organization (O) of a presented certificate with the username and domain of an
                existing Keystone user.</p>
            <p>When an X.509 certificate is presented to Horizon for authentication/authorization,
                Horizon passes the certificate information along to the Keystone service. Keystone
                attempts to match the CN and O of the certificate with the username and domain of an
                existing local user account. For this operation to be successful, there must be a
                Keystone user account and domain that match the CN and O of the certificate.</p>
            <p/>
            <p>For example, if a user named Sam presents a certificate to Horizon with the following
                    information,<ul id="ul_o2v_2fs_3x">
                    <li>CN=sam</li>
                    <li>O=HPE</li>
                </ul></p>
            <p>Then there must be an existing Keystone user account with the following values,</p>
            <ul id="ul_mn5_pfs_3x">
                <li>Username=sam</li>
                <li>Domain=HPE</li>
            </ul>
            <p>Further, Sam's client certificate must have been issued by one of the certificate
                issuers listed in the <b>any_one_of</b> field in the
                    <codeph>x509auth_mapping.json</codeph> file.</p>
            <p/>
            <p>Also, when creating a local Keystone user, you must assign the user account a project
                scope. Without a project scope, the authorization portion of the sign-on process
                will fail.</p>
            <p/>
            <p>The following steps illustrate how to use the CLI to create a domain, create and
                manage a user, and assign a permissions role to the new user.<ol id="ol_tnt_msq_mx">
                    <li>Create a new domain, named
                        HPE.<codeblock>openstack domain create HPE</codeblock></li>
                    <li>Create a new project named "xyz", under the HPE domain.
                        <codeblock>openstack project create --domain HPE xyz</codeblock></li>
                    <li>Create a new user named "Sam" in the HPE domain. Set the password and email
                        for the new
                        account.<codeblock>openstack user create --domain HPE --password pass --email sam@hpe.com --enable sam</codeblock></li>
                    <li>Create a new role named
                        "role1".<codeblock>openstack role create role1</codeblock></li>
                    <li>Grant the new role, "role1" to the new user "Sam" from the "HPE" domain.
                        Note that both the user account and domain must be referenced by their
                        unique ID numbers rather than their friendly
                        names.<codeblock>openstack role add --user 04f3db9e7f3f45dc82e1d5f20b4acfcc --domain 6b64021839774991b5e0df16077f11eb role1</codeblock></li>
                    <li>Add the user "Sam" to the newly-created project from step 2. Note that the
                        project and user account must be referenced by their respective unique ID
                        numbers rather than their friendly
                        names.<codeblock>openstack role add --project 4e2ad14406b247c7a9fc0a48c0b1713e --user 04f3db9e7f3f45dc82e1d5f20b4acfcc role1</codeblock></li>
                </ol></p>
            <p/>
        </section>
        <section id="section_hbf_q2p_hx">
            <title>How it works</title>
            <p>The SSL authentication and authorization process is detailed in the following
                    steps.<ol id="ol_vhn_cbq_hx">
                        <li>User directs a web browser to the <keyword keyref="kw-hos"/> Horizon login landing
                        page.</li>
                    <li>The user selects the "X.509 Certificate" login option from the dropdown
                        menu.</li>
                    <li>Horizon responds with an HTTP 302 redirect, redirecting the browser to the
                        SSL-protected Keystone (federated) authentication endpoint.</li>
                    <li>The browser then prompts user to select the certificate to use for the login
                        (if there is more than one certificate for the given trusted Certificate
                        Authority (CA)).</li>
                    <li>The web browser establishes a 2-way SSL handshake with the Keystone
                        service.</li>
                    <li>Keystone, utilizing federation mapping, maps the user to a federated persona
                        and issues an (federated) unscoped token.</li>
                    <li>The token is then passed to the browser, along with JavaScript code that
                        redirects the browser back to the Horizon dashboard.</li>
                    <li>The browser then logs into the Horizon dashboard using the newly issued
                        unscoped token to authenticate the user.</li>
                    <li>Horizon queries the Keystone service for the list of federated projects the
                        authenticated user has access to.</li>
                    <li>Horizon then rescopes the token to the first project, granting the user
                        authorization.</li>
                    <li>The login process is completed.</li>
                </ol></p>
            <p/>
            <p/>
            <p>
                <image placement="break" href="../../media/security/Horizon-SSL-Keystone.png"
                    id="image_h4j_mdq_hx"/>
            </p>
        </section>
    </body>
</topic>
