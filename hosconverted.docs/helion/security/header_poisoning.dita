<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: ready for edit (Nancy)-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="header_poisoning">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Preventing Host Header Poisoning</title>
  <body><!--not tested-->
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section> Depending on the environment and context of your <keyword keyref="kw-hos"/> deployment, it
      may be advisable to configure Horizon to protect against Host header poisoning (see ref. #1
      below) by using Django's ALLOWED_HOSTS setting (see ref. #2 below). To configure Horizon to
      use the ALLOWED_HOSTS setting, take the following steps: <ol id="ol_ctx_f2r_b5">
        <li>Edit the haproxy settings to reconfigure the health check for Horizon to specify the
          allowed hostname(s). This needs to be done first, before configuring Horizon itself.
          Otherwise, if Horizon is first configured to restrict the values of the "Host" header on
          incoming HTTP requests, the haproxy health checks will start to fail. So, the haproxy
          configuration needs to be updated first, if this is being done on an existing
          installation. <ol id="ol_k5x_f2r_b5">
            <li> On your lifecycle manager node, open <b>~/helion/hos/services/horizon.yml</b>
            </li>
            <li>Find the line that contains "option httpchk" and modify it so it reads the following
              way:
              <codeblock>- "option httpchk GET / HTTP/1.1\\r\\nHOST:\\ my.example.com" 
# Note the escaped escape characters.</codeblock>
              In this example, my.example.com is the hostname associated with the Horizon VIP on the
              external API network. However, you aren't restricted to just one allowed host. In
              addition, allowed hosts can contain wildcards (though not in the horizon.yml file;
              there you must have an actual resolvable hostname or a routeable IP address). However,
              for this change to the haproxy healthcheck, it is suggested that the hostname
              associated with the Horizon VIP on the external API network be used. </li>
            <li>Commit the change with a "git commit -a" command. </li>
          </ol>
        </li>
        <li>Edit the template file that will be use for Horizon's local_settings.py configuration
          file <ol id="ol_cvx_f2r_b5">
            <li>While still on your lifecycle manager node, open
              ~/helion/my_cloud/config/horizon/local_settings.py </li>
            <li>Change the line that sets the "ALLOWED_HOSTS" setting. This can be a list of
              hostnames and (V)IPs that eventually get routed to Horizon. Wildcards are supported.
              <codeblock>ALLOWED_HOSTS = ['my.example.com', '*.example.net', '192.168.245.6']</codeblock>
              In the above example, any HTTP request received with a hostname not matching any in
              this list will receive an HTTP 400 reply. </li>
            <li>Commit the change with a "git commit -a" command. </li>
          </ol>
        </li>
        <li>Run the configuration processor
          <codeblock>cd ~/helion/hos/ansible 
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock>
        </li>
        <li>Enable the configuration This can be done in one of a few ways: As part of a site deploy
          play as part of an upgrade play or by re-running the FND-CLU and Horizon deploys on an
          existing deployment: If modifying an existing deploy, the FND-CLU deploy will need to be
          run first, since changing the ALLOWED_HOSTS setting in Horizon first will cause the
          default health check to fail, if it doesn't specify a "Host" header in the HTTP request
          sent to check the health of Horizon's Apache virtual host.
          <codeblock>cd ~/helion/hos/ansible 
ansible-playbook -i hosts/localhost ready-deployment.yml 
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts horizon-deploy.yml 
ansible-playbook -i hosts/verb_hosts FND-CLU-deploy.yml</codeblock>
        </li>
      </ol> References: </section>
    <section>1
      https://www.djangoproject.com/weblog/2013/feb/19/security/#s-issue-host-header-poisoning </section>
    <section>2 https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts </section>
  </body>
</topic>
