<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: ready for edit (Nancy)-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="tlsConfig">
  <title><ph conkeyref="HOS-conrefs/product-title"/>TLS Configuration</title>
  <body>
    <!--not tested-->
    <section><title/>In <keyword keyref="kw-hos-phrase"/>, you can provide your own certificate
      authority and certificates for internal and public virtual IP addresses (VIPs), and you should
      do so for any production cloud. The certificates automatically generated by <keyword
        keyref="kw-hos"/> are useful for testing and setup, but you should always install your own
      for production use. Certificate installation is discussed below.</section>
    <section>
      <p>Please read the following if you're using the default <codeph>cert-name:
          my-public-cert</codeph> in your model.</p>
      <p>The bundled test cert for public endpoints, located at
          <codeph>~/helion/my_cloud/config/tls/certs/my-public-cert</codeph>, is now expired but was
        left in the product in case you changed the content with your valid cert. Please verify if
        the certificate is expired and generate your own by following the guidelines further down on
        this page or by using a generic instruction from the web.</p>
      <p>You can verify the expiry by running this command:
        <codeblock>openssl x509 -in ~/helion/my_cloud/config/tls/certs/my-public-cert -noout -enddate
notAfter=Oct  8 09:01:58 2016 GMT</codeblock></p>
    </section>
    <section>
      <p>Before you begin, the following list of terms will be helpful when generating and
        installing certificates.</p>
      <dl>
        <dlentry>
          <dt>Helion generated public CA</dt>
          <dd>A Helion OpenStack generated public CA (<codeph>helion_frontend_cacert.crt</codeph>)
            is availble for you to use in <codeph>/usr/local/share/ca-certificates</codeph>. </dd>
        </dlentry>
        <dlentry>
          <dt>Fully qualified domain name (FQDN) of the public VIP</dt>
          <dd>The registered domain name. A FQDN is not mandatory. It is perfectly valid to have no
            FQDN and use IP addresses instead. Note that you can use FQDNs on public endpoints, and
            you may change them whenever the need arises.</dd>
        </dlentry>
        <dlentry>
          <dt>Certificate authority (CA) certificate</dt>
          <dd>Your certificates must be signed by a CA, such as your internal IT department or a
            public certificate authority. For this example we will use a self-signed
            certificate.</dd>
        </dlentry>
        <dlentry>
          <dt>Server certificate</dt>
          <dd>It is easy to confuse server certificates and CA certificates. Server certificates
            reside on the server and CA certificates reside on the client. A server certificate
            affirms that the server that sent it serves a set of IP addresses, domain names, and set
            of services. A CA certificate is used by the client to authenticate this claim. </dd>
        </dlentry>
        <dlentry>
          <dt>SAN (subject-alt-name)</dt>
          <dd>The set of IP addresses and domain names in a server certificate request: A template
            for a server certificate. </dd>
        </dlentry>
        <dlentry>
          <dt>Certificate signing request (CSR)</dt>
          <dd>A blob of data generated from a certificate request and sent to a CA, which would then
            sign it, produce a server certificate, and send it back. </dd>
        </dlentry>
        <dlentry>
          <dt>External VIP</dt>
          <dd>External virtual IP address</dd>
        </dlentry>
        <dlentry>
          <dt>Internal VIP</dt>
          <dd>Internal virtual IP address</dd>
        </dlentry>
      </dl>
      <p>The major difference between an external VIP certificate and an internal VIP certificate is
        that the internal VIP has approximately 40 domain names in the SAN. This is because each
        service has a different domain name in <keyword keyref="kw-hos-phrase"/>. So it is
        unlikely that you can create an internal server certificate before running the configuration
        processor. But after a configuration processor run, a certificate request would be created
        for each of your cert-names.</p>
      <!--
        DOCS-3974 Remove old content
        
        <p>All of the <keyword keyref="kw-hos-phrase"/> example cloud models ship with TLS enabled on
        the service API endpoints. Because TLS is enabled by default, a test certificate named
          <codeph>my-public-cert</codeph> is bundled with the release. Having this default
        certificate allows you to bring up a cloud without having to worry about certificates. It
        will not match the IP address of your environment's API endpoints, but you can ignore the
        warnings. Later, in production when you require a trusted certificate, you can add your own
        certificate and redeploy using the instructions below. This is the recommended path.</p>-->
    </section>
    <section>
      <title>Configuring TLS in the input model</title>
      <p>For this example certificate configuration, let's assume there's no FQDN for the external
        VIP and that you're going to use the default IP address provided by <keyword
          keyref="kw-hos-phrase"/>. Let's also assume that for the internal VIP you will use the
        defaults as well. If you were to call your certificate authority "example-CA," the CA
        certificate would then be called "example-CA.crt" and the key would be called
        "example-CA.key." In the following examples, the external VIP certificate will be named
        "example-public-cert" and the internal VIP certificate will be named
        "example-internal-cert."</p><note>Cautions:</note> Any time you make a cert change when
      using your own CA: <ul>
        <li>You should use a distinct name from those already existing in config/tls/cacerts. This
          also means that you should not <i>reuse</i> your CA names (and use unique and
          distinguishable names such as MyCompanyXYZ_PrivateRootCA.crt). A new name is what
          indicates that a file is new or changed, so reusing a name means that the file is not
          considered changed even its contents have changed.</li>
        <li>You should not remove any existing CA files from config/tls/cacerts </li>
        <li>If you want to remove an existing CA you must <ol>
            <li>First remove the file. </li>
            <li>Then run:
              <codeblock>ansible -i hosts/verb_hosts FND-STN -a 'sudo keytool -delete -alias debian:&lt;filename to remove> \
-keystore /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/security/cacerts -storepass changeit'</codeblock></li>
          </ol></li>
      </ul>
      <note type="attention">Be sure to install your own certificate for all production clouds after
        installing and testing your cloud. If you ever want to test or troubleshoot later, you will
        be able to revert to the sample certificate to get back to a stable state for
        testing.</note><note>Unless this is a new deployment, do not update both the certificate and
        the CA together. Add the CA first and then run a site deploy. Then update the certificate
        and run tls-reconfigure, FND-CLU-stop, FND-CLU-start and then hlm-reconfigure. If a playbook
        has failed, rerun it with -vv to get detailed error information. The configure, HAproxy
        restart, and reconfigure steps are included below. If this is a new deployment and you are
        adding your own certs/CA before running site.yml this caveat does not apply.</note>
      <p>You can add your own certificate by following the instructions below. All changes must go
        into the following file:</p>
      <codeblock>~/helion/my_cloud/definition/data/network_groups.yml</codeblock>
      <p>Below are the entries for TLS for the internal and admin load balancers:</p>
      <codeblock>- provider: ip-cluster
        name: lb
        tls-components:
        - default
        components:
        # These services do not currently support TLS so they are not listed 
        # under tls-components
        - nova-metadata
        roles:
        - internal
        - admin
        cert-file: helion-internal-cert
        # The helion-internal-cert is a reserved name and
        # this certificate will be autogenerated. You
        # can bring in your own certificate with a different name
        
        # cert-file: customer-provided-internal-cert
        # replace this with name of file in "config/tls/certs/"</codeblock>The
      configuration processor will also create a request template for each named certificate under
        <codeph>info/cert_reqs/</codeph> This will be of the form:
      <codeblock>info/cert_reqs/customer-provided-internal-cert</codeblock></section>
    <section>These request templates contain the subject <codeph>Alt-names</codeph> that the
      certificates need. You can add to this template before generating your certificate signing
      request .</section>
    <section>You would then send the CSR to your CA to be signed, and once you receive the
      certificate, place it in <codeph>config/tls/certs</codeph>
    </section>
    <section> When you bring in your own certificate, you may want to bring in the trust chains (or
      CA certificate) for this certificate. This is usually not required if the CA is a public
      signer that is typically bundled with the operating system. However, we suggest you include it
      anyway by copying the file into the directory <codeph>config/cacerts/</codeph>.
    </section>
    
    <section id="userProvidedCert">
      <title>User-provided certificates and trust chains</title>
      <p><keyword keyref="kw-hos"/> generates its own internal certificates but is designed to allow
        you to bring in your own certificates for the VIPs. Here is the general process.</p>
      <ol>
        <li>You must have a server certificate and a CA certificate to go with it (unless the signer
          is a public CA and it's already bundled with most distributions). </li>
        <li>You must decide the names of the server certificates and configure the
            <codeph>network_groups.yml</codeph> file in the input model such that each load balancer
          provider has at least one cert-name associated with it. </li>
        <li>Run the configuration processor. Note that you may or may not have the certificate file
          at this point. The configuration processor would create certificate request file artefacts
          under <codeph>info/cert_reqs/</codeph> for each of the cert-name(s) in the
            <codeph>network_groups.yml</codeph> file. While there's no special reason to use the
          request file created for an external endpoint VIP certificate, it is important to use the
          request files created for internal certificates since the canonical names for the internal
          VIP can be many and service specific and each of these need to be in the Subject Alt Names
          attribute of the certificate. </li>
        <li>Create a certificate signing request for this request file and send it to your internal
          CA or a public CA to get it certified and issued with a certificate. You will now have a
          server certificate and possibly a trust chain or CA certificate. </li>
        <li>Next, upload it to the lifecycle manager. Server certificates should be added to
            <codeph>config/tls/certs</codeph> and CA certificates should be added to
            <codeph>config/tls/cacerts</codeph>. The file extension should be <codeph>.crt</codeph>
          for the CA certificate to be processed by <keyword keyref="kw-hos"/>. Detailed steps are
          next.</li>
      </ol>
    </section>
    
    <section>
      <title>Edit the input model to include your certificate files</title>
      <!-- TODO UPGRADE -->
      <!--<note>If you are upgrading and plan to use the <xref href="barbican.dita#barbican">Barbican
          key management service</xref>, there are instructions for configuring Barbican with TLS in
          <xref href="../upgrade/enable_barbican_for_upgrade.dita#barbicanUpgrade">Enabling Barbican
          When Upgrading</xref>.</note>-->Edit
      the load balancer configuration in
        <codeph>helion/my_cloud/definition/data/network_groups.yml</codeph>:
      <codeblock>load-balancers:
 - provider: ip-cluster
 name: lb
 tls-components:
 - default
 components:
 - vertica
 - nova-metadata
 roles:
 - internal
 - admin
 cert-file: example-internal-cert #&lt;&lt;&lt;-------- Certificate name for the internal VIP

- provider: ip-cluster
 name: extlb
 external-name: myhelion.test #&lt;&lt;&lt;------ Use just IP for the external VIP in this example
 tls-components:
 - default
 roles:
 - public
 cert-file: example-public-cert #&lt;&lt;&lt;-------- Certificate name for the external VIP</codeblock>Commit
      your changes to the local git repository and run the configuration processor:
      <codeblock>cd ~/helion/hos/ansible
git add -A
git commit -m "changed VIP certificates"
ansible-playbook -i hosts/localhost config-processor-run.yml</codeblock>Verify
      that certificate requests have been generated by the configuration processor for every
      certificate file configured in the <codeph>networks_groups.yml</codeph> file. In this example,
      there are two files, as shown from the list
      command:<codeblock>ls ~/helion/my_cloud/info/cert_reqs
example-internal-cert 
example-public-cert</codeblock>
    </section>
    <section><title>Generate a self-signed CA</title>
      <note>In a production setting you will not perform this step. You will use your company's CA
        or a valid public CA.</note>
      <p id="self-signed">This section demonstrates to how you can create your own self-signed CA
        and then use this CA to sign server certificates. This CA can be your organization's IT
        internal CA that is self-signed and whose CA certificates are deployed on your
        organization's machines. This way the server certificate becomes legitimate.</p><note>Please
        use a unique CN for your example Certificate Authority and do not install multiple CA
        certificates with the same CN into your cloud.</note>Copy the commands below to the command
      line and execute. This will cause the two files, <codeph>example-CA.key</codeph> and
        <codeph>example-CA.crt</codeph> to be
      created:<codeblock>export EXAMPLE_CA_KEY_FILE='example-CA.key'
export EXAMPLE_CA_CERT_FILE='example-CA.crt'
openssl req -x509 -batch -newkey rsa:2048 -nodes -out "${EXAMPLE_CA_CERT_FILE}" \
-keyout "${EXAMPLE_CA_KEY_FILE}" \
-subj "/C=UK/O=hp/CN=YourOwnUniqueCertAuthorityName" \
-days 365</codeblock>You
      can tweak the subj and days settings above to meet your needs, or to test. For instance, if
      you want to test what happens when a CA expires, you can set 'days' to a very low value. Grab
      the configuration processor-generated request file from
      <codeph>info/cert_reqs/</codeph>:<codeblock>cat ~/helion/my_cloud/info/cert_reqs/example-internal-cert</codeblock>
      Now, copy this file to your working directory and appended a <codeph>.req</codeph> extension
      to it.
      <codeblock>cp ~/helion/my_cloud/info/cert_reqs/example-internal-cert example-internal-cert.req</codeblock>
      Expand the following headline to see a request file: </section>
    <section id="privateMetadata">
      <title outputclass="headerH">Certificate request file</title>
      <sectiondiv outputclass="insideSection">
        <codeblock outputclass="nomaxheight">[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[ req_distinguished_name ]
CN = "helion-vip"

[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = "deployerincloud-ccp-c0-m1-mgmt"
DNS.2 = "deployerincloud-ccp-vip-CEI-API-mgmt"
DNS.3 = "deployerincloud-ccp-vip-CND-API-mgmt"
DNS.4 = "deployerincloud-ccp-vip-DES-API-mgmt"
DNS.5 = "deployerincloud-ccp-vip-FND-MDB-mgmt"
DNS.6 = "deployerincloud-ccp-vip-FND-RMQ-mgmt"
DNS.7 = "deployerincloud-ccp-vip-FND-VDB-mgmt"
DNS.8 = "deployerincloud-ccp-vip-FRE-API-mgmt"
DNS.9 = "deployerincloud-ccp-vip-GLA-API-mgmt"
DNS.10 = "deployerincloud-ccp-vip-GLA-REG-mgmt"
DNS.11 = "deployerincloud-ccp-vip-HEA-ACF-mgmt"
DNS.12 = "deployerincloud-ccp-vip-HEA-ACW-mgmt"
DNS.13 = "deployerincloud-ccp-vip-HEA-API-mgmt"
DNS.14 = "deployerincloud-ccp-vip-HUX-SVC-mgmt"
DNS.15 = "deployerincloud-ccp-vip-HZN-WEB-mgmt"
DNS.16 = "deployerincloud-ccp-vip-KEY-API-mgmt"
DNS.17 = "deployerincloud-ccp-vip-KEYMGR-API-mgmt"
DNS.18 = "deployerincloud-ccp-vip-LOG-API-mgmt"
DNS.19 = "deployerincloud-ccp-vip-LOG-SVR-mgmt"
DNS.20 = "deployerincloud-ccp-vip-MON-API-mgmt"
DNS.21 = "deployerincloud-ccp-vip-NEU-SVR-mgmt"
DNS.22 = "deployerincloud-ccp-vip-NOV-API-mgmt"
DNS.23 = "deployerincloud-ccp-vip-NOV-MTD-mgmt"
DNS.24 = "deployerincloud-ccp-vip-OCT-API-mgmt"
DNS.25 = "deployerincloud-ccp-vip-OPS-WEB-mgmt"
DNS.26 = "deployerincloud-ccp-vip-SHP-API-mgmt"
DNS.27 = "deployerincloud-ccp-vip-SWF-PRX-mgmt"
DNS.28 = "deployerincloud-ccp-vip-admin-CEI-API-mgmt"
DNS.29 = "deployerincloud-ccp-vip-admin-CND-API-mgmt"
DNS.30 = "deployerincloud-ccp-vip-admin-DES-API-mgmt"
DNS.31 = "deployerincloud-ccp-vip-admin-FND-MDB-mgmt"
DNS.32 = "deployerincloud-ccp-vip-admin-FRE-API-mgmt"
DNS.33 = "deployerincloud-ccp-vip-admin-GLA-API-mgmt"
DNS.34 = "deployerincloud-ccp-vip-admin-HEA-ACF-mgmt"
DNS.35 = "deployerincloud-ccp-vip-admin-HEA-ACW-mgmt"
DNS.36 = "deployerincloud-ccp-vip-admin-HEA-API-mgmt"
DNS.37 = "deployerincloud-ccp-vip-admin-HUX-SVC-mgmt"
DNS.38 = "deployerincloud-ccp-vip-admin-HZN-WEB-mgmt"
DNS.39 = "deployerincloud-ccp-vip-admin-KEY-API-mgmt"
DNS.40 = "deployerincloud-ccp-vip-admin-KEYMGR-API-mgmt"
DNS.41 = "deployerincloud-ccp-vip-admin-MON-API-mgmt"
DNS.42 = "deployerincloud-ccp-vip-admin-NEU-SVR-mgmt"
DNS.43 = "deployerincloud-ccp-vip-admin-NOV-API-mgmt"
DNS.44 = "deployerincloud-ccp-vip-admin-OPS-WEB-mgmt"
DNS.45 = "deployerincloud-ccp-vip-admin-SHP-API-mgmt"
DNS.46 = "deployerincloud-ccp-vip-admin-SWF-PRX-mgmt"
DNS.47 = "192.168.245.5"
IP.1 = "192.168.245.5"

=============end of certificate request file.</codeblock>
      </sectiondiv>
    </section>
    <section>
      <note>In the case of a public VIP certificate, please add all the FQDNs you want it to support
        Currently Helion does not add the hostname for the external-name specified in
          <codeph>network_groups.yml</codeph> to the certificate request file <!--(HLM-3872)-->.
        However, you can add it to the certificate request file manually. Here we assume that
          <codeph>myhelion.test</codeph> is your external-name. In that case you would add this line
        (to the full <xref href="#tlsConfig/privateMetadata" format="dita">sample certificate
          request file</xref> that is shown
        above):<codeblock>DNS.48 = "myhelion.test"</codeblock></note>
      <note>Any attempt to use IP addresses rather than FQDNs in certificates must use subject
        alternate name entries that list both the IP address (needed for Google) and DNS with an IP
        (needed for a Python bug workaround). Failure to create the certificates in this manner will
        cause future installations of Go-based tools (such as Cloud Foundry, Stackato and other PaaS
        components) to fail. </note>
    </section>
    <section>
      <title>Generate a certificate signing request</title>
      <p>Now that you have a CA and a certificate request file, it's time to generate a CSR.</p>
      <codeblock>export EXAMPLE_SERVER_KEY_FILE='example-internal-cert.key'
export EXAMPLE_SERVER_CSR_FILE='example-internal-cert.csr'
export EXAMPLE_SERVER_REQ_FILE=example-internal-cert.req
openssl req -newkey rsa:2048 -nodes -keyout "$EXAMPLE_SERVER_KEY_FILE" -out "$EXAMPLE_SERVER_CSR_FILE" -extensions v3_req -config "$EXAMPLE_SERVER_REQ_FILE"</codeblock>
      <p>Note that in production you would usually send the generated
          <codeph>example-internal-cert.csr</codeph> file to your IT department. But in this example
        you are your own CA, so sign and generate a server certificate.</p>
    </section>
    <section><title>Generate a server certificate</title><p>
        <note>In a production setting you will not perform this step. You will send the CSR created
          in the previous section to your company CA or a to a valid public CA and have them sign
          and send you back the certificate.</note>
      </p><p>This section demonstrates how you would use your own self-signed CA that your created
        earlier to sign and generate a server certificate. A server certificate is essentially a
        signed public key, the signer being a CA and trusted by a client. When you install this the
        signing CA's certificate (called CA certificate or trust chain) on the client machine, you
        are telling the client to trust this CA, and thereby implicitly trusting any server
        certificates that are signed by this CA, thus creating a trust anchor.</p><p><b>CA
          configuration file</b></p><p>When the CA signs the certificate, it uses a configuration
        file that tells it to verify the CSR. Note that in a production scenario the CA takes care
        of this for you. </p><p>Create a file called <codeph>openssl.cnf</codeph> and add the
        following contents to it. </p><codeblock outputclass="nomaxheight"># Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#...

# OpenSSL configuration file.
#

# Establish working directory.

dir = .

[ ca ]
default_ca = CA_default

[ CA_default ]
serial = $dir/serial
database = $dir/index.txt
new_certs_dir = $dir/
certificate = $dir/cacert.pem
private_key = $dir/cakey.pem
unique_subject = no
default_crl_days = 365
default_days = 365
default_md = md5
preserve = no
email_in_dn = no
nameopt = default_ca
certopt = default_ca
policy = policy_match
copy_extensions = copy

# NOTE(dprince): stateOrProvinceName must be 'supplied' or 'optional' to
# work around a stateOrProvince printable string UTF8 mismatch on
# RHEL 6 and Fedora 14 (using openssl-1.0.0-4.el6.x86_64 or
# openssl-1.0.0d-1.fc14.x86_64)
[ policy_match ]
countryName = optional
stateOrProvinceName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

[ req ]
default_bits = 1024 # Size of keys
default_keyfile = key.pem # name of generated keys
default_md = md5 # message digest algorithm
string_mask = nombstr # permitted characters
distinguished_name = req_distinguished_name
req_extensions = v3_req
x509_extensions = v3_ca

[ req_distinguished_name ]
# Variable name Prompt string
#---------------------- ----------------------------------
0.organizationName = Organization Name (company)
organizationalUnitName = Organizational Unit Name (department, division)
emailAddress = Email Address
emailAddress_max = 40
localityName = Locality Name (city, district)
stateOrProvinceName = State or Province Name (full name)
countryName = Country Name (2 letter code)
countryName_min = 2
countryName_max = 2
commonName = Common Name (hostname, IP, or your name)
commonName_max = 64

# Default values for the above, for consistency and less typing.
# Variable name Value
#------------------------------ ------------------------------
0.organizationName_default = Hewlett-Packard-Enterprise
localityName_default = Bristol
stateOrProvinceName_default = Bristol
countryName_default = UK

[ v3_ca ]
basicConstraints = CA:TRUE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer:always
subjectAltName = @alt_names

[ v3_req ]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash

[ alt_names ]

######### end of openssl.cnf #########</codeblock>
      <p><b>Sign and create a server certificate</b></p><p>Now you can sign the server certificate
        with your CA. Copy the comands below to the command line and execute. This will cause the
        one file, example-internal-cert.crt, to be created: </p>
      <codeblock>export EXAMPLE_SERVER_CERT_FILE='example-internal-cert.crt'
export EXAMPLE_SERVER_CSR_FILE='example-internal-cert.csr'
export EXAMPLE_CA_KEY_FILE='example-CA.key'
export EXAMPLE_CA_CERT_FILE='example-CA.crt'

touch index.txt
openssl rand -hex -out serial 6

openssl ca -batch -notext -md sha256 -in "$EXAMPLE_SERVER_CSR_FILE" \
-cert "$EXAMPLE_CA_CERT_FILE" \
-keyfile "$EXAMPLE_CA_KEY_FILE" \
-out "$EXAMPLE_SERVER_CERT_FILE" \
-config openssl.cnf -extensions v3_req</codeblock>Finally,
      concatenate both the server key and certificate in preparation for uploading to the lifecycle
      manager.
      <codeblock>cat example-internal-cert.key example-internal-cert.crt > example-internal-cert</codeblock>Note
      that you have only created the internal-cert in this example. Repeat the above sequence for
      example-public-cert. Make sure you use the appropriate certificate request generated by the
      configuration processor. </section>
    <section><title>Upload to the lifecycle manager</title><p>The following two files created from
        the example run above will need to be uploaded to the lifecycle manager and copied into
          <codeph>config/tls</codeph>:</p><ul id="ul_zcc_v1c_5v">
        <li>example-internal-cert</li>
        <li>example-CA.crt</li>
      </ul><p>Once on the lifecycle manager, execute the following two copy commands to copy to
        their respective directories. Note if you had created an external cert, you can copy that in
        a similar manner, specifying its name using the copy command as
        well.</p><codeblock>cp example-internal-cert ~/helion/my_cloud/config/tls/certs/
cp example-CA.crt ~/helion/my_cloud/config/tls/cacerts/</codeblock><b>Continue
        with the deployment</b>
    </section>
    <section>Next, log into the lifecycle manager node, and save and commit the changes to the local
      git repository:
      <codeblock>cd ~/helion/hos/ansible
git add -A
git commit -m "updated certificate and CA"</codeblock>Next,
      rerun the <codeph>config-processor-run</codeph> playbook, and run
        <codeph>ready-deployment.yml</codeph>:<codeblock>cd ~/helion/hos/ansible
ansible-playbook -i hosts/localhost config-processor-run.yml
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>If
      you receive any prompts, enter the required information. <note>For automated installation
        (e.g. CI) you can specify the required passwords on the Ansible command line. For example,
        the command below will disable encryption by the configuration processor:
        <codeblock>ansible-playbook -i hosts/localhost config-processor-run.yml -e encrypt="" -e rekey=""</codeblock></note>
      Run this series of runbooks to complete the
      deployment:<codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts tls-reconfigure.yml
ansible-playbook -i hosts/verb_hosts FND-CLU-stop.yml
ansible-playbook -i hosts/verb_hosts FND-CLU-start.yml
ansible-playbook -i hosts/verb_hosts monasca-stop.yml
ansible-playbook -i hosts/verb_hosts monasca-start.yml
ansible-playbook -i hosts/verb_hosts hlm-reconfigure.yml</codeblock></section>
    <section id="configure_cipher">
      <title>Configuring the cipher suite </title>
      <p>By default, the cipher suite is set to: <codeph>HIGH:!aNULL:!eNULL:!DES:!3DES</codeph>.
        This setting is recommended in the <xref
          href="http://docs.openstack.org/security-guide/secure-communication/introduction-to-ssl-and-tls.html"
          format="html" scope="external">OpenStack documentation site</xref>. You may override this.
        To do so, open <codeph>config/haproxy/defaults.yml</codeph> and edit it. The parameters can
        be found under the <codeph>haproxy_globals</codeph> list.</p>
      <codeblock>- "ssl-default-bind-ciphers HIGH:!aNULL:!eNULL:!DES:!3DES"
- "ssl-default-server-ciphers HIGH:!aNULL:!eNULL:!DES:!3DES"</codeblock>
      <p>Make the changes as needed. It's best to keep the two options identical.</p>
    </section>
    <section><title>Testing</title>You can easily determine if an endpoint is behind TLS. To do so,
      run the following command, which probes a Keystone identity service endpoint that's behind
      TLS:<codeblock>echo | openssl s_client -connect 192.168.245.5:5000 | openssl x509 -fingerprint -noout 
        depth=0 CN = helion-vip
        verify error:num=20:unable to get local issuer certificate
        verify return:1
        depth=0 CN = helion-vip
        verify error:num=27:certificate not trusted
        verify return:1
        depth=0 CN = helion-vip
        verify error:num=21:unable to verify the first certificate
        verify return:1
        DONE
        SHA1 Fingerprint=C6:46:1E:59:C6:11:BF:72:5E:DD:FC:FF:B0:66:A7:A2:CC:32:1C:B8 </codeblock>The
      next command probes a MySQL endpoint that is not behind TLS:
      <codeblock>echo | openssl s_client -connect 192.168.245.5:3306 | openssl x509 -fingerprint -noout 
140448358213264:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:s23_clnt.c:795:
unable to load certificate
140454148159120:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:703:Expecting: TRUSTED CERTIFICATE</codeblock>
    </section>
    <section><title>Verifying that the trust chain is correctly deployed</title>You can determine if
      the trust chain is correctly deployed by running the following commands:
      <codeblock>echo | openssl s_client -connect 192.168.245.9:5000 2>/dev/null | grep code 
Verify return code: 21 (unable to verify the first certificate)
echo | openssl s_client -connect 192.168.245.9:5000 -CAfile /usr/local/share/ca-certificates/helion_frontend_cacert.crt 2>/dev/null | grep code 
Verify return code: 0 (ok) </codeblock>Here,
      the first command produces error 21, which is then fixed by providing the CA certificate file.
      This verifies that the CA certificate matches the server certificate. </section>
    <section><title>Turning TLS on or off</title> You should leave TLS enabled in production.
      However, if you need to disable it for any reason, you must change "tls-components" to
      "components" in <codeph>network_groups.yml</codeph> (as shown earlier) and comment out the
      cert-file. Additionally, if you have a <codeph>network_groups.yml</codeph> file from a
      previous installation, you won't have TLS enabled unless you change "components" to
      "tls-components" in that file. By default, Horizon is configured with TLS in the input model.
      Note that you should not disable TLS in the input model for Horizon as that is a public
      endpoint and is required. Additionally, you should keep all services behind TLS, but using the
      input model file <codeph>network_groups.yml</codeph> you may turn TLS off for a service for
      troubleshooting or debugging. TLS should always be enabled for production environments.<p>If
        you are using an example input model on a clean install, all supported TLS services will be
        enabled before deployment of your cloud. If you want to change this setting later, for
        example, when upgrading, you can change the input model and reconfigure the system. The
        process is as follows:</p>Edit the input model <codeph>network_groups.yml</codeph> file
      appropriately, as described above. Then, commit the changes to the git
      repository:<codeblock>cd ~/helion/hos/ansible/
git add -A
git commit -m "TLS change"</codeblock>Change
      directories again and run the configuration processor and ready deployment playbooks:
      <codeblock>ansible-playbook -i hosts/localhost config-processor-run.yml
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>Change
      directories again and run the reconfigure playbook:
      <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts hlm-reconfigure.yml </codeblock>
    </section>
  </body>
</topic>
