<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: ready for edit (Nancy)-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="troubleshootng_tls">
  <title>Troubleshooting TLS</title>
  <body>
    
    <section>
      <title>Troubleshooting TLS certificate errors when running playbooks with a limit</title>
      
      <p>
        Has the deployer been restarted after the original site installation or is this a new deployer? 
        If so, TLS certificates need to be bootstrapped before a playbook is run with limits. 
        You can do this by running the following command.
      </p>
      
<codeblock>
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts tls-reconfigure.yml --limit TLS-CA
</codeblock>      
      
    </section>
    
<section><title>Certificate Update Failure</title>
  <p>In general, if a certificate update fails it's because of the following: Haproxy
      hasn't restarted or the Trust chain is not installed. This is the certificate of the CA that
      signed the server certificate.</p> 
</section>
    <section><title> Troubleshooting trust chain installation</title>It's important to note that
      while <keyword keyref="kw-hos-phrase"/> allows you to add new trust chains, it would be
      better if you add all the required trust chains during the initial deploy. Trust chain changes
      can impact services. </section>
    <section>However, this does't apply to certificates. There is a certificate-related issue
      whereby haproxy is not restarted if certificate content has been changed but the certificate
      file name remained the same. If you are having issues and you have replaced the content of
      existing CA file with new content, create another CA file with a new name. Also make sure the
      CA file has a .crt extension. </section>
    <section>Do not update both certificate and the CA together. Add the CA first and then run a
      site deploy. Then update the certificate and run tls-reconfigure, FND-CLU-stop, FND-CLU-start
      and then hlm-reconfigure. If you know which playbook failed, rerun it with -vv to get detaled
      error information. The configure, HAproxy restart, and reconfigure steps are included in <xref
        href="tls_config.dita#tlsConfig"/>.</section>
    <section>You can run the following commands to see if client libraries see the CA you've added:
      <codeblock>~/scratch/ansible/next/hos/ansible$ ansible -i hosts/verb_hosts FND-STN -a 'sudo keytool -list -alias \
    debian:username-internal-cacert-001.pem -keystore /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/security/cacerts -storepass changeit'
  padawan-ccp-c0-m1-mgmt | FAILED | rc=1 >>
  sudo: keytool: command not found
  
  padawan-ccp-comp0001-mgmt | FAILED | rc=1 >>
  sudo: keytool: command not found
  
  padawan-ccp-comp0003-mgmt | FAILED | rc=1 >>
  sudo: keytool: command not found
  
  padawan-ccp-comp0002-mgmt | FAILED | rc=1 >>
  sudo: keytool: command not found
  
  padawan-ccp-c1-m1-mgmt | success | rc=0 >>
  debian:username-internal-cacert-001.pem, May 9, 2016, trustedCertEntry, 
  Certificate fingerprint (SHA1): E7:B2:6E:9E:00:FB:86:0F:E5:46:CD:B8:C5:67:13:53:4E:3D:8F:43
  
  padawan-ccp-c1-m2-mgmt | success | rc=0 >>
  debian:username-internal-cacert-001.pem, May 9, 2016, trustedCertEntry, 
  Certificate fingerprint (SHA1): E7:B2:6E:9E:00:FB:86:0F:E5:46:CD:B8:C5:67:13:53:4E:3D:8F:43
  
  padawan-ccp-c1-m3-mgmt | success | rc=0 >>
  debian:username-internal-cacert-001.pem, May 9, 2016, trustedCertEntry, 
  Certificate fingerprint (SHA1): E7:B2:6E:9E:00:FB:86:0F:E5:46:CD:B8:C5:67:13:53:4E:3D:8F:43</codeblock>Java
      client libraries are used by Monasca, so compute nodes will not have them. So the first three
      errors are expected. Check that the fingerprint is correct by checking the
      CA:<codeblock>~/scratch/d002-certs/t002$ openssl x509 -in example-CA.crt -noout -fingerprint
  SHA1 Fingerprint=E7:B2:6E:9E:00:FB:86:0F:E5:46:CD:B8:C5:67:13:53:4E:3D:8F:43</codeblock>If
      they don't match there likely was a name collision. Add the CA cert again with a new file
      name. If you get Monasca errors but find that the fingerprints match, then try stopping and
      starting Monasca.
      <codeblock>ansible-playbook -i hosts/verb_hosts monasca-stop.yml
ansible-playbook -i hosts/verb_hosts monasca-start.yml</codeblock>
    </section>
    <section><title>Troubleshooting certificates</title>Certificates can fail in <keyword
        keyref="kw-hos-phrase"/> due to the following. <ul>
        <li>Trust chain issue. This is dealt with in the previous section </li>
        <li>Wrong certificate: Compare the fingerprints. If they differ, then you have a wrong
          certificate somewhere.</li>
        <li>Date range of the certificate is either in the future or expired: Check the dates and
          change certificates as necessary, observing the naming cautions above.</li>
        <li>TLS handshake fails because the client doesn't support the ciphers the server offers.
          It's possible that you reused a certificate created for a different network model. Make
          sure the request file found under info/cert_req/ are used to create the certificate. If
          not, the service VIP names may not match.</li>
      </ul>
    </section>
  </body>
</topic>
