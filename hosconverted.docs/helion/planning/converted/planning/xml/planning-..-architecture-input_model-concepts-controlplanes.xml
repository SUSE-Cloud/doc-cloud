<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [ <!ENTITY % entities SYSTEM "entities.xml"> %entities; ]><!--Edit status: not edited-->
<section id="concept_controlplanes">
   <title>
      <phrase/>Control Planes</title>
        <para/>
        


    <para>
      <emphasis>A control-plane runs one or more <guilabel>services</guilabel> distributed across
        <guilabel>clusters</guilabel> and <guilabel>resource groups</guilabel>
      </emphasis>.</para>
        
    <para>
      <emphasis>A control-plane uses servers with a particular
        <guilabel>server-role</guilabel>
      </emphasis>.</para>
        
    <para>A <guilabel>control-plane</guilabel> provides the operating environment for a set of
        <guilabel>services</guilabel>; normally consisting of a set of shared services (MySQL,
        RabbitMQ, HA Proxy, Apache, etc), OpenStack control services (API, schedulers, etc) and the
        <guilabel>resources</guilabel> they are managing (compute, storage, etc).</para>
        
    <para>A simple cloud may have a single <guilabel>control-plane</guilabel> which runs all of the
        <guilabel>services</guilabel>. A more complex cloud may have multiple
        <guilabel>control-planes</guilabel> to allow for more than one instance of some services. 
        <!--(Note that 
        <keyword keyref="kw-hos-phrase"/> only supports a single control-plane). -->
        
        <phrase userlevel="INTERNAL">(Note that support for multiple control-planes is a non-core feature in <phrase/> 
        and not covered by the examples).</phrase>
        
        
        Services that need to consume
        (use) another service (such as Neutron consuming MySQL, Nova consuming Neutron) always use
        the service within the same <guilabel>control-plane</guilabel>
      <!-- before looking in any
        related <uicontrol>control-planes</uicontrol>-->.
        In addition a control-plane can describe which services can be consumed from other control-planes.
        It is one of the functions of the
        configuration processor to resolve these relationships and make sure that each
        consumer/service is provided with the configuration details to connect to the appropriate
        provider/service.</para>
        
    <para>Each <guilabel>control-plane</guilabel> is structured as <guilabel>clusters</guilabel>
        and <guilabel>resources</guilabel>. The <guilabel>clusters</guilabel> are typically used
        to host the OpenStack services that manage the cloud such as API servers, database servers,
        Neutron agents, and Swift proxies, while the <guilabel>resources</guilabel> are used to
        host the scale-out OpenStack services such as Nova-Compute or Swift-Object services. This is
        a representation convenience rather than a strict rule, for example it is possible to run
        the Swift-Object service in the management cluster in a smaller-scale cloud that is not
        designed for scale-out object serving.</para>
    <para>A cluster can contain one or more <guilabel>servers</guilabel> and you can have one or
        more <guilabel>clusters</guilabel> depending on the capacity and scalability needs of the
        cloud that you are building. Spreading services across multiple
        <guilabel>clusters</guilabel> provides greater scalability, but it requires a greater
        number of physical servers. A common pattern for a large cloud is to run high data volume
        services such as monitoring and logging in a separate cluster. A cloud with a high object
        storage requirement will typically also run the Swift service in its own cluster.</para>
    <para>Clusters in this context are a mechanism for grouping service components in physical
        servers, but all instances of a component in a <guilabel>control-plane</guilabel> work
        collectively. For example, if HA Proxy is configured to run on multiple clusters within the
        same <guilabel>control-plane</guilabel> then all of those instances will work as a single
        instance of the ha-proxy service.</para>
    <para>Both <guilabel>clusters</guilabel> and <guilabel>resources</guilabel> define the type
        (via a list of <guilabel>server-roles</guilabel>) and number of servers (min and max or
        count) they require.</para>
    <para>The <guilabel>control-plane</guilabel> can also define a list of failure-zones
        (<guilabel>server-groups</guilabel>) from which to allocate servers.</para>

    </section>
