<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: not edited-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="objectstorage_overview">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Object Storage using Swift Overview</title>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section id="about"><title>What is the Object Storage (Swift) Service?</title>
      <p>The <keyword keyref="kw-hos"/> Object Storage using Swift service leverages <tm
          tmtype="reg">OpenStack</tm> Swift which uses software-defined storage (SDS) layered on top
        of industry-standard servers using native storage devices. Swift presents an object
        paradigm, using an underlying set of disk drives. The disk drives are managed by a data
        structure called a "ring" and you can store, retrieve, and delete objects in containers
        using RESTful APIs.</p>
      <p><keyword keyref="kw-hos"/> Object Storage using Swift provides a highly-available,
        resilient, and scalable storage pool for unstructured data. It has a highly-durable
        architecture, with no single point of failure. In addition, <keyword keyref="kw-hos"/>
        includes the concept of cloud models, where the user can modify the cloud input model to
        provide the configuration required for their environment.</p>
    </section>
    <section id="services"><title>Object Storage (Swift) Services</title>
      <p>A Swift system is comprised of a number of services: </p><p>
        <ul>
          <li>Swift-proxy provides the API for all requests to the Swift system.</li>
          <li>Account and container services provide storage management of the accounts and
            containers.</li>
          <li>Object services provide storage management for object storage.</li>
        </ul>
      </p><p>These services can be co-located in a number of ways. The following general pattern
        exists in the example cloud models distributed in <keyword keyref="kw-hos"/>:</p><p>
        <ul>
          <li>The swift-proxy, account, container, and object services run on the same (PACO) node
            type in the control plane. This is used for smaller clouds or where Swift is a minor
            element in a larger cloud. This is the model seen in most of the entry-scale
            models.</li>
          <li>The swift-proxy, account, and container services run on one (PAC) node type in a
            cluster in a control plane and the object services run on another (OBJ) node type in a
            resource pool. This deployment model, known as the Entry-Scale Swift model, is used in
            larger clouds or where a larger Swift system is in use or planned. See <xref
              href="../../architecture/examples/entryscale_swift.dita"/> for more details.</li>
        </ul>
      </p><p>The Swift storage service can be scaled both vertically (nodes with larger or more
        disks) and horizontally (more Swift storage nodes) to handle an increased number of
        simultaneous user connections and provide larger storage space.</p>
    </section>
    <section>
      <p>Swift is configured through a number of YAML files in the HPE Helion implementation of the
        OpenStack Object Storage (Swift) service. For more details on the configuration of the YAML
        files, see <xref
          href="../../planning/objectstorage/swift_input_model.dita#modify_input_model"/>.</p>
    </section>
  </body>
</topic>
