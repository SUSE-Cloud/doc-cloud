<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: not edited--> 
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="manage_swift_perf">
    <title><ph conkeyref="HOS-conrefs/product-title"/>Managing SWIFT Performance</title>
    <shortdesc>In Operations Console you can monitor your Swift cluster to ensure long-term data
        protection as well as sufficient performance.</shortdesc>
    <body>
        
        <p>OpenStack Swift is an object storage solution with a focus on availability. While there
            are various mechanisms inside Swift to protect stored data and ensure a high
            availability, you must still closely monitor your Swift cluster to ensure long-term data
            protection as well as sufficient performance. The best way to manage Swift is to collect
            useful data that will detect possible performance impacts early on.</p>
        
        <p>The new Object Summary Dashboard in Operations Console (Ops Console) provides an overview of your Swift environment. </p>
        
        <note type="attention">If Swift is not installed and configured, you will not be able to access this dashboard. The Swift endpoint must be present in Keystone for the Object Summary to be present in the menu.</note>
        
        <p>In Ops Console's object storage dashboard, you can easily review the following information:</p>
        <ul>
            <li><xref type="section" href="#manage_swift_perf/Ops_Swift_PerfSumm">Performance Summary</xref></li>
            <li><xref type="section" href="#manage_swift_perf/Ops_Swift_Inventory">Inventory Summary</xref></li>
            <li><xref type="section" href="#manage_swift_perf/Ops_Swift_Capacity">Capacity Summary</xref></li>
            <li><xref type="section" href="#manage_swift_perf/Ops_Swift_AlarmSumm">Alarm Summary</xref></li>
        </ul>
<lines>   
</lines>
        <section id="Ops_Swift_PerfSumm">
            <title>Performance Summary</title>
            <p>View a comprehensive summary of current performance values.</p>
            <p>To access the object storage performance dashboard:</p>
            <ol>
                <li>Open Operations Console, either in a browser enter either the URL or Virtual IP
                    connected to Ops Console. <p>For
                        example:</p><codeblock>https://myhelion.test:9095
https://VIP:9095</codeblock></li>
                <li>On the <b>Home</b> screen, click the menu represented by 3 horizontal lines.
                    <image href="../../../media/opsconsole/OpsConsoleBurgerMenu.png"/></li>
                <li>From the menu that slides in on the left side, click <b>Storage</b>, and then <b>Object Storage Summary</b>.</li>
            </ol>  
            <!-- LINKTODO -->
            <!--<p><image href="../../../media/opsconsole/ObjStorageSumm1.png"/></p>-->
                <p>Performance data includes:</p>
            <dl>
              <dlentry>
                  <dt>Healthcheck Latency from Monasca</dt>
                  <dd>This latency is the average time it takes for Swift to respond to a
                        healthcheck, or ping, request. The swiftlm-uptime monitor program reports
                        the value. A large difference between average and maximum may indicate a
                        problem with one node.</dd>
              </dlentry>
                <dlentry>
                    <dt>Operational Latency from Monasca</dt>
                    <dd>Operational latency is the average time it takes for Swift to respond to an upload, download, or object delete request. The swiftlm-uptime monitor program reports the value. A large difference between average and maximum may indicate a problem with one node.</dd>
                </dlentry>
                <dlentry>
                    <dt>Service Availability</dt>
                    <dd>This is the availability over the last 24 hours as a percentage. <ul>
                            <li><b>100%</b> - No outages in the last 24 hours</li>
                            <li><b>50%</b> - Swift was unavailable for a total of 12 hours in the
                                last 24-hour period </li>
                        </ul></dd>
                </dlentry>
                <dlentry>
                    <dt>Graph of Performance Over Time</dt>
                    <dd>Create a visual representation of performance data to see when Swift
                        encountered longer-than-normal response times. <p>To create a graph:</p><ol>
                            <li>Choose the length of time you want to graph in <b>Date Range</b>.
                                This sets the length of time for the x-axis which counts backwards
                                until it reaches the present time. In the example below, 1 day is
                                selected, and so the x axis shows performance starting from 24 hours
                                ago (-24) until the present time.</li>
                            <li>Look at y-axis to understand the range of response times. The first
                                number is the smallest value in the data collected from the backend,
                                and the last number is the longest amount of time it took Swift to
                                respond to a request. In the example below, the shortest time for a
                                response from Swift was 16.1 milliseconds.</li>
                            <li>Look for spikes which represent longer than normal response times.
                                In the example below, Swift experienced long response times 21 hours
                                ago and again 1 hour ago.</li>
                            <li>Look for the latency value at the present time. The line running
                                across the x-axis at 16.1 milliseconds shows you what the response
                                time is currently.</li>
                        </ol></dd>
                </dlentry>
            </dl>
                    <p><image href="../../../media/opsconsole/ObjStorageSumm2.png"/></p>
        </section>
        <lines>   
        </lines>
 <section id="Ops_Swift_Inventory">
        <title>Inventory Summary</title>
            <p>Monitor details about all the Swift resources deployed in your cloud.</p>
     <p>To access the object storage inventory screen:</p>
     <ol>
         <li>Open Operations Console, either in a browser enter either the URL or Virtual IP
             connected to Ops Console. <p>For
                 example:</p><codeblock>https://myhelion.test:9095
https://VIP:9095</codeblock></li>
         <li>On the <b>Home</b> screen, click the menu represented by 3 horizontal lines.
             <image href="../../../media/opsconsole/OpsConsoleBurgerMenu.png"/></li>
         <li>From the menu that slides in on the left side, click <b>Storage</b>, and then <b>Object Storage Summary</b>.</li>
         <li>On the <b>Summary</b> page, click <b>Inventory Summary</b>.</li>
     </ol>  
     <p><image href="../../../media/opsconsole/ObjStorageInventory1.png"/></p>
<p>General Swift metrics are available for the following attributes:</p>
     <ul>
         <li><b>Time to replicate</b>. The average time in seconds it takes all hosts to complete a
                    replication cycle.</li>
         <li><b>Oldest replication</b>. The time in seconds that has elapsed since the object
                    replication process completed its last replication cycle.</li>
         <li><b>Async Pending</b>. This is the number of failed requests to add an entry in the
                    container server's database.There is one async queue per Swift disk, and a cron
                    job queries all Swift servers to calculate the total. When an object is uploaded
                    into Swift, and it is successfully stored, a request is sent to the container
                    server to add a new entry for the object in the database. If the container
                    update fails, the request is stored in what Swift calls an Async Pending
                    Queue.
                <note type="attention">On a public cloud deployment, this value can reach millions. If it continues to grow, it means that the container updates are not keeping up with the requests. It is also normal for it this number to grow if a node hosting the Swift container service is
                    down.</note></li>
         <li><b>Total number of alarms</b>. This number includes all nodes that host Swift services,
                    including proxy, account, container, and object storage services.</li>
         <li><b>Total nodes</b>. This number includes all nodes that host Swift services, including
                    proxy, account, container, and object storage services. The number in the
                    colored box represents the number of alarms in that state. The following colors
                    are used to show the most severe alarm triggered on all nodes: <dl>
                        <dlentry>
                            <dt>Green</dt>
                            <dd>Indicates all alarms are in a known and untriggered state. For
                                example, if there are 5 nodes and they are all known with no alarms,
                                you will see the number 5 in the green box, and a zero in all the
                                other colored boxes..</dd>
                        </dlentry>
                        <dlentry>
                            <dt>Yellow</dt>
                            <dd>Indicates that some low or medium alarms have been triggered but no
                                critical or high alarms. For example, if there are 5 nodes, and
                                there are 3  nodes with untriggered alarms and 2 nodes with medium
                                severity alarms, you will see the number 3 in the green box, the
                                number 2 in the yellow box, and zeros in all the other colored
                                boxes.</dd>
                        </dlentry>
                        <dlentry>
                            <dt>Red</dt>
                            <dd>Indicates at least one critical or high severity alarm has been
                                triggered on a node. For example, if there are 5 nodes, and there
                                are 3  nodes with untriggered alarms, 1 node with a low severity,
                                and 1 node with a critical alarm, you will see the number 3 in the
                                green box, the number 1 in the yellow box, the number 1 in the red
                                box,and a zero in the gray box.</dd>
                        </dlentry>
                        <dlentry>
                            <dt>Gray</dt>
                            <dd>Indicates that all alarms on the nodes are unknown. For example, if
                                there are 5 nodes with no data reported, you will see the number 5
                                in the gray box, and zeros in all the other colored boxes.</dd>
                        </dlentry>
                    </dl></li>
         <li><b>Cluster breakdown of nodes</b>. In the example screen above, the cluster consists of 2 nodes named
                    SWPAC and SWOBJ. Click on a node name to bring up more detailed information about that node.</li>
     </ul>
 </section>
        <lines>   
        </lines>     
<section id="Ops_Swift_Capacity">
     <title>Capacity Summary</title>
<p>Use this screen to view the size of the file system space on all nodes and disk drives assigned to Swift. Also shown is the remaining space available and the total size of all file systems used by Swift. Values are given in megabytes (MB).</p>
    <p>To access the object storage alarm summary screen:</p>
    <ol>
        <li>Open Operations Console, either in a browser enter either the URL or Virtual IP
            connected to Ops Console. <p>For
                example:</p><codeblock>https://myhelion.test:9095
https://VIP:9095</codeblock></li>
        <li>On the <b>Home</b> screen, click the menu represented by 3 horizontal lines.
            <image href="../../../media/opsconsole/OpsConsoleBurgerMenu.png"/></li>
        <li>From the menu that slides in on the left side, click <b>Storage</b>, and then <b>Object Storage Summary</b>.</li>
        <li>On the <b>Summary</b> page, click <b>Alarm Summary</b>.</li>
    </ol>  
    <p><image href="../../../media/opsconsole/ObjStorageCapacity.png"/></p>
    
</section>

<section id="Ops_Swift_AlarmSumm">
        <title>Alarm Summary</title>
      <p>Use this page to quickly see the most recent alarms and triage all alarms related to object storage.</p>
    <p>To access the object storage alarm summary screen:</p>
    <ol>
        <li>Open Operations Console, either in a browser enter either the URL or Virtual IP
            connected to Ops Console. <p>For
                example:</p><codeblock>https://myhelion.test:9095
https://VIP:9095</codeblock></li>
        <li>On the <b>Home</b> screen, click the menu represented by 3 horizontal lines.
            <image href="../../../media/opsconsole/OpsConsoleBurgerMenu.png"/></li>
        <li>From the menu that slides in on the left side, click <b>Storage</b>, and then <b>Object Storage Summary</b>.</li>
        <li>On the <b>Summary</b> page, click <b>Alarm Summary</b>.</li>
    </ol>  
    <p><image href="../../../media/opsconsole/OpsConsoleSwiftAlarmSumm.png"/></p>

        <p>Each row has a checkbox to allow you to select multiple alarms and set the same
            condition on them.</p>
        <p>The <b>State</b> column displays a graphical indicator representing the state of each
            alarm:</p>
        <ul>
            <li>Green square (or green indicator): OK. Good operating state.</li>
            <li>Yellow diamond (or yellow indicator): Warning. Low severity, not requiring
                immediate action.</li>
            <li>Red ball (or red indicator): Alarm. Varying severity levels and must be
                addressed.</li>
            <li>Gray square (or gray indicator): Undetermined.</li>
        </ul>
        <p>The <b>Alarm</b> column identifies the alarm by the name it was given when it was
            originally created. </p>
        <p>The <b>Last Check</b> column displays the date and time the most recent occurrence of
            the alarm.</p>
        <p>The <b>Dimension</b> column describes the components to check in order to clear the
            alarm.</p>
        <p>The <b>Condition</b> column shows the current condition of each alarm. </p>
        <p>The last column, depicted by three dots, reveals an <b>Actions</b> menu that allows
            you to choose:</p>
        <ul>
            <li><uicontrol>View Details</uicontrol>, which opens a separate window that shows
                all the information from the table view and the alarm history. This window also
                allows you set the condition on the alarm to another condition. Note, the
                condition the alarm is currently set to is not selectable, as indicated by the
                grayed-out button. </li>
            <li><uicontrol>Set Condition</uicontrol>, which opens a separate window that allows
                you to directly apply a condition (<i>Open</i>, <i>Acknowledged</i>, or
                <i>Resolved</i>) to that alarm, which can be used for tracking and sorting
                purposes.</li>
        </ul>


</section>      
    </body>  
</topic>
