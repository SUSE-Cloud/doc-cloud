<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: Edited (Michael)-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_qmz_fg3_btx">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Configuring the Identity Service</title>
  <body>
    <!--not tested-->
    <p conkeyref="HOS-conrefs/applies-to"/>

    <section>
      <title>What is the Identity service?</title>
      <p><?oxy_comment_start author="mwelch" timestamp="20160821T211149-0700" comment="Following item not found. A lot (all?) cross-references also seem to be not found."?>The<?oxy_comment_end?>
        <keyword keyref="kw-hos"/> Identity service, based on the OpenStack Keystone API, provides
        UserID authentication and access authorization to help organizations achieve their access
        security and compliance objectives and successfully deploy OpenStack. In short, the Identity
        service is the gateway to the rest of the OpenStack services. </p>
      <p>The identity service  is installed automatically by the lifecycle manager (just after MySQL
        and RabbitMQ). When your cloud is up and running, you can customize Keystone in a number of
        ways, including integrating with LDAP servers. This topic describes the default
        configuration. See <xref href="identity_reconfigure.dita#topic_m43_2j3_bt"/> for changes you
        can implement. Also see <xref href="identity_ldap.dita#ldap"/> for information on
        integrating with an LDAP provider.</p>
    </section>


    <section id="version"><title>Which version of the Keystone Identity service should you
        use?</title>
      <p>Note that you should use identity API version 3.0. Identity API v2.0 was has been
        deprecated. Many features such as LDAP integration and fine-grained access control won't
        work with v2.0. The following are a few questions you may have regarding versions.</p>
      <p><b>Why does the Keystone identity catalog still show version 2.0?</b></p>
      <p>Tempest tests still use the v2.0 API. They are in the process of migrating to v3.0. We will
        remove the v2.0 version once tempest has migrated the tests. The Identity catalog has
        version 2.0 just to support tempest migration.</p>
      <p><b>Will the Keystone identity v3.0 API work if the identity catalog has only the v2.0
          endpoint?</b></p>
      <p>Identity v3.0 doesn't rely on the content of the catalog. It will continue to work
        regardless of the version of the API in the catalog.</p>
      <p><b>Which CLI client should you use?</b></p>
      <p>You should use the OpenStack CLI, not the Keystone CLI, because it is deprecated. The
        Keystone CLI does not support the v3.0 API; only the OpenStack CLI supports the v3.0
        API.</p>
    </section>
    <section id="authentication">
      <title>Authentication</title>
      <p>The authentication function provides the initial login function to OpenStack. Keystone
        supports multiple sources of authentication, including a native or built-in authentication
        system. You can use the Keystone native system for all user management functions for
        proof-of-concept deployments or small deployments not requiring integration with a corporate
        authentication system, but it lacks some of the advanced functions usually found in user
        management systems such as forcing password changes. The focus of the Keystone native
        authentication system is to be the source of authentication for OpenStack-specific users
        required to operate various OpenStack services. These users are stored by Keystone in a
        default domain; the addition of these IDs to an external authentication system is not
        required.</p>
      <p>Keystone is more commonly integrated with external authentication systems such as OpenLDAP
        or Microsoft Active Directory. These systems are usually centrally deployed by organizations
        to serve as the single source of user management and authentication for all in-house
        deployed applications and systems requiring user authentication. In addition to LDAP and
        Microsoft Active Directory, support for integration with Security Assertion Markup Language
        (SAML)-based identity providers from companies such as Ping, CA, IBM, Oracle, and others is
        also nearly "production-ready." </p>
      <p>Keystone also provides architectural support through the underlying Apache deployment for
        other types of authentication systems, such as multi-factor authentication. These types of
        systems typically require driver support and integration from the respective providers. </p>
      <p><note> While support for Identity providers and multi-factor authentication is available in
          Keystone, it has not yet been certified by the <keyword keyref="kw-hos"/> engineering team
          and is an experimental feature in <keyword keyref="kw-hos"/>.</note></p>
      <p>LDAP-compatible directories such as OpenLDAP and Microsoft Active Directory are recommended
        alternatives to using Keystone local authentication. Both methods are widely used by
        organizations and are integrated with a variety of other enterprise applications. These
        directories act as the single source of user information within an organization. You can
        configure Keystone to authenticate against an LDAP-compatible directory on a per-domain
        basis. </p>
      <p>Domains, explained in the <xref href="../../understanding_identity.dita">Domains, Projects,
          Users, Groups, and Roles</xref> topic, can be configured so that, based on the user ID, an
        incoming user is automatically mapped to a specific domain. You can then configure this
        domain to authenticate against a specific LDAP directory. User credentials provided by the
        user to Keystone are passed along to the designated LDAP source for authentication. You can
        optionally configure this communication to be secure through SSL encryption. No special LDAP
        administrative access is required, and only read-only access is needed for this
        configuration. Keystone will not add any LDAP information. All user additions, deletions,
        and modifications are performed by the application's front end in the LDAP directories.
        After a user has been successfully authenticated, that user is then assigned to the groups,
        roles, and projects defined by the Keystone domain or project administrators. This
        information is stored in the Keystone service database.</p>
      <p>Another form of external authentication provided by the Keystone service is through
        integration with SAML-based identity providers (IdP) such as Ping Identity, IBM Tivoli, and
        Microsoft Active Directory Federation Server. A SAML-based identity provider provides
        authentication that is often called "single sign-on." The IdP server is configured to
        authenticate against identity sources such as Active Directory and provides a single
        authentication API against multiple types of downstream identity sources. This means that an
        organization could have multiple identity storage sources but a single authentication
        source. In addition, if a user has logged into one such source during a defined session time
        frame, that user does not need to reauthenticate within the defined session. Instead, the
        IdP automatically validates the user to requesting applications and services. </p>
      <p>A SAML-based IdP authentication source is configured with Keystone on a per-domain basis
        similar to the manner in which native LDAP directories are configured. Extra mapping rules
        are required in the configuration that define which Keystone group an incoming
        <?oxy_comment_start author="mwelch" timestamp="20160821T220525-0700" comment="First use of this term in this topic. Should it be spelled out or expained?"?>UID<?oxy_comment_end?>
        is automatically assigned to. This means that groups need to be defined in Keystone first,
        but it also removes the requirement that a domain or project administrator assign user roles
        and project membership on a per-user basis. Instead, groups are used to define project
        membership and roles and incoming users are automatically mapped to Keystone groups based on
        their upstream group membership. This strategy provides a consistent role-based access
        control (RBAC) model based on the upstream identity source. The configuration of this option
        is fairly straightforward. IdP vendors such as Ping and IBM are contributing to the
        maintenance of this function and have also produced their own integration documentation. HPE
        is using the Microsoft Active Directory Federation Services (ADFS) for functional testing
        and future documentation.
        <!--Horizon support for web single sign-on is also now available in the OpenStack
        Kilo release but not yet validated for <keyword keyref="kw-hos"/>.--></p>
      <p>The third Keystone-supported authentication source is known as multi-factor authentication
        (MFA). MFA typically requires an external source of authentication beyond a login name and
        password, and can include options such as SMS text, a temporal token generator, or a
        fingerprint scanner. Each of these types of MFAs are usually specific to a particular MFA
        vendor. The Keystone architecture supports an MFA-based authentication system, but this has
        not yet been certified or documented for <keyword keyref="kw-hos"/>.</p></section>
    <section id="authorization">
      <title>Authorization</title>
      <p>Another major function provided by the Keystone service is access authorization that
        determines which resources and actions are available based on the UserID, the role of the
        user, and the projects that a user is provided access to. All of this information is
        created, managed, and stored by Keystone. These functions are applied through the Horizon
        web interface, the OpenStack Command Line Interface (CLI), or the direct Keystone API. </p><p>Keystone provides support for organizing users by using three entities:</p>
      <dl>
        <dlentry>
          <dt>Domains</dt>
          <dd>Domains provide the highest level of organization. Domains are intended to be used as
            high-level containers for multiple projects. A domain can represent different tenants,
            companies, or organizations for an OpenStack cloud deployed for public cloud deployments
            or it can represent major business units, functions, or any other type of top-level
            organization unit in an OpenStack private cloud deployment. Each domain has at least one
            Domain Admin assigned to it. This Domain Admin can then create multiple projects within
            the domain and assign the project administrator role to specific project owners. Each
            domain created in an OpenStack deployment is unique and the projects assigned to a
            domain cannot exist in another domain.</dd>
        </dlentry>
        <dlentry>
          <dt>Projects</dt>
          <dd>Projects are entities within a domain that represent groups of users, each user role
            within that project, and how many underlying infrastructure resources can be consumed by
            members of the project.</dd>
        </dlentry>
        <dlentry>
          <dt>Groups</dt>
          <dd>Groups are an optional function and provide the means of assigning project roles to
            multiple users at once.</dd>
        </dlentry>
      </dl>
      <p>Keystone also makes it possible to create and assign roles to groups of users or individual
        users. Role names are created and user assignments are made within Keystone. The actual
        function of a role is defined currently for each OpenStack service via scripts. When users
        request access to an OpenStack service, their access tokens contain information about their
        assigned project membership and role for that project. This role is then matched to the
        service-specific script and users are allowed to perform functions within that service
        defined by the role mapping.</p>
    </section>


    <section id="settings"><title>Default settings</title>
      <p><b>Identity service configuration settings</b></p>
      <p>The identity service configuration options are described in the OpenStack documentation on
        the <xref
          href="http://docs.openstack.org/liberty/config-reference/content/keystone-configuration-file.html"
          format="html" scope="external">Identity service configuration file (for Liberty)
          page</xref> on the OpenStack site.</p>
      <p><b>Default domain and service accounts</b></p>
      <p>The "default" domain is automatically created during the installation to contain the
        various required OpenStack service accounts, including the following:</p><ul
        id="ul_tzb_lpd_bt">
        <li>neutron</li>
        <li>glance</li>
        <li>swift-monitor</li>
        <li>ceilometer</li>
        <li>swift</li>
        <li>monasca-agent</li>
        <li>glance-swift</li>
        <li>swift-demo</li>
        <li>nova</li>
        <li>monascal</li>
        <li>logging</li>
        <li>demo </li>
        <li>heat</li>
        <li>cinder</li>
        <li>admin</li>
      </ul>
      <p>These are required accounts and are used by the underlying OpenStack services. These
        accounts should not be removed or reassigned to a different domain. These "default" domain
        should be used only for these service accounts.</p>
      <p>For details on how to create additional users, <?oxy_comment_start author="mwelch" timestamp="20160822T180132-0700" comment="File not found."?>see<?oxy_comment_end?>
        <xref href="../../cloudadmin_cli.dita"/>.</p>
    </section>
    <section>
      <title>Preinstalled roles</title>
      <p>The following are the preinstalled roles. You can create additional roles by UIDs with the
        "admin" role. Roles are defined on a per-service basis (more information is available at
          <xref
          href="http://docs.openstack.org/user-guide-admin/manage_projects_users_and_roles.html"
          format="html" scope="external">Manage projects, users, and roles</xref> on the OpenStack
        website).</p>
      <table frame="all" rowsep="1" colsep="1" id="table_nxh_mhq_4v">
        <tgroup cols="2">
          <colspec colname="c1" colnum="1"/>
          <colspec colname="c2" colnum="2"/>
          <thead>
            <row>
              <entry>Role</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>admin</entry>
              <entry>The "superuser" role. Provides full access to all <keyword keyref="kw-hos"/> services
                across all domains and projects. This role should be given only to a cloud
                administrator.</entry>
            </row>
            <row>
              <entry>_member_</entry>
              <entry>A general role that enables a user to access resources within an assigned
                project including creating, modifying, and deleting compute, storage, and network
                resources.</entry>
            </row>
          </tbody>
        </tgroup>
      </table> You can find additional information on these roles in each service policy stored in
        the<codeph> /etc/PROJECT/policy.json</codeph> files where PROJECT is a placeholder for an
      OpenStack service. For example, the Compute (Nova) service roles are stored in the
        <codeph>/etc/nova/policy.json</codeph> file. Each service policy file defines the specific
      API functions available to a role label. </section>


  </body>
</topic>
