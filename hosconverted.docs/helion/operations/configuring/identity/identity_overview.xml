<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: ready for edit (Nancy)-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_ugs_fnd_bt">
  <title><ph conkeyref="HOS-conrefs/product-title"/>The Identity Service</title>
  <body><!--not tested-->
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section id="intro">This topic explains the purpose and mechanisms of the identity service.</section>
      <section>
      <title>What is the Identity service?</title>
      <p>The <keyword keyref="kw-hos"/> Identity service, based on the OpenStack Keystone API, is
        responsible for providing UserID authentication and access authorization to enable
        organizations to achieve their access security and compliance objectives and successfully
        deploy OpenStack. In short, the Identity Service is the gateway to the rest of the OpenStack
        services. </p>
    </section>
    <section id="version"><title>Which version of the Keystone Identity service should you
        use?</title>
      <p>Note that you should use identity API version 3.0. Identity API v2.0 was deprecated more
        than a year ago. Many features such as LDAP integration and fine-grained access control
        won't work with v2.0. Below are a few more questions you may have regarding versions.</p>
      <p><b>Why does the Keystone identity catalog still show version 2.0?</b></p>
      <p>Tempest tests still use the v2.0 API. They are in the process of migrating to v3.0. We will
        remove the v2.0 version once tempest has migrated the tests. The Identity catalog has v2.0
        version just to support tempest migration.</p>
      <p><b>Will the Keystone identity v3.0 API work if the identity catalog has only the v2.0
          endpoint?</b></p>
      <p>Identity v3.0 doesn't rely on the content of the catalog. It will continue to work
        regardless of the version of the API in the catalog.</p>
      <p><b>Which CLI client should you use?</b></p>
      <p>You should use the OpenStack CLI, not the Keystone CLI as it is deprecated. The Keystone
        CLI doesn't support v3.0 API; only the OpenStack CLI supports the v3.0 API.</p>
    </section>
    <section id="authentication">
      <title>Authentication</title>
      <p>The authentication function provides the initial login function to OpenStack. Keystone
        supports multiple sources of authentication, including a native or built-in authentication
        system. The Keystone native system can be used for all user management functions for proof
        of concept deployments or small deployments not requiring integration with a corporate
        authentication system, but it lacks some of the advanced functions usually found in user
        management systems such as forcing password changes. The focus of the Keystone native
        authentication system is to be the source of authentication for OpenStack-specific users
        required for the operation of the various OpenStack services. These users are stored by
        Keystone in a default domain; the addition of these IDs to an external authentication system
        is not required.</p>
      <p>Keystone is more commonly integrated with external authentication systems such as OpenLDAP
        or Microsoft Active Directory. These systems are usually centrally deployed by organizations
        to serve as the single source of user management and authentication for all in-house
        deployed applications and systems requiring user authentication. In addition to LDAP and
        Microsoft Active Directory, support for integration with Security Assertion Markup Language
        (SAML)-based identity providers from companies such as Ping, CA, IBM, Oracle, and others is
        also nearly "production-ready". </p>
      <p>Keystone also provides architectural support via the underlying Apache deployment for other
        types of authentication systems such as Multi-Factor Authentication. These types of systems
        typically require driver support and integration from the respective provider vendors. </p>
      <p><note> While support for Identity Providers and Multi-factor authentication is available in
          Keystone, it has not yet been certified by the <keyword keyref="kw-hos"/> engineering team
          and is an experimental feature in <keyword keyref="kw-hos"/>.</note></p>
      <p>LDAP-compatible directories such as OpenLDAP and Microsoft Active Directory are recommended
        alternatives to using the Keystone local authentication. Both methods are widely used by
        organizations and are integrated with a variety of other enterprise applications. These
        directories act as the single source of user information within an organization. Keystone
        can be configured to authenticate against an LDAP-compatible directory on a per-domain
        basis. </p>
      <p>Domains, explained in the <xref href="../../understanding_identity.dita">Domains, Projects, Users,
          Groups, and Roles</xref> topic, can be configured so that based on the user ID, a incoming
        user is automatically mapped to a specific domain. This domain can then be configured to
        authenticate against a specific LDAP directory. The user credentials provided by the user to
        Keystone are passed along to the designated LDAP source for authentication. This
        communication can be optionally configured to be secure via SSL encryption. No special LDAP
        administrative access is required, and only read-only access is needed for this
        configuration. Keystone will not add any LDAP information. All user additions, deletions,
        and modifications are performed by the application's front end in the LDAP directories.
        After a user has been successfully authenticated, he is then assigned to the groups, roles,
        and projects defined by the Keystone domain or project administrators. This information is
        stored within the Keystone service database.</p>
      <p>Another form of external authentication provided by the Keystone service is via integration
        with SAML-based Identity Providers (IdP) such as Ping Identity, IBM Tivoli, and Microsoft
        Active Directory Federation Server. A SAML-based identity provider provides authentication
        that is often called "single sign-on". The IdP server is configured to authenticate against
        identity sources such as Active Directory and provides a single authentication API against
        multiple types of downstream identity sources. This means that an organization could have
        multiple identity storage sources but a single authentication source. In addition, if a user
        has logged into one such source during a defined session time frame, they do not need to
        re-authenticate within the defined session. Instead, the IdP will automatically validate the
        user to requesting applications and services. </p>
      <p>A SAML-based IdP authentication source is configured with Keystone on a per-domain basis
        similar to the manner in which native LDAP directories are configured. Extra mapping rules
        are required in the configuration that define which Keystone group an incoming UID is
        automatically assigned to. This means that groups need to be defined in Keystone first, but
        it also removes the requirement that a domain or project admin assign user roles and project
        membership on a per-user basis. Instead, groups are used to define project membership and
        roles and incoming users are automatically mapped to Keystone groups based on their upstream
        group membership. This provides a very consistent role-based access control (RBAC) model
        based on the upstream identity source. The configuration of this option is fairly
        straightforward. IdP vendors such as Ping and IBM are contributing to the maintenance of
        this function and have also produced their own integration documentation. HPE is using the
        Microsoft Active Directory Federation Services (ADFS) for functional testing and future
        documentation.
        <!--Horizon support for web single sign-on is also now available in the OpenStack
        Kilo release but not yet validated for <keyword keyref="kw-hos"/>.--></p>
      <p>The third Keystone-supported authentication source is known as Multi-Factor Authentication
        (MFA). MFA typically requires an external source of authentication beyond a login name and
        password, and can include options such as SMS text, a temporal token generator, a
        fingerprint scanner, etc. Each of these types of MFA are usually specific to a particular
        MFA vendor. The Keystone architecture supports an MFA-based authentication system, but this
        has not yet been certified or documented for <keyword keyref="kw-hos"/>.</p></section>
    <section id="authorization">
      <title>Authorization</title>
      <p>The second major function provided by the Keystone service is access authorization that
        determines what resources and actions are available based on the UserID, the role of the
        user, and the projects that a user is provided access to. All of this information is
        created, managed, and stored by Keystone. These functions are applied via the Horizon web
        interface, the OpenStack Command Line Interface (CLI), or the direct Keystone API.
        </p><p>Keystone provides support for organizing users via three entities including:</p>
      <dl>
        <dlentry>
          <dt>Domains</dt>
          <dd>Domains provide the highest level of organization. Domains are intended to be used as
            high-level containers for multiple projects. A domain can represent different tenants,
            companies or organizations for an OpenStack cloud deployed for public cloud deployments
            or represent major business units, functions, or any other type of top-level
            organization unit in an OpenStack private cloud deployment. Each domain has at least one
            Domain Admin assigned to it. This Domain Admin can then create multiple projects within
            the domain and assign the project admin role to specific project owners. Each domain
            created in an OpenStack deployment is unique and the projects assigned to a domain
            cannot exist in another domain.</dd>
        </dlentry>
        <dlentry>
          <dt>Projects</dt>
          <dd>Projects are entities within a domain that represent groups of users, each user role
            within that project, and how many underlying infrastructure resources can be consumed by
            members of the project.</dd>
        </dlentry>
        <dlentry>
          <dt>Groups</dt>
          <dd>Groups are an optional function and provide the means of assigning project roles to
            multiple users at once.</dd>
        </dlentry>
      </dl>
      <p>Keystone also provides the means to create and assign roles to groups of users or
        individual users. The role names are created and user assignments are made within Keystone.
        The actual function of a role is defined currently per each OpenStack service via scripts.
        When a user requests access to an OpenStack service, his access token contains information
        about his assigned project membership and role for that project. This role is then matched
        to the service-specific script and the user is allowed to perform functions within that
        service defined by the role mapping.</p>
    </section>
  </body>
</topic>
