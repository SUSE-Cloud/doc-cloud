<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="ldap">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Integrating LDAP with the Identity
    Service</title>
  <body>
    <p conkeyref="HOS-conrefs/applies-to"/>
    <section><title>Integrating with an external LDAP server</title>
      <p/><p>The Keystone identity service provides two primary functions: user authentication and
        access authorization. The user authentication function validates a user's identity. Keystone
        has a very basic user management system that can be used to create and manage user login and
        password credentials but this system is intended only for proof of concept deployments due
        to the very limited password control functions. The internal identity service user
        management system is also commonly used to store and authenticate OpenStack-specific service
        account information.</p><p>The recommended source of authentication is external user
        management systems such as LDAP directory services. The identity service can be configured
        to connect to and use external systems as the source of user authentication. The identity
        service domain construct is used to define different authentication sources based on domain
        membership. For example, cloud deployment could consist of as few as two domains:</p>
      <ul id="ul_msq_q3h_4v">
        <li>The default domain that is pre-configured for the service account users that are
          authenticated directly against the identity service internal user management system</li>
        <li>A customer-defined domain that contains all user projects and membership definitions.
          This domain can then be configured to use an external LDAP directory such as Microsoft
          Active Directory as the authentication source.</li>
      </ul><p><keyword keyref="kw-hos"/> can support multiple domains for deployments that support
        multiple tenants. Multiple domains can be created with each domain configured to either the
        same or different external authentication sources. This deployment model is known as a
        "per-domain" model.</p><p>There are currently two ways to configure "per-domain"
        authentication sources:</p><ul id="ul_nsq_q3h_4v">
        <li>File store – each domain configuration is created and stored in separate text files.
          This is the older and current default method for defining domain configurations. </li>
        <li>Database store – each domain configuration can be created using either the identity
          service manager utility (recommenced) or a <xref
            href="http://developer.openstack.org/api-ref-identity-v3.html#domains-config-v3"
            format="html" scope="external">Domain Admin API</xref> (from OpenStack.org), and the
          results are stored in the identity service MySQL database. This database store is a new
          method introduced in the OpenStack Kilo release and now available in <keyword
            keyref="kw-hos-phrase-30"/>.</li>
      </ul><p>Instructions for initially creating per-domain configuration files and then migrating
        to the Database store method via the identity service manager utility are provided as
        follows.</p>
      
      <note type="important">We do not support enabling LDAP connection pool (i.e. use_pool: True)
        due to an upstream bug. The <b>use_pool</b> parameter must be present and must set to
          <b>False</b>.</note>
      
      <p id="filestore"><b>Set up domain-specific driver configuration - file store </b></p> To
      update configuration to a specific LDAP domain: <ol>
        <li> Ensure that the following configuration options are in the main configuration file
          template: /home/stack/helion/my_cloud/config/keystone/keystone.conf.j2
          <codeblock>[identity]
          domain_specific_drivers_enabled = True
          domain_configurations_from_database = False</codeblock>
        </li>
        <li>Create a YAML file that contains the definition of the LDAP server connection. The
          sample file below is already provided as part of the lifecycle manager in the <xref
            href="../../../installation/using_git.dita#using_git">local git repository</xref>. It is
          available on the lifecycle manager in the following file:
            <codeblock>/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_sample.yml</codeblock><p>Save
            a copy of this file with a new name, for example:</p>
          <codeblock>/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_my.yml</codeblock>
          <note>Please refer to the [ldap] section of the <xref
              href="http://docs.openstack.org/liberty/config-reference/content/keystone-configuration-file.html"
              scope="external" format="html">Keystone</xref> documentation for OpenStack Newton for
            the full option list and description.</note>
          <p>Below are samples of YAML configurations for identity service LDAP certificate
            settings, optimized for Microsoft Active Directory server.
          </p>
          <p>Sample YAML configuration keystone_configure_ldap_my.yml</p>
          <p>
            <codeblock outputclass="nomaxheight" id="ldapcert">---
keystone_domainldap_conf:
 
    # CA certificates file content.
    # Certificates are stored in Base64 PEM format. This may be entire LDAP server
    # certificate (in case of self-signed certificates), certificate of authority 
    # which issued LDAP server certificate, or a full certificate chain (Root CA
    # certificate, intermediate CA certificate(s), issuer certificate).
    #
    cert_settings:
      cacert: |
        -----BEGIN CERTIFICATE-----
 
        certificate appears here
 
        -----END CERTIFICATE-----
 
    # A domain will be created in MySQL with this name, and associated with ldap back end.
    # Installer will also generate a config file named /etc/keystone/domains/keystone.&lt;domain_name>.conf
    #
    domain_settings:
      name: ad
      description: Dedicated domain for ad users
 
    conf_settings:
      identity:
         driver: ldap
 
 
      # For a full list and description of ldap configuration options, please refer to
      # https://github.com/openstack/keystone/blob/master/etc/keystone.conf.sample or
      # http://docs.openstack.org/liberty/config-reference/content/keystone-configuration-file.html.
      #
      # Please note:
      #  1. LDAP configuration is read-only. Configuration which performs write operations (i.e. creates users, groups, etc)
      #     is not supported at the moment.
      #  2. LDAP is only supported for identity operations (reading users and groups from LDAP). Assignment
      #     operations with LDAP (i.e. managing roles, projects) are not supported.
      #  3. LDAP is configured as non-default domain. Configuring LDAP as a default domain is not supported.
      #
      ldap:
        url: ldap://ad.hpe.net
        suffix: DC=hpe,DC=net
        query_scope: sub
        user_tree_dn: CN=Users,DC=hpe,DC=net
        user : CN=admin,CN=Users,DC=hpe,DC=net
        password: REDACTED
        user_objectclass: user
        user_id_attribute: cn
        user_name_attribute: cn
        group_tree_dn: CN=Users,DC=hpe,DC=net
        group_objectclass: group
        group_id_attribute: cn
        group_name_attribute: cn
        use_pool: True
        user_enabled_attribute: userAccountControl
        user_enabled_mask: 2
        user_enabled_default: 512
        use_tls: True
        tls_req_cert: demand
        # if you are configuring multiple LDAP domains, and LDAP server certificates are issued
        # by different authorities, make sure that you place certs for all the LDAP backend domains in the 
        # cacert parameter as seen in this sample yml file so that all the certs are combined in a single CA file 
        # and every LDAP domain configuration points to the combined CA file. 
        # Note: 
        # 1. Please be advised that every time a new ldap domain is configured, the single CA file gets overwritten 
        # and hence ensure that you place certs for all the LDAP backend domains in the cacert parameter.
        # 2. There is a known issue on one cert per CA file per domain when the system processes 
        # concurrent requests to multiple LDAP domains. Using the single CA file with all certs combined 
        # shall get the system working properly*.
        
        tls_cacertfile: /etc/keystone/ssl/certs/all_ldapdomains_ca.pem
        
        # The issue is in the underlying SSL library. Upstream is not investing in python-ldap package anymore. 
        # It is also not python3 compliant.  </codeblock>
          </p>

          <p>
            <codeblock>keystone_domain_MSAD_conf:
              
    # CA certificates file content.
    # Certificates are stored in Base64 PEM format. This may be entire LDAP server
    # certificate (in case of self-signed certificates), certificate of authority 
    # which issued LDAP server certificate, or a full certificate chain (Root CA
    # certificate, intermediate CA certificate(s), issuer certificate).
    #
    cert_settings:
      cacert: |
        -----BEGIN CERTIFICATE-----
              
        certificate appears here
              
        -----END CERTIFICATE-----
              
    # A domain will be created in MySQL with this name, and associated with ldap back end.
    # Installer will also generate a config file named /etc/keystone/domains/keystone.&lt;domain_name&gt;.conf
    #
        domain_settings:
          name: msad
          description: Dedicated domain for msad users
                
        conf_settings:
          identity:
            driver: ldap
                
    # For a full list and description of ldap configuration options, please refer to
    # https://github.com/openstack/keystone/blob/master/etc/keystone.conf.sample or
    # http://docs.openstack.org/liberty/config-reference/content/keystone-configuration-file.html.
    #
    # Please note:
    #  1. LDAP configuration is read-only. Configuration which performs write operations (i.e. creates users, groups, etc)
    #     is not supported at the moment.
    #  2. LDAP is only supported for identity operations (reading users and groups from LDAP). Assignment
    #     operations with LDAP (i.e. managing roles, projects) are not supported.
    #  3. LDAP is configured as non-default domain. Configuring LDAP as a default domain is not supported.
    #
    ldap:
      # If the url parameter is set to ldap then typically use_tls should be set to True. If
      # url is set to ldaps, then use_tls should be set to False
      url: ldaps://10.16.22.5
      use_tls: False
      query_scope: sub
      user_tree_dn: DC=l3,DC=local
      # this is the user and password for the account that has access to the AD server
      user: administrator@l3.local
      password: OpenStack123
      user_objectclass: user
      # For a default Active Directory schema this is where to find the user name, openldap uses a different value
      user_id_attribute: userPrincipalName
      user_name_attribute: sAMAccountName
      group_tree_dn: DC=l3,DC=local
      group_objectclass: group
      group_id_attribute: cn
      group_name_attribute: cn
      # An upstream defect requires use_pool to be set false
      use_pool: False
      user_enabled_attribute: userAccountControl
      user_enabled_mask: 2
      user_enabled_default: 512
      tls_req_cert: allow
      # Referals may contain urls that can't be resolved and will cause timeouts, ignore them
      chase_referrals: False
      # if you are configuring multiple LDAP domains, and LDAP server certificates are issued
      # by different authorities, make sure that you place certs for all the LDAP backend domains in the
      # cacert parameter as seen in this sample yml file so that all the certs are combined in a single CA file
      # and every LDAP domain configuration points to the combined CA file.
      # Note:
      # 1. Please be advised that every time a new ldap domain is configured, the single CA file gets overwritten
      # and hence ensure that you place certs for all the LDAP backend domains in the cacert parameter.
      # 2. There is a known issue on one cert per CA file per domain when the system processes
      # concurrent requests to multiple LDAP domains. Using the single CA file with all certs combined
      # shall get the system working properly.
                
      tls_cacertfile: /etc/keystone/ssl/certs/all_ldapdomains_ca.pem
            </codeblock>
          </p>
        </li>
        
        
        <li>As suggested in <xref href="../../../installation/using_git.dita#using_git">Using Git
            for Configuration Management</xref>, commit the new file to the local git repository,
          and rerun the configuration processor and ready deployment
          playbooks:<codeblock>$ cd ~/helion
$ git checkout site
$ git add my_cloud/config/keystone/keystone_configure_ldap_my.yml
$ git commit -m "Adding LDAP server integration config"
$ cd ~/helion/hos/ansible
$ ansible-playbook -i hosts/localhost config-processor-run.yml
$ ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
        </li>
        <li> Run the reconfiguration playbook in a deployment area, passing the YAML file created in
          the previous step as a command-line option:
          <codeblock>$ cd ~/scratch/ansible/next/hos/ansible
$ ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml -e@/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_my.yml</codeblock>
        </li>
        <li>Follow these same steps for each LDAP domain with which you are integrating the identity
          service, creating a YAML file for each and running the reconfigure playbook once for each
          additional domain. </li>
        <li>Ensure that a new domain was created for LDAP (Microsoft AD in this example) and set
          environment variables for admin level access <codeblock>$ source keystone.osrc</codeblock>
          Get a list of domains <codeblock>$ openstack domain list</codeblock> As output here:<codeblock>+----------------------------------+---------+---------+----------------------------------------------------------------------+
| ID                               | Name    | Enabled | Description                                                          |
+----------------------------------+---------+---------+----------------------------------------------------------------------+
| 6740dbf7465a4108a36d6476fc967dbd | heat    | True    | Owns users and projects created by heat                              |
| default                          | Default | True    | Owns users and tenants (i.e. projects) available on Identity API v2. |
| b2aac984a52e49259a2bbf74b7c4108b | ad      | True    | Dedicated domain for users managed by Microsoft AD server            |
+----------------------------------+---------+---------+----------------------------------------------------------------------+</codeblock>
          <!--
 Get list of LDAP groups
$ openstack group list - -domain ad
+______________________________________+___________+
| ID                                                               | Name       |
+______________________________________+___________+
| 03976b0ea6f54a8e4c0032e8f756ad581f26915c7e77500c8d4aaf0e83afcdc6 | testgroup1 |
| 7ba52ee1c5829d9837d740c08dffa07ad118ea1db2d70e0dc7fa7853e0b79fcf | testgroup2 |
+______________________________________+___________+ -->
          <note>LDAP domain is read-only. This means that you cannot create new user or group
            records in it.</note>
        </li>
        <li>Once the LDAP user is granted the appropriate role, he can authenticate within the
          specified domain. Set environment variables for admin-level access
          <codeblock>$ source keystone.osrc</codeblock> Get user record within the (Active
          Directory) ad domain <codeblock>$ openstack user show testuser1 --domain ad</codeblock>
          Note the
          output:<codeblock>+-----------+------------------------------------------------------------------+
| Field     | Value                                                            |
+-----------+------------------------------------------------------------------+
| domain_id | 143af847018c4dc7bd35390402395886                                 |
| id        | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |
| name      | testuser1                                                        |
+-----------+------------------------------------------------------------------+</codeblock>
          Now, get list of LDAP groups: <codeblock>$ openstack group list --domain ad</codeblock>
          Here you see testgroup1 and
          testgroup2:<codeblock>+------------------------------------------------------------------+------------+
|  ID                                                              | Name       |
+------------------------------------------------------------------+------------+
|  03976b0ea6f54a8e4c0032e8f756ad581f26915c7e77500c8d4aaf0e83afcdc6| testgroup1 |
7ba52ee1c5829d9837d740c08dffa07ad118ea1db2d70e0dc7fa7853e0b79fcf   | testgroup2 |
+------------------------------------------------------------------+------------+</codeblock>
          Create a new role. Note that the role is not bound to the domain.
          <codeblock>$ openstack role create testrole1</codeblock> Testrole1 has been
          created:<codeblock>+-------+----------------------------------+
| Field | Value                            |
+-------+----------------------------------+
| id    | 02251585319d459ab847409dea527dee |
| name  | testrole1                        |
+-------+----------------------------------+</codeblock>Grant
          the user a role within the domain by executing the code below. Note that due to a current
          OpenStack CLI limitation, you must use the user ID rather than the user name when working
          with a non-default domain.
          <codeblock>$ openstack role add testrole1 --user e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 --domain ad</codeblock>
          Verify that the role was successfully granted, as shown here:
          <codeblock>$ openstack role assignment list --user e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 --domain ad
+----------------------------------+------------------------------------------------------------------+-------+---------+----------------------------------+
| Role                             | User                                                             | Group | Project | Domain                           |
+----------------------------------+------------------------------------------------------------------+-------+---------+----------------------------------+
| 02251585319d459ab847409dea527dee | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |       |         | 143af847018c4dc7bd35390402395886 |
+----------------------------------+------------------------------------------------------------------+-------+---------+----------------------------------+</codeblock>Authenticate
          (get a domain-scoped token) as a new user with a new role. The --os-* command-line
          parameters specified below override the respective OS_* environment variables set by the
          keystone.osrc script to provide admin access. To ensure that the command below is executed
          in a clean environment, you may want log out from the node and log in again.
          <codeblock>$ openstack --os-identity-api-version 3 \
            --os-username testuser1 \
            --os-password testuser1_password \
            --os-auth-url http://10.0.0.6:35357/v3 \
            --os-domain-name ad \
            --os-user-domain-name ad \
            token issue</codeblock>
          Here is the
          result:<codeblock>+-----------+------------------------------------------------------------------+
| Field     | Value                                                            |
+-----------+------------------------------------------------------------------+
| domain_id | 143af847018c4dc7bd35390402395886                                 |
| expires   | 2015-09-09T21:36:15.306561Z                                      |
| id        | 6f8f9f1a932a4d01b7ad9ab061eb0917                                 |
| user_id   | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |
+-----------+------------------------------------------------------------------+</codeblock>
        </li>
        <li>Users can also have a project within the domain and get a project-scoped token. To
          accomplish this, set environment variables for admin level access:
          <codeblock>$ source keystone.osrc</codeblock> Then create a new project within the domain:
          <codeblock>$ openstack project create testproject1 --domain ad</codeblock> The result
          shows that they have been
          created:<codeblock>+-------------+----------------------------------+
| Field       | Value                            |
+-------------+----------------------------------+
| description |                                  |
| domain_id   | 143af847018c4dc7bd35390402395886 |
| enabled     | True                             |
| id          | d065394842d34abd87167ab12759f107 |
| name        | testproject1                     |
+-------------+----------------------------------+</codeblock>Grant
          the user a role with a project, re-using the role created in the previous example. Note
          that due to a current OpenStack CLI limitation, you must use user ID rather than user name
          when working with a non-default domain.
          <codeblock>$ openstack role add testrole1 --user e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 --project testproject1</codeblock>
          Verify that the role was successfully granted by generating a
          list:<codeblock>$ openstack role assignment list --user e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 --project testproject1</codeblock>
          The output shows the
          result:<codeblock>+----------------------------------+------------------------------------------------------------------+-------+----------------------------------+--------+
| Role                             | User                                                             | Group | Project                          | Domain |
+----------------------------------+------------------------------------------------------------------+-------+----------------------------------+--------+
| 02251585319d459ab847409dea527dee | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |       | d065394842d34abd87167ab12759f107 |        |
+----------------------------------+------------------------------------------------------------------+-------+----------------------------------+--------+</codeblock>Authenticate
          (get a project-scoped token) as the new user with a new role. The --os-* command line
          parameters specified below override their respective OS_* environment variables set by
          keystone.osrc to provide admin access. To ensure that the command below is executed in a
          clean environment, you may want log out from the node and log in again. Note that both the
          --os-project-domain-name and --os-project-user-name parameters are needed to verify that
          both user and project are not in the default domain.
          <codeblock>$ openstack --os-identity-api-version 3 \
            --os-username testuser1 \
            --os-password testuser1_password \
            --os-auth-url http://10.0.0.6:35357/v3 \
            --os-project-name testproject1 \
            --os-project-domain-name ad \
            --os-user-domain-name ad \
            token issue</codeblock>Below
          is the result:
          <codeblock>+------------+------------------------------------------------------------------+
| Field      | Value                                                            |
+------------+------------------------------------------------------------------+
| expires    | 2015-09-09T21:50:49.945893Z                                      |
| id         | 328e18486f69441fb13f4842423f52d1                                 |
| project_id | d065394842d34abd87167ab12759f107                                 |
| user_id    | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |
+------------+------------------------------------------------------------------+</codeblock>
        </li>
      </ol>
    </section>


    <section><title>Set up or switch to domain-specific driver configuration using a database
        store</title>To set up domain-specific driver configuration using a database store, you will
      first need to execute the steps to create the domain-specific driver configuration using a
      file store, as shown above. Then switch to the database store. Once switched, all of the
      domain-specific driver configuration files will be ignored by the system. No mix of file and
      database stores is supported for a domain. </section>
    <section>To make the switch, execute the steps below. Remember, you must have already set up the
      configuration for a file store as explained in the section on <xref href="#ldap/filestore"
        format="dita">domain-specific driver configuration - file store</xref>, and it must be
      working properly. <ol id="ol_sff_px4_mv">
        <li> Ensure that the following configuration options are set in the main configuration file,
          /home/stack/helion/my_cloud/config/keystone/keystone.conf.j2:
          <codeblock>[identity]
domain_specific_drivers_enabled = True
domain_configurations_from_database = True
      
[domain_config]
driver = sql</codeblock>
        </li>
        <li>Once the template is modified, commit the change to the local git repository, and rerun
          the configuration processor / deployment area preparation playbooks (as suggested at Using
          Git for Configuration Management):
          <codeblock>$ cd ~/helion
$ git checkout site
$ git add -A</codeblock> Verify that the
          files have been added using git status: <codeblock>$ git status</codeblock> Then commit
          the changes:
          <codeblock>$ git commit -m "Use Domain-Specific Driver Configuration - Database Store: more description here..."</codeblock>
          Next, run the configuration processor and ready deployment playbooks:
          <codeblock>$ cd ~/helion/hos/ansible
$ ansible-playbook -i hosts/localhost config-processor-run.yml
$ ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
        </li>
        <li>Run the reconfiguration playbook in a deployment area:
          <codeblock>$ cd ~/scratch/ansible/next/hos/ansible
$ ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml</codeblock>
        </li>
        <li>Upload the domain-specific config files to the database if they have not been loaded. If
          they have already been loaded and you want to switch back to database store mode, then
          skip this upload step and move on to step 5. <ol id="ol_tff_px4_mv">
            <li> Go to one of the controller nodes where Keystone is deployed. </li>
            <li>Verify that domain-specific driver configuration files are located under the
              directory (default /etc/keystone/domains) with the format: keystone.&lt;domain
              name>.conf Use the Keystone manager utility to load domain-specific config files to
              the database. There are two options for uploading the files:<ol id="ol_uff_px4_mv">
                <li>Option 1: Upload all configuration files to the SQL database:
                  <codeblock>$ keystone-manage domain_config_upload --all</codeblock>
                </li>
                <li>Option 2: Upload individual domain-specific configuration files by specifying
                  the domain name one by one:
                  <codeblock>$ keystone-manage domain_config_upload --domain-name &lt;domain name></codeblock>Here
                  is an
                  example:<codeblock>keystone-manage domain_config_upload --domain-name ad </codeblock>Note
                  that the Keystone manager utility doesn't upload the domain-specific driver
                  configuration file the second time for the same domain. For the management of the
                  domain-specific driver configuration in the database store, you may refer to <xref
                    href="http://developer.openstack.org/api-ref-identity-v3.html#domains-config-v3"
                    format="html" scope="external">OpenStack Identity API - Domain
                    Configuration</xref>.</li>
              </ol></li>
          </ol></li>
        <li>Verify that the switched domain driver configuration for LDAP (Microsoft AD in this
          example) in the database store works properly. Then set the environment variables for
          admin level access: <codeblock>$ source keystone.osrc</codeblock> Get a list of domain
          users:<codeblock>$ openstack user list --domain ad</codeblock> Note the three users
          returned:<codeblock>+------------------------------------------------------------------+------------+
| ID                                                               | Name       |
+------------------------------------------------------------------+------------+
| e7dbec51ecaf07906bd743debcb49157a0e8af557b860a7c1dadd454bdab03fe | testuser1  |
| 8a09630fde3180c685e0cd663427e8638151b534a8a7ccebfcf244751d6f09bd | testuser2  |
| ea463d778dadcefdcfd5b532ee122a70dce7e790786678961420ae007560f35e | testuser3  |
+------------------------------------------------------------------+------------+</codeblock>
          Get user records within the ad domain:
          <codeblock> $ openstack user show testuser1 --domain ad</codeblock> Here testuser1 is
          returned:<codeblock>+-----------+------------------------------------------------------------------+
| Field     | Value                                                            |
+-----------+------------------------------------------------------------------+
| domain_id | 143af847018c4dc7bd35390402395886                                 |
| id        | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |
| name      | testuser1                                                        |
+-----------+------------------------------------------------------------------+</codeblock>
          Get a list of LDAP groups: <codeblock>$ openstack group list --domain ad</codeblock> Note
          that testgroup1 and testgroup2 are returned:<codeblock>+------------------------------------------------------------------+------------+
| ID                                                               | Name       |
+------------------------------------------------------------------+------------+
| 03976b0ea6f54a8e4c0032e8f756ad581f26915c7e77500c8d4aaf0e83afcdc6 | testgroup1 |
| 7ba52ee1c5829d9837d740c08dffa07ad118ea1db2d70e0dc7fa7853e0b79fcf | testgroup2 |
+------------------------------------------------------------------+------------+</codeblock>
          <note>LDAP domain is read-only. This means that you can not create new user or group
            record in it.</note></li>
      </ol>
    </section>

    <section><title>Domain-specific driver configuration. Switching from a database to a file
        store</title>
      <p> Following is the procedure to switch a domain-specific driver configuration from a
        database store to a file store. It is assumed that:</p>
      <ul>
        <li>The domain-specific driver configuration with a database store has been set up and is
          working properly. </li>
        <li>Domain-specific driver configuration files with the format: keystone.&lt;domain
          name>.conf have already been located and verified in the specific directory (by default,
          /etc/keystone/domains/) on all of the controller nodes.</li>
      </ul>
      <ol>
        <li> Ensure that the following configuration options are set in the main configuration file
          template in /home/stack/helion/my_cloud/config/keystone/keystone.conf.j2:
          <codeblock>[identity]
 domain_specific_drivers_enabled = True
 domain_configurations_from_database = False
          
[domain_config]
# driver = sql</codeblock>
        </li>
        <li>Once the template is modified, commit the change to the local git repository, and rerun
          the configuration processor / deployment area preparation playbooks (as suggested at Using
          Git for Configuration Management):
          <codeblock>$ cd ~/helion
$ git checkout site
$ git add -A</codeblock> Verify that the
          files have been added using git status, then commit the changes:
          <codeblock>$ git status
$ git commit -m "Domain-Specific Driver Configuration - Switch From Database Store to File Store: more description here..."</codeblock>
          Then run the configuration processor and ready deployment
          playbooks:<codeblock>$ cd ~/helion/hos/ansible
$ ansible-playbook -i hosts/localhost config-processor-run.yml
$ ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
        </li>
        <li>Run reconfiguration playbook in a deployment area:
          <codeblock>$ cd ~/scratch/ansible/next/hos/ansible
$ ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml</codeblock>
        </li>
        <li>Verify that the switched domain driver configuration for LDAP (Microsoft AD in this
          example) using file store works properly: Set environment variables for admin level access
          <codeblock>$ source keystone.osrc</codeblock> Get list of domain users:
          <codeblock>$ openstack user list --domain ad</codeblock> Here you see the three
          users:<codeblock>+------------------------------------------------------------------+------------+
| ID                                                               | Name       |
+------------------------------------------------------------------+------------+
| e7dbec51ecaf07906bd743debcb49157a0e8af557b860a7c1dadd454bdab03fe | testuser1  |
| 8a09630fde3180c685e0cd663427e8638151b534a8a7ccebfcf244751d6f09bd | testuser2  |
| ea463d778dadcefdcfd5b532ee122a70dce7e790786678961420ae007560f35e | testuser3  |
+------------------------------------------------------------------+------------+</codeblock>
          Get user records within the ad domain:
          <codeblock>$ openstack user show testuser1 --domain ad</codeblock> Here is the
          result:<codeblock>+-----------+------------------------------------------------------------------+
| Field     | Value                                                            |
+-----------+------------------------------------------------------------------+
| domain_id | 143af847018c4dc7bd35390402395886                                 |
| id        | e6d8c90abdc4510621271b73cc4dda8bc6009f263e421d8735d5f850f002f607 |
| name      | testuser1                                                        |
+-----------+------------------------------------------------------------------+</codeblock>
          Get a list of LDAP groups: <codeblock>$ openstack group list --domain ad</codeblock> Here
          are the groups
          returned:<codeblock>+------------------------------------------------------------------+------------+
| ID                                                               | Name       |
+------------------------------------------------------------------+------------+
| 03976b0ea6f54a8e4c0032e8f756ad581f26915c7e77500c8d4aaf0e83afcdc6 | testgroup1 |
| 7ba52ee1c5829d9837d740c08dffa07ad118ea1db2d70e0dc7fa7853e0b79fcf | testgroup2 |
+------------------------------------------------------------------+------------+</codeblock>
          Note: Note: LDAP domain is read-only. This means that you can not create new user or group
          record in it. </li>
      </ol>
    </section>


    <section><title>Update LDAP CA certificates</title>There is a chance that LDAP CA certificates
      may expire or for some reason not work anymore. Below are steps to update the LDAP CA
      certificates on the identity service side. Follow the steps below to make the updates.<ol>
        <li> Locate the file keystone_configure_ldap_certs_sample.yml
          <codeblock>/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_certs_sample.yml</codeblock>
        </li>
        <li>Save a copy of this file with a new name, for example:
          <codeblock>/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_certs_all.yml</codeblock>
        </li>
        <li>Edit the file and specify the correct single file path name for the ldap certificates.
          This file path name has to be consistent with the one defined in tls_cacertfile of the
          domain-specific configuration. Edit the file and populate or update it with LDAP CA
          certificates for all LDAP domains. </li>
        <li>As suggested in <xref href="../../../installation/using_git.dita#using_git">Using Git
            for Configuration Management</xref>, add the new file to the local git
          repository:<codeblock>$ cd ~/helion
$ git checkout site
$ git add -A</codeblock> Verify
          that the files have been added using git status and commit the
          file:<codeblock>$ git status
$ git commit -m "Update LDAP CA certificates: more description here..."</codeblock>
          Then run the configuration processor and ready deployment playbooks:
          <codeblock>$ cd ~/helion/hos/ansible
$ ansible-playbook -i hosts/localhost config-processor-run.yml
$ ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
        </li>
        <li>Run the reconfiguration playbook in the deployment area:
          <codeblock>$ cd ~/scratch/ansible/next/hos/ansible
$ ansible-playbook -i hosts/verb_hosts keystone-reconfigure.yml -e@/home/stack/helion/my_cloud/config/keystone/keystone_configure_ldap_certs_all.yml </codeblock></li>
      </ol>
    </section>


    <section><title>Limitations</title>
      <sectiondiv id="ldapLimitations">
        <keyword keyref="kw-hos-phrase"/> domain-specific configuration: <ul>
          <li>No Global User Listing: Once domain-specific driver configuration is enabled, listing
            all users and listing all groups are not supported operations. Those calls require a
            specific domain filter and a domain-scoped token for the target domain. </li>
          <li>You cannot have both a file store and a database store for domain-specific driver
            configuration in a single identity service instance. Once a database store is enabled
            within the identity service instance, any file store will be ignored, and vice versa. </li>
          <li>The identity service allows a list limit configuration to globally set the maximum
            number of entities that will be returned in an identity collection per request but it
            doesn't support per-domain list limit setting at this time. </li>
          <li>Each time a new domain is configured with LDAP integration the single CA file gets
            overwritten. Ensure that you place certs for all the LDAP back-end domains in the cacert
            parameter. Detailed CA file inclusion instructions are provided in the comments of the
            sample YAML configuration file <xref href="#ldap/filestore" format="dita"
              >keystone_configure_ldap_my.yml</xref>. </li>
          <li>LDAP is only supported for identity operations (reading users and groups from LDAP). </li>
          <li>Keystone assignment operations from LDAP records such as managing or assigning roles
            and projects, are not currently supported.</li>
          <li>The <keyword keyref="kw-hos"/> 'default' domain is pre-configured to store service
            account users and is authenticated locally against the identity service. Domains
            configured for external LDAP integration are non-default domains. </li>
          <li>When using the current OpenStackClient CLI you must use the user ID rather than the
            user name when working with a non-default domain.</li>
          <li>Each LDAP connection with the identity service is for read-only operations.
            Configurations that require identity service write operations (to create users, groups,
            etc.) are not currently supported.</li>
          <li>LDAP is only supported for identity operations (reading users and groups from LDAP).
            Keystone assignment operations from LDAP records such as managing or assigning roles and
            projects, are not currently supported. </li>
          <li>When using the current OpenStackClient CLI you must use the user ID rather than the
            user name when working with a non-default domain.</li>
        </ul>
        <keyword keyref="kw-hos-phrase"/> API-based domain-specific configuration management <ul>
          <li>No GUI dashboard for domain-specific driver configuration management </li>
          <li>API-based Domain specific config does not check for type of option. </li>
          <li>API-based Domain specific config does not check for option values supported. </li>
          <li>API-based Domain config method does not provide retrieval of default values of
            domain-specific configuration options. </li>
          <li>Status: Domain-specific driver configuration database store is a non-core feature for
              <keyword keyref="kw-hos-phrase"/>. </li>
        </ul>
        <note>When integrating with an external identity provider, cloud security is dependent upon
          the security of that identify provider. You should examine the security of the identity
          provider, and in particular the SAML 2.0 token generation process and decide what security
          properties you need to ensure adequate security of your cloud deployment. More information
          about SAML can be found at <xref
            href="https://www.owasp.org/index.php/SAML_Security_Cheat_Sheet" format="html"
            scope="external"
          >https://www.owasp.org/index.php/SAML_Security_Cheat_Sheet</xref>.</note></sectiondiv>
    </section>














    <!--<section id="encrypt"><title>Transport Layer Security (TLS) Support</title>
      <p> The Identity service supports various encryption options when an external LDAP or
        Microsoft Active Directory is configured for external authentication including: </p>
      <ul>
        <li>External authentication with LDAP and Microsoft Active Directory systems</li>
        <li>LDAPS specific support</li>
        <li>STARTTLS</li>
        
      </ul>
    </section>-->

    <!-- <section><title>Support and Troubleshooting</title>
    
    </section>-->
  </body>
</topic>
