<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [ <!ENTITY % entities SYSTEM "entities.xml"> %entities; ]><section id="nagios_integration">
   <title>
      <phrase/>Nagios Integration</title>
    
    <para><phrase/> cloud operators that are using Nagios or Icinga-based monitoring
        systems may wish to integrate them with the built-in monitoring infrastructure of HPE Helion
        OpenStack. Integrating with the existing monitoring processes and procedures will reduce
        support overhead and avoid duplication. This document describes the different approaches
        that can be taken to create a well-integrated monitoring dashboard using both
        technologies.</para>

   <note>
         <para>This document refers to Nagios but the proposals will work equally well with Icinga,
          Icinga2, or other Nagios clone monitoring systems.</para>
      </note>

    
      <bridgehead renderas="sect4">
         <phrase/> monitoring and reporting</bridgehead>
      <para><phrase/> comes with a monitoring engine (Monasca) and a separate
        management dashboard (Operations Console). Monasca is extremely scalable, designed to cope
        with the constant change in monitoring sources and services found in a cloud environment.
        Monitoring agents running on hosts (physical and virtual) submit data to the Monasca message
        bus via a RESTful API. Threshold and notification engines then trigger alarms when
        predefined thresholds are passed. Notification methods are flexible and extendible. Typical
        examples of notification methods would be emails generated or creating alarms in
        PagerDuty.</para>

      <para>While extensible, Monasca is largely focused on monitoring cloud infrastructures rather
        than traditional environments such as server hardware, network links, switches, etc. For
        more details about the monitoring service, see <xref linkend="mon"/>.</para>

      <para>The Operations Console (Ops Console) provides cloud administrators a clear web interfaces
        to view alarm status, management alarm workflow, and configure alarms and thresholds. For
        more details about the Ops Console, see <citetitle>FIXME: broken external xref</citetitle>.</para>

   
    
      <bridgehead renderas="sect4">Nagios monitoring and reporting</bridgehead>
      <para>Nagios is an industry leading open source monitoring service with extensive plugins and
        agents. Nagios checks are either run directly from the monitoring server or run on a remote
        host via an agent and submit results back to the monitoring server. Whilst Nagios has proven
        itself as extremely flexible and scalable it requires significant explicit configuration.
        Using Nagios to monitor guest virtual machines becomes more challenging because virtual
        machines can be ephemeral which means new virtual machines are created and destroyed
        regularly. Configuration automation (Chef, Puppet, Ansible etc) can create a more dynamic
        Nagios setup but they still require the Nagios service to be restarted every time a new host
        is added.</para>

      <para>A key benefit of Nagios style monitoring is that it allows for <phrase/>
        to be monitored externally, from a user or service perspective. For example, checks can be
        created to monitor availability of all the API endpoints from external locations or even to
        create and destroy instances to ensure the entire system is working as expected.</para>

   
    
      <bridgehead renderas="sect4">Summary</bridgehead>
      <para>We recognize that most private cloud operators already have existing monitoring solutions
        in place such as Nagios and Icinga. We recommend that you extend your existing solutions
        into Monasca or forward Monasca alerts to your existing solution to maximize coverage and
        reduce risk.</para>

   
    
      <bridgehead renderas="sect4">Integration Approaches</bridgehead>
      <para>Integration between Nagios and Monasca can occur at two levels, at the individual check
        level or at the management interfaces. Both options are discussed in the following
        sections.</para>

   
    
      <bridgehead renderas="sect4">Common integration issues</bridgehead>
      <para><emphasis role="bold">Alarm status differences</emphasis></para>

      <para>Monasca and Nagios treat alarms and status in different ways and for the two systems to
        talk there needs to be a mapping between them. The following table details the alarm
        parameters available for each:</para>

      <informaltable id="table_jn2_fmf_zw" colsep="1" rowsep="1">
         <tgroup cols="4">
            <colspec colname="c1" colnum="1"/>
            <colspec colname="c2" colnum="2"/>
            <colspec colname="c3" colnum="3"/>
            <colspec colname="c4" colnum="4"/>
            <thead>
               <row>
                  <entry>System</entry>
                  <entry>Status</entry>
                  <entry>Severity</entry>
                  <entry>Details</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry morerows="3">Nagios</entry>
                  <entry>OK</entry>
                  <entry/>
                  <entry>Plugin returned OK with given thresholds</entry>
               </row>
               <row>
                  <entry>WARNING</entry>
                  <entry/>
                  <entry>Plugin returned WARNING based on thresholds</entry>
               </row>
               <row>
                  <entry>CRITICAL</entry>
                  <entry/>
                  <entry>Plugin returned CRITICAL alarm</entry>
               </row>
               <row>
                  <entry>UNKNOWN</entry>
                  <entry/>
                  <entry>Plugin failed</entry>
               </row>
               <row>
                  <entry morerows="4">Monasca</entry>
                  <entry>OK</entry>
                  <entry/>
                  <entry>No alarm triggered</entry>
               </row>
               <row>
                  <entry>ALARM</entry>
                  <entry>LOW</entry>
                  <entry>Alarm state, LOW impact</entry>
               </row>
               <row>
                  <entry>ALARM</entry>
                  <entry>MEDIUM</entry>
                  <entry>Alarm state, MEDIUM impact</entry>
               </row>
               <row>
                  <entry>ALARM</entry>
                  <entry>HIGH</entry>
                  <entry>Alarm state, HIGH impact</entry>
               </row>
               <row>
                  <entry>UNDETERMINED</entry>
                  <entry/>
                  <entry>No metrics received</entry>
               </row>
            </tbody>
        </tgroup>
      </informaltable>
      <para>In the plugin described here, the mapping was created with this flow:</para>

      <screen>Monasca OK -&gt; Nagios OK
Monasca ALARM ( LOW or MEDIUM ) -&gt; Nagios Warning
Monasca ALARM ( HIGH ) -&gt; Nagios Critical</screen>
      <para><emphasis role="bold">Alarm workflow differences</emphasis></para>

      <para>In both, system alarms can be acknowledged in the dashboards to indicate they are being
        worked on (or ignored). Not all the scenarios above will provide the same level of workflow
        integration.</para>

   
  </section>
