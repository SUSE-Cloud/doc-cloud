<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [ <!ENTITY % entities SYSTEM "entities.xml"> %entities; ]><!--Edit status: not edited-->
<section id="topic_enj_cms_mt">
   <title>
      <phrase/>Restarting the Object Storage Deployment</title>
    
    <para>This page describes the various operational procedures performed by Swift.</para>

    
      <bridgehead renderas="sect4">To Restart the Swift Object Storage Deployment </bridgehead>
      <para>The structure of ring is built in an incremental stages. When you modify a ring, the new
        ring uses the state of the old ring as a basis for the new ring. Rings are stored in the
        builder file. The <literal>swiftlm-ring-supervisor</literal> stores builder files in the
          <literal>/etc/swiftlm/builder_dir/region-&lt;region-name&gt;</literal> directory on the
        Ring-Builder node. The builder files are named &lt;ring-name&gt; builder. Prior versions of the
        builder files are stored in the
          <literal>/etc/swiftlm/builder_dir/region-&lt;region-name&gt;/backups</literal> directory.</para>

      <para>Generally, you use an existing builder file as the basis for changes to a ring. However, at
        initial deployment, when you create a ring there will be no builder file. Instead, the first
        step in the process is to build a builder file. The deploy playbook does this as a part of
        the deployment process. If you have successfully deployed some of the system, the ring
        builder files will exist. </para>

      <para>If you change your input model (for example, by adding servers) now, the process assumes
        you are <emphasis>modifying</emphasis> a ring and behaves differently than while creating a ring from
        scratch. In this case, the ring is not balanced. So, if the cloud model contains an error or
        you decide to make substantive changes, it is a best practice to start from scratch and
        build rings using the steps in "To Reset Builder Files" below.</para>

   
    
    
      <bridgehead renderas="sect4">To Reset Builder Files</bridgehead>
      <note>
         <para>You must reset the builder files during the initial deployment process (only). This
          process should be used only when you want to restart a deployment from scratch. If you
          reset the builder files after completing your initial deployment, then you are at a risk
          of losing critical system data.</para>

         <para>To reset the builder files from scratch, do the following:</para>
<orderedlist id="ul_otm_stz_4t">
               <listitem>
                  <para>You must know your Keystone region name. Each distinct Swift system uses a different
              Keystone region. If you have several Keystone regions and you are trying to return to
              the start state for region2, you should not delete the builder files of region1 as
              this is presumably running normally.</para>
               </listitem>
               <listitem>
                  <para>Delete the builder files in the
                <literal>/etc/swiftlm/builder-dir/region-&lt;region-name&gt;/</literal> directory. For
              example, for the region2 Keystone region, do the
                following:</para>
                  <screen>sudo rm /etc/swiftlm/builder_dir/region-region2/*.builder</screen>
                  <note>
                     <para>If
                you have successfully deployed a system and accidentally delete the builder files,
                you can recover to the correct state. For instructions, see <xref linkend="topic_gbz_13t_mt"/>.</para>
                  </note>
               </listitem>
            </orderedlist>

      </note>
   
  </section>
