<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="tls30">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Configuring Transport Layer Security
    (TLS)</title>
  <abstract><shortdesc outputclass="hdphidden">TLS is enabled by default during the installation of
        <keyword keyref="kw-hos-phrase"/> and additional configuration options are available to
      secure your environment.</shortdesc>TLS is enabled by default during the installation of
      <keyword keyref="kw-hos-phrase"/> and additional configuration options are available to
    secure your environment, as described below.</abstract>
  <body>
    
    
<!--
    <section>
      <title>Configuring TLS in the input model</title>
      <p>A test certificate named <codeph>my-public-cert</codeph> is bundled with the release.
        Having this default cert allows you to bring up a cloud without having to worry about
        certificates, and this is the recommended way to proceed. The certificate will not match the
        IP address of your environment's API endpoints, but you can ignore the warnings.</p>
      <p>When moving into production, you will require a trusted certificate and you must add your
        own certificate and redeploy following the instructions in <xref
          href="../security/tls_config.dita#tlsConfig"/></p>
      <note type="attention">Be sure to install your own certificate for all production clouds after
        installing and testing your cloud.</note>
      <note>If you ever want to test or troubleshoot later, you will be able to revert to the sample
        certificate to get back to a stable state for testing.</note>
      <note>There are two alarms specific to certificates, 14-days to expiration and 1-day to
        expiration.</note>
      <p>You can add your own certificate by following the instructions below. All changes must go
        into the following file:</p>
      <codeblock>~/helion/my_cloud/definition/data/network_groups.yml</codeblock>
      <p>Below are the entries for TLS for the internal and admin load balancers:</p>
      <codeblock>- provider: ip-cluster
        name: lb
        tls-components:
        - default
        components:
        # These services do not currently support TLS
        - vertica
        - rabbitmq
        - mysql
        - nova-metadata
        roles:
        - internal
        - admin
        cert-file: helion-internal-cert
        # The helion-internal-cert is a reserved name and
        # this certificate will be autogenerated. You
        # can bring in your own cert with a different name
        
        # cert-file: customer-provided-internal-cert
        # replace this with name of file in "config/tls/certs/"</codeblock>The
      configuration-processor will also create a request template for each named certificate under
        <codeph>info/cert_reqs/</codeph> This will be of the form
      <codeblock>info/cert_reqs/customer-provided-internal-cert</codeblock></section>
    <section>These request templates contain the subject <codeph>Alt-names</codeph> that the
      certificates need. You can add to this template before generating your certificate signing
      request (CSR).</section>
    <section>You would then send the CSR to your CA to be signed and once you receive the
      certificate, place it into <codeph>config/tls/certs</codeph></section>
    <section> When you bring in your own certificate, you may want to bring in the trust chains (or
      CA certificate) for this certificate. This is usually not required if the CA is a public
      signer that gets bundled by the system. However, we suggest you include it anyway by copying
      the file into the directory <codeph>config/cacerts/</codeph>. Note that the file extension
      should be .crt or it will not be processed by <keyword keyref="kw-hos"/>.</section>
    <section> See <xref href="../security/generate_own_certs.dita#generateCerts"/> for detailed certificate
      installation instructions.</section>
-->
   <!-- <section><title>TLS for the key management service on the load balancer back end and service
        endpoint</title>
      <p>Here are the entries specific to the Barbican key management service</p>
      <codeblock>- name: MANAGEMENT
        hostname-suffix: mgmt
        hostname: true
        
        tls-component-endpoints:
        # The following service endpoint is behind TLS
        - barbican-api
        component-endpoints:
        - default </codeblock>
    </section>-->

<!--
    <section><title>User-provided certificates and trust chains</title>
      <p><keyword keyref="kw-hos"/> generates its own internal certificates but is designed to allow
        you to bring in your own certificates for the VIPs. Here is the general process.</p>
      <ol>
        <li>You must have a server certificate and a CA certificate to go with it (unless the signer
          is a public CA and it's already bundled with most distributions). </li>
        <li>You must decide the names of the server certificates and configure the network_groups in
          the input model such that each Loadbalancer provider has at least one cert-name associated
          with it. </li>
        <li>Run the config processor. Note that you may or may not have the certificate file at this
          point. The config processor would create certificate request file artefacts under
          info/cert_reqs/ for each of the cert-name(s) in the network_groups. While there's no
          special reason to use the request file created for an external endpoint VIP certificate,
          it is important to use the request files created for internal certificates since the
          canonical names for the internal VIP can be many and service specific and each of these
          need to be in the Subject Alt Names attribute of the certificate. </li>
        <li>Create a Certificate Signing Request for this request file and send it to the company
          internal CA or a public CA to get it certified and issued with a certificate. The customer
          will now be in the possession of a server certificate and possibly a trust chain or CA
          certificate. </li>
        <li>Next, input it into the lifecycle manager: Server certificates can be dropped into
          config/tls/certs CA certificates can be dropped into config/tls/cacerts. The file
          extension should be .crt for the CA certificate to be processed by <keyword
            keyref="kw-hos"/>. </li>
      </ol></section>
    <section><title>Testing</title>
      <p>You can easily determine if an endpoint is behind TLS. To do so, run the following command,
        which probes a Keystone identity service endpoint that's behind TLS:</p>
      <codeblock>stack@deployerincloud-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.5:5000 | openssl x509 -fingerprint -noout 
        depth=0 CN = helion-vip
        verify error:num=20:unable to get local issuer certificate
        verify return:1
        depth=0 CN = helion-vip
        verify error:num=27:certificate not trusted
        verify return:1
        depth=0 CN = helion-vip
        verify error:num=21:unable to verify the first certificate
        verify return:1
        DONE
        SHA1 Fingerprint=C6:46:1E:59:C6:11:BF:72:5E:DD:FC:FF:B0:66:A7:A2:CC:32:1C:B8 </codeblock>
      The next command probes a MySQL endpoint that is not behind TLS
      <codeblock>stack@deployerincloud-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.5:3306 | openssl x509 -fingerprint -noout 
140448358213264:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:s23_clnt.c:795:
unable to load certificate
140454148159120:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:703:Expecting: TRUSTED CERTIFICATE</codeblock>
      You can determine if the trust chain is correctly deployed by running the following commands:
      <codeblock>stack@padawan-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.9:5000 2>/dev/null | grep code 
        Verify return code: 21 (unable to verify the first certificate)
        stack@padawan-ccp-c0-m1-mgmt:~$ echo | openssl s_client -connect 192.168.245.9:5000 -CAfile /usr/local/share/ca-certificates/helion_frontend_cacert.crt 2>/dev/null | grep code 
        Verify return code: 0 (ok) </codeblock>The
      first command shows error 21 which is then fixed by providing the CA certificate file. This
      verifies that the CA certificate matches the server certificatee. </section>-->
 <!--   <section><title>Turning TLS on or off</title>
      <p>If you are using an example/default input-model, all supported TLS services will be enabled
        before deployment of your cloud. If you want to change this setting later, you can change
        the input model and reconfigure the system. The process is to:</p>
      <ul>
        <li>Change the input model </li>
        <li>Commit the changes to source control </li>
        <li>Run ready-deployment playbook </li>
        <li>Run hlm-reconfigure playbook </li>
      </ul> changes: <codeblock>cd ~/helion
git add -A
git commit -m "TLS change"</codeblock> Change
      directories again and run the configuration processor and ready deployment plabooks:
      <codeblock>cd ~/helion/hos/ansible/
ansible-playbook -i hosts/localhost config-processor-run.yml -e encrypt="" -e rekey=""
ansible-playbook -i hosts/localhost ready-deployment.yml</codeblock>
      Change directories again and run the reconfigure playbook:
      <codeblock>cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts hlm-reconfigure.yml </codeblock>Note:
      If you run into some issues with hlm-reconfigure, and the only change you made was to TLS,
      then run the following after the failed hlm-reconfigure.
      <codeblock>ansible-playbook -i hosts/verb_hosts _tls-endpoint-reconfigure.yml</codeblock>
    </section>-->
  </body>
  <topic id="id_pml_zvr_5v" conref="../security/tls_config.dita#tlsConfig">
    <title/>
  </topic>
</topic>
