<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd" >
<topic id="configuring_check_plugins">
    <title>Configuring Check Plugins</title>
    <body>
        <p><b>Manually configure a plugin when unit-testing using the monasca-setup script installed
                with the monasca-agent</b></p>
        <p>Find a good explanation of configuring plugins here: <xref
                href="https://github.com/openstack/monasca-agent/blob/master/docs/Agent.md#configuring"
                format="html" scope="external"
                >https://github.com/openstack/monasca-agent/blob/master/docs/Agent.md#configuring</xref></p>
        <p/>
        <p>SSH to a node that has both the monasca-agent installed as well as the component you wish
            to monitor.</p>
        <p>The following is an example command that configures a plugin that has no parameters (uses
            the detection plugin class
            name).<codeblock>sudo /opt/stack/service/monasca-agent/venv/bin/monasca-setup -d HLMCeilometer</codeblock></p>
        <p/>
        <p>The following is an example command that configures the apache plugin and includes
            related
            parameters.<codeblock>sudo /opt/stack/service/monasca-agent/venv/bin/monasca-setup -d apache -a 'url=http://192.168.245.3:9095/server-status?auto'</codeblock></p>
        <p/>
        <p>If there is a change in the configuration it will restart the monasca-agent on the host
            so the configuration is loaded.</p>
        <p>After the plugin is configured, you can verify that the configuration file has your
            changes (see the <b>Verify that your check plugin is configured</b> section).</p>
        <p>Use the monasca CLI to see if your metric exists (see the <b>Verify that metrics
                exist</b> section).</p>
        <p/>
        <p/>
        <p><b>Using Ansible modules to configure plugins in <keyword keyref="kw-hos-phrase"
            /></b></p>
        <p>The <codeph>monasca_agent_plugin</codeph> module is installed as part of the
            monasca-agent role.</p>
        <p/>
        <p>The following Ansible example configures the process.py plugin for the Ceilometer
            detection plugin. The following example only passes in the name of the detection
            class.</p>
        <p>
            <codeblock>- name: _CEI-CMN | monasca_configure |
    Run Monasca agent HLM specific ceilometer detection plugin
  become: yes
  monasca_agent_plugin:
    name: "HLMCeilometer"</codeblock>
        </p>
        <p/>
        <p>If a password or other sensitive data are passed to the detection plugin, the
                <codeph>no_log</codeph> option should be set to <b>True</b>. If the
                <codeph>no_log</codeph> option is not set to <b>True</b>, the data passed to the
            plugin will be logged to syslog.</p>
        <p/>
        <p>The following Ansible example configures the Vertica plugin and passes in related
            arguments.<codeblock>- name: Run Monasca Agent detection plugin for Vertica
  monasca_agent_plugin:
    name: "Vertica"
    args:
      user: {{ FND_VDB.vars.monitor_user_name }}
      password: {{ FND_VDB.vars.monitor_user_password }}
      timeout: 10
  no_log: True</codeblock></p>
        <p/>
        <p>The following Ansible example configures the Keystone endpoint using the http_check.py
            detection plugin. The class name <codeph>httpcheck</codeph> of the http_check.py
            detection plugin is the name.</p>
        <p>
            <codeblock>#
- name:  keystone-monitor | local_monitor |
    Setup active check on keystone internal endpoint locally
  become: yes
  monasca_agent_plugin:
    name: "httpcheck"
    args: "use_keystone=False \
           url=http://{{ keystone_internal_listen_ip }}:{{
               keystone_internal_port }}/v3 \
           dimensions=service:identity-service,\
                       component:keystone-api,\
                       api_endpoint:internal,\
                       monitored_host_type:instance"
  tags:
    - keystone
    - keystone_monitor</codeblock>
        </p>
        <p/>
        <p/>
        <p><b>Verify that your check plugin is configured</b></p>
        <p>All check configuration files are located in the following directory. You can see the
            plugins that are running by looking at the plugin configuration
            directory.<codeblock>/etc/monasca/agent/conf.d/</codeblock></p>
        <p/>
        <p>When the monasca-agent starts up, all of the check plugins that have a matching
            configuration file in the <codeph>/etc/monasca/agent/conf.d/</codeph> directory will be
            loaded.</p>
        <p>If there are errors running the check plugin they will be written to the following error
            log file.<codeblock>/var/log/monasca/agent/collector.log</codeblock></p>
        <p/>
        <p>You can change the monasca-agent log level by modifying the <codeph>log_level</codeph>
            option in the <codeph>/etc/monasca/agent/agent.yaml</codeph> configuration file, and
            then restarting the monasca-agent, using the following
            command.<codeblock>sudo service monasca-agent restart</codeblock></p>
        <p/>
        <p>You can debug a check plugin by running <codeph>monasca-collector</codeph> with the check
            option. The following is an example of the <codeph>monasca-collector</codeph>
            command.<codeblock>/opt/stack/service/monasca-agent/venv/bin$ sudo ./monasca-collector check &lt;check name></codeblock></p>
        <p/>
        <p><b>Verify that metrics exist</b></p>
        <p>Begin by logging in to your deployer or controller node.</p>
        <p>Run the following set of commands, including the <codeph>monasca metric-list</codeph>
            command. If the metric exists, it will be displayed in the
            output.<codeblock>source /home/hlmuser/service.osrc
monasca metric-list --name  &lt;metric name></codeblock></p>
    </body>
</topic>
