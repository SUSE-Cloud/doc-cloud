<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="vlan-aware">
  <title><ph conkeyref="HOS-conrefs/product-title"/>Setting up VLAN-Aware VMs</title>
  <body>



    <section> Creating a VM with a trunk port will allow a VM to gain connectivity to one or more
      networks over the same virtual NIC (vNIC) through the use VLAN interfaces in the guest VM.
      Connectivity to different networks can be added and removed dynamically through the use of
      subports. The network of the parent port will be presented to the VM as the untagged VLAN, and
      the networks of the child ports will be presented to the VM as the tagged VLANs (the VIDs of
      which can be chosen arbitrarily as long as they are unique to that trunk). The VM will
      send/receive VLAN-tagged traffic over the subports, and Neutron will mux/demux the traffic
      onto the subport's corresponding network. This is not to be confused with <xref
        href="vlan_transparency.dita#vlan_transparency">VLAN-transparency</xref>, in which a VM can
      pass VLAN-tagged traffic transparently across the network without interference from Neutron. </section>

    <section><title>Terminology</title>
      <ul>
        <li><b>Trunk</b>: a resource that logically represents a trunked vNIC and references a
          parent port. </li>
        <li><b>Parent port</b>: a Neutron port that a Trunk is referenced to. Its network is
          presented as the untagged VLAN. </li>
        <li><b>Subport</b>: a resource that logically represents a tagged VLAN port on a Trunk. A
          Subport references a child port and consists of the
          &lt;port>,&lt;segmentation-type>,&lt;segmentation-id> tuple. Currently only the 'vlan'
          segmentation type is supported. </li>
        <li><b>Child port</b>: a Neutron port that a Subport is referenced to. Its network is
          presented as a tagged VLAN based upon the segmentation-id used when creating/adding a
          Subport. </li>
        <li><b>Legacy VM</b>: a VM that does not use a trunk port. </li>
        <li><b>Legacy port</b>: a Neutron port that is not used in a Trunk. </li>
        <li><b>VLAN-aware VM</b>: a VM that uses at least one trunk port.</li>
      </ul>
    </section>

    <section>
      <title>Trunk CLI reference</title> 
      <table outputclass="width50" frame="all" rowsep="1" colsep="1"
        id="table_rvh_hss_3x">
        <tgroup cols="2">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <thead>
            <row>
              <entry> Command</entry>
              <entry>Action</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>network trunk create </entry>
              <entry>Create a trunk.</entry>
            </row>
            <row>
              <entry>network trunk delete </entry>
              <entry>Delete a given trunk.</entry>
            </row>
            <row>
              <entry>network trunk list </entry>
              <entry>List all trunks.</entry>
            </row>
            <row>
              <entry>network trunk show </entry>
              <entry>Show information of a given trunk.</entry>
            </row>
            <row>
              <entry>network trunk set </entry>
              <entry>Add subports to a given trunk.</entry>
            </row>
            <row>
              <entry>network subport list </entry>
              <entry>List all subports for a given trunk.</entry>
            </row>
            <row>
              <entry>network trunk unset</entry>
              <entry>Remove subports from a given trunk.</entry>
            </row>
            <row>
              <entry>network trunk set</entry>
              <entry>Update trunk properties.</entry>
            </row>
          </tbody>
        </tgroup>
      </table> 
      
    </section>

    <section>
      <title>Enabling VLAN-aware VM capability</title>
      <ol>
        <li>Edit <codeph>~helion/my_cloud/config/neutron/neutron.conf.j2</codeph> to add the "trunk"
          service_plugin:
          <codeblock>service_plugins = {{ neutron_service_plugins }},trunk</codeblock>
        </li>
        <li>Edit <codeph>~/helion/my_cloud/config/neutron/ml2_conf.ini.j2</codeph> to enable the
          noop firewall driver: <note>This is a manual configuration step because it must be made
            apparent that this step disables Neutron security groups completely. The default <keyword keyref="kw-hos"/>
            firewall_driver is
              <codeph>neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver</codeph>
            which does not implement security groups for trunk ports. Optionally, the <keyword keyref="kw-hos"/> default
            firewall_driver may still be used (i.e. skip this step), which would provide security
            groups for legacy VMs but not for VLAN-aware VMs. However, this mixed environment is not
            recommended. See the section called <xref href="#vlan-aware/firewall" format="dita"
              >Firewall issues</xref> below for more
          details.</note><codeblock>[securitygroup]
firewall_driver = neutron.agent.firewall.NoopFirewallDriver</codeblock>
        </li>
        <li>Commit the configuration changes:
          <codeblock>git add -A
git commit -m "Enable vlan-aware VMs"
cd ~/helion/hos/ansible/</codeblock>
        </li>
        <li>If this is an initial deployment, continue the rest of normal deployment process:
          <codeblock>ansible-playbook -i hosts/localhost config-processor-run.yml
ansible-playbook -i hosts/localhost ready-deployment.yml
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts site.yml</codeblock>
        </li>
        <li>If the cloud has already been deployed and this is a reconfiguration:
          <codeblock>ansible-playbook -i hosts/localhost ready-deployment.yml
cd ~/scratch/ansible/next/hos/ansible
ansible-playbook -i hosts/verb_hosts neutron-reconfigure.yml</codeblock>
        </li>
      </ol>
    </section>

    <section>
      <title>Use Cases</title>
      <p><b>Creating a trunk port</b></p> Assume that a number of Neutron networks/subnets already
      exist: private, foo-net, and bar-net. This will create a trunk with two subports allocated to
      it. The parent port will be on the "private" network, while the two child ports will be on
      "foo-net" and "bar-net", respectively: <ol>
        <li>Create a port that will function as the trunk's parent port:
          <codeblock>$ neutron port-create --name trunkparent private</codeblock>
        </li>
        <li>Create ports that will function as the child ports to be used in subports:
          <codeblock>$ neutron port-create --name subport1 foo-net
$ neutron port-create --name subport2 bar-net</codeblock></li>
        <li>Create a trunk port using the <codeph>openstack network trunk create</codeph> command,
          passing the parent port created in step 1 and child ports created in step 2:
          <codeblock>$ openstack network trunk create --parent-port trunkparent --subport port=subport1,segmentation-type=vlan,segmentation-id=1 --subport port=subport2,segmentation-type=vlan,segmentation-id=2 mytrunk
+-----------------+-----------------------------------------------------------------------------------------------+
| Field           | Value                                                                                         |
+-----------------+-----------------------------------------------------------------------------------------------+
| admin_state_up  | UP                                                                                            |
| created_at      | 2017-06-02T21:49:59Z                                                                          |
| description     |                                                                                               |
| id              | bd822ebd-33d5-423e-8731-dfe16dcebac2                                                          |
| name            | mytrunk                                                                                       |
| port_id         | 239f8807-be2e-4732-9de6-c64519f46358                                                          |
| project_id      | f51610e1ac8941a9a0d08940f11ed9b9                                                              |
| revision_number | 1                                                                                             |
| status          | DOWN                                                                                          |
| sub_ports       | port_id='9d25abcf-d8a4-4272-9436-75735d2d39dc', segmentation_id='1', segmentation_type='vlan' |
|                 | port_id='e3c38cb2-0567-4501-9602-c7a78300461e', segmentation_id='2', segmentation_type='vlan' |
| tenant_id       | f51610e1ac8941a9a0d08940f11ed9b9                                                              |
| updated_at      | 2017-06-02T21:49:59Z                                                                          |
+-----------------+-----------------------------------------------------------------------------------------------+

$ openstack network subport list --trunk mytrunk
+--------------------------------------+-------------------+-----------------+
| Port                                 | Segmentation Type | Segmentation ID |
+--------------------------------------+-------------------+-----------------+
| 9d25abcf-d8a4-4272-9436-75735d2d39dc | vlan              |               1 |
| e3c38cb2-0567-4501-9602-c7a78300461e | vlan              |               2 |
+--------------------------------------+-------------------+-----------------+</codeblock>
          Optionally, a trunk may be created without subports (they can be added later):
          <codeblock>$ openstack network trunk create --parent-port trunkparent mytrunk
+-----------------+--------------------------------------+
| Field           | Value                                |
+-----------------+--------------------------------------+
| admin_state_up  | UP                                   |
| created_at      | 2017-06-02T21:45:35Z                 |
| description     |                                      |
| id              | eb8a3c7d-9f0a-42db-b26a-ca15c2b38e6e |
| name            | mytrunk                              |
| port_id         | 239f8807-be2e-4732-9de6-c64519f46358 |
| project_id      | f51610e1ac8941a9a0d08940f11ed9b9     |
| revision_number | 1                                    |
| status          | DOWN                                 |
| sub_ports       |                                      |
| tenant_id       | f51610e1ac8941a9a0d08940f11ed9b9     |
| updated_at      | 2017-06-02T21:45:35Z                 |
+-----------------+--------------------------------------+</codeblock>A
          port that is already bound (i.e. already in use by a VM) cannot be "upgraded" to a trunk
          port. The port must be unbound to be eligible for use as a trunk's parent port. When
          adding subports to a trunk, the child ports must be unbound as well. </li>
      </ol>
      <p><b>Checking a port's trunk details</b></p> Once a trunk has been created, its parent port
      will show the <codeph>trunk_details</codeph> attribute, which consists of the
        <codeph>trunk_id</codeph> and list of subport dictionaries:
      <codeblock>$ neutron port-show -F trunk_details trunkparent
+---------------+-------------------------------------------------------------------------------------+
| Field         | Value                                                                               |
+---------------+-------------------------------------------------------------------------------------+
| trunk_details | {"trunk_id": "bd822ebd-33d5-423e-8731-dfe16dcebac2", "sub_ports":                   |
|               | [{"segmentation_id": 2, "port_id": "e3c38cb2-0567-4501-9602-c7a78300461e",          |
|               | "segmentation_type": "vlan", "mac_address": "fa:16:3e:11:90:d2"},                   |
|               | {"segmentation_id": 1, "port_id": "9d25abcf-d8a4-4272-9436-75735d2d39dc",           |
|               | "segmentation_type": "vlan", "mac_address": "fa:16:3e:ff:de:73"}]}                  |
+---------------+-------------------------------------------------------------------------------------+</codeblock>
      Ports that are not trunk parent ports will not have a <codeph>trunk_details</codeph> field: <codeblock>$ neutron port-show -F trunk_details subport1
need more than 0 values to unpack</codeblock>
      <p><b>Adding subports to a trunk</b></p> Assuming a trunk and new child port have been created
      already, the <codeph>trunk-subport-add</codeph> command will add one or more subports to the
      trunk. <ol>
        <li>Run <codeph>openstack network trunk set</codeph>
          <codeblock>$ openstack network trunk set --subport port=subport3,segmentation-type=vlan,segmentation-id=3 mytrunk</codeblock>
        </li>
        <li>Run <codeph>openstack network subport list</codeph>
          <codeblock>$ openstack network subport list --trunk mytrunk
+--------------------------------------+-------------------+-----------------+
| Port                                 | Segmentation Type | Segmentation ID |
+--------------------------------------+-------------------+-----------------+
| 9d25abcf-d8a4-4272-9436-75735d2d39dc | vlan              |               1 |
| e3c38cb2-0567-4501-9602-c7a78300461e | vlan              |               2 |
| bf958742-dbf9-467f-b889-9f8f2d6414ad | vlan              |               3 |
+--------------------------------------+-------------------+-----------------+</codeblock></li>
      </ol>
      <note>The <codeph>--subport</codeph> option may be repeated multiple times in order to add
        multiple subports at a time.</note>
      <p><b>Removing subports from a trunk</b></p>
      <p>To remove a subport from a trunk, use <codeph>openstack network trunk unset</codeph>
        command: <codeblock>$ openstack network trunk unset --subport subport3 mytrunk</codeblock>
      </p> 
      <p><b>Deleting a trunk port</b></p>To delete a trunk port, use the <codeph>openstack network
        trunk delete</codeph> command: <codeblock>$ openstack network trunk delete mytrunk</codeblock>
      <p>Once a trunk has been created successfully, its parent port may be passed to the
        <codeph>nova boot</codeph> command, which will make the VM VLAN-aware: 
        <codeblock>nova boot --image ubuntu-server --flavor 1 --nic port-id=239f8807-be2e-4732-9de6-c64519f46358 vlan-aware-vm</codeblock>
      </p>
      
      <note>A trunk cannot be deleted until its parent port is unbound. Mainly, this means you must
        delete the VM using the trunk port before you are allowed to delete the trunk. </note>
    </section>

    <section>
      <title>VLAN-aware VM network configuration</title> 
      This section illustrates how to
      configure the VLAN interfaces inside a VLAN-aware VM based upon the subports allocated to the
      trunk port being used. 
      <ol><li> Run <codeph>openstack network trunk subport list</codeph> to see the VLAN IDs in use on the
          trunk port:
          <codeblock>$ openstack network subport list --trunk mytrunk
+--------------------------------------+-------------------+-----------------+
| Port                                 | Segmentation Type | Segmentation ID |
+--------------------------------------+-------------------+-----------------+
| e3c38cb2-0567-4501-9602-c7a78300461e | vlan              |               2 |
+--------------------------------------+-------------------+-----------------+</codeblock>
        </li>
        <li>Run <codeph>neutron port-show</codeph> on the child port to get its mac_address:
      <codeblock>$ neutron port-show -F mac_address 08848e38-50e6-4d22-900c-b21b07886fb7
+-------------+-------------------+
| Field       | Value             |
+-------------+-------------------+
| mac_address | fa:16:3e:08:24:61 |
+-------------+-------------------+</codeblock>
      </li><li>Log into the VLAN-aware VM and run the following commands to set up the VLAN interface:
          <codeblock>$ sudo ip link add link ens3 ens3.2 address fa:16:3e:11:90:d2 broadcast ff:ff:ff:ff:ff:ff type vlan id 2
$ sudo ip link set dev ens3.2 up</codeblock>
        </li><li>Note the usage of the mac_address from step 2 and VLAN ID from step 1 in configuring the VLAN
          interface:
          <codeblock>$ sudo ip link add link ens3 ens3.2 address fa:16:3e:11:90:d2 broadcast ff:ff:ff:ff:ff:ff type vlan id 2</codeblock></li><li>Trigger a DHCP request for the new vlan interface to verify connectivity and retrieve its IP
          address. On an Ubuntu VM, this might be:
          <codeblock>$ sudo dhclient ens3.2
$ ip a
1: lo: &lt;LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: ens3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1400 qdisc pfifo_fast state UP group default qlen 1000
    link/ether fa:16:3e:8d:77:39 brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.5/24 brd 10.10.10.255 scope global ens3
       valid_lft forever preferred_lft forever
    inet6 fe80::f816:3eff:fe8d:7739/64 scope link
       valid_lft forever preferred_lft forever
3: ens3.2@ens3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1400 qdisc noqueue state UP group default qlen 1000
    link/ether fa:16:3e:11:90:d2 brd ff:ff:ff:ff:ff:ff
    inet 10.10.12.7/24 brd 10.10.12.255 scope global ens3.2
       valid_lft forever preferred_lft forever
    inet6 fe80::f816:3eff:fe11:90d2/64 scope link
       valid_lft forever preferred_lft forever</codeblock>
        </li>
      </ol>
    </section>

   
    <section id="firewall"><title>Firewall issues</title> The <keyword keyref="kw-hos"/> default
      firewall_driver is
        <codeph>neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver</codeph>. This
      default does not implement security groups for VLAN-aware VMs, but it does implement security
      groups for legacy VMs. For this reason, it is recommended to disable Neutron security groups
      altogether when using VLAN-aware VMs. This is done by setting <codeph>firewall_driver =
        neutron.agent.firewall.NoopFirewallDriver</codeph>. Doing this will prevent having a mix of
      firewalled and non-firewalled VMs in the same environment, but it should be done with caution
      because all VMs would be non-firewalled. 
    </section>

 
  </body>
</topic>
