<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="1" MadCap:lastHeight="29" MadCap:lastWidth="657">
    <body>
        <script type="text/javascript">/*<![CDATA[*/
// Version 2.01

//Check to see if the document has been compiled as HTML5 or WebHelp
var outputType = "MadCap:conditions" //WebHelp
var divArray = document.getElementsByTagName("DIV");
for (var a = 0; a < divArray.length; a++) {
	if (document.getElementsByTagName('DIV')[a].getAttribute('data-mc-conditions')) {
		outputType = "data-mc-conditions" //HTML5
		break
	} else {
		if (document.getElementsByTagName('DIV')[a].getAttribute('MadCap:conditions')) {
			outputType = "MadCap:conditions" //WebHelp
			break
		}
	}
}

var divArray = document.getElementsByTagName("LI");
for (var a = 0; a < divArray.length; a++) {
	if (document.getElementsByTagName('LI')[a].getAttribute('data-mc-conditions')) {
		outputType = "data-mc-conditions" //HTML5
		break
	} else {
		if (document.getElementsByTagName('LI')[a].getAttribute('MadCap:conditions')) {
			outputType = "MadCap:conditions" //WebHelp
			break
		}
	}
}		
 			
			
// function to determine whether the target is in review mode
// returns 1 (true) or 0 (false)				
function reviewMode() {
	
	if (document.body.getAttribute('HPiDocReview'))
	{
		return 1;
	}
	else	
		return 0;
}

// function to determine whether the iDoc is in help topic mode
// returns 1 (true) or 0 (false)					
function topicMode() {//jgl
	
	if (document.body.getAttribute('HPiDocInTopic'))
	{
	return 1;
	}
	else	
	return 0;
}		

// utility function
// parameters: el = an HTML element, className = a CSS class name 
// return value: the first antecedent of el in the DOM tree that has the specified class name
function getAntecedentByClassName(el, className)
{
	p = el.parentNode;
	while (p != null && p.className != className) {
		p = p.parentNode;
	}
	return p;
}
			
// function to create an HTML form based on the author's iDoc_optionblock
function formatOptionsForm() {
	
	var optiongroupcount = 0;
	var optionspane = document.getElementById('iDoc_optionblock');
	
	// optiongroups variable is an array that contains the children of div#iDoc_optionblock
	// (these should generally be div.iDoc_optiongroup elements)  
	var optiongroups = optionspane.children;
	
	// create a new form element	
	var newform = document.createElement('FORM');
	newform.setAttribute('action', '');
	newform.setAttribute('method', 'get');
	newform.setAttribute('name', 'iDoc_form');
	newform.setAttribute('id', 'iDoc_form');
	
	// loop through the optiongroups array (using a while loop here, because, at the end of each
	// iteration an optiongroup is removed from the array)
	while (optiongroups.length > 0) {					
		
		optiongroupcount++;
		
		// get all the div elements within this optiongroup and loop through
		var divs = optiongroups[0].getElementsByTagName('DIV');	
		for (var i=0; i < divs.length; i++)
		{
			// if the div element has the 'optiontype' attribute
			if (divs[i].getAttribute('optiontype'))
			{	
				// build input and label elements in HTML from the attributes set by the author
				// and then use the constructed HTML to replace the div element's current innerHTML
				var newinput = '<input type=\"';
				newinput += divs[i].getAttribute('optiontype') + '\" ';
				if (divs[i].getAttribute('condition'))
					newinput += 'value=\"' + divs[i].getAttribute('condition') + '\" ';
				if (divs[i].getAttribute('checked'))
					newinput += 'checked=\"checked\" ';
				if (divs[i].getAttribute('disable'))
					newinput += 'disable=\"' + divs[i].getAttribute('disable') + '\" ';
				if (divs[i].getAttribute('clearcondition'))
					newinput += 'clearcondition=\"' + divs[i].getAttribute('clearcondition')+ '\" ';
				newinput += 'name=' + 'optiongroup' + optiongroupcount + ' ';
				newinput += 'id=' + 'option' + optiongroupcount + '-' + i + ' ';
				newinput += 'onclick=restrict() />';
				newinput += '<label for=' + 'option' + optiongroupcount + '-' + i + '>';
				newinput += divs[i].innerHTML + '</label>';
				divs[i].innerHTML = newinput;
			}	
		}
		
		// move the reformatted optiongroup into the new form element
		// (this removes the element from the optiongroups array)		
		newform.appendChild(optiongroups[0]);
	}	
	
	//insert the generated form into the document		
	optionspane.insertBefore(newform, optionspane.firstChild);	
}
									
// function to initialize the iDoc - called once after the document is loaded
function initialize() {
			
//test for greater than IE 8 or non IE  
				if(!topicMode()){
if(  document.addEventListener  ){} else {
			alert("This version of Internet Explorer is not supported. Please upgrade to version 9 or higher, or use Chrome or FireFox.");
			exit(); 
}}


		 
			 
			 	
		 

	var idocVariables = document.getElementById("hp-idoc-variables");
		
//	var legalNotices = idocVariables.getAttribute('legalNotices');

	//Show Legal Notices snippets according to the settings in xHP_iDoc_Variables
	if(!topicMode() && !reviewMode())
	{		
		if(idocVariables.getAttribute('RestrictedRightsLegend')=="Yes"){
			document.getElementById('RestrictedRightsLegendSnip').style.display = '';
			document.getElementById('RestrictedRightsLegendSnip.O').style.display = '';}
			
		if(idocVariables.getAttribute('Acknowledgements')=="Yes"){
			document.getElementById('AcknowledgementsSnip').style.display = '';
			document.getElementById('AcknowledgementsSnip.O').style.display = '';}
			
		if(idocVariables.getAttribute('DocUpdates')=="Yes" || idocVariables.getAttribute('DocUpdatesxHPLN')!="Yes" ){
			document.getElementById('DocUpdatesSnip').style.display = '';
			document.getElementById('DocUpdatesSnip.O').style.display = '';}
			else{document.getElementById('DocUpdatesxHPLN_Snip').style.display = '';
			     document.getElementById('DocUpdatesxHPLN_Snip.O').style.display = '';} 
			
		if(idocVariables.getAttribute('DocUpdatesTable')=="Yes"){
			document.getElementById('DocUpdatesTableSnip').style.display = '';
			document.getElementById('DocUpdatesTableSnip.O').style.display = '';}
			
		if(idocVariables.getAttribute('Trademarks')=="Yes"){
			document.getElementById('TrademarksSnip').style.display = '';
			document.getElementById('TrademarksSnip.O').style.display = '';}	
			
			
		if(Support = idocVariables.getAttribute('Support')=="Yes" || idocVariables.getAttribute('SupportxHPLN')!="Yes" ){
			document.getElementById('SupportSnip').style.display = '';
			document.getElementById('SupportSnip.O').style.display = '';}
			else{document.getElementById('SupportxHPLN_Snip').style.display = '';
			     document.getElementById('SupportxHPLN_Snip.O').style.display = '';}	
	}

	// set the document title ***THINK THIS CAN BE MOVED TO THE ELSE BLOCK BELOW***
	var feedbackVariables = document.getElementById("hp-feedback-variables");
	var productName = feedbackVariables.getAttribute('productname');			
	document.title = "HP " + productName;
			
	if(topicMode()){//jgl
	//	hide some things that are not needed inTopic		
	document.getElementById('iDoc_selectionsummary').style.display = 'none'; ///jgl
	}else
	{			
	feedbackVariables.setAttribute('topicTitle', document.getElementById('iDoc_title').firstChild.innerHTML);		
	}
			
	formatOptionsForm();
			
	if (reviewMode()) 
		showCriteria();
	else
	{	
		// get the iDoc storage item or cookie
		// the storage item key is determined using a function that is defined below
		var iDocStatus = null;
		try
		{
			iDocStatus = localStorage.getItem(getStorageName());
			// alert("DEBUG: localStorage is available:" + typeof localStorage + " - iDocStatus is: "+ iDocStatus);
		}
		catch(err){
			iDocStatus = Cookie.read(getStorageName());
			}
		
		var test=new RegExp(".chm::");
		if (!topicMode() || document.location.pathname.search(test) > 0 )
			xHP_CHM_banner_setText();	
			
		// loop through the H2 elements within the div#iDoc_stepblock and 
		// add the expand/collapse icon and done checkbox to each		
		headings = document.getElementById('iDoc_stepblock').getElementsByTagName('H2');
		// alert("DEBUG: heading 2s: " + headings.length);
		for (i=0; i<headings.length; i++)
		{	
			if (headings[i].parentNode.className == "iDoc_step" && !topicMode()) //jgl
			{
				collapseIcon = document.createElement('IMG');
				collapseIcon.src = "Resources/xHP_iDoc_Resources/xHP_iDoc_collapse.png";
				collapseIcon.className = "iDoc_collapse_icon";
				collapseIcon.alt = document.getElementById("hp-idoc-collapse-string").innerHTML;
				collapseIcon.title = document.getElementById("hp-idoc-collapse-string").innerHTML;
				collapseIcon.onclick = rollupStep;
				headings[i].insertBefore(collapseIcon, headings[i].firstChild);
			
				span = document.createElement('SPAN');
				span.appendChild(document.createTextNode(document.getElementById("hp-idoc-done-string").innerHTML));
				span.className = "iDoc_done_checkbox";
				cb = document.createElement('INPUT');
				cb.setAttribute('type', 'checkbox');
				cb.onclick = saveStatus;
				span.appendChild(cb);
				
				headings[i].insertBefore(span,collapseIcon);			
			}
		}
		
		// check for selections saved in iDoc storage item (except when window.location.hash exists, 
		// because that means that either the storage item was already loaded or the user clicked 
		// the 'Change' button - in both cases, the hash value is set and the document is reloaded)
		var response = false;
		if (iDocStatus != null && !window.location.hash)
		{
			response = confirm(document.getElementById("hp-idoc-restore-string").innerHTML);
			if (response)
			{
				// format of the storage item is, for example: 01010|1100000
				// in this example, the iDoc has 5 options - the second and fourth are selected
				// in this example, the iDoc has 7 steps - the first two are done
				// however, the second part (from the pipe onwards) is only present after the first 
				// 'Done' checkbox is checked, so the storage item could just contain, for example, 01010 
				
				// set existing option selections into URL
				window.location.hash = iDocStatus.match(/[01]*/);
				
				// get saved 'done' selections from storage item
				savedStatus = iDocStatus.match(/\|[01]*/);
				
				// set 'Done' checkboxes, if any were set
				if (savedStatus)
				{
					savedStatus = savedStatus.toString();
					var j = 1;
					inputElements = document.getElementById('iDoc_stepblock').getElementsByTagName('input');
					for (var i = 0; i < inputElements.length; i++)
					{
						e = inputElements[i];
						if (e.type == "checkbox")
						{
							if (savedStatus.charAt(j) == "1")
								e.checked = true;		
							j++;
						}
					}
				}
			}
		}
			
		// set existing option selections (hash was set from storage item, or after user clicks change button)
		if (window.location.hash)
		{
			var j = 1;
			for (var i = 0; i < document.forms[0].length; i++)
			{
				e = document.forms[0].elements[i];
				if (e.type == "radio" || e.type == "checkbox")	{
					if (window.location.hash.toString().charAt(j) == "1")
						e.checked = true;
					else
						e.checked = false;
					
					j++;
				}
			}
		}

		restrict();	
		
		// if response is true, the customer chose to load saved settings from the storage item
		// so the options are hidden and the steps are shown immediately
		if (response == true)
		{
			document.getElementById('iDoc_optionblock').style.display = 'none';
			document.getElementById('iDoc_stepblock').style.display = 'block';
		}
		
		
		
		if (window.location.hash.search("P") > 0 )
		{ 
			//check to see if printGuideSecond() reloaded the page
			//if it did, then print the guide before showing it.
			//alert(window.location.hash.search("P"))
			printGuide();
			viewGuide();
		}else {xHP_iDoc_revealContent();}
	}
}


// function to hide elements by comparing the options selected by the user
// against the conditions applied by the author 
function restrict() {

	// uncomment the next line (and the last two in this procedure) to test performance
	// var start = new Date();
						
	var optionString = "";
	var optionSummary = "<ul>";
			
	// loop through the options in the form to build a string that contains all selected options
	for (var i = 0; i < document.forms[0].length; i++)
	{
		e = document.forms[0].elements[i];
		l = document.forms[0].getElementsByTagName('label')[i];
		if (((e.type == "radio") || (e.type == "checkbox")) && (e.checked)) {
			optionString += "xHPc_iDoc_Conditions\." + e.value + ";";
			e.parentNode.className="optionSelected";
		}
		else if ((e.type == "checkbox") && e.getAttribute('clearcondition'))
		{
			optionString += "xHPc_iDoc_Conditions\." + e.getAttribute('clearcondition') + ";";
			e.parentNode.className = "optionNotSelected";
		}
		else
			e.parentNode.className = "optionNotSelected";
	}
	
	// loop through the options in the form to check which have to be disabled 
	// based on the author's settings (disable attribute), and the user's current selections							
	for (var i = 0; i < document.forms[0].length; i++)			
	{
		e = document.forms[0].elements[i]; 
		// alert ("DEBUG: " + e.value + " " + e.getAttribute('disabled'));
		if (e.getAttribute('disable') != null) {
			var disableAttributes = e.getAttribute('disable').replace(/\|/gi,';|') + ';';
			// alert ("DEBUG: " + e.value + " " + disableAttributes);
			// alert ("DEBUG: optionstring = " + optionString);	
			var re = new RegExp(disableAttributes, "gi");
			if (re.test(optionString)) {
				// if (e.checked) {alert ("DEBUG: Invalid selection: " + e.value + "optionString: " + optionString); return false;}
				var d = document.createAttribute('disabled');	
				d.value = 'disabled';
				e.setAttributeNode(d);
				e.parentNode.className = "optionDisabled";
			}
			else 
				e.removeAttribute('disabled');
		}
	}
	
	// this is an inline function that compares the optionstring to elements' data-mc-conditions attribute
	// and shows or hides the elements accordingly
	// parameters: elements = an array of elements, displayVal = value of the display style to use
	// when the element is visible (the value can differ, e.g. block for div, list-item for li)
	function checkConditions(elements, displayVal) {
		for (var i = 0; i < elements.length; i++) {
			var conditions ="null";
			if (elements[i].getAttribute(outputType)){
				conditions = elements[i].getAttribute(outputType).replace(/,/gi,';|') + ';';
				// alert("DEBUG: conditions=" + conditions);
			}
				
			re = new RegExp(conditions, "gi");
			// alert("DEBUG: " + elements.length+ ": "+ i + "\r\n" + optionString + "\r\n" +  conditions);	

			if (elements[i].getAttribute(outputType) != null && re.test(optionString))
				elements[i].style.display = displayVal;
			else if (elements[i].getAttribute(outputType) != null)
				elements[i].style.display = "none";		
		}
	}
	
	// remove soon to be hidden options	from the option string
	// (authors can apply conditions to a div.iDoc_optiongroup, so that it is sometimes hidden because of 
	// selections in other option groups - when this happens, the options that are already selected 
	// in the hidden option group must be removed from the optionstring so that they are not applied) 
	for (var i = 0; i < document.forms[0].length; i++)
	{
		e = document.forms[0].elements[i];
		l = document.forms[0].getElementsByTagName('label')[i];
		if (e.type == "radio" || e.type == "checkbox") {
			var conditions = "null";
			var optgrp = getAntecedentByClassName(l, 'iDoc_optiongroup');
			if (optgrp.getAttribute(outputType)){
				conditions = optgrp.getAttribute(outputType).replace(/,/gi,';|') + ';';
				re = new RegExp(conditions, "gi");
				if (!re.test(optionString)) {	
					optionString = optionString.replace("xHPc_iDoc_Conditions\." + e.value + ";", "", "gi");
				}
			}
		}
	}		
	
	// calls to the inline function checkConditions for elements that are considered
	// - for performance reasons, only specific types of elements are considered
	checkConditions(document.getElementsByTagName('DIV'), "block");
	checkConditions(document.getElementsByTagName('LI'), "list-item");
	checkConditions(document.getElementsByTagName('SPAN'), "inline"); //jgl
			
	// after hiding list items in order lists, the numbers are not automatically adjusted
	// therefore, loop through all the numbered lists and for each list loop through its
	// list items and renumber them
	var orderedLists = document.getElementsByTagName('OL');
	for (var i = 0; i < orderedLists.length; i++)
	{
		var count = 1;
		for (var j = 0; j < orderedLists[i].children.length; j++)
		{
			var item = orderedLists[i].children[j];
			if (item.nodeName == 'LI' && item.style.display != 'none')
			{
				item.value = count;
				count++;
			}
		} 	
	}
			
	// build the option summary by looping through the input elements in the options
	// form, and getting the labels of those that are selected (and visible)
	for (var i = 0; i < document.forms[0].length; i++)
	{
		e = document.forms[0].elements[i];
		l = document.forms[0].getElementsByTagName('label')[i];
		if (((e.type == "radio") || (e.type == "checkbox")) && (e.checked)) {
			var optgrp = getAntecedentByClassName(l, 'iDoc_optiongroup');
			if (optgrp.style.display != 'none')
				optionSummary += '<li>' + l.innerHTML + '</li>';
		}
	}
	optionSummary += '</ol>';		
	document.getElementById('optionsummary').innerHTML = optionSummary;
						
	// call to a function that makes sure each step has the correct size attributes
	//resizeSteps();//jgl

	// uncomment the next two lines (and the first one in this procedure) to test performance
	// the alert shows how many milliseconds it took to show/hide conditional text based on the 
	// selected options (this needs to be quick because it happens every time an option is changed) 
	// var end = new Date();
	// alert(end.getTime() - start.getTime()); // time in milliseconds
}
			
// function that is only called in review mode - gets the labels of options, and injects
// them into the document where the corresponding conditions have been applied
function showCriteria() {

	var values = new Array();
	var labels = new Array();
	var criteriaDivs = new Array();
	
	for (var i = 0; i < document.forms[0].length; i++)
	{
		e = document.forms[0].elements[i];
		if (e.type == "radio" || e.type == "checkbox")	{
			values.push(new RegExp("xHPc_iDoc_Conditions\." + e.value,"gi"));
			labels.push(e.parentNode.children[1].firstChild.nodeValue.match(/\S.*/));
			if (e.getAttribute('clearcondition'))
			{
				values.push(new RegExp("xHPc_iDoc_Conditions\." + e.getAttribute('clearcondition'),"gi"));
				labels.push("NOT "+ e.parentNode.children[1].firstChild.nodeValue.match(/\S.*/));
			}
		}
	}		

	function injectConditionStrings(elements) 
	{
		for (var i = 0; i < elements.length; i++) {
			var conditions ="null";
			if (elements[i].getAttribute(outputType))
			{
				conditions = "Conditional: <br />&nbsp;&nbsp;" + elements[i].getAttribute(outputType).replace(/,/gi,' OR<br />&nbsp;&nbsp;');
				for (var j = 0; j < values.length; j++)
				{
					conditions = conditions.replace(values[j], labels[j]);
				}
				elements[i].className += " conditional";	
				d = document.createElement('div');
				s = document.createElement('span');
				s.className = "condition";
				s.appendChild(document.createTextNode(' '));
				d.appendChild(s);
				elements[i].insertBefore(d, elements[i].firstChild);
				s.innerHTML = conditions;
			}
		}
	}
			
	injectConditionStrings(document.getElementsByTagName('DIV'));
	injectConditionStrings(document.getElementsByTagName('LI'));
	injectConditionStrings(document.getElementsByTagName('SPAN')); //jgl
			
	// expand togglers
	
	anchors = document.getElementsByTagName('A');
	for (var i = 0; i < anchors.length; i++)
	{
		if (anchors[i].className.search(/MCToggler/i) != -1)
			FMCToggler(anchors[i]);
	}		
}			

// function called when the user clicks the first Print button
function printGuide() { window.print(); }

//function called when the second print button is clicked.			
function printGuideSecond() {
			window.location.hash = getCurrentSelections() + "P";
			window.location.reload();
			 }
			
// function called when the user clicks the Change button
// (adds the current selections to the URL and then reloads the document)
function changeOptions() {
			
	window.location.hash = getCurrentSelections();
	window.location.reload();
}

// function to return the current option selections as a simple string 
// for example 110001 means the iDoc has six options, of which the first, second, and last are selected			
function getCurrentSelections() {
	
	var currentSelections = "";
			
	for (var i = 0; i < document.forms[0].length; i++)
	{
		e = document.forms[0].elements[i];
		if (e.type == "radio" || e.type == "checkbox")	{
			if (e.checked)
				currentSelections += "1";
				else
				currentSelections += "0";
		}
	}
	
	return currentSelections;		
}
			
// writes the current selections to a storage item 
function saveSelections() {
	
	try{
		localStorage.setItem(getStorageName(), getCurrentSelections());}
	catch(err){
		Cookie.write(getStorageName(), getCurrentSelections(), {duration: 91} );}
}

// function to append the current done check box selections to the storage item or cookie as a simple string 
// for example 1110000 means the iDoc has seven steps, of which the first three are set to done			
function saveStatus() {
		var currentStatus = "";

	inputElements = document.getElementById('iDoc_stepblock').getElementsByTagName('input');
	for (var i = 0; i < inputElements.length; i++)
	{
		e = inputElements[i];
		if (e.type == "checkbox") {
			if (e.checked)
				currentStatus += "1";
			else
				currentStatus += "0";	
		}
	}

	try
	{
		savedStatus = localStorage.getItem(getStorageName());
		if (savedStatus && savedStatus.search(/\|/) > 0)
			localStorage.setItem(getStorageName(), savedStatus.replace(/\|[01]*/, "|" + currentStatus));
		else
			localStorage.setItem(getStorageName(), savedStatus + "|" + currentStatus);
	}
	catch(err) 
	{
		savedStatus = Cookie.read(getStorageName());
		if (savedStatus && savedStatus.search(/\|/) > 0)
			Cookie.write(getStorageName(), savedStatus.replace(/\|[01]*/, "|" + currentStatus, {duration: 91}));
		else
			Cookie.write(getStorageName(), savedStatus + "|" + currentStatus, {duration: 91});
	}
}	
			
// function to specify a storage item key that is unique for this build of the iDoc
// by reading some variables that are written to the iDoc as part of the master page
function getStorageName() {
	var feedbackVariables = document.getElementById("hp-feedback-variables");
	var iDocVariables = document.getElementById("hp-idoc-variables");
	
	var storageName = "HP_interactive_doc_" + feedbackVariables.getAttribute('productname') +
			feedbackVariables.getAttribute('productversion') +
			iDocVariables.getAttribute('shorttime') +
			iDocVariables.getAttribute('shortdate');
	
	return storageName.replace(/\W/g, "_");
}

		
// WebHelp function which adds a call to the initialize function that starts after the document is loaded


if (outputType == "data-mc-conditions"){ 
	window.onload=initialize; //Initialize page in HTML5
	}else{
	gOnloadFuncs.push( function() { initialize(); } );  //Initialize page in WebHelp
}  
			
			/*]]>*/</script>
    </body>
</html>