<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="1" MadCap:lastHeight="29" MadCap:lastWidth="763">
    <body>
        <script type="text/javascript">/*<![CDATA[*/
			
// Version 2.01

// This script uses the Mootools Javascript Framework to create various effects in iDoc.
// For more information, see http://mootools.net/docs/core. 
// In particular, refer to the documentation for the Fx class.

// function that expands or collapses a step (when user click the expand/collapse icon)
function rollupStep() {

			// the function is called when user clicks an icon - the icon element is passed to the function
			// as 'this' - from the icon, find the div.iDoc_stepbody that will be manipulated
			// (the step may have several conditional div.iDoc_stepbody elements - so loop through them
			// to find the first one that is visible - the author has to make sure that only one is visible
			var icon = (this);
			var stepBody = (this).getParent().getNext('div[class="iDoc_stepbody"]');
			while ((stepBody != null) && (stepBody.style.display == "none"))
			{
				stepBody = stepBody.getNext('div[class="iDoc_stepbody"]');
			}
			var sbHeight = 0;
 				
			var stepFx = new Fx.Morph(stepBody, {
				link: 'chain',
				duration: 500,
				transition: Fx.Transitions.linear});
				
			function setAutoHeight() {
				stepBody.setStyles({'height':'100%', 'visibility': 'visible', 'padding-top': 20, 'padding-bottom': 20});
			}
			
			// if the icon is the collapse icon, rollup the step
			if (icon.src.search("collapse") != -1) {
				sbHeight = stepBody.getScrollSize().y;
				var images = stepBody.getElements('img');
				for (var i = 0; i < images.length; i++) images[i].setStyle('visibility', null);
				stepFx.set({'height': sbHeight, 'visibility': 'hidden', 'padding-top': 0, 'padding-bottom': 0});
				stepFx.start({'height': 0});
				icon.src = "Resources/xHP_iDoc_Resources/xHP_iDoc_expand.png";
				icon.alt = "Expand Step"
				icon.title = "Expand Step"
			}
			// if the icon is the expand icon, expand the step
			else {
				// Workaround for IE8 compatibility to find real auto height
				stepBody.setStyles({'visibility': 'hidden','position': 'absolute','height': 'auto', 'padding-top': 20, 'padding-bottom': 20});
				
				sbHeight = stepBody.getScrollSize().y;
				stepFx.addEvent('chainComplete', setAutoHeight);
				stepFx.set({'position': 'relative','height': 0, 'padding-top': 0, 'padding-bottom': 0});
				stepFx.start({'height': sbHeight});
				icon.src = "Resources/xHP_iDoc_Resources/xHP_iDoc_collapse.png";
				icon.alt = "Collapse Step"
				icon.title = "Collapse Step"
			 
			}
}
			
			
  

// function that makes sure each step block has the correct size attributes
// (after a step is hidden, and then displayed again the size attributes are sometimes incorrect)
function resizeSteps() {
			var stepBodys = document.id('iDoc_stepblock').getElements('div.iDoc_stepbody');
			var checkBoxes = document.id('iDoc_stepblock').getElements('input');
//			alert (stepBodys.length +":"+checkBoxes.length);

			for (var i = 0; i < stepBodys.length; i++) {
				var sbHeight = stepBodys[i].getScrollSize().y;
				var diff = sbHeight - stepBodys[i].getSize().y;
				if (diff != 0 && !checkBoxes[i].getProperty('checked')) 
				{
//					alert(i + " : is being resized : " + diff + " : " + checkBoxes[i].getProperty('checked'));
					stepBodys[i].setStyles({height: sbHeight, paddingTop: 2, paddingBottom: 2});
				}
			}
}

// function that uses MooTools to fade out a solid div element that covers the entire browser window
// this is required to hide the document while it is reformatted by the script
function xHP_iDoc_revealContent()
{
			var fadeFrame = document.id('fadeFrame');
			var fx1 = new Fx.Morph(fadeFrame, {
			duration: 750,
			transition: Fx.Transitions.Quart.easeIn,
			link: 'chain'});
			if(!topicMode()){       //run only when not in topicMode	
			fx1.start({'opacity' : 0});}
		
}		


// function that prepares the iDoc for viewing (when the user clicks View)
// (before the user clicks View, the hidden content is formatted correctly for printing)			
function viewGuide() {

			var steps = document.id('iDoc_stepblock');
			var options = document.id('iDoc_optionblock');
			
			var fadeFrame = document.id('fadeFrame');					
			var fx1 = new Fx.Morph(fadeFrame, {
			duration: 750,
			transition: Fx.Transitions.Quart.easeIn,
			link: 'chain'});
			
			var fx2 = new Fx.Morph(fadeFrame, {
			duration: 750,
			transition: Fx.Transitions.Quart.easeOut});	
		
			function optionsFx1End () {		
				window.scrollTo(0,0);
				
				// loop through all the images in the document, and find any with the class 
				// 'iDoc_imagezoom' - those have to be replaced with thumbnails 
				var images = document.getElementById('iDoc_stepblock').getElementsByTagName('IMG');
				for (var i = 0; i < images.length; i++)
				{
					if (images[i].parentNode.className == 'iDoc_imagezoom')
					{
					
						var imgZoomDiv = images[i].parentNode;			
						imgZoomDiv.className = 'iDoc_imagezoomfloat';
						var stepBodyDiv = getAntecedentByClassName(imgZoomDiv, 'iDoc_stepbody');
						if (stepBodyDiv != null) stepBodyDiv.style.paddingRight = "255px";
						images[i].src = images[i].src.replace(/([\w-]*\.[gif|jpg|png])/, 'thumbnails\/$1');
						
						callout = document.createElement('IMG');
						callout.src = "Resources/xHP_iDoc_Resources/xHP_iDoc_callout.gif";
						callout.align = "top";
						callout.width = "25";
						callout.height = "20";
						imgZoomDiv.insertBefore(callout, images[i]);
						zi = document.createElement('IMG');
						zi.src = "Resources/xHP_iDoc_Resources/xHP_iDoc_zoomin.png";
						zi.alt = "Zoom in";
						zi.width = "24";
						zi.height = "22";
						zi.align = "top";
						zi.onclick = zoom;
						imgZoomDiv.appendChild(zi);
						zo = document.createElement('IMG');
						zo.src = "Resources/xHP_iDoc_Resources/xHP_iDoc_zoomout.png";
						zo.alt = "Zoom out";
						zo.width = "24";
						zo.height = "22";
						zo.align = "top";
						zo.onclick = zoomOut;
						zo.style.display = "none";
						imgZoomDiv.appendChild(zo);
						var p = imgZoomDiv.parentNode;
						//using mootools function getPrevious() for convenience
						var s = (imgZoomDiv).getPrevious();
						p.insertBefore(imgZoomDiv, s);
						
					}
				}
					
				options.setStyle('display', 'none');
				steps.setStyle('display', 'block');
				fx2.start({'opacity' : 0});	
			};

			fx1.addEvent('chainComplete', optionsFx1End);
			fx1.start({'opacity' : 100});	
			
			saveSelections();				
}	

// effect that transitions from a thumbnail to a full image			
function zoom()
{
			var zi = (this);
			var zo = zi.getNext();
			var imgZoomDiv = zi.getParent();
			var stepBodyDiv = getAntecedentByClassName(imgZoomDiv, 'iDoc_stepbody');
			var blockDiv = new Element('div');	
			var screenshot = zi.getPrevious();
			var callout = screenshot.getPrevious();
			
			screenshot.setStyle('width', screenshot.getSize().x);	
			screenshot.setStyle('height', screenshot.getSize().y);	
	
			var screenshotL = new Element('img');
						
			blockDiv.setStyles({
				'margin': '0px',
				'margin-bottom': '1.1em',
				'padding': '0px',
				'overflow': 'visible',
				'white-space': 'nowrap',
				'height': '1px'
			});
	
			blockDiv.inject(imgZoomDiv.getNext(), 'after');
	
			var screenshotFx = new Fx.Morph(screenshot, {
				duration: 400,
				transition: Fx.Transitions.Quart.easeOut,
				link: 'chain'});

			var screenshotFxB = new Fx.Morph(screenshot, {
				duration: 1200,
				transition: Fx.Transitions.Quart.easeOut,
				link: 'chain'});
			
			var blockDivFx = new Fx.Morph(blockDiv, {
				duration: 1700,
				transition: Fx.Transitions.Quart.easeOut,
				link: 'chain'});
			
			function screenshotFxEnd () {
				screenshot.src = screenshotL.src;
				screenshotFxB.start({'margin-left': 0 - blockDiv.getCoordinates().width - 29, 'width': screenshotL.width, 'height': screenshotL.height});
			};
	
	
			function blockDivFxEnd () {
				screenshot.setStyle('margin', '0px');
				blockDiv.appendChild(screenshot);
				blockDiv.appendChild(zo);
				zo.setStyles({'opacity':0,'display': ''});
				zo.fade('in');
				stepBodyDiv.morph({'paddingRight': 0});
			};

			zi.fade('hide');
			callout.fade('out');
			
			screenshotFx.addEvent('chainComplete', screenshotFxEnd);
			blockDivFx.addEvent('chainComplete', blockDivFxEnd);

			screenshotL.onload = function() {
				imgZoomDiv.setStyle('height', screenshot.getSize().y);			
				screenshotFx.start({'margin-top': blockDiv.getCoordinates().top - imgZoomDiv.getCoordinates().top});
				blockDivFx.start({'height': screenshotL.height}); };	

			screenshotL.src = screenshot.src.replace(/thumbnails\//, '');		
}

// effect that transitions from a full image, back to a thumbnail
function zoomOut()
{
			var zo = (this);
			var blockDiv = zo.getParent();	
			var imgZoomDiv = blockDiv.getPrevious('div.iDoc_imagezoomfloat');
			var zi = imgZoomDiv.getLast('img');
			var callout = imgZoomDiv.getFirst('img');
			var stepBodyDiv = getAntecedentByClassName(blockDiv, 'iDoc_stepbody');

			var screenshot = zo.getPrevious();
	
			var screenshotL = new Element('img', {'src': screenshot.src.replace(/([\w-]*\.[gif|jpg|png])/, 'thumbnails\/$1')});
			
			var paddingFx = new Fx.Morph(stepBodyDiv, {
				duration: 500,
				transition: Fx.Transitions.Quart.easeIn,
				link: 'chain'});
			
			var screenshotFx = new Fx.Morph(screenshot, {
				duration: 400,
				transition: Fx.Transitions.Quart.easeIn,
				link: 'chain'});

			var screenshotFxB = new Fx.Morph(screenshot, {
				duration: 900,
				transition: Fx.Transitions.Quad.easeOut,
				link: 'chain'});
			
			var blockDivFx = new Fx.Morph(blockDiv, {
				duration: 1400,
				transition: Fx.Transitions.Quad.easeIn,
				link: 'chain'});

			function paddingFxEnd () {
				screenshot.setStyles({
					'margin-top'	: blockDiv.getCoordinates().top - imgZoomDiv.getCoordinates().top,
					'margin-left'	: 0 - blockDiv.getCoordinates().width - 29
				});
				imgZoomDiv.insertBefore(screenshot, zi);
				screenshotFxB.start({'margin-left': 0, 'width': screenshotL.width, 'height': screenshotL.height});
				blockDivFx.start({'height': 0});
			}
			
			function screenshotFxBEnd () {
				screenshot.src = screenshotL.src;
				screenshotFx.start({'margin-top': 0});
				zi.fade('in');
				callout.fade('in');	
			};
	
			function blockDivFxEnd () {
				zo.setStyle('display', 'none');
				imgZoomDiv.appendChild(zo);
				blockDiv.dispose();
			};

			paddingFx.addEvent('chainComplete', paddingFxEnd);
			screenshotFxB.addEvent('chainComplete', screenshotFxBEnd);
			blockDivFx.addEvent('chainComplete', blockDivFxEnd);

			zo.fade('hide');
			
			paddingFx.start({'paddingRight': 255});
}		 /*]]>*/</script>
    </body>
</html>