<?xml version="1.0" encoding="UTF-8"?>
<!--Edit status: not edited-->
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="topic6499">
<title>HPE Helion <tm tmtype="reg">OpenStack</tm> 1.1: Compute Service: Troubleshooting</title>
<prolog>
<metadata>
<othermeta name="layout" content="default"/>
<othermeta name="product-version" content="HPE Helion Openstack"/>
<othermeta name="product-version" content="HPE Helion Openstack 1.1"/>
<othermeta name="role" content="Systems Administrator"/>
<othermeta name="role" content="System Engineer"/>
<othermeta name="role" content="Cloud Administrator"/>
<othermeta name="role" content="Network Administrator"/>
<othermeta name="role" content="Storage Engineer"/>
<othermeta name="role" content="Jayme P"/>
<othermeta name="product-version1" content="HPE Helion Openstack"/>
<othermeta name="product-version2" content="HPE Helion Openstack 1.1"/>
</metadata>
</prolog>
<body>
<p>
<!--UNDER REVISION-->
  <!-- this version of the file should be posted on the website as just a one liner topic, per Jayme. Paul -->
 <!--./commercial/GA1/1.1commerical.troubleshooting.compute.md-->
 <!--permalink: /helion/openstack/1.1/services/troubleshooting/compute/--></p>
<section id="configdrive"> <title>Storing Metadata on a Configuration Drive</title>
<p>
<!--DOCS-950-->
The HPE Helion OpenStack compute service can be configured to <xref href="../../commercial/GA1/1.1commerical.services-compute-configDrive.dita" >write metadata to a special configuration drive</xref> that contains information normally available through the metadata service.</p>
</section>
  <!--DOCS-1183 <section id="cleanup"> <title>Compute Databases Become Less Performant Over Time</title>
<p>

When the Compute Service deletes an entity, such as an instance, it <i>marks</i> the relevant database rows as deleted, but does not actually <i>remove</i> those rows from the database. As the number of "soft-deleted" rows builds up, they begin to have a significantly detrimental impact on the database's performance.</p>
<p>When a row is marked as "deleted", two values are set.</p>
<ul>
<li>The <codeph>deleted_at</codeph> column is set to the date and time that the deletion occurred. </li>
<li>The <codeph>deleted</codeph> column is set to a non-zero value. (The value of the row's <codeph>id</codeph> column.)</li>
</ul>
<p>The following SQL statements use these two markers to identify and remove database rows related to deleted entities.</p>
<ol>
<li>
<p>Set the date and time to use for deletions. <b>Note</b>: All database rows pertaining to entities deleted <i>before</i> this date will be deleted.</p>

<codeblock>
<codeph>set @keep_date = '2015-04-01 00:00';
</codeph>
</codeblock>
</li>
<li>
<p>Repeat the following statement until a small number of rows are deleted.</p>

<codeblock>
<codeph>delete from reservations where deleted != 0 limit 10000;
</codeph>
</codeblock>
</li>
<li>
<p>Repeat the following statement until a small number of rows are updated.</p>

<codeblock>
<codeph>update task_log as t set t.deleted = t.id, t.deleted_at = UTC_TIMESTAMP() where t.created_at &lt; @keep_date and t.deleted = 0 LIMIT 10000;set foreign_key_checks=0;set tx_isolation='read-uncommitted';
</codeph>
</codeblock>
</li>
<li>
<p>Repeat the following three statements until the number of rows selected is small.</p>

<codeblock>
<codeph>CREATE TEMPORARY TABLE IF NOT EXISTS inst_uuids as (select i.uuid, i.deleted_at from instances as i, block_device_mapping as u where i.uuid = u.instance_uuid and i.deleted != 0 and u.deleted = 0) limit 10000; 
update block_device_mapping as t, inst_uuids as i set t.deleted = t.id, t.deleted_at = i.deleted_at where t.instance_uuid = i.uuid;
drop table inst_uuids;
</codeph>
</codeblock>
</li>
<li>
<p>Delete rows that have been "soft deleted" prior to <codeph>keep_date</codeph>.</p>

<codeblock>
<codeph>delete from aggregate_hosts where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from aggregate_metadata where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from aggregates where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from compute_nodes  where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from services where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instance_groups where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instance_group_member where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instance_group_policy where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from task_log where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from key_pairs where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from quotas where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from quota_usages where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from volume_usage_cache where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instances where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instance_faults where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instance_metadata where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from block_device_mapping where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instance_id_mappings where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instance_actions where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instance_actions_events where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instance_info_caches where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
delete from instance_system_metadata where deleted != 0 and deleted_at &lt; @keep_date limit 10000;
</codeph>
</codeblock>
</li>
<li>
<p>Repeat the following three statements until the number of rows selected is small.</p>

<codeblock>
<codeph>CREATE TEMPORARY TABLE IF NOT EXISTS inst_uuids as (select u.id from block_device_mapping as u where u.instance_uuid not in (select uuid from instances where uuid u.instance_uuid)) limit 10000;
delete u from block_device_mapping u, inst_uuids i where i.id = u.id;
drop table inst_uuids;
</codeph>
</codeblock>
</li>
<li>
<p>Repeat the following three statements until the number of rows selected is small.</p>

<codeblock>
<codeph>CREATE TEMPORARY TABLE IF NOT EXISTS inst_uuids as (select u.id from instance_actions as u where u.instance_uuid not in (select uuid from instances where uuid = u.instance_uuid)) limit 10000;
delete u from instance_actions u, inst_uuids i where i.id = u.id;
drop table inst_uuids;&lt;/pre&gt;
</codeph>
</codeblock>
</li>
<li>
<p>Repeat the following three statements until the number of rows selected is small.</p>

<codeblock>
<codeph>CREATE TEMPORARY TABLE IF NOT EXISTS inst_uuids as (select u.id from instance_system_metadata as u where u.instance_uuid not in (select uuid from instances where uuid = u.instance_uuid)) limit 10000;
delete u from instance_system_metadata u, inst_uuids i where i.id = u.id;
drop table inst_uuids;
</codeph>
</codeblock>
</li>
<li>
<p>Repeat the following three statements until the number of rows selected is small.</p>

<codeblock>
<codeph>CREATE TEMPORARY TABLE IF NOT EXISTS inst_uuids as (select u.id from volume_usage_cache as u where u.instance_uuid not in (select uuid from instances where uuid = u.instance_uuid)) limit 10000;
delete u from volume_usage_cache u, inst_uuids i where i.id = u.id;
drop table inst_uuids;
</codeph>
</codeblock>
</li>
<li>
<p>Repeat the following three statements until the number of rows selected is small.</p>

<codeblock>
<codeph>CREATE TEMPORARY TABLE IF NOT EXISTS inst_uuids as (select u.id from instance_id_mappings as u where u.uuid not in (select uuid from instances where uuid = u.uuid)) limit 10000;
delete u from instance_id_mappings u, inst_uuids i where i.id = u.id;
drop table inst_uuids;
</codeph>
</codeblock>
</li>
<li>
<p>Repeat the following three statements until the number of rows selected is small.</p>

<codeblock>
<codeph>CREATE TEMPORARY TABLE IF NOT EXISTS inst_uuids as (select u.id from instance_actions_events as u where u.action_id not in (select id from instance_actions where id = u.action_id)) limit 10000;
delete u from instance_actions_events u, inst_uuids i where i.id = u.id;
drop table inst_uuids;
</codeph>
</codeblock>
</li>
</ol>
</section> -->
</body>
</topic>
